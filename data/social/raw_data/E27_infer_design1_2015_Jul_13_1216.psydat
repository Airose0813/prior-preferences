ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E27_infer_design1_2015_Jul_13_1216
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\tD\xa3\x15P\xfbM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_13_1216
p67
sVparticipant
p68
VE27
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.83352691530762968
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F8.6668496999909621
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P12'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F6.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F2.04
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x02\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p103
sg21
F1.8999999999999999
sg70
Vn
sa(dp104
g64
g65
sg20
F6.0010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F2.0000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x08\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p110
sg21
F1.2
sg70
Vn
sa(dp111
g64
g65
sg20
F2.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F1.8400000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x00\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p117
sg21
F1
sg70
Vn
sa(dp118
g64
g65
sg20
F2.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F2.2600000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x06\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V7-olives.png
p124
sg21
F1.2
sg70
Vn
sa(dp125
g64
g65
sg20
F2.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x0c\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V18-mms.png
p131
sg21
F1.7
sg70
Vn
sa(dp132
g64
g65
sg20
F2.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x07\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p138
sg21
F1.8
sg70
Vn
sa(dp139
g64
g65
sg20
F2.4510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S' \x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p145
sg21
F1.1000000000000001
sg70
Vn
sa(dp146
g64
g65
sg20
F3.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F2.1400000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x0f\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p152
sg21
F1.3999999999999999
sg70
Vn
sa(dp153
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F2.6000000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'&\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V50-polo.png
p159
sg21
F1.8
sg70
Vn
sa(dp160
g64
g65
sg20
F2.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1e\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p166
sg21
F1.8999999999999999
sg70
Vn
sa(dp167
g64
g65
sg20
F8.1340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x1d\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V40-sardines.png
p173
sg21
F1.1000000000000001
sg70
Vn
sa(dp174
g64
g65
sg20
F2.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F2.6200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'%\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p180
sg21
F1.7
sg70
Vn
sa(dp181
g64
g65
sg20
F1.667
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F2.4400000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x12\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p187
sg21
F1.3
sg70
Vn
sa(dp188
g64
g65
sg20
F1.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F2.8800000000000012
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\r\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p194
sg21
F1.6000000000000001
sg70
Vn
sa(dp195
g64
g65
sg20
F1.6679999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F2.580000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'"\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p201
sg21
F1.2
sg70
Vn
sa(dp202
g64
g65
sg20
F1.2170000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F2.5200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'!\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V44-crunch.png
p208
sg21
F1.7
sg70
Vn
sa(dp209
g64
g65
sg20
F2.0169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'#\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p215
sg21
F1.1000000000000001
sg70
Vn
sa(dp216
g64
g65
sg20
F2.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x18\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p222
sg21
F1.3999999999999999
sg70
Vn
sa(dp223
g64
g65
sg20
F1.9339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x1a\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V35-raisins.png
p229
sg21
F1.5
sg70
Vn
sa(dp230
g64
g65
sg20
F1.667
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x13\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p236
sg21
F1.8
sg70
Vn
sa(dp237
g64
g65
sg20
F1.5840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S"'\x00\x00\x00"
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V51-mars.png
p243
sg21
F1.8
sg70
Vn
sa(dp244
g64
g65
sg20
F1.0509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x11\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p250
sg21
F1.8
sg70
Vn
sa(dp251
g64
g65
sg20
F1.8340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x14\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p257
sg21
F1.3999999999999999
sg70
Vn
sa(dp258
g64
g65
sg20
F1.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x03\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V4-corn.png
p264
sg21
F1.8999999999999999
sg70
Vn
sa(dp265
g64
g65
sg20
F1.367
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F2.5000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\t\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p271
sg21
F1.7
sg70
Vn
sa(dp272
g64
g65
sg20
F2.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x1c\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p278
sg21
F1.7
sg70
Vn
sa(dp279
g64
g65
sg20
F3.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x0b\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p285
sg21
F1.3
sg70
Vn
sa(dp286
g64
g65
sg20
F1.367
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F1.9800000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x19\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p292
sg21
F1
sg70
Vn
sa(dp293
g64
g65
sg20
F2.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x15\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V29-beans.png
p299
sg21
F1.2
sg70
Vn
sa(dp300
g64
g65
sg20
F0.81699999999999995
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F2.5200000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x04\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p306
sg21
F1.6000000000000001
sg70
Vn
sa(dp307
g64
g65
sg20
F1.6339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F2.5800000000000014
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'$\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V48-twix.png
p313
sg21
F1.1000000000000001
sg70
Vn
sa(dp314
g64
g65
sg20
F3.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x1b\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p320
sg21
F1.7
sg70
Vn
sa(dp321
g64
g65
sg20
F3.9510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F2.6000000000000014
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x16\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p327
sg21
F1.1000000000000001
sg70
Vn
sa(dp328
g64
g65
sg20
F2.8340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x05\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p334
sg21
F1
sg70
Vn
sa(dp335
g64
g65
sg20
F1.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x01\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p341
sg21
F1.7
sg70
Vn
sa(dp342
g64
g65
sg20
F4.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F2.680000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x10\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V22-daim.png
p348
sg21
F1.6000000000000001
sg70
Vn
sa(dp349
g64
g65
sg20
F8.9499999999999993
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F1.9800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\n\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p355
sg21
F1.2
sg70
Vn
sa(dp356
g64
g65
sg20
F1.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x17\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p362
sg21
F1.8999999999999999
sg70
Vn
sa(dp363
g64
g65
sg20
F1.9339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F1.3799999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x1f\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p369
sg21
F1.5
sg70
Vn
sa(dp370
g64
g65
sg20
F3.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F2.600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x0e\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p376
sg21
F1.6000000000000001
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F4.0001066268896466
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p381
sg26
F3.7999999999999998
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F3.0832998342439168
sg27
F9.4009999999999998
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'22-daim.png'
p390
sg26
F2.7999999999999989
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.6168251529979898
sg27
F1.851
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p399
sg26
F4.5000000000000009
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F8.1333839668504879
sg27
F4.3840000000000003
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'31-hobnobs.png'
p408
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.3000494931229696
sg27
F2.7010000000000001
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p417
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.4667372570884254
sg27
F3.601
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'44-crunch.png'
p426
sg26
F1.2999999999999994
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F3.8167112275841646
sg27
F3.1509999999999998
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'50-polo.png'
p435
sg26
F2.1999999999999988
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F4.9834414712458965
sg27
F3.0670000000000002
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'51-mars.png'
p444
sg26
F3.2000000000000002
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.0001779015483407
sg27
F2.0510000000000002
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p453
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.3668563712981268
sg27
F0.751
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'29-beans.png'
p462
sg26
F4.6000000000000014
sg28
F3
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.483370481685597
sg27
F2.3839999999999999
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p471
sg26
F1.9999999999999982
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F1.3999286683210812
sg27
F2.234
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p480
sg26
F5.0000000000000018
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.9672575620988937
sg27
F2.0169999999999999
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'48-twix.png'
p489
sg26
F3.0999999999999996
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F7.4333239820980452
sg27
F1.367
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'7-olives.png'
p498
sg26
F1.9999999999999991
sg28
F3
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F0.81672947389597539
sg27
F3.7509999999999999
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p507
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.8001384438975947
sg27
F1.234
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'46-pistachios.png'
p516
sg26
F3.9000000000000008
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F7.8170231254916871
sg27
F1.734
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'38-maltesers.png'
p525
sg26
F5.799999999999998
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.5164806968259654
sg27
F1.6839999999999999
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p534
sg26
F2.3999999999999986
sg28
F4
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.4167486325241043
sg27
F0.96699999999999997
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p543
sg26
F5.2999999999999998
sg28
F4
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'left'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.033374216478478
sg27
F1.0669999999999999
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'35-raisins.png'
p552
sg26
F2.0999999999999992
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.8501319151382631
sg27
F1.4339999999999999
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'5-pineapple.png'
p561
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.6333939453033963
sg27
F0.71699999999999997
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p570
sg26
F4.7000000000000011
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.2335279986818932
sg27
F1.1339999999999999
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p579
sg26
F4
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.0999590028150124
sg27
F1.234
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p588
sg26
F1
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F2.4500692504589097
sg27
F0.751
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'4-corn.png'
p597
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.8333689706632867
sg27
F2.1669999999999998
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p606
sg26
F1
sg28
F4
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.2001190001701616
sg27
F4.8339999999999996
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p615
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.0004689872566814
sg27
F0.68400000000000005
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p624
sg26
F1.3999999999999986
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.8167072362030012
sg27
F1.7509999999999999
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p633
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.0664613386288693
sg27
F0.61699999999999999
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p642
sg26
F1.9999999999999987
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F3.0667193528934149
sg27
F1.5009999999999999
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'40-sardines.png'
p651
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.0167042141583806
sg27
F0.58399999999999996
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'49-yorkie.png'
p660
sg26
F1.1999999999999993
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.8334373943362152
sg27
F0.60099999999999998
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p669
sg26
F1
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F5.4001002977001917
sg27
F0.55100000000000005
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'25-kitkat.png'
p678
sg26
F4.7000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.0500556227434572
sg27
F0.73399999999999999
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p687
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.3500506620275701
sg27
F2.367
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p696
sg26
F5.0000000000000009
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.3166704584800755
sg27
F0.55100000000000005
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p705
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.9833978511542227
sg27
F1.3169999999999999
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p714
sg26
F5.1000000000000005
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F0.78335696800968435
sg27
F1.9670000000000001
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'18-mms.png'
p723
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F0.80019403813093959
sg27
F1.351
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p732
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F4.2167009070126369
sg27
F1.917
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F187.97901103844742
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F8.0000076976630226
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p744
sg83
S'9-yu_mango_pieces.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'9-yu_mango_pieces.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\r\x0c\x1a;\x0c\xf0\x80'
tRp754
sa(dp755
g64
g65
sg82
S'12-topic.png'
p756
sg83
S'12-topic.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'39-mackerel.png'
p761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1b\x0b\x06\xb2\xd8'
tRp765
sa(dp766
g64
g65
sg82
S'11-snickers.png'
p767
sg83
S'11-snickers.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'54-frubes_yogurt.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1b\x13\x00\x13\x88'
tRp776
sa(dp777
g64
g65
sg82
S'52-aero_mousse.png'
p778
sg83
S'52-aero_mousse.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'14-discos_salt_vinegar.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1b\x19\x0e\xecP'
tRp787
sa(dp788
g64
g65
sg82
g744
sg83
S'37-nakd_cashew_cookie.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1b"\x05\xe3\xd0'
tRp796
sa(dp797
g64
g65
sg82
g778
sg83
S'14-discos_salt_vinegar.png'
p798
sg56
g57
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p801
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p802
sS'practice_loop.thisIndex'
p803
g60
(g99
S'\x05\x00\x00\x00'
tRp804
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1b)\x00\x03\xe8'
tRp805
sa(dp806
g64
g65
sg82
S'32-hovis_crackers.png'
p807
sg83
S'32-hovis_crackers.png'
p808
sg56
g57
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p811
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1b.\x0f\x1f\x18'
tRp816
sa(dp817
g64
g65
sg82
g767
sg83
S'54-frubes_yogurt.png'
p818
sg56
g57
sS'practice_loop.thisN'
p819
I7
sS'practice_loop.thisTrialN'
p820
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p821
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p822
sS'practice_loop.thisIndex'
p823
g60
(g99
S'\x07\x00\x00\x00'
tRp824
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1b:\x03(\x98'
tRp825
sa(dp826
g64
g65
sg82
g756
sg83
S'39-mackerel.png'
p827
sg56
g57
sS'practice_loop.thisN'
p828
I8
sS'practice_loop.thisTrialN'
p829
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p830
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p831
sS'practice_loop.thisIndex'
p832
g60
(g99
S'\x08\x00\x00\x00'
tRp833
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1c\x05\x0c\xc1\xa0'
tRp834
sa(dp835
g64
g65
sg82
S'15-walnut_whip.png'
p836
sg83
S'28-maple_pecan.png'
p837
sg56
g57
sS'practice_loop.thisN'
p838
I9
sS'practice_loop.thisTrialN'
p839
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p840
I0
sg84
S'28-maple_pecan.png'
p841
sg33
g836
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p842
sS'practice_loop.thisIndex'
p843
g60
(g99
S'\t\x00\x00\x00'
tRp844
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1c\x0c\x01cx'
tRp845
sa(dp846
g64
g65
sg82
S'53-cheestrings.png'
p847
sg83
S'53-cheestrings.png'
p848
sg56
g57
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p851
I0
sg84
S'47-picnic.png'
p852
sg33
g847
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1c\x15\x06\xe1\xb8'
tRp856
sa(dp857
g64
g65
sg82
g807
sg83
S'24-food_doctor_apple_walnut_bar.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1c\x1c\x06|('
tRp865
sa(dp866
g64
g65
sg82
g847
sg83
S'47-picnic.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g852
sg33
g847
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1c#\x07\x04\xe0'
tRp874
sa(dp875
g64
g65
sg82
g836
sg83
S'15-walnut_whip.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g841
sg33
g841
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1c)\x02Y\x90'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F66.282400462087026
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'22-daim.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'22-daim.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'7-olives.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'7-olives.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.7998767233493709
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1e4\r2\xe8'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'2-steamed_puddings.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'2-steamed_puddings.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'20-fruit_pastilles.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'20-fruit_pastilles.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F3.9665365476503212
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1e;\n\xa6\x90'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'45-chewy_nougat_redo.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'45-chewy_nougat_redo.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'41-peanuts_redo.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'41-peanuts_redo.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.2498256621856854
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f\x08\n\xaax'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'23-crunchie_redo.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'23-crunchie_redo.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'33-ambrosia_rice.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'33-ambrosia_rice.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F0.99995238852898183
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f\x0e\x0f\x0b\x90'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
g896
sS'block_loop.thisIndex'
p967
g889
sg38
S'left'
p968
sg59
g63
sS'trial_loop.thisN'
p969
I4
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p970
g60
(g99
S'\x04\x00\x00\x00'
tRp971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p972
I0
sg904
g905
sS'block_loop.thisRepN'
p973
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p974
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p975
Nsg70
Vn
sS'block_loop.thisTrialN'
p976
I0
sg39
F1.4166628178354586
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f\x15\x00\x1f@'
tRp977
sa(dp978
S'trial_loop.thisTrialN'
p979
I5
sg895
S'25-kitkat.png'
p980
sS'block_loop.thisIndex'
p981
g889
sg38
S'right'
p982
sg59
g63
sS'trial_loop.thisN'
p983
I5
sg33
S'25-kitkat.png'
p984
sg64
g65
sS'trial_loop.thisIndex'
p985
g60
(g99
S'\x05\x00\x00\x00'
tRp986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p987
I0
sg904
S'31-hobnobs.png'
p988
sS'block_loop.thisRepN'
p989
I0
sg907
S'31-hobnobs.png'
p990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p991
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vn
sS'block_loop.thisTrialN'
p993
I0
sg39
F0.91650344769732328
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f\x1b\x07\x1cP'
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'20-fruit_pastilles.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1001
g60
(g99
S'\x06\x00\x00\x00'
tRp1002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1003
I0
sg904
S'2-steamed_puddings.png'
p1004
sS'block_loop.thisRepN'
p1005
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1006
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1007
Nsg70
Vn
sS'block_loop.thisTrialN'
p1008
I0
sg39
F1.6998937722473784
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f!\x06A\x90'
tRp1009
sa(dp1010
S'trial_loop.thisTrialN'
p1011
I7
sg895
S'7-olives.png'
p1012
sS'block_loop.thisIndex'
p1013
g889
sg38
S'right'
p1014
sg59
g63
sS'trial_loop.thisN'
p1015
I7
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1016
g60
(g99
S'\x07\x00\x00\x00'
tRp1017
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1018
I0
sg904
S'22-daim.png'
p1019
sS'block_loop.thisRepN'
p1020
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1021
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1022
Nsg70
Vn
sS'block_loop.thisTrialN'
p1023
I0
sg39
F1.3166014646085387
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f(\x02F\x08'
tRp1024
sa(dp1025
S'trial_loop.thisTrialN'
p1026
I8
sg895
S'10-bounty_redo.png'
p1027
sS'block_loop.thisIndex'
p1028
g889
sg38
S'right'
p1029
sg59
g63
sS'trial_loop.thisN'
p1030
I8
sg33
S'10-bounty_redo.png'
p1031
sg64
g65
sS'trial_loop.thisIndex'
p1032
g60
(g99
S'\x08\x00\x00\x00'
tRp1033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1034
I0
sg904
S'4-corn.png'
p1035
sS'block_loop.thisRepN'
p1036
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1037
I0
sg909
S'4-corn.png'
p1038
sg55
g11
sS'block_loop.thisTrial'
p1039
Nsg70
Vn
sS'block_loop.thisTrialN'
p1040
I0
sg39
F2.4998805436716793
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f.\x07\x99P'
tRp1041
sa(dp1042
S'trial_loop.thisTrialN'
p1043
I9
sg895
S'27-hartleys_raspberries_jelly.png'
p1044
sS'block_loop.thisIndex'
p1045
g889
sg38
S'right'
p1046
sg59
g63
sS'trial_loop.thisN'
p1047
I9
sg33
S'51-mars.png'
p1048
sg64
g65
sS'trial_loop.thisIndex'
p1049
g60
(g99
S'\t\x00\x00\x00'
tRp1050
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1051
I0
sg904
S'51-mars.png'
p1052
sS'block_loop.thisRepN'
p1053
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1054
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1055
sg55
g11
sS'block_loop.thisTrial'
p1056
Nsg70
Vn
sS'block_loop.thisTrialN'
p1057
I0
sg39
F2.9002858969124645
sg34
g753
(S'\x07\xdf\x07\r\x0c\x1f6\x00\x80\xe8'
tRp1058
sa(dp1059
S'trial_loop.thisTrialN'
p1060
I10
sg895
S'42-mrkipling_lemon_slices.png'
p1061
sS'block_loop.thisIndex'
p1062
g889
sg38
S'right'
p1063
sg59
g63
sS'trial_loop.thisN'
p1064
I10
sg33
S'42-mrkipling_lemon_slices.png'
p1065
sg64
g65
sS'trial_loop.thisIndex'
p1066
g60
(g99
S'\n\x00\x00\x00'
tRp1067
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1068
I0
sg904
S'16-skips_prawn.png'
p1069
sS'block_loop.thisRepN'
p1070
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1071
I0
sg909
S'16-skips_prawn.png'
p1072
sg55
g11
sS'block_loop.thisTrial'
p1073
Nsg70
Vn
sS'block_loop.thisTrialN'
p1074
I0
sg39
F2.1665013094589085
sg34
g753
(S'\x07\xdf\x07\r\x0c \x01\x0e\x9e0'
tRp1075
sa(dp1076
S'trial_loop.thisTrialN'
p1077
I11
sg895
S'43-mrporky_pork_crackles_redo.png'
p1078
sS'block_loop.thisIndex'
p1079
g889
sg38
S'right'
p1080
sg59
g63
sS'trial_loop.thisN'
p1081
I11
sg33
S'18-mms.png'
p1082
sg64
g65
sS'trial_loop.thisIndex'
p1083
g60
(g99
S'\x0b\x00\x00\x00'
tRp1084
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1085
I0
sg904
S'18-mms.png'
p1086
sS'block_loop.thisRepN'
p1087
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1088
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1089
sg55
g11
sS'block_loop.thisTrial'
p1090
Nsg70
Vn
sS'block_loop.thisTrialN'
p1091
I0
sg39
F1.4832390512146958
sg34
g753
(S'\x07\xdf\x07\r\x0c \t\x02\x84\x88'
tRp1092
sa(dp1093
S'trial_loop.thisTrialN'
p1094
I12
sg895
S'50-polo.png'
p1095
sS'block_loop.thisIndex'
p1096
g889
sg38
S'right'
p1097
sg59
g63
sS'trial_loop.thisN'
p1098
I12
sg33
S'48-twix.png'
p1099
sg64
g65
sS'trial_loop.thisIndex'
p1100
g60
(g99
S'\x0c\x00\x00\x00'
tRp1101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1102
I0
sg904
S'48-twix.png'
p1103
sS'block_loop.thisRepN'
p1104
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1105
I0
sg909
S'50-polo.png'
p1106
sg55
g11
sS'block_loop.thisTrial'
p1107
Nsg70
Vn
sS'block_loop.thisTrialN'
p1108
I0
sg39
F2.2832851231542008
sg34
g753
(S'\x07\xdf\x07\r\x0c \x0f\nw\xb0'
tRp1109
sa(dp1110
S'trial_loop.thisTrialN'
p1111
I13
sg895
S'4-corn.png'
p1112
sS'block_loop.thisIndex'
p1113
g889
sg38
S'right'
p1114
sg59
g63
sS'trial_loop.thisN'
p1115
I13
sg33
g1038
sg64
g65
sS'trial_loop.thisIndex'
p1116
g60
(g99
S'\r\x00\x00\x00'
tRp1117
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1118
I0
sg904
S'10-bounty_redo.png'
p1119
sS'block_loop.thisRepN'
p1120
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1121
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p1122
Nsg70
Vn
sS'block_loop.thisTrialN'
p1123
I0
sg39
F1.3166413784183533
sg34
g753
(S'\x07\xdf\x07\r\x0c \x17\x00\x07\xd0'
tRp1124
sa(dp1125
S'trial_loop.thisTrialN'
p1126
I14
sg895
g896
sS'block_loop.thisIndex'
p1127
g889
sg38
S'left'
p1128
sg59
g63
sS'trial_loop.thisN'
p1129
I14
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1130
g60
(g99
S'\x0e\x00\x00\x00'
tRp1131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1132
I0
sg904
g905
sS'block_loop.thisRepN'
p1133
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1134
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1135
Nsg70
Vn
sS'block_loop.thisTrialN'
p1136
I0
sg39
F0.80003523819141265
sg34
g753
(S'\x07\xdf\x07\r\x0c \x1d\x05_\x00'
tRp1137
sa(dp1138
S'trial_loop.thisTrialN'
p1139
I15
sg895
S'8-liquorice_catherine_wheels.png'
p1140
sS'block_loop.thisIndex'
p1141
g889
sg38
S'right'
p1142
sg59
g63
sS'trial_loop.thisN'
p1143
I15
sg33
S'8-liquorice_catherine_wheels.png'
p1144
sg64
g65
sS'trial_loop.thisIndex'
p1145
g60
(g99
S'\x0f\x00\x00\x00'
tRp1146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1147
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1148
sS'block_loop.thisRepN'
p1149
I0
sg907
S'17-jacobs_mini_cheddars_redo.png'
p1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1151
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p1152
Nsg70
Vn
sS'block_loop.thisTrialN'
p1153
I0
sg39
F4.283212708100109
sg34
g753
(S'\x07\xdf\x07\r\x0c #\x02\xd6\x90'
tRp1154
sa(dp1155
S'trial_loop.thisTrialN'
p1156
I16
sg895
g980
sS'block_loop.thisIndex'
p1157
g889
sg38
S'right'
p1158
sg59
g63
sS'trial_loop.thisN'
p1159
I16
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p1160
g60
(g99
S'\x10\x00\x00\x00'
tRp1161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1162
I0
sg904
g988
sS'block_loop.thisRepN'
p1163
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1164
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p1165
Nsg70
Vn
sS'block_loop.thisTrialN'
p1166
I0
sg39
F1.5166466242335446
sg34
g753
(S'\x07\xdf\x07\r\x0c ,\x07\x9d8'
tRp1167
sa(dp1168
S'trial_loop.thisTrialN'
p1169
I17
sg895
S'6-sour_patch_kids.png'
p1170
sS'block_loop.thisIndex'
p1171
g889
sg38
S'right'
p1172
sg59
g63
sS'trial_loop.thisN'
p1173
I17
sg33
S'38-maltesers.png'
p1174
sg64
g65
sS'trial_loop.thisIndex'
p1175
g60
(g99
S'\x11\x00\x00\x00'
tRp1176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1177
I0
sg904
S'38-maltesers.png'
p1178
sS'block_loop.thisRepN'
p1179
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1180
I0
sg909
S'6-sour_patch_kids.png'
p1181
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vn
sS'block_loop.thisTrialN'
p1183
I0
sg39
F0.88304626751596516
sg34
g753
(S'\x07\xdf\x07\r\x0c 3\x00\xc78'
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'1-treacle_cookies.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'left'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
S'21-nakd_banana_crunch.png'
p1191
sg64
g65
sS'trial_loop.thisIndex'
p1192
g60
(g99
S'\x12\x00\x00\x00'
tRp1193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1194
I0
sg904
S'21-nakd_banana_crunch.png'
p1195
sS'block_loop.thisRepN'
p1196
I0
sg907
S'1-treacle_cookies.png'
p1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1198
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vn
sS'block_loop.thisTrialN'
p1200
I0
sg39
F1.8665972166400024
sg34
g753
(S'\x07\xdf\x07\r\x0c 8\x0e\xb5\xa0'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
S'38-maltesers.png'
p1204
sS'block_loop.thisIndex'
p1205
g889
sg38
S'left'
p1206
sg59
g63
sS'trial_loop.thisN'
p1207
I19
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p1208
g60
(g99
S'\x13\x00\x00\x00'
tRp1209
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1210
I0
sg904
S'6-sour_patch_kids.png'
p1211
sS'block_loop.thisRepN'
p1212
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1213
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vn
sS'block_loop.thisTrialN'
p1215
I0
sg39
F2.3330285628908314
sg34
g753
(S'\x07\xdf\x07\r\x0c!\x03\r\x1bx'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1219
sS'block_loop.thisIndex'
p1220
g889
sg38
S'left'
p1221
sg59
g63
sS'trial_loop.thisN'
p1222
I20
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1223
g60
(g99
S'\x14\x00\x00\x00'
tRp1224
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1225
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1226
sS'block_loop.thisRepN'
p1227
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1228
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p1229
Nsg70
Vn
sS'block_loop.thisTrialN'
p1230
I0
sg39
F3.2331670638104697
sg34
g753
(S'\x07\xdf\x07\r\x0c!\x0b\x03\xa1\xb0'
tRp1231
sa(dp1232
S'trial_loop.thisTrialN'
p1233
I21
sg895
g896
sS'block_loop.thisIndex'
p1234
g889
sg38
S'left'
p1235
sg59
g63
sS'trial_loop.thisN'
p1236
I21
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1237
g60
(g99
S'\x15\x00\x00\x00'
tRp1238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1239
I0
sg904
g905
sS'block_loop.thisRepN'
p1240
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1241
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1242
Nsg70
Vn
sS'block_loop.thisTrialN'
p1243
I0
sg39
F2.4499711765274697
sg34
g753
(S'\x07\xdf\x07\r\x0c!\x13\x07z\x10'
tRp1244
sa(dp1245
S'trial_loop.thisTrialN'
p1246
I22
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1247
sS'block_loop.thisIndex'
p1248
g889
sg38
S'left'
p1249
sg59
g63
sS'trial_loop.thisN'
p1250
I22
sg33
S'36-fig_rolls.png'
p1251
sg64
g65
sS'trial_loop.thisIndex'
p1252
g60
(g99
S'\x16\x00\x00\x00'
tRp1253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1254
I0
sg904
S'36-fig_rolls.png'
p1255
sS'block_loop.thisRepN'
p1256
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1257
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p1258
sg55
g11
sS'block_loop.thisTrial'
p1259
Nsg70
Vn
sS'block_loop.thisTrialN'
p1260
I0
sg39
F1.6666213359840185
sg34
g753
(S'\x07\xdf\x07\r\x0c!\x1a\x0e\xecP'
tRp1261
sa(dp1262
S'trial_loop.thisTrialN'
p1263
I23
sg895
S'16-skips_prawn.png'
p1264
sS'block_loop.thisIndex'
p1265
g889
sg38
S'left'
p1266
sg59
g63
sS'trial_loop.thisN'
p1267
I23
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1268
g60
(g99
S'\x17\x00\x00\x00'
tRp1269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1270
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1271
sS'block_loop.thisRepN'
p1272
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1273
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vn
sS'block_loop.thisTrialN'
p1275
I0
sg39
F0.94981807856129308
sg34
g753
(S'\x07\xdf\x07\r\x0c!!\nw\xb0'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
g1140
sS'block_loop.thisIndex'
p1279
g889
sg38
S'right'
p1280
sg59
g63
sS'trial_loop.thisN'
p1281
I24
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1282
g60
(g99
S'\x18\x00\x00\x00'
tRp1283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1284
I0
sg904
g1148
sS'block_loop.thisRepN'
p1285
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1286
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p1287
Nsg70
Vn
sS'block_loop.thisTrialN'
p1288
I0
sg39
F1.5999823809052032
sg34
g753
(S"\x07\xdf\x07\r\x0c!'\n\x16\x08"
tRp1289
sa(dp1290
S'trial_loop.thisTrialN'
p1291
I25
sg895
S'48-twix.png'
p1292
sS'block_loop.thisIndex'
p1293
g889
sg38
S'left'
p1294
sg59
g63
sS'trial_loop.thisN'
p1295
I25
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p1296
g60
(g99
S'\x19\x00\x00\x00'
tRp1297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1298
I0
sg904
S'50-polo.png'
p1299
sS'block_loop.thisRepN'
p1300
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1301
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p1302
Nsg70
Vn
sS'block_loop.thisTrialN'
p1303
I0
sg39
F0.74975467262447637
sg34
g753
(S'\x07\xdf\x07\r\x0c!.\x04p\xb8'
tRp1304
sa(dp1305
S'trial_loop.thisTrialN'
p1306
I26
sg895
S'29-beans.png'
p1307
sS'block_loop.thisIndex'
p1308
g889
sg38
S'left'
p1309
sg59
g63
sS'trial_loop.thisN'
p1310
I26
sg33
S'46-pistachios.png'
p1311
sg64
g65
sS'trial_loop.thisIndex'
p1312
g60
(g99
S'\x1a\x00\x00\x00'
tRp1313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1314
I0
sg904
S'46-pistachios.png'
p1315
sS'block_loop.thisRepN'
p1316
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1317
I0
sg909
S'29-beans.png'
p1318
sg55
g11
sS'block_loop.thisTrial'
p1319
Nsg70
Vn
sS'block_loop.thisTrialN'
p1320
I0
sg39
F2.5332767127456464
sg34
g753
(S'\x07\xdf\x07\r\x0c!4\x010\xb0'
tRp1321
sa(dp1322
S'trial_loop.thisTrialN'
p1323
I27
sg895
g1078
sS'block_loop.thisIndex'
p1324
g889
sg38
S'right'
p1325
sg59
g63
sS'trial_loop.thisN'
p1326
I27
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
g1086
sS'block_loop.thisRepN'
p1330
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1331
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p1332
Nsg70
Vn
sS'block_loop.thisTrialN'
p1333
I0
sg39
F0.74994939499265456
sg34
g753
(S'\x07\xdf\x07\r\x0c!;\t\xd3\xa0'
tRp1334
sa(dp1335
S'trial_loop.thisTrialN'
p1336
I28
sg895
g1292
sS'block_loop.thisIndex'
p1337
g889
sg38
S'left'
p1338
sg59
g63
sS'trial_loop.thisN'
p1339
I28
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p1340
g60
(g99
S'\x1c\x00\x00\x00'
tRp1341
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1342
I0
sg904
g1299
sS'block_loop.thisRepN'
p1343
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1344
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p1345
Nsg70
Vn
sS'block_loop.thisTrialN'
p1346
I0
sg39
F2.0665579870656074
sg34
g753
(S'\x07\xdf\x07\r\x0c"\x05\x06\x97\x80'
tRp1347
sa(dp1348
S'trial_loop.thisTrialN'
p1349
I29
sg895
g1012
sS'block_loop.thisIndex'
p1350
g889
sg38
S'right'
p1351
sg59
g63
sS'trial_loop.thisN'
p1352
I29
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1353
g60
(g99
S'\x1d\x00\x00\x00'
tRp1354
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1355
I0
sg904
g1019
sS'block_loop.thisRepN'
p1356
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1357
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1358
Nsg70
Vn
sS'block_loop.thisTrialN'
p1359
I0
sg39
F0.98333997613190149
sg34
g753
(S'\x07\xdf\x07\r\x0c"\x0c\x08\x16P'
tRp1360
sa(dp1361
S'trial_loop.thisTrialN'
p1362
I30
sg895
S'35-raisins.png'
p1363
sS'block_loop.thisIndex'
p1364
g889
sg38
S'right'
p1365
sg59
g63
sS'trial_loop.thisN'
p1366
I30
sg33
S'49-yorkie.png'
p1367
sg64
g65
sS'trial_loop.thisIndex'
p1368
g60
(g99
S'\x1e\x00\x00\x00'
tRp1369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1370
I0
sg904
S'49-yorkie.png'
p1371
sS'block_loop.thisRepN'
p1372
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1373
I0
sg909
S'35-raisins.png'
p1374
sg55
g11
sS'block_loop.thisTrial'
p1375
Nsg70
Vn
sS'block_loop.thisTrialN'
p1376
I0
sg39
F1.883240419689173
sg34
g753
(S'\x07\xdf\x07\r\x0c"\x12\x08l@'
tRp1377
sa(dp1378
S'trial_loop.thisTrialN'
p1379
I31
sg895
g1219
sS'block_loop.thisIndex'
p1380
g889
sg38
S'left'
p1381
sg59
g63
sS'trial_loop.thisN'
p1382
I31
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1383
g60
(g99
S'\x1f\x00\x00\x00'
tRp1384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1385
I0
sg904
g1226
sS'block_loop.thisRepN'
p1386
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1387
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p1388
Nsg70
Vn
sS'block_loop.thisTrialN'
p1389
I0
sg39
F0.86667789955390617
sg34
g753
(S'\x07\xdf\x07\r\x0c"\x19\x07\x10\x98'
tRp1390
sa(dp1391
S'trial_loop.thisTrialN'
p1392
I32
sg895
S'31-hobnobs.png'
p1393
sS'block_loop.thisIndex'
p1394
g889
sg38
S'left'
p1395
sg59
g63
sS'trial_loop.thisN'
p1396
I32
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p1397
g60
(g99
S' \x00\x00\x00'
tRp1398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1399
I0
sg904
S'25-kitkat.png'
p1400
sS'block_loop.thisRepN'
p1401
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1402
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p1403
Nsg70
Vn
sS'block_loop.thisTrialN'
p1404
I0
sg39
F1.4331540633102122
sg34
g753
(S'\x07\xdf\x07\r\x0c"\x1f\x05zX'
tRp1405
sa(dp1406
S'trial_loop.thisTrialN'
p1407
I33
sg895
g1363
sS'block_loop.thisIndex'
p1408
g889
sg38
S'right'
p1409
sg59
g63
sS'trial_loop.thisN'
p1410
I33
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p1411
g60
(g99
S'!\x00\x00\x00'
tRp1412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1413
I0
sg904
g1371
sS'block_loop.thisRepN'
p1414
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1415
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p1416
Nsg70
Vn
sS'block_loop.thisTrialN'
p1417
I0
sg39
F0.78335953389796487
sg34
g753
(S'\x07\xdf\x07\r\x0c"%\x0c\xb5\xe8'
tRp1418
sa(dp1419
S'trial_loop.thisTrialN'
p1420
I34
sg895
S'33-ambrosia_rice.png'
p1421
sS'block_loop.thisIndex'
p1422
g889
sg38
S'left'
p1423
sg59
g63
sS'trial_loop.thisN'
p1424
I34
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1425
g60
(g99
S'"\x00\x00\x00'
tRp1426
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1427
I0
sg904
S'23-crunchie_redo.png'
p1428
sS'block_loop.thisRepN'
p1429
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1430
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1431
Nsg70
Vn
sS'block_loop.thisTrialN'
p1432
I0
sg39
F1.4503195670604327
sg34
g753
(S'\x07\xdf\x07\r\x0c"+\t\xf2\xe0'
tRp1433
sa(dp1434
S'trial_loop.thisTrialN'
p1435
I35
sg895
g1095
sS'block_loop.thisIndex'
p1436
g889
sg38
S'right'
p1437
sg59
g63
sS'trial_loop.thisN'
p1438
I35
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p1439
g60
(g99
S'#\x00\x00\x00'
tRp1440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1441
I0
sg904
g1103
sS'block_loop.thisRepN'
p1442
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1443
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p1444
Nsg70
Vn
sS'block_loop.thisTrialN'
p1445
I0
sg39
F1.0166018637482921
sg34
g753
(S'\x07\xdf\x07\r\x0c"2\x01\xec0'
tRp1446
sa(dp1447
S'trial_loop.thisTrialN'
p1448
I36
sg895
g1204
sS'block_loop.thisIndex'
p1449
g889
sg38
S'left'
p1450
sg59
g63
sS'trial_loop.thisN'
p1451
I36
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p1452
g60
(g99
S'$\x00\x00\x00'
tRp1453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1454
I0
sg904
g1211
sS'block_loop.thisRepN'
p1455
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1456
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p1457
Nsg70
Vn
sS'block_loop.thisTrialN'
p1458
I0
sg39
F0.86619266167508613
sg34
g753
(S'\x07\xdf\x07\r\x0c"8\x02\xbb8'
tRp1459
sa(dp1460
S'trial_loop.thisTrialN'
p1461
I37
sg895
g1061
sS'block_loop.thisIndex'
p1462
g889
sg38
S'left'
p1463
sg59
g63
sS'trial_loop.thisN'
p1464
I37
sg33
g1072
sg64
g65
sS'trial_loop.thisIndex'
p1465
g60
(g99
S'%\x00\x00\x00'
tRp1466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1467
I0
sg904
g1069
sS'block_loop.thisRepN'
p1468
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1469
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1470
Nsg70
Vn
sS'block_loop.thisTrialN'
p1471
I0
sg39
F0.96645700512999611
sg34
g753
(S'\x07\xdf\x07\r\x0c#\x02\x01(\xe0'
tRp1472
sa(dp1473
S'trial_loop.thisTrialN'
p1474
I38
sg895
g1012
sS'block_loop.thisIndex'
p1475
g889
sg38
S'right'
p1476
sg59
g63
sS'trial_loop.thisN'
p1477
I38
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1478
g60
(g99
S'&\x00\x00\x00'
tRp1479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1480
I0
sg904
g1019
sS'block_loop.thisRepN'
p1481
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1482
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1483
Nsg70
Vn
sS'block_loop.thisTrialN'
p1484
I0
sg39
F1.0166349351893587
sg34
g753
(S'\x07\xdf\x07\r\x0c#\x08\x01@P'
tRp1485
sa(dp1486
S'trial_loop.thisTrialN'
p1487
I39
sg895
g1307
sS'block_loop.thisIndex'
p1488
g889
sg38
S'left'
p1489
sg59
g63
sS'trial_loop.thisN'
p1490
I39
sg33
g1318
sg64
g65
sS'trial_loop.thisIndex'
p1491
g60
(g99
S"'\x00\x00\x00"
tRp1492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1493
I0
sg904
g1315
sS'block_loop.thisRepN'
p1494
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1495
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p1496
Nsg70
Vn
sS'block_loop.thisTrialN'
p1497
I0
sg39
F0.68325940725662804
sg34
g753
(S'\x07\xdf\x07\r\x0c#\x0e\x02\x0fX'
tRp1498
sa(dp1499
S'trial_loop.thisTrialN'
p1500
I40
sg895
S'49-yorkie.png'
p1501
sS'block_loop.thisIndex'
p1502
g889
sg38
S'left'
p1503
sg59
g63
sS'trial_loop.thisN'
p1504
I40
sg33
g1374
sg64
g65
sS'trial_loop.thisIndex'
p1505
g60
(g99
S'(\x00\x00\x00'
tRp1506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1507
I0
sg904
S'35-raisins.png'
p1508
sS'block_loop.thisRepN'
p1509
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1510
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p1511
Nsg70
Vn
sS'block_loop.thisTrialN'
p1512
I0
sg39
F0.83373446711266297
sg34
g753
(S'\x07\xdf\x07\r\x0c#\x13\x0c\xe0\xe0'
tRp1513
sa(dp1514
S'trial_loop.thisTrialN'
p1515
I41
sg895
S'40-sardines.png'
p1516
sS'block_loop.thisIndex'
p1517
g889
sg38
S'right'
p1518
sg59
g63
sS'trial_loop.thisN'
p1519
I41
sg33
S'40-sardines.png'
p1520
sg64
g65
sS'trial_loop.thisIndex'
p1521
g60
(g99
S')\x00\x00\x00'
tRp1522
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1523
I0
sg904
S'5-pineapple.png'
p1524
sS'block_loop.thisRepN'
p1525
I0
sg907
S'5-pineapple.png'
p1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1527
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p1528
Nsg70
Vn
sS'block_loop.thisTrialN'
p1529
I0
sg39
F0.8665421926016279
sg34
g753
(S'\x07\xdf\x07\r\x0c#\x19\n\xd5p'
tRp1530
sa(dp1531
S'trial_loop.thisTrialN'
p1532
I42
sg895
g1187
sS'block_loop.thisIndex'
p1533
g889
sg38
S'left'
p1534
sg59
g63
sS'trial_loop.thisN'
p1535
I42
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p1536
g60
(g99
S'*\x00\x00\x00'
tRp1537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1538
I0
sg904
g1195
sS'block_loop.thisRepN'
p1539
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1540
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p1541
Nsg70
Vn
sS'block_loop.thisTrialN'
p1542
I0
sg39
F1.0499586892092339
sg34
g753
(S'\x07\xdf\x07\r\x0c#\x1f\tC\x18'
tRp1543
sa(dp1544
S'trial_loop.thisTrialN'
p1545
I43
sg895
S'41-peanuts_redo.png'
p1546
sS'block_loop.thisIndex'
p1547
g889
sg38
S'left'
p1548
sg59
g63
sS'trial_loop.thisN'
p1549
I43
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1550
g60
(g99
S'+\x00\x00\x00'
tRp1551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1552
I0
sg904
S'45-chewy_nougat_redo.png'
p1553
sS'block_loop.thisRepN'
p1554
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1555
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1556
Nsg70
Vn
sS'block_loop.thisTrialN'
p1557
I0
sg39
F0.88326180208605365
sg34
g753
(S'\x07\xdf\x07\r\x0c#%\n\x8b8'
tRp1558
sa(dp1559
S'trial_loop.thisTrialN'
p1560
I44
sg895
g1292
sS'block_loop.thisIndex'
p1561
g889
sg38
S'left'
p1562
sg59
g63
sS'trial_loop.thisN'
p1563
I44
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p1564
g60
(g99
S',\x00\x00\x00'
tRp1565
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1566
I0
sg904
g1299
sS'block_loop.thisRepN'
p1567
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1568
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p1569
Nsg70
Vn
sS'block_loop.thisTrialN'
p1570
I0
sg39
F0.73321923685944057
sg34
g753
(S'\x07\xdf\x07\r\x0c#+\tq\xf8'
tRp1571
sa(dp1572
S'trial_loop.thisTrialN'
p1573
I45
sg895
g950
sS'block_loop.thisIndex'
p1574
g889
sg38
S'right'
p1575
sg59
g63
sS'trial_loop.thisN'
p1576
I45
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p1577
g60
(g99
S'-\x00\x00\x00'
tRp1578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1579
I0
sg904
g958
sS'block_loop.thisRepN'
p1580
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1581
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1582
Nsg70
Vn
sS'block_loop.thisTrialN'
p1583
I0
sg39
F7.249825091987077
sg34
g753
(S'\x07\xdf\x07\r\x0c#1\x05\xb8\xd8'
tRp1584
sa(dp1585
S'trial_loop.thisTrialN'
p1586
I46
sg895
g916
sS'block_loop.thisIndex'
p1587
g889
sg38
S'left'
p1588
sg59
g63
sS'trial_loop.thisN'
p1589
I46
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1590
g60
(g99
S'.\x00\x00\x00'
tRp1591
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1592
I0
sg904
g924
sS'block_loop.thisRepN'
p1593
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1594
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1595
Nsg70
Vn
sS'block_loop.thisTrialN'
p1596
I0
sg39
F1.283241503062527
sg34
g753
(S'\x07\xdf\x07\r\x0c$\x01\n1`'
tRp1597
sa(dp1598
S'trial_loop.thisTrialN'
p1599
I47
sg895
g1264
sS'block_loop.thisIndex'
p1600
g889
sg38
S'right'
p1601
sg59
g63
sS'trial_loop.thisN'
p1602
I47
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1603
g60
(g99
S'/\x00\x00\x00'
tRp1604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1605
I0
sg904
g1271
sS'block_loop.thisRepN'
p1606
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1607
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1608
Nsg70
Vn
sS'block_loop.thisTrialN'
p1609
I0
sg39
F1.2998117208608164
sg34
g753
(S'\x07\xdf\x07\r\x0c$\x07\x0f\x0b\x90'
tRp1610
sa(dp1611
S'trial_loop.thisTrialN'
p1612
I48
sg895
g1546
sS'block_loop.thisIndex'
p1613
g889
sg38
S'left'
p1614
sg59
g63
sS'trial_loop.thisN'
p1615
I48
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1616
g60
(g99
S'0\x00\x00\x00'
tRp1617
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1618
I0
sg904
g1553
sS'block_loop.thisRepN'
p1619
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1620
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1621
Nsg70
Vn
sS'block_loop.thisTrialN'
p1622
I0
sg39
F1.3498431102216273
sg34
g753
(S'\x07\xdf\x07\r\x0c$\x0e\x04\xe2\x00'
tRp1623
sa(dp1624
S'trial_loop.thisTrialN'
p1625
I49
sg895
g1078
sS'block_loop.thisIndex'
p1626
g889
sg38
S'right'
p1627
sg59
g63
sS'trial_loop.thisN'
p1628
I49
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p1629
g60
(g99
S'1\x00\x00\x00'
tRp1630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1631
I0
sg904
g1086
sS'block_loop.thisRepN'
p1632
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1633
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg70
Vn
sS'block_loop.thisTrialN'
p1635
I0
sg39
F0.73333527200520621
sg34
g753
(S'\x07\xdf\x07\r\x0c$\x14\n\xae`'
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I50
sg895
S'19-caramello_redo.png'
p1639
sS'block_loop.thisIndex'
p1640
g889
sg38
S'left'
p1641
sg59
g63
sS'trial_loop.thisN'
p1642
I50
sg33
S'19-caramello_redo.png'
p1643
sg64
g65
sS'trial_loop.thisIndex'
p1644
g60
(g99
S'2\x00\x00\x00'
tRp1645
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1646
I0
sg904
S'30-spaghetti_hoops.png'
p1647
sS'block_loop.thisRepN'
p1648
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1649
I0
sg909
S'30-spaghetti_hoops.png'
p1650
sg55
g11
sS'block_loop.thisTrial'
p1651
Nsg70
Vn
sS'block_loop.thisTrialN'
p1652
I0
sg39
F0.61667091463641555
sg34
g753
(S'\x07\xdf\x07\r\x0c$\x1a\x06\xf5@'
tRp1653
sa(dp1654
S'trial_loop.thisTrialN'
p1655
I51
sg895
g1027
sS'block_loop.thisIndex'
p1656
g889
sg38
S'left'
p1657
sg59
g63
sS'trial_loop.thisN'
p1658
I51
sg33
g1038
sg64
g65
sS'trial_loop.thisIndex'
p1659
g60
(g99
S'3\x00\x00\x00'
tRp1660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1661
I0
sg904
g1035
sS'block_loop.thisRepN'
p1662
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1663
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p1664
Nsg70
Vn
sS'block_loop.thisTrialN'
p1665
I0
sg39
F0.91663744405559555
sg34
g753
(S'\x07\xdf\x07\r\x0c$ \x01\xd0\xd8'
tRp1666
sa(dp1667
S'trial_loop.thisTrialN'
p1668
I52
sg895
g980
sS'block_loop.thisIndex'
p1669
g889
sg38
S'right'
p1670
sg59
g63
sS'trial_loop.thisN'
p1671
I52
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p1672
g60
(g99
S'4\x00\x00\x00'
tRp1673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1674
I0
sg904
g988
sS'block_loop.thisRepN'
p1675
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1676
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p1677
Nsg70
Vn
sS'block_loop.thisTrialN'
p1678
I0
sg39
F1.2165192991815275
sg34
g753
(S'\x07\xdf\x07\r\x0c$&\x00\xf6\x18'
tRp1679
sa(dp1680
S'trial_loop.thisTrialN'
p1681
I53
sg895
g933
sS'block_loop.thisIndex'
p1682
g889
sg38
S'left'
p1683
sg59
g63
sS'trial_loop.thisN'
p1684
I53
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1685
g60
(g99
S'5\x00\x00\x00'
tRp1686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1687
I0
sg904
g941
sS'block_loop.thisRepN'
p1688
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1689
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1690
Nsg70
Vn
sS'block_loop.thisTrialN'
p1691
I0
sg39
F0.9833254361001309
sg34
g753
(S'\x07\xdf\x07\r\x0c$,\x04\xda0'
tRp1692
sa(dp1693
S'trial_loop.thisTrialN'
p1694
I54
sg895
S'46-pistachios.png'
p1695
sS'block_loop.thisIndex'
p1696
g889
sg38
S'right'
p1697
sg59
g63
sS'trial_loop.thisN'
p1698
I54
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p1699
g60
(g99
S'6\x00\x00\x00'
tRp1700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1701
I0
sg904
S'29-beans.png'
p1702
sS'block_loop.thisRepN'
p1703
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1704
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p1705
Nsg70
Vn
sS'block_loop.thisTrialN'
p1706
I0
sg39
F2.4665710445842706
sg34
g753
(S'\x07\xdf\x07\r\x0c$2\x04\xf1\xa0'
tRp1707
sa(dp1708
S'trial_loop.thisTrialN'
p1709
I55
sg895
g1095
sS'block_loop.thisIndex'
p1710
g889
sg38
S'right'
p1711
sg59
g63
sS'trial_loop.thisN'
p1712
I55
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p1713
g60
(g99
S'7\x00\x00\x00'
tRp1714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1715
I0
sg904
g1103
sS'block_loop.thisRepN'
p1716
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1717
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p1718
Nsg70
Vn
sS'block_loop.thisTrialN'
p1719
I0
sg39
F1.2833971669169841
sg34
g753
(S'\x07\xdf\x07\r\x0c$9\x0c\xa2`'
tRp1720
sa(dp1721
S'trial_loop.thisTrialN'
p1722
I56
sg895
g1012
sS'block_loop.thisIndex'
p1723
g889
sg38
S'right'
p1724
sg59
g63
sS'trial_loop.thisN'
p1725
I56
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1726
g60
(g99
S'8\x00\x00\x00'
tRp1727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1728
I0
sg904
g1019
sS'block_loop.thisRepN'
p1729
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1730
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1731
Nsg70
Vn
sS'block_loop.thisTrialN'
p1732
I0
sg39
F0.61657654698865372
sg34
g753
(S'\x07\xdf\x07\r\x0c%\x04\x02:P'
tRp1733
sa(dp1734
S'trial_loop.thisTrialN'
p1735
I57
sg895
S'36-fig_rolls.png'
p1736
sS'block_loop.thisIndex'
p1737
g889
sg38
S'right'
p1738
sg59
g63
sS'trial_loop.thisN'
p1739
I57
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p1740
g60
(g99
S'9\x00\x00\x00'
tRp1741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1742
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1743
sS'block_loop.thisRepN'
p1744
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1745
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p1746
Nsg70
Vn
sS'block_loop.thisTrialN'
p1747
I0
sg39
F1.2333136045072024
sg34
g753
(S'\x07\xdf\x07\r\x0c%\t\x0c\x19\xa8'
tRp1748
sa(dp1749
S'trial_loop.thisTrialN'
p1750
I58
sg895
g1695
sS'block_loop.thisIndex'
p1751
g889
sg38
S'right'
p1752
sg59
g63
sS'trial_loop.thisN'
p1753
I58
sg33
g1318
sg64
g65
sS'trial_loop.thisIndex'
p1754
g60
(g99
S':\x00\x00\x00'
tRp1755
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1756
I0
sg904
g1702
sS'block_loop.thisRepN'
p1757
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1758
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p1759
Nsg70
Vn
sS'block_loop.thisTrialN'
p1760
I0
sg39
F1.0664875677048258
sg34
g753
(S'\x07\xdf\x07\r\x0c%\x10\x00\xfa\x00'
tRp1761
sa(dp1762
S'trial_loop.thisTrialN'
p1763
I59
sg895
S'18-mms.png'
p1764
sS'block_loop.thisIndex'
p1765
g889
sg38
S'left'
p1766
sg59
g63
sS'trial_loop.thisN'
p1767
I59
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p1768
g60
(g99
S';\x00\x00\x00'
tRp1769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1770
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1771
sS'block_loop.thisRepN'
p1772
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1773
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p1774
Nsg70
Vn
sS'block_loop.thisTrialN'
p1775
I0
sg39
F1.8333005469903583
sg34
g753
(S'\x07\xdf\x07\r\x0c%\x16\x02\x80\xa0'
tRp1776
sa(dp1777
S'trial_loop.thisTrialN'
p1778
I60
sg895
S'3-ellas_strawberries_apples.png'
p1779
sS'block_loop.thisIndex'
p1780
g889
sg38
S'left'
p1781
sg59
g63
sS'trial_loop.thisN'
p1782
I60
sg33
S'3-ellas_strawberries_apples.png'
p1783
sg64
g65
sS'trial_loop.thisIndex'
p1784
g60
(g99
S'<\x00\x00\x00'
tRp1785
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1786
I0
sg904
S'13-mccoys_steak_crisps.png'
p1787
sS'block_loop.thisRepN'
p1788
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1789
I0
sg909
S'13-mccoys_steak_crisps.png'
p1790
sg55
g11
sS'block_loop.thisTrial'
p1791
Nsg70
Vn
sS'block_loop.thisTrialN'
p1792
I0
sg39
F2.9003158322684612
sg34
g753
(S'\x07\xdf\x07\r\x0c%\x1d\x00m`'
tRp1793
sa(dp1794
S'trial_loop.thisTrialN'
p1795
I61
sg895
g1170
sS'block_loop.thisIndex'
p1796
g889
sg38
S'right'
p1797
sg59
g63
sS'trial_loop.thisN'
p1798
I61
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p1799
g60
(g99
S'=\x00\x00\x00'
tRp1800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1801
I0
sg904
g1178
sS'block_loop.thisRepN'
p1802
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1803
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p1804
Nsg70
Vn
sS'block_loop.thisTrialN'
p1805
I0
sg39
F0.88300122193140851
sg34
g753
(S'\x07\xdf\x07\r\x0c%$\x0e\xc5@'
tRp1806
sa(dp1807
S'trial_loop.thisTrialN'
p1808
I62
sg895
S'5-pineapple.png'
p1809
sS'block_loop.thisIndex'
p1810
g889
sg38
S'left'
p1811
sg59
g63
sS'trial_loop.thisN'
p1812
I62
sg33
g1526
sg64
g65
sS'trial_loop.thisIndex'
p1813
g60
(g99
S'>\x00\x00\x00'
tRp1814
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1815
I0
sg904
S'40-sardines.png'
p1816
sS'block_loop.thisRepN'
p1817
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1818
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p1819
Nsg70
Vn
sS'block_loop.thisTrialN'
p1820
I0
sg39
F1.9832689865706925
sg34
g753
(S'\x07\xdf\x07\r\x0c%*\rqh'
tRp1821
sa(dp1822
S'trial_loop.thisTrialN'
p1823
I63
sg895
S'13-mccoys_steak_crisps.png'
p1824
sS'block_loop.thisIndex'
p1825
g889
sg38
S'right'
p1826
sg59
g63
sS'trial_loop.thisN'
p1827
I63
sg33
g1790
sg64
g65
sS'trial_loop.thisIndex'
p1828
g60
(g99
S'?\x00\x00\x00'
tRp1829
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1830
I0
sg904
S'3-ellas_strawberries_apples.png'
p1831
sS'block_loop.thisRepN'
p1832
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1833
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p1834
Nsg70
Vn
sS'block_loop.thisTrialN'
p1835
I0
sg39
F0.86660833548558003
sg34
g753
(S'\x07\xdf\x07\r\x0c%1\r\xbf\x88'
tRp1836
sa(dp1837
S'trial_loop.thisTrialN'
p1838
I64
sg895
g1187
sS'block_loop.thisIndex'
p1839
g889
sg38
S'left'
p1840
sg59
g63
sS'trial_loop.thisN'
p1841
I64
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1842
g60
(g99
S'@\x00\x00\x00'
tRp1843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1844
I0
sg904
g1195
sS'block_loop.thisRepN'
p1845
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1846
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p1847
Nsg70
Vn
sS'block_loop.thisTrialN'
p1848
I0
sg39
F0.83328600696040667
sg34
g753
(S'\x07\xdf\x07\r\x0c%7\x0c-0'
tRp1849
sa(dp1850
S'trial_loop.thisTrialN'
p1851
I65
sg895
g1501
sS'block_loop.thisIndex'
p1852
g889
sg38
S'left'
p1853
sg59
g63
sS'trial_loop.thisN'
p1854
I65
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p1855
g60
(g99
S'A\x00\x00\x00'
tRp1856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1857
I0
sg904
g1508
sS'block_loop.thisRepN'
p1858
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1859
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p1860
Nsg70
Vn
sS'block_loop.thisTrialN'
p1861
I0
sg39
F1.0670232680404297
sg34
g753
(S'\x07\xdf\x07\r\x0c&\x01\n\x1d\xd8'
tRp1862
sa(dp1863
S'trial_loop.thisTrialN'
p1864
I66
sg895
g1264
sS'block_loop.thisIndex'
p1865
g889
sg38
S'right'
p1866
sg59
g63
sS'trial_loop.thisN'
p1867
I66
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1868
g60
(g99
S'B\x00\x00\x00'
tRp1869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1870
I0
sg904
g1271
sS'block_loop.thisRepN'
p1871
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1872
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1873
Nsg70
Vn
sS'block_loop.thisTrialN'
p1874
I0
sg39
F1.1332374261528457
sg34
g753
(S'\x07\xdf\x07\r\x0c&\x07\x0b\xa4x'
tRp1875
sa(dp1876
S'trial_loop.thisTrialN'
p1877
I67
sg895
S'26-walkers_smoky_bacon.png'
p1878
sS'block_loop.thisIndex'
p1879
g889
sg38
S'right'
p1880
sg59
g63
sS'trial_loop.thisN'
p1881
I67
sg33
S'44-crunch.png'
p1882
sg64
g65
sS'trial_loop.thisIndex'
p1883
g60
(g99
S'C\x00\x00\x00'
tRp1884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1885
I0
sg904
S'44-crunch.png'
p1886
sS'block_loop.thisRepN'
p1887
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1888
I0
sg909
S'26-walkers_smoky_bacon.png'
p1889
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vn
sS'block_loop.thisTrialN'
p1891
I0
sg39
F1.3166670372957014
sg34
g753
(S'\x07\xdf\x07\r\x0c&\r\x0e\x1dH'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
g1501
sS'block_loop.thisIndex'
p1895
g889
sg38
S'left'
p1896
sg59
g63
sS'trial_loop.thisN'
p1897
I68
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p1898
g60
(g99
S'D\x00\x00\x00'
tRp1899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1900
I0
sg904
g1508
sS'block_loop.thisRepN'
p1901
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1902
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p1903
Nsg70
Vn
sS'block_loop.thisTrialN'
p1904
I0
sg39
F0.74989608154828602
sg34
g753
(S'\x07\xdf\x07\r\x0c&\x14\x04.P'
tRp1905
sa(dp1906
S'trial_loop.thisTrialN'
p1907
I69
sg895
g1736
sS'block_loop.thisIndex'
p1908
g889
sg38
S'right'
p1909
sg59
g63
sS'trial_loop.thisN'
p1910
I69
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p1911
g60
(g99
S'E\x00\x00\x00'
tRp1912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1913
I0
sg904
g1743
sS'block_loop.thisRepN'
p1914
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1915
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p1916
Nsg70
Vn
sS'block_loop.thisTrialN'
p1917
I0
sg39
F0.96664859141310444
sg34
g753
(S'\x07\xdf\x07\r\x0c&\x1a\x00\xf20'
tRp1918
sa(dp1919
S'trial_loop.thisTrialN'
p1920
I70
sg895
g1501
sS'block_loop.thisIndex'
p1921
g889
sg38
S'left'
p1922
sg59
g63
sS'trial_loop.thisN'
p1923
I70
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p1924
g60
(g99
S'F\x00\x00\x00'
tRp1925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1926
I0
sg904
g1508
sS'block_loop.thisRepN'
p1927
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1928
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p1929
Nsg70
Vn
sS'block_loop.thisTrialN'
p1930
I0
sg39
F0.76668126371623657
sg34
g753
(S'\x07\xdf\x07\r\x0c& \x01\t\xa0'
tRp1931
sa(dp1932
S'trial_loop.thisTrialN'
p1933
I71
sg895
g1736
sS'block_loop.thisIndex'
p1934
g889
sg38
S'right'
p1935
sg59
g63
sS'trial_loop.thisN'
p1936
I71
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p1937
g60
(g99
S'G\x00\x00\x00'
tRp1938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1939
I0
sg904
g1743
sS'block_loop.thisRepN'
p1940
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1941
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p1942
Nsg70
Vn
sS'block_loop.thisTrialN'
p1943
I0
sg39
F1.1666181998971297
sg34
g753
(S'\x07\xdf\x07\r\x0c&%\r\x0b\xd8'
tRp1944
sa(dp1945
S'trial_loop.thisTrialN'
p1946
I72
sg895
g916
sS'block_loop.thisIndex'
p1947
g889
sg38
S'left'
p1948
sg59
g63
sS'trial_loop.thisN'
p1949
I72
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1950
g60
(g99
S'H\x00\x00\x00'
tRp1951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1952
I0
sg904
g924
sS'block_loop.thisRepN'
p1953
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1954
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1955
Nsg70
Vn
sS'block_loop.thisTrialN'
p1956
I0
sg39
F2.0498993886903918
sg34
g753
(S'\x07\xdf\x07\r\x0c&,\x00\xfa\x00'
tRp1957
sa(dp1958
S'trial_loop.thisTrialN'
p1959
I73
sg895
g1061
sS'block_loop.thisIndex'
p1960
g889
sg38
S'left'
p1961
sg59
g63
sS'trial_loop.thisN'
p1962
I73
sg33
g1072
sg64
g65
sS'trial_loop.thisIndex'
p1963
g60
(g99
S'I\x00\x00\x00'
tRp1964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1965
I0
sg904
g1069
sS'block_loop.thisRepN'
p1966
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1967
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1968
Nsg70
Vn
sS'block_loop.thisTrialN'
p1969
I0
sg39
F1.449860273158265
sg34
g753
(S'\x07\xdf\x07\r\x0c&3\x02>8'
tRp1970
sa(dp1971
S'trial_loop.thisTrialN'
p1972
I74
sg895
g1292
sS'block_loop.thisIndex'
p1973
g889
sg38
S'left'
p1974
sg59
g63
sS'trial_loop.thisN'
p1975
I74
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p1976
g60
(g99
S'J\x00\x00\x00'
tRp1977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1978
I0
sg904
g1299
sS'block_loop.thisRepN'
p1979
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1980
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p1981
Nsg70
Vn
sS'block_loop.thisTrialN'
p1982
I0
sg39
F1.316651071771048
sg34
g753
(S'\x07\xdf\x07\r\x0c&9\ty\xc8'
tRp1983
sa(dp1984
S'trial_loop.thisTrialN'
p1985
I75
sg895
g1061
sS'block_loop.thisIndex'
p1986
g889
sg38
S'left'
p1987
sg59
g63
sS'trial_loop.thisN'
p1988
I75
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1989
g60
(g99
S'K\x00\x00\x00'
tRp1990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1991
I0
sg904
g1069
sS'block_loop.thisRepN'
p1992
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1993
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1994
Nsg70
Vn
sS'block_loop.thisTrialN'
p1995
I0
sg39
F0.78319560218187689
sg34
g753
(S"\x07\xdf\x07\r\x0c'\x03\x0e\xcd\x10"
tRp1996
sa(dp1997
S'trial_loop.thisTrialN'
p1998
I76
sg895
g1363
sS'block_loop.thisIndex'
p1999
g889
sg38
S'right'
p2000
sg59
g63
sS'trial_loop.thisN'
p2001
I76
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p2002
g60
(g99
S'L\x00\x00\x00'
tRp2003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2004
I0
sg904
g1371
sS'block_loop.thisRepN'
p2005
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2006
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p2007
Nsg70
Vn
sS'block_loop.thisTrialN'
p2008
I0
sg39
F0.98303292490163585
sg34
g753
(S"\x07\xdf\x07\r\x0c'\t\x0c\n\x08"
tRp2009
sa(dp2010
S'trial_loop.thisTrialN'
p2011
I77
sg895
g1516
sS'block_loop.thisIndex'
p2012
g889
sg38
S'right'
p2013
sg59
g63
sS'trial_loop.thisN'
p2014
I77
sg33
g1520
sg64
g65
sS'trial_loop.thisIndex'
p2015
g60
(g99
S'M\x00\x00\x00'
tRp2016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2017
I0
sg904
g1524
sS'block_loop.thisRepN'
p2018
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2019
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p2020
Nsg70
Vn
sS'block_loop.thisTrialN'
p2021
I0
sg39
F1.0165690774028917
sg34
g753
(S"\x07\xdf\x07\r\x0c'\x0f\x0c\\\x10"
tRp2022
sa(dp2023
S'trial_loop.thisTrialN'
p2024
I78
sg895
S'44-crunch.png'
p2025
sS'block_loop.thisIndex'
p2026
g889
sg38
S'left'
p2027
sg59
g63
sS'trial_loop.thisN'
p2028
I78
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p2029
g60
(g99
S'N\x00\x00\x00'
tRp2030
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2031
I0
sg904
S'26-walkers_smoky_bacon.png'
p2032
sS'block_loop.thisRepN'
p2033
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2034
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p2035
Nsg70
Vn
sS'block_loop.thisTrialN'
p2036
I0
sg39
F1.4666463106223091
sg34
g753
(S"\x07\xdf\x07\r\x0c'\x15\r+\x18"
tRp2037
sa(dp2038
S'trial_loop.thisTrialN'
p2039
I79
sg895
g950
sS'block_loop.thisIndex'
p2040
g889
sg38
S'right'
p2041
sg59
g63
sS'trial_loop.thisN'
p2042
I79
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2043
g60
(g99
S'O\x00\x00\x00'
tRp2044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2045
I0
sg904
g958
sS'block_loop.thisRepN'
p2046
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2047
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F3.9832778246291127
sg34
g753
(S"\x07\xdf\x07\r\x0c'\x1c\x05\x9d\x80"
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g933
sS'block_loop.thisIndex'
p2053
g889
sg38
S'left'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g941
sS'block_loop.thisRepN'
p2059
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F1.2670949418370583
sg34
g753
(S"\x07\xdf\x07\r\x0c'%\x05\xa1h"
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g1764
sS'block_loop.thisIndex'
p2066
g889
sg38
S'left'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g1771
sS'block_loop.thisRepN'
p2072
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2073
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F0.99990791314121452
sg34
g753
(S"\x07\xdf\x07\r\x0c'+\nA\x00"
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
g1061
sS'block_loop.thisIndex'
p2079
g889
sg38
S'left'
p2080
sg59
g63
sS'trial_loop.thisN'
p2081
I82
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p2082
g60
(g99
S'R\x00\x00\x00'
tRp2083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2084
I0
sg904
g1069
sS'block_loop.thisRepN'
p2085
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2086
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p2087
Nsg70
Vn
sS'block_loop.thisTrialN'
p2088
I0
sg39
F0.7332044117301848
sg34
g753
(S"\x07\xdf\x07\r\x0c'1\n\xd1\x88"
tRp2089
sa(dp2090
S'trial_loop.thisTrialN'
p2091
I83
sg895
g2025
sS'block_loop.thisIndex'
p2092
g889
sg38
S'left'
p2093
sg59
g63
sS'trial_loop.thisN'
p2094
I83
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p2095
g60
(g99
S'S\x00\x00\x00'
tRp2096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2097
I0
sg904
g2032
sS'block_loop.thisRepN'
p2098
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2099
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p2100
Nsg70
Vn
sS'block_loop.thisTrialN'
p2101
I0
sg39
F0.69996048532811983
sg34
g753
(S"\x07\xdf\x07\r\x0c'7\x07V\xe8"
tRp2102
sa(dp2103
S'trial_loop.thisTrialN'
p2104
I84
sg895
g1027
sS'block_loop.thisIndex'
p2105
g889
sg38
S'right'
p2106
sg59
g63
sS'trial_loop.thisN'
p2107
I84
sg33
g1038
sg64
g65
sS'trial_loop.thisIndex'
p2108
g60
(g99
S'T\x00\x00\x00'
tRp2109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2110
I0
sg904
g1035
sS'block_loop.thisRepN'
p2111
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2112
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p2113
Nsg70
Vn
sS'block_loop.thisTrialN'
p2114
I0
sg39
F1.8332187236828759
sg34
g753
(S'\x07\xdf\x07\r\x0c(\x01\x03$\xb0'
tRp2115
sa(dp2116
S'trial_loop.thisTrialN'
p2117
I85
sg895
S'51-mars.png'
p2118
sS'block_loop.thisIndex'
p2119
g889
sg38
S'left'
p2120
sg59
g63
sS'trial_loop.thisN'
p2121
I85
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p2122
g60
(g99
S'U\x00\x00\x00'
tRp2123
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2124
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p2125
sS'block_loop.thisRepN'
p2126
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F4.9835962798042601
sg34
g753
(S'\x07\xdf\x07\r\x0c(\x08\x01\x11p'
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g950
sS'block_loop.thisIndex'
p2133
g889
sg38
S'left'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g958
sS'block_loop.thisRepN'
p2139
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2140
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vn
sS'block_loop.thisTrialN'
p2142
I0
sg39
F0.88322901574247226
sg34
g753
(S'\x07\xdf\x07\r\x0c(\x12\x01\x8a\x88'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
S'21-nakd_banana_crunch.png'
p2146
sS'block_loop.thisIndex'
p2147
g889
sg38
S'right'
p2148
sg59
g63
sS'trial_loop.thisN'
p2149
I87
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p2150
g60
(g99
S'W\x00\x00\x00'
tRp2151
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2152
I0
sg904
S'1-treacle_cookies.png'
p2153
sS'block_loop.thisRepN'
p2154
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2155
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2156
Nsg70
Vn
sS'block_loop.thisTrialN'
p2157
I0
sg39
F1.133058669307502
sg34
g753
(S'\x07\xdf\x07\r\x0c(\x18\x006\xb0'
tRp2158
sa(dp2159
S'trial_loop.thisTrialN'
p2160
I88
sg895
g1140
sS'block_loop.thisIndex'
p2161
g889
sg38
S'right'
p2162
sg59
g63
sS'trial_loop.thisN'
p2163
I88
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2164
g60
(g99
S'X\x00\x00\x00'
tRp2165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2166
I0
sg904
g1148
sS'block_loop.thisRepN'
p2167
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2168
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p2169
Nsg70
Vn
sS'block_loop.thisTrialN'
p2170
I0
sg39
F2.1665725841176027
sg34
g753
(S'\x07\xdf\x07\r\x0c(\x1e\x02\xaf\x80'
tRp2171
sa(dp2172
S'trial_loop.thisTrialN'
p2173
I89
sg895
g1639
sS'block_loop.thisIndex'
p2174
g889
sg38
S'left'
p2175
sg59
g63
sS'trial_loop.thisN'
p2176
I89
sg33
g1643
sg64
g65
sS'trial_loop.thisIndex'
p2177
g60
(g99
S'Y\x00\x00\x00'
tRp2178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2179
I0
sg904
g1647
sS'block_loop.thisRepN'
p2180
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vn
sS'block_loop.thisTrialN'
p2183
I0
sg39
F1.2998433668090001
sg34
g753
(S'\x07\xdf\x07\r\x0c(%\x05\xd8\x18'
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g1247
sS'block_loop.thisIndex'
p2187
g889
sg38
S'left'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g1255
sS'block_loop.thisRepN'
p2193
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vn
sS'block_loop.thisTrialN'
p2196
I0
sg39
F0.81707444324638345
sg34
g753
(S'\x07\xdf\x07\r\x0c(+\n\xec\xe0'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g1204
sS'block_loop.thisIndex'
p2200
g889
sg38
S'left'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g1211
sS'block_loop.thisRepN'
p2206
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vn
sS'block_loop.thisTrialN'
p2209
I0
sg39
F0.99976023204908415
sg34
g753
(S'\x07\xdf\x07\r\x0c(1\x08\xa2\xf0'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g1421
sS'block_loop.thisIndex'
p2213
g889
sg38
S'left'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g1428
sS'block_loop.thisRepN'
p2219
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vn
sS'block_loop.thisTrialN'
p2222
I0
sg39
F1.6664884800193249
sg34
g753
(S'\x07\xdf\x07\r\x0c(7\x08\xf8\xe0'
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
g1546
sS'block_loop.thisIndex'
p2226
g889
sg38
S'left'
p2227
sg59
g63
sS'trial_loop.thisN'
p2228
I93
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2229
g60
(g99
S']\x00\x00\x00'
tRp2230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2231
I0
sg904
g1553
sS'block_loop.thisRepN'
p2232
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2233
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2234
Nsg70
Vn
sS'block_loop.thisTrialN'
p2235
I0
sg39
F1.1332625148334046
sg34
g753
(S'\x07\xdf\x07\r\x0c)\x02\x04\x84@'
tRp2236
sa(dp2237
S'trial_loop.thisTrialN'
p2238
I94
sg895
g1695
sS'block_loop.thisIndex'
p2239
g889
sg38
S'right'
p2240
sg59
g63
sS'trial_loop.thisN'
p2241
I94
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2242
g60
(g99
S'^\x00\x00\x00'
tRp2243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2244
I0
sg904
g1702
sS'block_loop.thisRepN'
p2245
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2246
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2247
Nsg70
Vn
sS'block_loop.thisTrialN'
p2248
I0
sg39
F1.1332265924047533
sg34
g753
(S'\x07\xdf\x07\r\x0c)\x08\x06\xfd\x10'
tRp2249
sa(dp2250
S'trial_loop.thisTrialN'
p2251
I95
sg895
g1393
sS'block_loop.thisIndex'
p2252
g889
sg38
S'left'
p2253
sg59
g63
sS'trial_loop.thisN'
p2254
I95
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p2255
g60
(g99
S'_\x00\x00\x00'
tRp2256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2257
I0
sg904
g1400
sS'block_loop.thisRepN'
p2258
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2259
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p2260
Nsg70
Vn
sS'block_loop.thisTrialN'
p2261
I0
sg39
F0.80033829804051493
sg34
g753
(S'\x07\xdf\x07\r\x0c)\x0e\tu\xe0'
tRp2262
sa(dp2263
S'trial_loop.thisTrialN'
p2264
I96
sg895
g933
sS'block_loop.thisIndex'
p2265
g889
sg38
S'left'
p2266
sg59
g63
sS'trial_loop.thisN'
p2267
I96
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2268
g60
(g99
S'`\x00\x00\x00'
tRp2269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2270
I0
sg904
g941
sS'block_loop.thisRepN'
p2271
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2272
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2273
Nsg70
Vn
sS'block_loop.thisTrialN'
p2274
I0
sg39
F2.6498760676222446
sg34
g753
(S'\x07\xdf\x07\r\x0c)\x14\x06\xedp'
tRp2275
sa(dp2276
S'trial_loop.thisTrialN'
p2277
I97
sg895
g1112
sS'block_loop.thisIndex'
p2278
g889
sg38
S'left'
p2279
sg59
g63
sS'trial_loop.thisN'
p2280
I97
sg33
g1038
sg64
g65
sS'trial_loop.thisIndex'
p2281
g60
(g99
S'a\x00\x00\x00'
tRp2282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2283
I0
sg904
g1119
sS'block_loop.thisRepN'
p2284
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2285
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p2286
Nsg70
Vn
sS'block_loop.thisTrialN'
p2287
I0
sg39
F1.8332771689019864
sg34
g753
(S'\x07\xdf\x07\r\x0c)\x1c\x026h'
tRp2288
sa(dp2289
S'trial_loop.thisTrialN'
p2290
I98
sg895
g2025
sS'block_loop.thisIndex'
p2291
g889
sg38
S'left'
p2292
sg59
g63
sS'trial_loop.thisN'
p2293
I98
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p2294
g60
(g99
S'b\x00\x00\x00'
tRp2295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2296
I0
sg904
g2032
sS'block_loop.thisRepN'
p2297
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2298
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p2299
Nsg70
Vn
sS'block_loop.thisTrialN'
p2300
I0
sg39
F0.81669725775100233
sg34
g753
(S'\x07\xdf\x07\r\x0c)#\x00#('
tRp2301
sa(dp2302
S'trial_loop.thisTrialN'
p2303
I99
sg895
g997
sS'block_loop.thisIndex'
p2304
g889
sg38
S'right'
p2305
sg59
g63
sS'trial_loop.thisN'
p2306
I99
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2307
g60
(g99
S'c\x00\x00\x00'
tRp2308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2309
I0
sg904
g1004
sS'block_loop.thisRepN'
p2310
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2311
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2312
Nsg70
Vn
sS'block_loop.thisTrialN'
p2313
I0
sg39
F1.1833198481672298
sg34
g753
(S'\x07\xdf\x07\r\x0c)(\r\x1bx'
tRp2314
sa(dp2315
S'trial_loop.thisTrialN'
p2316
I100
sg895
g1170
sS'block_loop.thisIndex'
p2317
g889
sg38
S'right'
p2318
sg59
g63
sS'trial_loop.thisN'
p2319
I100
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p2320
g60
(g99
S'd\x00\x00\x00'
tRp2321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2322
I0
sg904
g1178
sS'block_loop.thisRepN'
p2323
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2324
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p2325
Nsg70
Vn
sS'block_loop.thisTrialN'
p2326
I0
sg39
F0.99974426652443071
sg34
g753
(S'\x07\xdf\x07\r\x0c)/\x01\t\xa0'
tRp2327
sa(dp2328
S'trial_loop.thisTrialN'
p2329
I101
sg895
g1095
sS'block_loop.thisIndex'
p2330
g889
sg38
S'right'
p2331
sg59
g63
sS'trial_loop.thisN'
p2332
I101
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p2333
g60
(g99
S'e\x00\x00\x00'
tRp2334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2335
I0
sg904
g1103
sS'block_loop.thisRepN'
p2336
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2337
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p2338
Nsg70
Vn
sS'block_loop.thisTrialN'
p2339
I0
sg39
F0.94993724979030958
sg34
g753
(S'\x07\xdf\x07\r\x0c)5\x01\x9a('
tRp2340
sa(dp2341
S'trial_loop.thisTrialN'
p2342
I102
sg895
g916
sS'block_loop.thisIndex'
p2343
g889
sg38
S'left'
p2344
sg59
g63
sS'trial_loop.thisN'
p2345
I102
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2346
g60
(g99
S'f\x00\x00\x00'
tRp2347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2348
I0
sg904
g924
sS'block_loop.thisRepN'
p2349
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2350
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2351
Nsg70
Vn
sS'block_loop.thisTrialN'
p2352
I0
sg39
F0.76662310359461117
sg34
g753
(S'\x07\xdf\x07\r\x0c);\x01w\x00'
tRp2353
sa(dp2354
S'trial_loop.thisTrialN'
p2355
I103
sg895
g896
sS'block_loop.thisIndex'
p2356
g889
sg38
S'left'
p2357
sg59
g63
sS'trial_loop.thisN'
p2358
I103
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2359
g60
(g99
S'g\x00\x00\x00'
tRp2360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2361
I0
sg904
g905
sS'block_loop.thisRepN'
p2362
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2363
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2364
Nsg70
Vn
sS'block_loop.thisTrialN'
p2365
I0
sg39
F0.78326488115089887
sg34
g753
(S'\x07\xdf\x07\r\x0c*\x04\r\xb7\xb8'
tRp2366
sa(dp2367
S'trial_loop.thisTrialN'
p2368
I104
sg895
g1809
sS'block_loop.thisIndex'
p2369
g889
sg38
S'right'
p2370
sg59
g63
sS'trial_loop.thisN'
p2371
I104
sg33
g1526
sg64
g65
sS'trial_loop.thisIndex'
p2372
g60
(g99
S'h\x00\x00\x00'
tRp2373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2374
I0
sg904
g1816
sS'block_loop.thisRepN'
p2375
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2376
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p2377
Nsg70
Vn
sS'block_loop.thisTrialN'
p2378
I0
sg39
F1.1999242778019834
sg34
g753
(S'\x07\xdf\x07\r\x0c*\n\n\xb60'
tRp2379
sa(dp2380
S'trial_loop.thisTrialN'
p2381
I105
sg895
g2118
sS'block_loop.thisIndex'
p2382
g889
sg38
S'left'
p2383
sg59
g63
sS'trial_loop.thisN'
p2384
I105
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p2385
g60
(g99
S'i\x00\x00\x00'
tRp2386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2387
I0
sg904
g2125
sS'block_loop.thisRepN'
p2388
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vn
sS'block_loop.thisTrialN'
p2391
I0
sg39
F1.2833609593908477
sg34
g753
(S'\x07\xdf\x07\r\x0c*\x10\x0e_\xb0'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g1779
sS'block_loop.thisIndex'
p2395
g889
sg38
S'left'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g1783
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g1787
sS'block_loop.thisRepN'
p2401
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vn
sS'block_loop.thisTrialN'
p2404
I0
sg39
F1.4832270770712057
sg34
g753
(S'\x07\xdf\x07\r\x0c*\x17\x03\xf7\xa0'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g1516
sS'block_loop.thisIndex'
p2408
g889
sg38
S'left'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g1520
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g1524
sS'block_loop.thisRepN'
p2414
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vn
sS'block_loop.thisTrialN'
p2417
I0
sg39
F1.6832095149948145
sg34
g753
(S'\x07\xdf\x07\r\x0c*\x1d\x0b\xea\xc8'
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g1824
sS'block_loop.thisIndex'
p2421
g889
sg38
S'right'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g1783
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g1831
sS'block_loop.thisRepN'
p2427
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vn
sS'block_loop.thisTrialN'
p2430
I0
sg39
F1.5166480497246084
sg34
g753
(S'\x07\xdf\x07\r\x0c*$\x07v('
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
g1204
sS'block_loop.thisIndex'
p2434
g889
sg38
S'left'
p2435
sg59
g63
sS'trial_loop.thisN'
p2436
I109
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p2437
g60
(g99
S'm\x00\x00\x00'
tRp2438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2439
I0
sg904
g1211
sS'block_loop.thisRepN'
p2440
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2441
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p2442
Nsg70
Vn
sS'block_loop.thisTrialN'
p2443
I0
sg39
F2.0663587031212955
sg34
g753
(S'\x07\xdf\x07\r\x0c*+\x00\xa0('
tRp2444
sa(dp2445
S'trial_loop.thisTrialN'
p2446
I110
sg895
g1307
sS'block_loop.thisIndex'
p2447
g889
sg38
S'right'
p2448
sg59
g63
sS'trial_loop.thisN'
p2449
I110
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2450
g60
(g99
S'n\x00\x00\x00'
tRp2451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2452
I0
sg904
g1315
sS'block_loop.thisRepN'
p2453
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vn
sS'block_loop.thisTrialN'
p2456
I0
sg39
F1.5163692232599715
sg34
g753
(S'\x07\xdf\x07\r\x0c*2\x02\x1e\xf8'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
g1219
sS'block_loop.thisIndex'
p2460
g889
sg38
S'left'
p2461
sg59
g63
sS'trial_loop.thisN'
p2462
I111
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2463
g60
(g99
S'o\x00\x00\x00'
tRp2464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2465
I0
sg904
g1226
sS'block_loop.thisRepN'
p2466
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2467
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F1.049974084535279
sg34
g753
(S'\x07\xdf\x07\r\x0c*8\n\x8b8'
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
g1247
sS'block_loop.thisIndex'
p2473
g889
sg38
S'right'
p2474
sg59
g63
sS'trial_loop.thisN'
p2475
I112
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p2476
g60
(g99
S'p\x00\x00\x00'
tRp2477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2478
I0
sg904
g1255
sS'block_loop.thisRepN'
p2479
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2480
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p2481
Nsg70
Vn
sS'block_loop.thisTrialN'
p2482
I0
sg39
F1.0665334685836569
sg34
g753
(S'\x07\xdf\x07\r\x0c+\x02\x0b\xd3X'
tRp2483
sa(dp2484
S'trial_loop.thisTrialN'
p2485
I113
sg895
g950
sS'block_loop.thisIndex'
p2486
g889
sg38
S'left'
p2487
sg59
g63
sS'trial_loop.thisN'
p2488
I113
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2489
g60
(g99
S'q\x00\x00\x00'
tRp2490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2491
I0
sg904
g958
sS'block_loop.thisRepN'
p2492
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2493
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2494
Nsg70
Vn
sS'block_loop.thisTrialN'
p2495
I0
sg39
F1.4166018067262485
sg34
g753
(S'\x07\xdf\x07\r\x0c+\x08\rY\xf8'
tRp2496
sa(dp2497
S'trial_loop.thisTrialN'
p2498
I114
sg895
g1044
sS'block_loop.thisIndex'
p2499
g889
sg38
S'right'
p2500
sg59
g63
sS'trial_loop.thisN'
p2501
I114
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p2502
g60
(g99
S'r\x00\x00\x00'
tRp2503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2504
I0
sg904
g1052
sS'block_loop.thisRepN'
p2505
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2506
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p2507
Nsg70
Vn
sS'block_loop.thisTrialN'
p2508
I0
sg39
F1.1999579194416583
sg34
g753
(S'\x07\xdf\x07\r\x0c+\x0f\x04\xd6H'
tRp2509
sa(dp2510
S'trial_loop.thisTrialN'
p2511
I115
sg895
g1095
sS'block_loop.thisIndex'
p2512
g889
sg38
S'right'
p2513
sg59
g63
sS'trial_loop.thisN'
p2514
I115
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p2515
g60
(g99
S's\x00\x00\x00'
tRp2516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2517
I0
sg904
g1103
sS'block_loop.thisRepN'
p2518
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2519
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p2520
Nsg70
Vn
sS'block_loop.thisTrialN'
p2521
I0
sg39
F1.1002098896151438
sg34
g753
(S'\x07\xdf\x07\r\x0c+\x15\x08\x7f\xc8'
tRp2522
sa(dp2523
S'trial_loop.thisTrialN'
p2524
I116
sg895
g1393
sS'block_loop.thisIndex'
p2525
g889
sg38
S'left'
p2526
sg59
g63
sS'trial_loop.thisN'
p2527
I116
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p2528
g60
(g99
S't\x00\x00\x00'
tRp2529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2530
I0
sg904
g1400
sS'block_loop.thisRepN'
p2531
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2532
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p2533
Nsg70
Vn
sS'block_loop.thisTrialN'
p2534
I0
sg39
F1.0832607757292863
sg34
g753
(S'\x07\xdf\x07\r\x0c+\x1b\n\x7f\x80'
tRp2535
sa(dp2536
S'trial_loop.thisTrialN'
p2537
I117
sg895
g997
sS'block_loop.thisIndex'
p2538
g889
sg38
S'right'
p2539
sg59
g63
sS'trial_loop.thisN'
p2540
I117
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2541
g60
(g99
S'u\x00\x00\x00'
tRp2542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2543
I0
sg904
g1004
sS'block_loop.thisRepN'
p2544
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2545
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2546
Nsg70
Vn
sS'block_loop.thisTrialN'
p2547
I0
sg39
F1.0499806418029038
sg34
g753
(S'\x07\xdf\x07\r\x0c+!\x0c@\xb8'
tRp2548
sa(dp2549
S'trial_loop.thisTrialN'
p2550
I118
sg895
g1292
sS'block_loop.thisIndex'
p2551
g889
sg38
S'left'
p2552
sg59
g63
sS'trial_loop.thisN'
p2553
I118
sg33
g1099
sg64
g65
sS'trial_loop.thisIndex'
p2554
g60
(g99
S'v\x00\x00\x00'
tRp2555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2556
I0
sg904
g1299
sS'block_loop.thisRepN'
p2557
I0
sg907
g1099
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2558
I0
sg909
g1106
sg55
g11
sS'block_loop.thisTrial'
p2559
Nsg70
Vn
sS'block_loop.thisTrialN'
p2560
I0
sg39
F0.96664688082091743
sg34
g753
(S"\x07\xdf\x07\r\x0c+'\r\x88\xd8"
tRp2561
sa(dp2562
S'trial_loop.thisTrialN'
p2563
I119
sg895
g2146
sS'block_loop.thisIndex'
p2564
g889
sg38
S'right'
p2565
sg59
g63
sS'trial_loop.thisN'
p2566
I119
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p2567
g60
(g99
S'w\x00\x00\x00'
tRp2568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2569
I0
sg904
g2153
sS'block_loop.thisRepN'
p2570
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2571
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2572
Nsg70
Vn
sS'block_loop.thisTrialN'
p2573
I0
sg39
F1.0165659413196408
sg34
g753
(S'\x07\xdf\x07\r\x0c+-\r\xa0H'
tRp2574
sa(dp2575
S'trial_loop.thisTrialN'
p2576
I120
sg895
g1044
sS'block_loop.thisIndex'
p2577
g889
sg38
S'right'
p2578
sg59
g63
sS'trial_loop.thisN'
p2579
I120
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p2580
g60
(g99
S'x\x00\x00\x00'
tRp2581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2582
I0
sg904
g1052
sS'block_loop.thisRepN'
p2583
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2584
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p2585
Nsg70
Vn
sS'block_loop.thisTrialN'
p2586
I0
sg39
F0.73369905786239542
sg34
g753
(S'\x07\xdf\x07\r\x0c+3\x0eoP'
tRp2587
sa(dp2588
S'trial_loop.thisTrialN'
p2589
I121
sg895
g1695
sS'block_loop.thisIndex'
p2590
g889
sg38
S'left'
p2591
sg59
g63
sS'trial_loop.thisN'
p2592
I121
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2593
g60
(g99
S'y\x00\x00\x00'
tRp2594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2595
I0
sg904
g1702
sS'block_loop.thisRepN'
p2596
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2597
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2598
Nsg70
Vn
sS'block_loop.thisTrialN'
p2599
I0
sg39
F1.6498601020994101
sg34
g753
(S'\x07\xdf\x07\r\x0c+9\n\xba\x18'
tRp2600
sa(dp2601
S'trial_loop.thisTrialN'
p2602
I122
sg895
g1421
sS'block_loop.thisIndex'
p2603
g889
sg38
S'right'
p2604
sg59
g63
sS'trial_loop.thisN'
p2605
I122
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2606
g60
(g99
S'z\x00\x00\x00'
tRp2607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2608
I0
sg904
g1428
sS'block_loop.thisRepN'
p2609
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2610
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2611
Nsg70
Vn
sS'block_loop.thisTrialN'
p2612
I0
sg39
F1.7333711944320385
sg34
g753
(S'\x07\xdf\x07\r\x0c,\x04\x06\x06\xf8'
tRp2613
sa(dp2614
S'trial_loop.thisTrialN'
p2615
I123
sg895
g1824
sS'block_loop.thisIndex'
p2616
g889
sg38
S'right'
p2617
sg59
g63
sS'trial_loop.thisN'
p2618
I123
sg33
g1783
sg64
g65
sS'trial_loop.thisIndex'
p2619
g60
(g99
S'{\x00\x00\x00'
tRp2620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2621
I0
sg904
g1831
sS'block_loop.thisRepN'
p2622
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2623
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p2624
Nsg70
Vn
sS'block_loop.thisTrialN'
p2625
I0
sg39
F1.1332265924029343
sg34
g753
(S'\x07\xdf\x07\r\x0c,\x0b\x02\x88p'
tRp2626
sa(dp2627
S'trial_loop.thisTrialN'
p2628
I124
sg895
g1112
sS'block_loop.thisIndex'
p2629
g889
sg38
S'left'
p2630
sg59
g63
sS'trial_loop.thisN'
p2631
I124
sg33
g1031
sg64
g65
sS'trial_loop.thisIndex'
p2632
g60
(g99
S'|\x00\x00\x00'
tRp2633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2634
I0
sg904
g1119
sS'block_loop.thisRepN'
p2635
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2636
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p2637
Nsg70
Vn
sS'block_loop.thisTrialN'
p2638
I0
sg39
F1.6665338107031857
sg34
g753
(S'\x07\xdf\x07\r\x0c,\x11\x05\x01@'
tRp2639
sa(dp2640
S'trial_loop.thisTrialN'
p2641
I125
sg895
g2025
sS'block_loop.thisIndex'
p2642
g889
sg38
S'left'
p2643
sg59
g63
sS'trial_loop.thisN'
p2644
I125
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p2645
g60
(g99
S'}\x00\x00\x00'
tRp2646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2647
I0
sg904
g2032
sS'block_loop.thisRepN'
p2648
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2649
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p2650
Nsg70
Vn
sS'block_loop.thisTrialN'
p2651
I0
sg39
F0.7003872779860103
sg34
g753
(S'\x07\xdf\x07\r\x0c,\x18\x00N '
tRp2652
sa(dp2653
S'trial_loop.thisTrialN'
p2654
I126
sg895
g1639
sS'block_loop.thisIndex'
p2655
g889
sg38
S'left'
p2656
sg59
g63
sS'trial_loop.thisN'
p2657
I126
sg33
g1643
sg64
g65
sS'trial_loop.thisIndex'
p2658
g60
(g99
S'~\x00\x00\x00'
tRp2659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2660
I0
sg904
g1647
sS'block_loop.thisRepN'
p2661
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2662
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p2663
Nsg70
Vn
sS'block_loop.thisTrialN'
p2664
I0
sg39
F1.5331621030927636
sg34
g753
(S'\x07\xdf\x07\r\x0c,\x1d\x0b\x9c\xa8'
tRp2665
sa(dp2666
S'trial_loop.thisTrialN'
p2667
I127
sg895
g1516
sS'block_loop.thisIndex'
p2668
g889
sg38
S'left'
p2669
sg59
g63
sS'trial_loop.thisN'
p2670
I127
sg33
g1526
sg64
g65
sS'trial_loop.thisIndex'
p2671
g60
(g99
S'\x7f\x00\x00\x00'
tRp2672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2673
I0
sg904
g1524
sS'block_loop.thisRepN'
p2674
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2675
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p2676
Nsg70
Vn
sS'block_loop.thisTrialN'
p2677
I0
sg39
F1.6166022058641829
sg34
g753
(S'\x07\xdf\x07\r\x0c,$\x05\x01@'
tRp2678
sa(dp2679
S'trial_loop.thisTrialN'
p2680
I128
sg895
g1695
sS'block_loop.thisIndex'
p2681
g889
sg38
S'left'
p2682
sg59
g63
sS'trial_loop.thisN'
p2683
I128
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2684
g60
(g99
S'\x80\x00\x00\x00'
tRp2685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2686
I0
sg904
g1702
sS'block_loop.thisRepN'
p2687
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2688
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2689
Nsg70
Vn
sS'block_loop.thisTrialN'
p2690
I0
sg39
F0.73332985512934101
sg34
g753
(S'\x07\xdf\x07\r\x0c,*\x0e\xdc\xb0'
tRp2691
sa(dp2692
S'trial_loop.thisTrialN'
p2693
I129
sg895
g1809
sS'block_loop.thisIndex'
p2694
g889
sg38
S'right'
p2695
sg59
g63
sS'trial_loop.thisN'
p2696
I129
sg33
g1526
sg64
g65
sS'trial_loop.thisIndex'
p2697
g60
(g99
S'\x81\x00\x00\x00'
tRp2698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2699
I0
sg904
g1816
sS'block_loop.thisRepN'
p2700
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2701
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p2702
Nsg70
Vn
sS'block_loop.thisTrialN'
p2703
I0
sg39
F1.0166466242317256
sg34
g753
(S'\x07\xdf\x07\r\x0c,0\x0bb\x10'
tRp2704
sa(dp2705
S'trial_loop.thisTrialN'
p2706
I130
sg895
g1112
sS'block_loop.thisIndex'
p2707
g889
sg38
S'left'
p2708
sg59
g63
sS'trial_loop.thisN'
p2709
I130
sg33
g1031
sg64
g65
sS'trial_loop.thisIndex'
p2710
g60
(g99
S'\x82\x00\x00\x00'
tRp2711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2712
I0
sg904
g1119
sS'block_loop.thisRepN'
p2713
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2714
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p2715
Nsg70
Vn
sS'block_loop.thisTrialN'
p2716
I0
sg39
F0.95001935819709615
sg34
g753
(S'\x07\xdf\x07\r\x0c,6\x0b\xf2\x98'
tRp2717
sa(dp2718
S'trial_loop.thisTrialN'
p2719
I131
sg895
g1187
sS'block_loop.thisIndex'
p2720
g889
sg38
S'left'
p2721
sg59
g63
sS'trial_loop.thisN'
p2722
I131
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p2723
g60
(g99
S'\x83\x00\x00\x00'
tRp2724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2725
I0
sg904
g1195
sS'block_loop.thisRepN'
p2726
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2727
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2728
Nsg70
Vn
sS'block_loop.thisTrialN'
p2729
I0
sg39
F0.84999877407608437
sg34
g753
(S'\x07\xdf\x07\r\x0c-\x00\x0b\xcfp'
tRp2730
sa(dp2731
S'trial_loop.thisTrialN'
p2732
I132
sg895
g1027
sS'block_loop.thisIndex'
p2733
g889
sg38
S'left'
p2734
sg59
g63
sS'trial_loop.thisN'
p2735
I132
sg33
g1038
sg64
g65
sS'trial_loop.thisIndex'
p2736
g60
(g99
S'\x84\x00\x00\x00'
tRp2737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2738
I0
sg904
g1035
sS'block_loop.thisRepN'
p2739
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2740
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p2741
Nsg70
Vn
sS'block_loop.thisTrialN'
p2742
I0
sg39
F1.9999469716549356
sg34
g753
(S'\x07\xdf\x07\r\x0c-\x06\t\xfe\x98'
tRp2743
sa(dp2744
S'trial_loop.thisTrialN'
p2745
I133
sg895
g1140
sS'block_loop.thisIndex'
p2746
g889
sg38
S'right'
p2747
sg59
g63
sS'trial_loop.thisN'
p2748
I133
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2749
g60
(g99
S'\x85\x00\x00\x00'
tRp2750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2751
I0
sg904
g1148
sS'block_loop.thisRepN'
p2752
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2753
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p2754
Nsg70
Vn
sS'block_loop.thisTrialN'
p2755
I0
sg39
F1.0000042764804675
sg34
g753
(S'\x07\xdf\x07\r\x0c-\r\n\x87P'
tRp2756
sa(dp2757
S'trial_loop.thisTrialN'
p2758
I134
sg895
g1764
sS'block_loop.thisIndex'
p2759
g889
sg38
S'left'
p2760
sg59
g63
sS'trial_loop.thisN'
p2761
I134
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p2762
g60
(g99
S'\x86\x00\x00\x00'
tRp2763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2764
I0
sg904
g1771
sS'block_loop.thisRepN'
p2765
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2766
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p2767
Nsg70
Vn
sS'block_loop.thisTrialN'
p2768
I0
sg39
F1.1166364177024661
sg34
g753
(S'\x07\xdf\x07\r\x0c-\x13\x0b\x1b\xc0'
tRp2769
sa(dp2770
S'trial_loop.thisTrialN'
p2771
I135
sg895
g1363
sS'block_loop.thisIndex'
p2772
g889
sg38
S'right'
p2773
sg59
g63
sS'trial_loop.thisN'
p2774
I135
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p2775
g60
(g99
S'\x87\x00\x00\x00'
tRp2776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2777
I0
sg904
g1371
sS'block_loop.thisRepN'
p2778
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2779
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p2780
Nsg70
Vn
sS'block_loop.thisTrialN'
p2781
I0
sg39
F1.2336682672103052
sg34
g753
(S'\x07\xdf\x07\r\x0c-\x19\rV\x10'
tRp2782
sa(dp2783
S'trial_loop.thisTrialN'
p2784
I136
sg895
g1264
sS'block_loop.thisIndex'
p2785
g889
sg38
S'right'
p2786
sg59
g63
sS'trial_loop.thisN'
p2787
I136
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p2788
g60
(g99
S'\x88\x00\x00\x00'
tRp2789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2790
I0
sg904
g1271
sS'block_loop.thisRepN'
p2791
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2792
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p2793
Nsg70
Vn
sS'block_loop.thisTrialN'
p2794
I0
sg39
F1.166554622903277
sg34
g753
(S'\x07\xdf\x07\r\x0c- \x026h'
tRp2795
sa(dp2796
S'trial_loop.thisTrialN'
p2797
I137
sg895
g1878
sS'block_loop.thisIndex'
p2798
g889
sg38
S'right'
p2799
sg59
g63
sS'trial_loop.thisN'
p2800
I137
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p2801
g60
(g99
S'\x89\x00\x00\x00'
tRp2802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2803
I0
sg904
g1886
sS'block_loop.thisRepN'
p2804
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2805
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p2806
Nsg70
Vn
sS'block_loop.thisTrialN'
p2807
I0
sg39
F0.9332096575453761
sg34
g753
(S'\x07\xdf\x07\r\x0c-&\x05(P'
tRp2808
sa(dp2809
S'trial_loop.thisTrialN'
p2810
I138
sg895
S'30-spaghetti_hoops.png'
p2811
sS'block_loop.thisIndex'
p2812
g889
sg38
S'right'
p2813
sg59
g63
sS'trial_loop.thisN'
p2814
I138
sg33
g1643
sg64
g65
sS'trial_loop.thisIndex'
p2815
g60
(g99
S'\x8a\x00\x00\x00'
tRp2816
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2817
I0
sg904
S'19-caramello_redo.png'
p2818
sS'block_loop.thisRepN'
p2819
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.1999921312781225
sg34
g753
(S'\x07\xdf\x07\r\x0c-,\x04\xc6\xa8'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1170
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1178
sS'block_loop.thisRepN'
p2832
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.1330119131325773
sg34
g753
(S'\x07\xdf\x07\r\x0c-2\x085\x90'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1546
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1553
sS'block_loop.thisRepN'
p2845
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.7499496800919587
sg34
g753
(S'\x07\xdf\x07\r\x0c-8\n\xae`'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1878
sS'block_loop.thisIndex'
p2852
g889
sg38
S'right'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1886
sS'block_loop.thisRepN'
p2858
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.73318645051585918
sg34
g753
(S'\x07\xdf\x07\r\x0c.\x03\x07jp'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g2811
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1643
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g2818
sS'block_loop.thisRepN'
p2871
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.66668519807899429
sg34
g753
(S'\x07\xdf\x07\r\x0c.\t\x03\xef\xd0'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g2146
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g2153
sS'block_loop.thisRepN'
p2884
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.933337951930298
sg34
g753
(S'\x07\xdf\x07\r\x0c.\x0e\x0e\x86\xc0'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g2811
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1643
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g2818
sS'block_loop.thisRepN'
p2897
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.78330992673545552
sg34
g753
(S'\x07\xdf\x07\r\x0c.\x14\x0e%\x18'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1219
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1226
sS'block_loop.thisRepN'
p2910
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.1333183941660536
sg34
g753
(S'\x07\xdf\x07\r\x0c.\x1a\x0b^('
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g2118
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g2125
sS'block_loop.thisRepN'
p2923
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.66671313774349983
sg34
g753
(S'\x07\xdf\x07\r\x0c. \r\xd6\xf8'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1779
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1783
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1787
sS'block_loop.thisRepN'
p2936
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.1832708112033288
sg34
g753
(S'\x07\xdf\x07\r\x0c.&\t+\xa8'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g2811
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1650
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g2818
sS'block_loop.thisRepN'
p2949
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.79986531940448913
sg34
g753
(S'\x07\xdf\x07\r\x0c.,\x0c\x9a\x90'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1393
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1400
sS'block_loop.thisRepN'
p2962
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.3165165052141674
sg34
g753
(S'\x07\xdf\x07\r\x0c.2\n\x12 '
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g2811
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1650
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g2818
sS'block_loop.thisRepN'
p2975
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.61657170030957786
sg34
g753
(S'\x07\xdf\x07\r\x0c.9\x00#('
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1809
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1526
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1816
sS'block_loop.thisRepN'
p2988
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.2666501879648422
sg34
g753
(S'\x07\xdf\x07\r\x0c/\x02\n\x06h'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g916
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g924
sS'block_loop.thisRepN'
p3001
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.63308774936922418
sg34
g753
(S'\x07\xdf\x07\r\x0c/\x08\x0e\xa2\x18'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1736
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1743
sS'block_loop.thisRepN'
p3014
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.96650632719502028
sg34
g753
(S'\x07\xdf\x07\r\x0c/\x0e\t}\xb0'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1421
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1428
sS'block_loop.thisRepN'
p3027
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.3997681577893673
sg34
g753
(S'\x07\xdf\x07\r\x0c/\x14\t\x95 '
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1187
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1195
sS'block_loop.thisRepN'
p3040
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.96666683772673423
sg34
g753
(S'\x07\xdf\x07\r\x0c/\x1b\x00\xd6\xd8'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1878
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1886
sS'block_loop.thisRepN'
p3053
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.96700439450978593
sg34
g753
(S'\x07\xdf\x07\r\x0c/!\x00\xeeH'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g2146
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1197
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g2153
sS'block_loop.thisRepN'
p3066
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.8832931629367522
sg34
g753
(S"\x07\xdf\x07\r\x0c/'\x00\xcb "
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1247
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1255
sS'block_loop.thisRepN'
p3079
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.96652542880292458
sg34
g753
(S'\x07\xdf\x07\r\x0c/,\x0e\xf4 '
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1546
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1553
sS'block_loop.thisRepN'
p3092
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F2.599878890099717
sg34
g753
(S'\x07\xdf\x07\r\x0c/2\x0e\xcd\x10'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1824
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1790
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1831
sS'block_loop.thisRepN'
p3105
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.2999126457780221
sg34
g753
(S'\x07\xdf\x07\r\x0c/:\t\x1f\xf0'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g2146
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g2153
sS'block_loop.thisRepN'
p3118
I0
sg907
g1197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.65034990155618289
sg34
g753
(S'\x07\xdf\x07\r\x0c0\x04\x0e8\xa0'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g980
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g988
sS'block_loop.thisRepN'
p3131
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.89993608088479959
sg34
g753
(S'\x07\xdf\x07\r\x0c0\n\t\x8dP'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1112
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1031
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1119
sS'block_loop.thisRepN'
p3144
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F4.3499192315575783
sg34
g753
(S'\x07\xdf\x07\r\x0c0\x10\x08t\x10'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g997
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1004
sS'block_loop.thisRepN'
p3157
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.0332048678883439
sg34
g753
(S'\x07\xdf\x07\r\x0c0\x19\x0ekh'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1044
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1052
sS'block_loop.thisRepN'
p3170
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.71655465141338937
sg34
g753
(S'\x07\xdf\x07\r\x0c0\x1f\x0f:p'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1140
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1148
sS'block_loop.thisRepN'
p3183
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.7500181037648872
sg34
g753
(S'\x07\xdf\x07\r\x0c0%\x0b\x81P'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g2025
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g2032
sS'block_loop.thisRepN'
p3196
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.81661857052677078
sg34
g753
(S'\x07\xdf\x07\r\x0c0+\x08E0'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1824
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1783
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1831
sS'block_loop.thisRepN'
p3209
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.5166477646271233
sg34
g753
(S'\x07\xdf\x07\r\x0c01\x05\xfb@'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g980
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g988
sS'block_loop.thisRepN'
p3222
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.5499028098747658
sg34
g753
(S'\x07\xdf\x07\r\x0c07\x0eg\x80'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g997
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1004
sS'block_loop.thisRepN'
p3235
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.99996892424860562
sg34
g753
(S'\x07\xdf\x07\r\x0c1\x02\x08\n\x98'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g2118
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g2125
sS'block_loop.thisRepN'
p3248
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.0999649898876669
sg34
g753
(S'\x07\xdf\x07\r\x0c1\x08\x08`\x88'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1501
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1374
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1508
sS'block_loop.thisRepN'
p3261
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F2.4666243580286391
sg34
g753
(S'\x07\xdf\x07\r\x0c1\x0e\n\x9a\xd8'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1044
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1052
sS'block_loop.thisRepN'
p3274
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.91620266863719735
sg34
g753
(S'\x07\xdf\x07\r\x0c1\x16\x02\xca\xd8'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g933
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g941
sS'block_loop.thisRepN'
p3287
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.88336101641107234
sg34
g753
(S'\x07\xdf\x07\r\x0c1\x1c\x02*\xb0'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1779
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1783
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1787
sS'block_loop.thisRepN'
p3300
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.86667504856632149
sg34
g753
(S'\x07\xdf\x07\r\x0c1"\x00\xd6\xd8'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1012
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1019
sS'block_loop.thisRepN'
p3313
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.68376175105186121
sg34
g753
(S"\x07\xdf\x07\r\x0c1'\x0e\x86\xc0"
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1204
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1211
sS'block_loop.thisRepN'
p3326
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.68301935420458904
sg34
g753
(S'\x07\xdf\x07\r\x0c1-\nT\x88'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1363
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1371
sS'block_loop.thisRepN'
p3339
I0
sg907
g1367
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1374
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.8332674755492917
sg34
g753
(S'\x07\xdf\x07\r\x0c13\x05\xe7\xb8'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1878
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1882
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1886
sS'block_loop.thisRepN'
p3352
I0
sg907
g1882
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1889
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F1.3499160954706895
sg34
g753
(S'\x07\xdf\x07\r\x0c19\x03\xd8`'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1764
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1771
sS'block_loop.thisRepN'
p3365
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.7833119224251277
sg34
g753
(S'\x07\xdf\x07\r\x0c2\x03\t\xa8\xa8'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1027
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1031
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1035
sS'block_loop.thisRepN'
p3378
I0
sg907
g1031
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1038
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F2.366601493118651
sg34
g753
(S'\x07\xdf\x07\r\x0c2\t\x06\xe1\xb8'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1736
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1743
sS'block_loop.thisRepN'
p3391
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.78323523089238734
sg34
g753
(S'\x07\xdf\x07\r\x0c2\x10\r#H'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1307
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1315
sS'block_loop.thisRepN'
p3404
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.5666318276125821
sg34
g753
(S'\x07\xdf\x07\r\x0c2\x16\n%\xa8'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1078
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1086
sS'block_loop.thisRepN'
p3417
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F0.8331856522399903
sg34
g753
(S'\x07\xdf\x07\r\x0c2\x1d\x04\x03X'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1264
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1271
sS'block_loop.thisRepN'
p3430
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.83314659372808819
sg34
g753
(S'\x07\xdf\x07\r\x0c2#\x026h'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g2118
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g2125
sS'block_loop.thisRepN'
p3443
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.91665911155178037
sg34
g753
(S"\x07\xdf\x07\r\x0c2)\x00'\x10"
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1170
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1174
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1178
sS'block_loop.thisRepN'
p3456
I0
sg907
g1174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1181
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.78307557565676689
sg34
g753
(S'\x07\xdf\x07\r\x0c2.\x0e\x8e\x90'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1219
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1226
sS'block_loop.thisRepN'
p3469
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1144
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.86658182131213835
sg34
g753
(S'\x07\xdf\x07\r\x0c24\x0b\xcb\x88'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1809
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1520
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1816
sS'block_loop.thisRepN'
p3482
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F1.9832903689675732
sg34
g753
(S'\x07\xdf\x07\r\x0c2:\n5H'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1639
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1650
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1647
sS'block_loop.thisRepN'
p3495
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F3.2999499936995562
sg34
g753
(S'\x07\xdf\x07\r\x0c3\x05\n\x83h'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1421
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1428
sS'block_loop.thisRepN'
p3508
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.66676873197866371
sg34
g753
(S'\x07\xdf\x07\r\x0c3\x0e\x00N '
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1078
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1086
sS'block_loop.thisRepN'
p3521
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.68335120901792834
sg34
g753
(S'\x07\xdf\x07\r\x0c3\x13\n\xe5\x10'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1393
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1400
sS'block_loop.thisRepN'
p3534
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.74992117022702587
sg34
g753
(S'\x07\xdf\x07\r\x0c3\x19\x06\xb2\xd8'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1639
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1650
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1647
sS'block_loop.thisRepN'
p3547
I0
sg907
g1643
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1650
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.4998993601802795
sg34
g753
(S'\x07\xdf\x07\r\x0c3\x1f\x03v\xb8'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1307
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1315
sS'block_loop.thisRepN'
p3560
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.88329686921861139
sg34
g753
(S'\x07\xdf\x07\r\x0c3%\x0bi\xe0'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1247
sS'block_loop.thisIndex'
p3567
g889
sg38
S'left'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1255
sS'block_loop.thisRepN'
p3573
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.81663510624639457
sg34
g753
(S'\x07\xdf\x07\r\x0c3+\nP\xa0'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1764
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1082
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1771
sS'block_loop.thisRepN'
p3586
I0
sg907
g1082
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1089
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.98324589358162484
sg34
g753
(S'\x07\xdf\x07\r\x0c31\x08\x06\xb0'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1516
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1526
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1524
sS'block_loop.thisRepN'
p3599
I0
sg907
g1526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1520
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.4666813777566858
sg34
g753
(S'\x07\xdf\x07\r\x0c37\x08\x1e '
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1779
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1783
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1787
sS'block_loop.thisRepN'
p3612
I0
sg907
g1783
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1790
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.7166344790293806
sg34
g753
(S'\x07\xdf\x07\r\x0c4\x02\x00\x90\x88'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F300.80955240084404
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'22-daim.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'22-daim.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'7-olives.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'7-olives.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F0.76649623470257211
sg34
g753
(S'\x07\xdf\x07\r\x0c:\x06\x0cc\xe0'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'27-hartleys_raspberries_jelly.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'51-mars.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'51-mars.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.88321305021963781
sg34
g753
(S"\x07\xdf\x07\r\x0c:\x0c\t'\xc0"
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'50-polo.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'50-polo.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'48-twix.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
S'48-twix.png'
p3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3682
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.0833696834088187
sg34
g753
(S'\x07\xdf\x07\r\x0c:\x12\x07\xd0\x00'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'45-chewy_nougat_redo.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'45-chewy_nougat_redo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'41-peanuts_redo.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'41-peanuts_redo.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.2332152454782772
sg34
g753
(S'\x07\xdf\x07\r\x0c:\x18\t\x918'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'18-mms.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'left'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'18-mms.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.95000766915291024
sg34
g753
(S'\x07\xdf\x07\r\x0c:\x1e\r\xb7\xb8'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'41-peanuts_redo.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p3726
g60
(g99
S'\x05\x00\x00\x00'
tRp3727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3728
I0
sg3642
S'45-chewy_nougat_redo.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3731
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p3732
Nsg70
Vn
sS'block_loop.thisTrialN'
p3733
I0
sg39
F0.91701833583283587
sg34
g753
(S'\x07\xdf\x07\r\x0c:$\r\x90\xa8'
tRp3734
sa(dp3735
S'trial_loop.thisTrialN'
p3736
I6
sg3633
S'23-crunchie_redo.png'
p3737
sS'block_loop.thisIndex'
p3738
g3627
sg38
S'left'
p3739
sg59
g63
sS'trial_loop.thisN'
p3740
I6
sg33
S'23-crunchie_redo.png'
p3741
sg64
g65
sS'trial_loop.thisIndex'
p3742
g60
(g99
S'\x06\x00\x00\x00'
tRp3743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3744
I0
sg3642
S'33-ambrosia_rice.png'
p3745
sS'block_loop.thisRepN'
p3746
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3747
I1
sg3647
S'33-ambrosia_rice.png'
p3748
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vn
sS'block_loop.thisTrialN'
p3750
I0
sg39
F2.0332752872509445
sg34
g753
(S'\x07\xdf\x07\r\x0c:*\x0c\xb5\xe8'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'31-hobnobs.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'left'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'31-hobnobs.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'25-kitkat.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3764
I1
sg3647
S'25-kitkat.png'
p3765
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vn
sS'block_loop.thisTrialN'
p3767
I0
sg39
F0.84998965092017897
sg34
g753
(S'\x07\xdf\x07\r\x0c:1\r\xb7\xb8'
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'20-fruit_pastilles.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'right'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
S'2-steamed_puddings.png'
p3775
sg64
g65
sS'trial_loop.thisIndex'
p3776
g60
(g99
S'\x08\x00\x00\x00'
tRp3777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3778
I0
sg3642
S'2-steamed_puddings.png'
p3779
sS'block_loop.thisRepN'
p3780
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3781
I1
sg3647
S'20-fruit_pastilles.png'
p3782
sg55
g11
sS'block_loop.thisTrial'
p3783
Nsg70
Vn
sS'block_loop.thisTrialN'
p3784
I0
sg39
F0.84989414287701948
sg34
g753
(S'\x07\xdf\x07\r\x0c:7\x0b\xea\xc8'
tRp3785
sa(dp3786
S'trial_loop.thisTrialN'
p3787
I9
sg3633
g3688
sS'block_loop.thisIndex'
p3788
g3627
sg38
S'left'
p3789
sg59
g63
sS'trial_loop.thisN'
p3790
I9
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p3791
g60
(g99
S'\t\x00\x00\x00'
tRp3792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3793
I0
sg3642
g3696
sS'block_loop.thisRepN'
p3794
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3795
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p3796
Nsg70
Vn
sS'block_loop.thisTrialN'
p3797
I0
sg39
F1.0499866288737394
sg34
g753
(S'\x07\xdf\x07\r\x0c;\x01\n\x19\xf0'
tRp3798
sa(dp3799
S'trial_loop.thisTrialN'
p3800
I10
sg3633
S'1-treacle_cookies.png'
p3801
sS'block_loop.thisIndex'
p3802
g3627
sg38
S'left'
p3803
sg59
g63
sS'trial_loop.thisN'
p3804
I10
sg33
S'1-treacle_cookies.png'
p3805
sg64
g65
sS'trial_loop.thisIndex'
p3806
g60
(g99
S'\n\x00\x00\x00'
tRp3807
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3808
I0
sg3642
S'21-nakd_banana_crunch.png'
p3809
sS'block_loop.thisRepN'
p3810
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3811
I1
sg3647
S'21-nakd_banana_crunch.png'
p3812
sg55
g11
sS'block_loop.thisTrial'
p3813
Nsg70
Vn
sS'block_loop.thisTrialN'
p3814
I0
sg39
F1.133471207032926
sg34
g753
(S'\x07\xdf\x07\r\x0c;\x07\x0bb\x10'
tRp3815
sa(dp3816
S'trial_loop.thisTrialN'
p3817
I11
sg3633
S'16-skips_prawn.png'
p3818
sS'block_loop.thisIndex'
p3819
g3627
sg38
S'right'
p3820
sg59
g63
sS'trial_loop.thisN'
p3821
I11
sg33
S'42-mrkipling_lemon_slices.png'
p3822
sg64
g65
sS'trial_loop.thisIndex'
p3823
g60
(g99
S'\x0b\x00\x00\x00'
tRp3824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3825
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3826
sS'block_loop.thisRepN'
p3827
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3828
I1
sg3647
S'16-skips_prawn.png'
p3829
sg55
g11
sS'block_loop.thisTrial'
p3830
Nsg70
Vn
sS'block_loop.thisTrialN'
p3831
I0
sg39
F0.78311520436727733
sg34
g753
(S'\x07\xdf\x07\r\x0c;\r\x0e\x19`'
tRp3832
sa(dp3833
S'trial_loop.thisTrialN'
p3834
I12
sg3633
S'21-nakd_banana_crunch.png'
p3835
sS'block_loop.thisIndex'
p3836
g3627
sg38
S'right'
p3837
sg59
g63
sS'trial_loop.thisN'
p3838
I12
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p3839
g60
(g99
S'\x0c\x00\x00\x00'
tRp3840
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3841
I0
sg3642
S'1-treacle_cookies.png'
p3842
sS'block_loop.thisRepN'
p3843
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3844
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vn
sS'block_loop.thisTrialN'
p3846
I0
sg39
F1.0665511446986784
sg34
g753
(S'\x07\xdf\x07\r\x0c;\x13\x0b\x17\xd8'
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
S'49-yorkie.png'
p3850
sS'block_loop.thisIndex'
p3851
g3627
sg38
S'left'
p3852
sg59
g63
sS'trial_loop.thisN'
p3853
I13
sg33
S'49-yorkie.png'
p3854
sg64
g65
sS'trial_loop.thisIndex'
p3855
g60
(g99
S'\r\x00\x00\x00'
tRp3856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3857
I0
sg3642
S'35-raisins.png'
p3858
sS'block_loop.thisRepN'
p3859
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3860
I1
sg3647
S'35-raisins.png'
p3861
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vn
sS'block_loop.thisTrialN'
p3863
I0
sg39
F1.2165894334466429
sg34
g753
(S'\x07\xdf\x07\r\x0c;\x19\x0c\x9a\x90'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
g3705
sS'block_loop.thisIndex'
p3867
g3627
sg38
S'left'
p3868
sg59
g63
sS'trial_loop.thisN'
p3869
I14
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
g3713
sS'block_loop.thisRepN'
p3873
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vn
sS'block_loop.thisTrialN'
p3876
I0
sg39
F1.0665825055493769
sg34
g753
(S'\x07\xdf\x07\r\x0c; \x01@P'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'6-sour_patch_kids.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'right'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
S'38-maltesers.png'
p3884
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
S'38-maltesers.png'
p3888
sS'block_loop.thisRepN'
p3889
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3890
I1
sg3647
S'6-sour_patch_kids.png'
p3891
sg55
g11
sS'block_loop.thisTrial'
p3892
Nsg70
Vn
sS'block_loop.thisTrialN'
p3893
I0
sg39
F0.81672320172583568
sg34
g753
(S'\x07\xdf\x07\r\x0c;&\x02\xc6\xf0'
tRp3894
sa(dp3895
S'trial_loop.thisTrialN'
p3896
I16
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3897
sS'block_loop.thisIndex'
p3898
g3627
sg38
S'left'
p3899
sg59
g63
sS'trial_loop.thisN'
p3900
I16
sg33
S'36-fig_rolls.png'
p3901
sg64
g65
sS'trial_loop.thisIndex'
p3902
g60
(g99
S'\x10\x00\x00\x00'
tRp3903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3904
I0
sg3642
S'36-fig_rolls.png'
p3905
sS'block_loop.thisRepN'
p3906
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3907
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3908
sg55
g11
sS'block_loop.thisTrial'
p3909
Nsg70
Vn
sS'block_loop.thisTrialN'
p3910
I0
sg39
F1.0332162718332256
sg34
g753
(S'\x07\xdf\x07\r\x0c;,\x00}\x00'
tRp3911
sa(dp3912
S'trial_loop.thisTrialN'
p3913
I17
sg3633
S'44-crunch.png'
p3914
sS'block_loop.thisIndex'
p3915
g3627
sg38
S'left'
p3916
sg59
g63
sS'trial_loop.thisN'
p3917
I17
sg33
S'44-crunch.png'
p3918
sg64
g65
sS'trial_loop.thisIndex'
p3919
g60
(g99
S'\x11\x00\x00\x00'
tRp3920
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3921
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3922
sS'block_loop.thisRepN'
p3923
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3924
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3925
sg55
g11
sS'block_loop.thisTrial'
p3926
Nsg70
Vn
sS'block_loop.thisTrialN'
p3927
I0
sg39
F0.78337207823824428
sg34
g753
(S'\x07\xdf\x07\r\x0c;2\x01\x86\xa0'
tRp3928
sa(dp3929
S'trial_loop.thisTrialN'
p3930
I18
sg3633
S'30-spaghetti_hoops.png'
p3931
sS'block_loop.thisIndex'
p3932
g3627
sg38
S'right'
p3933
sg59
g63
sS'trial_loop.thisN'
p3934
I18
sg33
S'19-caramello_redo.png'
p3935
sg64
g65
sS'trial_loop.thisIndex'
p3936
g60
(g99
S'\x12\x00\x00\x00'
tRp3937
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3938
I0
sg3642
S'19-caramello_redo.png'
p3939
sS'block_loop.thisRepN'
p3940
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3941
I1
sg3647
S'30-spaghetti_hoops.png'
p3942
sg55
g11
sS'block_loop.thisTrial'
p3943
Nsg70
Vn
sS'block_loop.thisTrialN'
p3944
I0
sg39
F1.8832064929501939
sg34
g753
(S'\x07\xdf\x07\r\x0c;7\x0e\x05\xd8'
tRp3945
sa(dp3946
S'trial_loop.thisTrialN'
p3947
I19
sg3633
S'42-mrkipling_lemon_slices.png'
p3948
sS'block_loop.thisIndex'
p3949
g3627
sg38
S'left'
p3950
sg59
g63
sS'trial_loop.thisN'
p3951
I19
sg33
g3829
sg64
g65
sS'trial_loop.thisIndex'
p3952
g60
(g99
S'\x13\x00\x00\x00'
tRp3953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3954
I0
sg3642
S'16-skips_prawn.png'
p3955
sS'block_loop.thisRepN'
p3956
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3957
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p3958
Nsg70
Vn
sS'block_loop.thisTrialN'
p3959
I0
sg39
F0.7163716180875781
sg34
g753
(S'\x07\xdf\x07\r\r\x00\x02\x0c\xaa0'
tRp3960
sa(dp3961
S'trial_loop.thisTrialN'
p3962
I20
sg3633
S'10-bounty_redo.png'
p3963
sS'block_loop.thisIndex'
p3964
g3627
sg38
S'left'
p3965
sg59
g63
sS'trial_loop.thisN'
p3966
I20
sg33
S'10-bounty_redo.png'
p3967
sg64
g65
sS'trial_loop.thisIndex'
p3968
g60
(g99
S'\x14\x00\x00\x00'
tRp3969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3970
I0
sg3642
S'4-corn.png'
p3971
sS'block_loop.thisRepN'
p3972
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3973
I1
sg3647
S'4-corn.png'
p3974
sg55
g11
sS'block_loop.thisTrial'
p3975
Nsg70
Vn
sS'block_loop.thisTrialN'
p3976
I0
sg39
F2.7332497424122266
sg34
g753
(S'\x07\xdf\x07\r\r\x00\x08\x08\xf1\x10'
tRp3977
sa(dp3978
S'trial_loop.thisTrialN'
p3979
I21
sg3633
g3634
sS'block_loop.thisIndex'
p3980
g3627
sg38
S'left'
p3981
sg59
g63
sS'trial_loop.thisN'
p3982
I21
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3983
g60
(g99
S'\x15\x00\x00\x00'
tRp3984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3985
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3986
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3987
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3988
Nsg70
Vn
sS'block_loop.thisTrialN'
p3989
I0
sg39
F0.69994052842412202
sg34
g753
(S'\x07\xdf\x07\r\r\x00\x10\x05j\xb8'
tRp3990
sa(dp3991
S'trial_loop.thisTrialN'
p3992
I22
sg3633
g3835
sS'block_loop.thisIndex'
p3993
g3627
sg38
S'right'
p3994
sg59
g63
sS'trial_loop.thisN'
p3995
I22
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p3996
g60
(g99
S'\x16\x00\x00\x00'
tRp3997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3998
I0
sg3642
g3842
sS'block_loop.thisRepN'
p3999
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4000
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p4001
Nsg70
Vn
sS'block_loop.thisTrialN'
p4002
I0
sg39
F0.68325769666626002
sg34
g753
(S'\x07\xdf\x07\r\r\x00\x16\x018\x80'
tRp4003
sa(dp4004
S'trial_loop.thisTrialN'
p4005
I23
sg3633
g3880
sS'block_loop.thisIndex'
p4006
g3627
sg38
S'right'
p4007
sg59
g63
sS'trial_loop.thisN'
p4008
I23
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4009
g60
(g99
S'\x17\x00\x00\x00'
tRp4010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4011
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4012
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4013
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4014
Nsg70
Vn
sS'block_loop.thisTrialN'
p4015
I0
sg39
F0.76634741321504407
sg34
g753
(S'\x07\xdf\x07\r\r\x00\x1b\x0cH\x88'
tRp4016
sa(dp4017
S'trial_loop.thisTrialN'
p4018
I24
sg3633
g3914
sS'block_loop.thisIndex'
p4019
g3627
sg38
S'left'
p4020
sg59
g63
sS'trial_loop.thisN'
p4021
I24
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4022
g60
(g99
S'\x18\x00\x00\x00'
tRp4023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4024
I0
sg3642
g3922
sS'block_loop.thisRepN'
p4025
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4026
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4027
Nsg70
Vn
sS'block_loop.thisTrialN'
p4028
I0
sg39
F0.61663214122199861
sg34
g753
(S'\x07\xdf\x07\r\r\x00!\t\x0ch'
tRp4029
sa(dp4030
S'trial_loop.thisTrialN'
p4031
I25
sg3633
S'38-maltesers.png'
p4032
sS'block_loop.thisIndex'
p4033
g3627
sg38
S'left'
p4034
sg59
g63
sS'trial_loop.thisN'
p4035
I25
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4036
g60
(g99
S'\x19\x00\x00\x00'
tRp4037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4038
I0
sg3642
S'6-sour_patch_kids.png'
p4039
sS'block_loop.thisRepN'
p4040
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4041
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4042
Nsg70
Vn
sS'block_loop.thisTrialN'
p4043
I0
sg39
F0.64974577754583152
sg34
g753
(S"\x07\xdf\x07\r\r\x00'\x03\xe8\x00"
tRp4044
sa(dp4045
S'trial_loop.thisTrialN'
p4046
I26
sg3633
S'35-raisins.png'
p4047
sS'block_loop.thisIndex'
p4048
g3627
sg38
S'right'
p4049
sg59
g63
sS'trial_loop.thisN'
p4050
I26
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4051
g60
(g99
S'\x1a\x00\x00\x00'
tRp4052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4053
I0
sg3642
S'49-yorkie.png'
p4054
sS'block_loop.thisRepN'
p4055
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4056
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4057
Nsg70
Vn
sS'block_loop.thisTrialN'
p4058
I0
sg39
F0.96655964063938882
sg34
g753
(S'\x07\xdf\x07\r\r\x00,\x0e@p'
tRp4059
sa(dp4060
S'trial_loop.thisTrialN'
p4061
I27
sg3633
g3963
sS'block_loop.thisIndex'
p4062
g3627
sg38
S'left'
p4063
sg59
g63
sS'trial_loop.thisN'
p4064
I27
sg33
g3967
sg64
g65
sS'trial_loop.thisIndex'
p4065
g60
(g99
S'\x1b\x00\x00\x00'
tRp4066
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4067
I0
sg3642
g3971
sS'block_loop.thisRepN'
p4068
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4069
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p4070
Nsg70
Vn
sS'block_loop.thisTrialN'
p4071
I0
sg39
F0.74988125641903025
sg34
g753
(S'\x07\xdf\x07\r\r\x002\x0eW\xe0'
tRp4072
sa(dp4073
S'trial_loop.thisTrialN'
p4074
I28
sg3633
g3914
sS'block_loop.thisIndex'
p4075
g3627
sg38
S'left'
p4076
sg59
g63
sS'trial_loop.thisN'
p4077
I28
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4078
g60
(g99
S'\x1c\x00\x00\x00'
tRp4079
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4080
I0
sg3642
g3922
sS'block_loop.thisRepN'
p4081
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4082
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4083
Nsg70
Vn
sS'block_loop.thisTrialN'
p4084
I0
sg39
F0.84990440642650356
sg34
g753
(S'\x07\xdf\x07\r\r\x008\n\xdd@'
tRp4085
sa(dp4086
S'trial_loop.thisTrialN'
p4087
I29
sg3633
S'36-fig_rolls.png'
p4088
sS'block_loop.thisIndex'
p4089
g3627
sg38
S'right'
p4090
sg59
g63
sS'trial_loop.thisN'
p4091
I29
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p4092
g60
(g99
S'\x1d\x00\x00\x00'
tRp4093
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4094
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4095
sS'block_loop.thisRepN'
p4096
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4097
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4098
Nsg70
Vn
sS'block_loop.thisTrialN'
p4099
I0
sg39
F0.74977662521814636
sg34
g753
(S'\x07\xdf\x07\r\r\x01\x02\t\x0ch'
tRp4100
sa(dp4101
S'trial_loop.thisTrialN'
p4102
I30
sg3633
g3771
sS'block_loop.thisIndex'
p4103
g3627
sg38
S'right'
p4104
sg59
g63
sS'trial_loop.thisN'
p4105
I30
sg33
g3782
sg64
g65
sS'trial_loop.thisIndex'
p4106
g60
(g99
S'\x1e\x00\x00\x00'
tRp4107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4108
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4109
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4110
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4111
Nsg70
Vn
sS'block_loop.thisTrialN'
p4112
I0
sg39
F0.9998945135048416
sg34
g753
(S'\x07\xdf\x07\r\r\x01\x08\x05\xd0H'
tRp4113
sa(dp4114
S'trial_loop.thisTrialN'
p4115
I31
sg3633
S'4-corn.png'
p4116
sS'block_loop.thisIndex'
p4117
g3627
sg38
S'left'
p4118
sg59
g63
sS'trial_loop.thisN'
p4119
I31
sg33
g3967
sg64
g65
sS'trial_loop.thisIndex'
p4120
g60
(g99
S'\x1f\x00\x00\x00'
tRp4121
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4122
I0
sg3642
S'10-bounty_redo.png'
p4123
sS'block_loop.thisRepN'
p4124
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4125
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p4126
Nsg70
Vn
sS'block_loop.thisTrialN'
p4127
I0
sg39
F0.68322091893969628
sg34
g753
(S'\x07\xdf\x07\r\r\x01\x0e\x06`\xd0'
tRp4128
sa(dp4129
S'trial_loop.thisTrialN'
p4130
I32
sg3633
S'13-mccoys_steak_crisps.png'
p4131
sS'block_loop.thisIndex'
p4132
g3627
sg38
S'right'
p4133
sg59
g63
sS'trial_loop.thisN'
p4134
I32
sg33
S'3-ellas_strawberries_apples.png'
p4135
sg64
g65
sS'trial_loop.thisIndex'
p4136
g60
(g99
S' \x00\x00\x00'
tRp4137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4138
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4139
sS'block_loop.thisRepN'
p4140
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4141
I1
sg3647
S'13-mccoys_steak_crisps.png'
p4142
sg55
g11
sS'block_loop.thisTrial'
p4143
Nsg70
Vn
sS'block_loop.thisTrialN'
p4144
I0
sg39
F1.3337190717866179
sg34
g753
(S'\x07\xdf\x07\r\r\x01\x14\x01\xf4\x00'
tRp4145
sa(dp4146
S'trial_loop.thisTrialN'
p4147
I33
sg3633
S'7-olives.png'
p4148
sS'block_loop.thisIndex'
p4149
g3627
sg38
S'right'
p4150
sg59
g63
sS'trial_loop.thisN'
p4151
I33
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4152
g60
(g99
S'!\x00\x00\x00'
tRp4153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4154
I0
sg3642
S'22-daim.png'
p4155
sS'block_loop.thisRepN'
p4156
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4157
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg70
Vn
sS'block_loop.thisTrialN'
p4159
I0
sg39
F0.64987464213118074
sg34
g753
(S'\x07\xdf\x07\r\r\x01\x1a\x07\x85\xc8'
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I34
sg3633
g3737
sS'block_loop.thisIndex'
p4163
g3627
sg38
S'left'
p4164
sg59
g63
sS'trial_loop.thisN'
p4165
I34
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4166
g60
(g99
S'"\x00\x00\x00'
tRp4167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4168
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4169
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4170
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4171
Nsg70
Vn
sS'block_loop.thisTrialN'
p4172
I0
sg39
F1.616636132603162
sg34
g753
(S'\x07\xdf\x07\r\r\x01 \x02\xdax'
tRp4173
sa(dp4174
S'trial_loop.thisTrialN'
p4175
I35
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4176
sS'block_loop.thisIndex'
p4177
g3627
sg38
S'right'
p4178
sg59
g63
sS'trial_loop.thisN'
p4179
I35
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4180
g60
(g99
S'#\x00\x00\x00'
tRp4181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4182
I0
sg3642
S'18-mms.png'
p4183
sS'block_loop.thisRepN'
p4184
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4185
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4186
Nsg70
Vn
sS'block_loop.thisTrialN'
p4187
I0
sg39
F0.80001100480694731
sg34
g753
(S'\x07\xdf\x07\r\r\x01&\x0c\xb2\x00'
tRp4188
sa(dp4189
S'trial_loop.thisTrialN'
p4190
I36
sg3633
g3654
sS'block_loop.thisIndex'
p4191
g3627
sg38
S'right'
p4192
sg59
g63
sS'trial_loop.thisN'
p4193
I36
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4194
g60
(g99
S'$\x00\x00\x00'
tRp4195
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4196
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4197
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4198
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4199
Nsg70
Vn
sS'block_loop.thisTrialN'
p4200
I0
sg39
F2.4832014181938575
sg34
g753
(S'\x07\xdf\x07\r\r\x01,\n-x'
tRp4201
sa(dp4202
S'trial_loop.thisTrialN'
p4203
I37
sg3633
g3850
sS'block_loop.thisIndex'
p4204
g3627
sg38
S'left'
p4205
sg59
g63
sS'trial_loop.thisN'
p4206
I37
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4207
g60
(g99
S'%\x00\x00\x00'
tRp4208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4209
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4210
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4211
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4212
Nsg70
Vn
sS'block_loop.thisTrialN'
p4213
I0
sg39
F0.71704159988257743
sg34
g753
(S'\x07\xdf\x07\r\r\x014\x02\xd6\x90'
tRp4214
sa(dp4215
S'trial_loop.thisTrialN'
p4216
I38
sg3633
g3948
sS'block_loop.thisIndex'
p4217
g3627
sg38
S'left'
p4218
sg59
g63
sS'trial_loop.thisN'
p4219
I38
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p4220
g60
(g99
S'&\x00\x00\x00'
tRp4221
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4222
I0
sg3642
g3955
sS'block_loop.thisRepN'
p4223
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4224
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4225
Nsg70
Vn
sS'block_loop.thisTrialN'
p4226
I0
sg39
F0.76645432520308532
sg34
g753
(S'\x07\xdf\x07\r\r\x019\x0e%\x18'
tRp4227
sa(dp4228
S'trial_loop.thisTrialN'
p4229
I39
sg3633
S'48-twix.png'
p4230
sS'block_loop.thisIndex'
p4231
g3627
sg38
S'left'
p4232
sg59
g63
sS'trial_loop.thisN'
p4233
I39
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4234
g60
(g99
S"'\x00\x00\x00"
tRp4235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4236
I0
sg3642
S'50-polo.png'
p4237
sS'block_loop.thisRepN'
p4238
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4239
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4240
Nsg70
Vn
sS'block_loop.thisTrialN'
p4241
I0
sg39
F0.78331448831340822
sg34
g753
(S'\x07\xdf\x07\r\r\x02\x03\x0b#\x90'
tRp4242
sa(dp4243
S'trial_loop.thisTrialN'
p4244
I40
sg3633
g4032
sS'block_loop.thisIndex'
p4245
g3627
sg38
S'left'
p4246
sg59
g63
sS'trial_loop.thisN'
p4247
I40
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4248
g60
(g99
S'(\x00\x00\x00'
tRp4249
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4250
I0
sg3642
g4039
sS'block_loop.thisRepN'
p4251
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4252
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4253
Nsg70
Vn
sS'block_loop.thisTrialN'
p4254
I0
sg39
F0.59946806296647992
sg34
g753
(S'\x07\xdf\x07\r\r\x02\t\x08`\x88'
tRp4255
sa(dp4256
S'trial_loop.thisTrialN'
p4257
I41
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4258
sS'block_loop.thisIndex'
p4259
g3627
sg38
S'left'
p4260
sg59
g63
sS'trial_loop.thisN'
p4261
I41
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4262
sg64
g65
sS'trial_loop.thisIndex'
p4263
g60
(g99
S')\x00\x00\x00'
tRp4264
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4265
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4266
sS'block_loop.thisRepN'
p4267
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4268
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p4269
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vn
sS'block_loop.thisTrialN'
p4271
I0
sg39
F0.91666310293294373
sg34
g753
(S'\x07\xdf\x07\r\r\x02\x0f\x02\xbf '
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
S'25-kitkat.png'
p4275
sS'block_loop.thisIndex'
p4276
g3627
sg38
S'left'
p4277
sg59
g63
sS'trial_loop.thisN'
p4278
I42
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4279
g60
(g99
S'*\x00\x00\x00'
tRp4280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4281
I0
sg3642
S'31-hobnobs.png'
p4282
sS'block_loop.thisRepN'
p4283
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4284
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4285
Nsg70
Vn
sS'block_loop.thisTrialN'
p4286
I0
sg39
F0.4832162433231133
sg34
g753
(S'\x07\xdf\x07\r\r\x02\x15\x01\xe4`'
tRp4287
sa(dp4288
S'trial_loop.thisTrialN'
p4289
I43
sg3633
g3634
sS'block_loop.thisIndex'
p4290
g3627
sg38
S'left'
p4291
sg59
g63
sS'trial_loop.thisN'
p4292
I43
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4293
g60
(g99
S'+\x00\x00\x00'
tRp4294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4295
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4296
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4297
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4298
Nsg70
Vn
sS'block_loop.thisTrialN'
p4299
I0
sg39
F0.60028458545821195
sg34
g753
(S'\x07\xdf\x07\r\r\x02\x1a\t\xdbp'
tRp4300
sa(dp4301
S'trial_loop.thisTrialN'
p4302
I44
sg3633
g4176
sS'block_loop.thisIndex'
p4303
g3627
sg38
S'right'
p4304
sg59
g63
sS'trial_loop.thisN'
p4305
I44
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4306
g60
(g99
S',\x00\x00\x00'
tRp4307
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4308
I0
sg3642
g4183
sS'block_loop.thisRepN'
p4309
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4310
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4311
Nsg70
Vn
sS'block_loop.thisTrialN'
p4312
I0
sg39
F0.76676080623474263
sg34
g753
(S'\x07\xdf\x07\r\r\x02 \x04=\xf0'
tRp4313
sa(dp4314
S'trial_loop.thisTrialN'
p4315
I45
sg3633
g4258
sS'block_loop.thisIndex'
p4316
g3627
sg38
S'left'
p4317
sg59
g63
sS'trial_loop.thisN'
p4318
I45
sg33
g4262
sg64
g65
sS'trial_loop.thisIndex'
p4319
g60
(g99
S'-\x00\x00\x00'
tRp4320
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4321
I0
sg3642
g4266
sS'block_loop.thisRepN'
p4322
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4323
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p4324
Nsg70
Vn
sS'block_loop.thisTrialN'
p4325
I0
sg39
F0.71660568406878156
sg34
g753
(S'\x07\xdf\x07\r\r\x02&\x01<h'
tRp4326
sa(dp4327
S'trial_loop.thisTrialN'
p4328
I46
sg3633
g3671
sS'block_loop.thisIndex'
p4329
g3627
sg38
S'right'
p4330
sg59
g63
sS'trial_loop.thisN'
p4331
I46
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4332
g60
(g99
S'.\x00\x00\x00'
tRp4333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4334
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4335
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4336
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4337
Nsg70
Vn
sS'block_loop.thisTrialN'
p4338
I0
sg39
F0.96655222807385144
sg34
g753
(S'\x07\xdf\x07\r\r\x02+\x0c\xc5\x88'
tRp4339
sa(dp4340
S'trial_loop.thisTrialN'
p4341
I47
sg3633
S'46-pistachios.png'
p4342
sS'block_loop.thisIndex'
p4343
g3627
sg38
S'left'
p4344
sg59
g63
sS'trial_loop.thisN'
p4345
I47
sg33
S'46-pistachios.png'
p4346
sg64
g65
sS'trial_loop.thisIndex'
p4347
g60
(g99
S'/\x00\x00\x00'
tRp4348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4349
I0
sg3642
S'29-beans.png'
p4350
sS'block_loop.thisRepN'
p4351
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4352
I1
sg3647
S'29-beans.png'
p4353
sg55
g11
sS'block_loop.thisTrial'
p4354
Nsg70
Vn
sS'block_loop.thisTrialN'
p4355
I0
sg39
F0.99989023702619306
sg34
g753
(S'\x07\xdf\x07\r\r\x021\x0c\xa2`'
tRp4356
sa(dp4357
S'trial_loop.thisTrialN'
p4358
I48
sg3633
g3818
sS'block_loop.thisIndex'
p4359
g3627
sg38
S'right'
p4360
sg59
g63
sS'trial_loop.thisN'
p4361
I48
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p4362
g60
(g99
S'0\x00\x00\x00'
tRp4363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4364
I0
sg3642
g3826
sS'block_loop.thisRepN'
p4365
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4366
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4367
Nsg70
Vn
sS'block_loop.thisTrialN'
p4368
I0
sg39
F0.88315232420973189
sg34
g753
(S'\x07\xdf\x07\r\r\x027\r2\xe8'
tRp4369
sa(dp4370
S'trial_loop.thisTrialN'
p4371
I49
sg3633
g3722
sS'block_loop.thisIndex'
p4372
g3627
sg38
S'right'
p4373
sg59
g63
sS'trial_loop.thisN'
p4374
I49
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4375
g60
(g99
S'1\x00\x00\x00'
tRp4376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4377
I0
sg3642
g3729
sS'block_loop.thisRepN'
p4378
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4379
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4380
Nsg70
Vn
sS'block_loop.thisTrialN'
p4381
I0
sg39
F0.83367716228713107
sg34
g753
(S'\x07\xdf\x07\r\r\x03\x01\x0b\xdf\x10'
tRp4382
sa(dp4383
S'trial_loop.thisTrialN'
p4384
I50
sg3633
g3914
sS'block_loop.thisIndex'
p4385
g3627
sg38
S'left'
p4386
sg59
g63
sS'trial_loop.thisN'
p4387
I50
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4388
g60
(g99
S'2\x00\x00\x00'
tRp4389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4390
I0
sg3642
g3922
sS'block_loop.thisRepN'
p4391
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4392
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4393
Nsg70
Vn
sS'block_loop.thisTrialN'
p4394
I0
sg39
F0.73327283540311328
sg34
g753
(S'\x07\xdf\x07\r\r\x03\x07\t\xcf\xb8'
tRp4395
sa(dp4396
S'trial_loop.thisTrialN'
p4397
I51
sg3633
g3771
sS'block_loop.thisIndex'
p4398
g3627
sg38
S'right'
p4399
sg59
g63
sS'trial_loop.thisN'
p4400
I51
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4401
g60
(g99
S'3\x00\x00\x00'
tRp4402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4403
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4404
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4405
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4406
Nsg70
Vn
sS'block_loop.thisTrialN'
p4407
I0
sg39
F0.95002021349318966
sg34
g753
(S'\x07\xdf\x07\r\r\x03\r\x06U\x18'
tRp4408
sa(dp4409
S'trial_loop.thisTrialN'
p4410
I52
sg3633
g4230
sS'block_loop.thisIndex'
p4411
g3627
sg38
S'left'
p4412
sg59
g63
sS'trial_loop.thisN'
p4413
I52
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4414
g60
(g99
S'4\x00\x00\x00'
tRp4415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4416
I0
sg3642
g4237
sS'block_loop.thisRepN'
p4417
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4418
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4419
Nsg70
Vn
sS'block_loop.thisTrialN'
p4420
I0
sg39
F0.7499836068291188
sg34
g753
(S'\x07\xdf\x07\r\r\x03\x13\x05\xf3p'
tRp4421
sa(dp4422
S'trial_loop.thisTrialN'
p4423
I53
sg3633
g4148
sS'block_loop.thisIndex'
p4424
g3627
sg38
S'right'
p4425
sg59
g63
sS'trial_loop.thisN'
p4426
I53
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4427
g60
(g99
S'5\x00\x00\x00'
tRp4428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4429
I0
sg3642
g4155
sS'block_loop.thisRepN'
p4430
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4431
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4432
Nsg70
Vn
sS'block_loop.thisTrialN'
p4433
I0
sg39
F1.4000518309312611
sg34
g753
(S'\x07\xdf\x07\r\r\x03\x19\x02\xb7P'
tRp4434
sa(dp4435
S'trial_loop.thisTrialN'
p4436
I54
sg3633
S'51-mars.png'
p4437
sS'block_loop.thisIndex'
p4438
g3627
sg38
S'left'
p4439
sg59
g63
sS'trial_loop.thisN'
p4440
I54
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4441
g60
(g99
S'6\x00\x00\x00'
tRp4442
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4443
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4444
sS'block_loop.thisRepN'
p4445
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4446
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4447
Nsg70
Vn
sS'block_loop.thisTrialN'
p4448
I0
sg39
F0.96661295408375736
sg34
g753
(S'\x07\xdf\x07\r\r\x03\x1f\tu\xe0'
tRp4449
sa(dp4450
S'trial_loop.thisTrialN'
p4451
I55
sg3633
S'29-beans.png'
p4452
sS'block_loop.thisIndex'
p4453
g3627
sg38
S'left'
p4454
sg59
g63
sS'trial_loop.thisN'
p4455
I55
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p4456
g60
(g99
S'7\x00\x00\x00'
tRp4457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4458
I0
sg3642
S'46-pistachios.png'
p4459
sS'block_loop.thisRepN'
p4460
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4461
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p4462
Nsg70
Vn
sS'block_loop.thisTrialN'
p4463
I0
sg39
F0.98320426917962322
sg34
g753
(S'\x07\xdf\x07\r\r\x03%\tR\xb8'
tRp4464
sa(dp4465
S'trial_loop.thisTrialN'
p4466
I56
sg3633
S'26-walkers_smoky_bacon.png'
p4467
sS'block_loop.thisIndex'
p4468
g3627
sg38
S'right'
p4469
sg59
g63
sS'trial_loop.thisN'
p4470
I56
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4471
g60
(g99
S'8\x00\x00\x00'
tRp4472
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4473
I0
sg3642
S'44-crunch.png'
p4474
sS'block_loop.thisRepN'
p4475
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4476
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4477
Nsg70
Vn
sS'block_loop.thisTrialN'
p4478
I0
sg39
F0.98328409679925244
sg34
g753
(S'\x07\xdf\x07\r\r\x03+\t\xa4\xc0'
tRp4479
sa(dp4480
S'trial_loop.thisTrialN'
p4481
I57
sg3633
g4088
sS'block_loop.thisIndex'
p4482
g3627
sg38
S'right'
p4483
sg59
g63
sS'trial_loop.thisN'
p4484
I57
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p4485
g60
(g99
S'9\x00\x00\x00'
tRp4486
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4487
I0
sg3642
g4095
sS'block_loop.thisRepN'
p4488
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4489
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4490
Nsg70
Vn
sS'block_loop.thisTrialN'
p4491
I0
sg39
F0.91665740096141235
sg34
g753
(S'\x07\xdf\x07\r\r\x031\t\xfa\xb0'
tRp4492
sa(dp4493
S'trial_loop.thisTrialN'
p4494
I58
sg3633
g3850
sS'block_loop.thisIndex'
p4495
g3627
sg38
S'left'
p4496
sg59
g63
sS'trial_loop.thisN'
p4497
I58
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4498
g60
(g99
S':\x00\x00\x00'
tRp4499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4500
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4501
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4502
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg70
Vn
sS'block_loop.thisTrialN'
p4504
I0
sg39
F1.0332282459748967
sg34
g753
(S'\x07\xdf\x07\r\r\x037\t\x1f\xf0'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I59
sg3633
S'40-sardines.png'
p4508
sS'block_loop.thisIndex'
p4509
g3627
sg38
S'left'
p4510
sg59
g63
sS'trial_loop.thisN'
p4511
I59
sg33
S'5-pineapple.png'
p4512
sg64
g65
sS'trial_loop.thisIndex'
p4513
g60
(g99
S';\x00\x00\x00'
tRp4514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4515
I0
sg3642
S'5-pineapple.png'
p4516
sS'block_loop.thisRepN'
p4517
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4518
I1
sg3647
S'40-sardines.png'
p4519
sg55
g11
sS'block_loop.thisTrial'
p4520
Nsg70
Vn
sS'block_loop.thisTrialN'
p4521
I0
sg39
F3.883520956744178
sg34
g753
(S'\x07\xdf\x07\r\r\x04\x01\n)\x90'
tRp4522
sa(dp4523
S'trial_loop.thisTrialN'
p4524
I60
sg3633
g3835
sS'block_loop.thisIndex'
p4525
g3627
sg38
S'right'
p4526
sg59
g63
sS'trial_loop.thisN'
p4527
I60
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p4528
g60
(g99
S'<\x00\x00\x00'
tRp4529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4530
I0
sg3642
g3842
sS'block_loop.thisRepN'
p4531
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4532
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p4533
Nsg70
Vn
sS'block_loop.thisTrialN'
p4534
I0
sg39
F1.1999182907311479
sg34
g753
(S'\x07\xdf\x07\r\r\x04\n\x08\xc20'
tRp4535
sa(dp4536
S'trial_loop.thisTrialN'
p4537
I61
sg3633
S'19-caramello_redo.png'
p4538
sS'block_loop.thisIndex'
p4539
g3627
sg38
S'left'
p4540
sg59
g63
sS'trial_loop.thisN'
p4541
I61
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4542
g60
(g99
S'=\x00\x00\x00'
tRp4543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4544
I0
sg3642
S'30-spaghetti_hoops.png'
p4545
sS'block_loop.thisRepN'
p4546
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4547
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p4548
Nsg70
Vn
sS'block_loop.thisTrialN'
p4549
I0
sg39
F0.83334644787100842
sg34
g753
(S'\x07\xdf\x07\r\r\x04\x10\x0ck\xb0'
tRp4550
sa(dp4551
S'trial_loop.thisTrialN'
p4552
I62
sg3633
g3963
sS'block_loop.thisIndex'
p4553
g3627
sg38
S'left'
p4554
sg59
g63
sS'trial_loop.thisN'
p4555
I62
sg33
g3974
sg64
g65
sS'trial_loop.thisIndex'
p4556
g60
(g99
S'>\x00\x00\x00'
tRp4557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4558
I0
sg3642
g3971
sS'block_loop.thisRepN'
p4559
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4560
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p4561
Nsg70
Vn
sS'block_loop.thisTrialN'
p4562
I0
sg39
F1.8331924946069194
sg34
g753
(S'\x07\xdf\x07\r\r\x04\x16\n\\X'
tRp4563
sa(dp4564
S'trial_loop.thisTrialN'
p4565
I63
sg3633
g3671
sS'block_loop.thisIndex'
p4566
g3627
sg38
S'right'
p4567
sg59
g63
sS'trial_loop.thisN'
p4568
I63
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4569
g60
(g99
S'?\x00\x00\x00'
tRp4570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4571
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4572
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4573
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4574
Nsg70
Vn
sS'block_loop.thisTrialN'
p4575
I0
sg39
F1.4666406086507777
sg34
g753
(S'\x07\xdf\x07\r\r\x04\x1d\x08I\x18'
tRp4576
sa(dp4577
S'trial_loop.thisTrialN'
p4578
I64
sg3633
g3850
sS'block_loop.thisIndex'
p4579
g3627
sg38
S'left'
p4580
sg59
g63
sS'trial_loop.thisN'
p4581
I64
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4582
g60
(g99
S'@\x00\x00\x00'
tRp4583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4584
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4585
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4586
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4587
Nsg70
Vn
sS'block_loop.thisTrialN'
p4588
I0
sg39
F0.85018579878124001
sg34
g753
(S'\x07\xdf\x07\r\r\x04$\x00\xbb\x80'
tRp4589
sa(dp4590
S'trial_loop.thisTrialN'
p4591
I65
sg3633
g3818
sS'block_loop.thisIndex'
p4592
g3627
sg38
S'right'
p4593
sg59
g63
sS'trial_loop.thisN'
p4594
I65
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p4595
g60
(g99
S'A\x00\x00\x00'
tRp4596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4597
I0
sg3642
g3826
sS'block_loop.thisRepN'
p4598
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4599
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4600
Nsg70
Vn
sS'block_loop.thisTrialN'
p4601
I0
sg39
F1.1332177543463331
sg34
g753
(S'\x07\xdf\x07\r\r\x04)\x0e0\xd0'
tRp4602
sa(dp4603
S'trial_loop.thisTrialN'
p4604
I66
sg3633
S'33-ambrosia_rice.png'
p4605
sS'block_loop.thisIndex'
p4606
g3627
sg38
S'left'
p4607
sg59
g63
sS'trial_loop.thisN'
p4608
I66
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p4609
g60
(g99
S'B\x00\x00\x00'
tRp4610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4611
I0
sg3642
S'23-crunchie_redo.png'
p4612
sS'block_loop.thisRepN'
p4613
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4614
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4615
Nsg70
Vn
sS'block_loop.thisTrialN'
p4616
I0
sg39
F2.8831548900980124
sg34
g753
(S'\x07\xdf\x07\r\r\x040\x01g`'
tRp4617
sa(dp4618
S'trial_loop.thisTrialN'
p4619
I67
sg3633
g3722
sS'block_loop.thisIndex'
p4620
g3627
sg38
S'right'
p4621
sg59
g63
sS'trial_loop.thisN'
p4622
I67
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p4623
g60
(g99
S'C\x00\x00\x00'
tRp4624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4625
I0
sg3642
g3729
sS'block_loop.thisRepN'
p4626
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4627
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4628
Nsg70
Vn
sS'block_loop.thisTrialN'
p4629
I0
sg39
F1.1166386984896235
sg34
g753
(S'\x07\xdf\x07\r\r\x048\x00Bh'
tRp4630
sa(dp4631
S'trial_loop.thisTrialN'
p4632
I68
sg3633
g3634
sS'block_loop.thisIndex'
p4633
g3627
sg38
S'left'
p4634
sg59
g63
sS'trial_loop.thisN'
p4635
I68
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4636
g60
(g99
S'D\x00\x00\x00'
tRp4637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4638
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4639
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4640
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4641
Nsg70
Vn
sS'block_loop.thisTrialN'
p4642
I0
sg39
F0.63311825492382923
sg34
g753
(S'\x07\xdf\x07\r\r\x05\x02\x02|\xb8'
tRp4643
sa(dp4644
S'trial_loop.thisTrialN'
p4645
I69
sg3633
S'8-liquorice_catherine_wheels.png'
p4646
sS'block_loop.thisIndex'
p4647
g3627
sg38
S'right'
p4648
sg59
g63
sS'trial_loop.thisN'
p4649
I69
sg33
g4262
sg64
g65
sS'trial_loop.thisIndex'
p4650
g60
(g99
S'E\x00\x00\x00'
tRp4651
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4652
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4653
sS'block_loop.thisRepN'
p4654
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4655
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p4656
Nsg70
Vn
sS'block_loop.thisTrialN'
p4657
I0
sg39
F0.71671544704258849
sg34
g753
(S'\x07\xdf\x07\r\r\x05\x07\x0c\x9a\x90'
tRp4658
sa(dp4659
S'trial_loop.thisTrialN'
p4660
I70
sg3633
g3754
sS'block_loop.thisIndex'
p4661
g3627
sg38
S'left'
p4662
sg59
g63
sS'trial_loop.thisN'
p4663
I70
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4664
g60
(g99
S'F\x00\x00\x00'
tRp4665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4666
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4667
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4668
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4669
Nsg70
Vn
sS'block_loop.thisTrialN'
p4670
I0
sg39
F0.78334328327582625
sg34
g753
(S'\x07\xdf\x07\r\r\x05\r\x08\xe1p'
tRp4671
sa(dp4672
S'trial_loop.thisTrialN'
p4673
I71
sg3633
g4646
sS'block_loop.thisIndex'
p4674
g3627
sg38
S'right'
p4675
sg59
g63
sS'trial_loop.thisN'
p4676
I71
sg33
g4269
sg64
g65
sS'trial_loop.thisIndex'
p4677
g60
(g99
S'G\x00\x00\x00'
tRp4678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4679
I0
sg3642
g4653
sS'block_loop.thisRepN'
p4680
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4681
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p4682
Nsg70
Vn
sS'block_loop.thisTrialN'
p4683
I0
sg39
F2.3332526504182169
sg34
g753
(S'\x07\xdf\x07\r\r\x05\x13\x06\x1eh'
tRp4684
sa(dp4685
S'trial_loop.thisTrialN'
p4686
I72
sg3633
g4176
sS'block_loop.thisIndex'
p4687
g3627
sg38
S'left'
p4688
sg59
g63
sS'trial_loop.thisN'
p4689
I72
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4690
g60
(g99
S'H\x00\x00\x00'
tRp4691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4692
I0
sg3642
g4183
sS'block_loop.thisRepN'
p4693
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4694
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4695
Nsg70
Vn
sS'block_loop.thisTrialN'
p4696
I0
sg39
F0.58321715563943144
sg34
g753
(S'\x07\xdf\x07\r\r\x05\x1a\x0b\xa8`'
tRp4697
sa(dp4698
S'trial_loop.thisTrialN'
p4699
I73
sg3633
g3818
sS'block_loop.thisIndex'
p4700
g3627
sg38
S'right'
p4701
sg59
g63
sS'trial_loop.thisN'
p4702
I73
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p4703
g60
(g99
S'I\x00\x00\x00'
tRp4704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4705
I0
sg3642
g3826
sS'block_loop.thisRepN'
p4706
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4707
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4708
Nsg70
Vn
sS'block_loop.thisTrialN'
p4709
I0
sg39
F0.89984998109866865
sg34
g753
(S'\x07\xdf\x07\r\r\x05 \x05\xcc`'
tRp4710
sa(dp4711
S'trial_loop.thisTrialN'
p4712
I74
sg3633
g4508
sS'block_loop.thisIndex'
p4713
g3627
sg38
S'right'
p4714
sg59
g63
sS'trial_loop.thisN'
p4715
I74
sg33
g4512
sg64
g65
sS'trial_loop.thisIndex'
p4716
g60
(g99
S'J\x00\x00\x00'
tRp4717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4718
I0
sg3642
g4516
sS'block_loop.thisRepN'
p4719
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4720
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p4721
Nsg70
Vn
sS'block_loop.thisTrialN'
p4722
I0
sg39
F1.3337490071444336
sg34
g753
(S'\x07\xdf\x07\r\r\x05&\x04\xb3 '
tRp4723
sa(dp4724
S'trial_loop.thisTrialN'
p4725
I75
sg3633
g3771
sS'block_loop.thisIndex'
p4726
g3627
sg38
S'right'
p4727
sg59
g63
sS'trial_loop.thisN'
p4728
I75
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4729
g60
(g99
S'K\x00\x00\x00'
tRp4730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4731
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4732
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4733
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4734
Nsg70
Vn
sS'block_loop.thisTrialN'
p4735
I0
sg39
F0.86646093949093483
sg34
g753
(S'\x07\xdf\x07\r\r\x05,\nD\xe8'
tRp4736
sa(dp4737
S'trial_loop.thisTrialN'
p4738
I76
sg3633
g3931
sS'block_loop.thisIndex'
p4739
g3627
sg38
S'right'
p4740
sg59
g63
sS'trial_loop.thisN'
p4741
I76
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4742
g60
(g99
S'L\x00\x00\x00'
tRp4743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4744
I0
sg3642
g3939
sS'block_loop.thisRepN'
p4745
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4746
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p4747
Nsg70
Vn
sS'block_loop.thisTrialN'
p4748
I0
sg39
F0.66686538041722088
sg34
g753
(S'\x07\xdf\x07\r\r\x052\x08\xed('
tRp4749
sa(dp4750
S'trial_loop.thisTrialN'
p4751
I77
sg3633
S'3-ellas_strawberries_apples.png'
p4752
sS'block_loop.thisIndex'
p4753
g3627
sg38
S'left'
p4754
sg59
g63
sS'trial_loop.thisN'
p4755
I77
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p4756
g60
(g99
S'M\x00\x00\x00'
tRp4757
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4758
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4759
sS'block_loop.thisRepN'
p4760
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4761
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p4762
Nsg70
Vn
sS'block_loop.thisTrialN'
p4763
I0
sg39
F0.76667328095572884
sg34
g753
(S'\x07\xdf\x07\r\r\x058\x04A\xd8'
tRp4764
sa(dp4765
S'trial_loop.thisTrialN'
p4766
I78
sg3633
S'2-steamed_puddings.png'
p4767
sS'block_loop.thisIndex'
p4768
g3627
sg38
S'left'
p4769
sg59
g63
sS'trial_loop.thisN'
p4770
I78
sg33
g3782
sg64
g65
sS'trial_loop.thisIndex'
p4771
g60
(g99
S'N\x00\x00\x00'
tRp4772
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4773
I0
sg3642
S'20-fruit_pastilles.png'
p4774
sS'block_loop.thisRepN'
p4775
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4776
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4777
Nsg70
Vn
sS'block_loop.thisTrialN'
p4778
I0
sg39
F0.78334984054527013
sg34
g753
(S'\x07\xdf\x07\r\r\x06\x02\x01D8'
tRp4779
sa(dp4780
S'trial_loop.thisTrialN'
p4781
I79
sg3633
g3737
sS'block_loop.thisIndex'
p4782
g3627
sg38
S'right'
p4783
sg59
g63
sS'trial_loop.thisN'
p4784
I79
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4785
g60
(g99
S'O\x00\x00\x00'
tRp4786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4787
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4788
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4789
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4790
Nsg70
Vn
sS'block_loop.thisTrialN'
p4791
I0
sg39
F2.716523575661995
sg34
g753
(S'\x07\xdf\x07\r\r\x06\x07\r\xbf\x88'
tRp4792
sa(dp4793
S'trial_loop.thisTrialN'
p4794
I80
sg3633
g4467
sS'block_loop.thisIndex'
p4795
g3627
sg38
S'right'
p4796
sg59
g63
sS'trial_loop.thisN'
p4797
I80
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4798
g60
(g99
S'P\x00\x00\x00'
tRp4799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4800
I0
sg3642
g4474
sS'block_loop.thisRepN'
p4801
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4802
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4803
Nsg70
Vn
sS'block_loop.thisTrialN'
p4804
I0
sg39
F0.68333068191714119
sg34
g753
(S'\x07\xdf\x07\r\r\x06\x0f\t\xc0\x18'
tRp4805
sa(dp4806
S'trial_loop.thisTrialN'
p4807
I81
sg3633
g3801
sS'block_loop.thisIndex'
p4808
g3627
sg38
S'left'
p4809
sg59
g63
sS'trial_loop.thisN'
p4810
I81
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p4811
g60
(g99
S'Q\x00\x00\x00'
tRp4812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4813
I0
sg3642
g3809
sS'block_loop.thisRepN'
p4814
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4815
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p4816
Nsg70
Vn
sS'block_loop.thisTrialN'
p4817
I0
sg39
F0.79998762671857548
sg34
g753
(S'\x07\xdf\x07\r\r\x06\x15\x05\x8d\xe0'
tRp4818
sa(dp4819
S'trial_loop.thisTrialN'
p4820
I82
sg3633
g4047
sS'block_loop.thisIndex'
p4821
g3627
sg38
S'right'
p4822
sg59
g63
sS'trial_loop.thisN'
p4823
I82
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4824
g60
(g99
S'R\x00\x00\x00'
tRp4825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4826
I0
sg3642
g4054
sS'block_loop.thisRepN'
p4827
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4828
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4829
Nsg70
Vn
sS'block_loop.thisTrialN'
p4830
I0
sg39
F0.56653232819007826
sg34
g753
(S'\x07\xdf\x07\r\r\x06\x1b\x03\tX'
tRp4831
sa(dp4832
S'trial_loop.thisTrialN'
p4833
I83
sg3633
g3897
sS'block_loop.thisIndex'
p4834
g3627
sg38
S'left'
p4835
sg59
g63
sS'trial_loop.thisN'
p4836
I83
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p4837
g60
(g99
S'S\x00\x00\x00'
tRp4838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4839
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4840
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4841
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4842
Nsg70
Vn
sS'block_loop.thisTrialN'
p4843
I0
sg39
F0.89990129885154602
sg34
g753
(S'\x07\xdf\x07\r\r\x06 \x0c1\x18'
tRp4844
sa(dp4845
S'trial_loop.thisTrialN'
p4846
I84
sg3633
g3705
sS'block_loop.thisIndex'
p4847
g3627
sg38
S'left'
p4848
sg59
g63
sS'trial_loop.thisN'
p4849
I84
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4850
g60
(g99
S'T\x00\x00\x00'
tRp4851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4852
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4853
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4854
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4855
Nsg70
Vn
sS'block_loop.thisTrialN'
p4856
I0
sg39
F1.033311494777081
sg34
g753
(S'\x07\xdf\x07\r\r\x06&\x0b\x17\xd8'
tRp4857
sa(dp4858
S'trial_loop.thisTrialN'
p4859
I85
sg3633
g4275
sS'block_loop.thisIndex'
p4860
g3627
sg38
S'left'
p4861
sg59
g63
sS'trial_loop.thisN'
p4862
I85
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4863
g60
(g99
S'U\x00\x00\x00'
tRp4864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4865
I0
sg3642
g4282
sS'block_loop.thisRepN'
p4866
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4867
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4868
Nsg70
Vn
sS'block_loop.thisTrialN'
p4869
I0
sg39
F0.73367425428114075
sg34
g753
(S'\x07\xdf\x07\r\r\x06,\x0c%`'
tRp4870
sa(dp4871
S'trial_loop.thisTrialN'
p4872
I86
sg3633
g3897
sS'block_loop.thisIndex'
p4873
g3627
sg38
S'left'
p4874
sg59
g63
sS'trial_loop.thisN'
p4875
I86
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p4876
g60
(g99
S'V\x00\x00\x00'
tRp4877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4878
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4879
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4880
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4881
Nsg70
Vn
sS'block_loop.thisTrialN'
p4882
I0
sg39
F0.78326630664378172
sg34
g753
(S'\x07\xdf\x07\r\r\x062\x08\xaa\xc0'
tRp4883
sa(dp4884
S'trial_loop.thisTrialN'
p4885
I87
sg3633
g3948
sS'block_loop.thisIndex'
p4886
g3627
sg38
S'left'
p4887
sg59
g63
sS'trial_loop.thisN'
p4888
I87
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p4889
g60
(g99
S'W\x00\x00\x00'
tRp4890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4891
I0
sg3642
g3955
sS'block_loop.thisRepN'
p4892
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4893
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4894
Nsg70
Vn
sS'block_loop.thisTrialN'
p4895
I0
sg39
F0.81655328294073115
sg34
g753
(S'\x07\xdf\x07\r\r\x068\x05\xe3\xd0'
tRp4896
sa(dp4897
S'trial_loop.thisTrialN'
p4898
I88
sg3633
g4258
sS'block_loop.thisIndex'
p4899
g3627
sg38
S'left'
p4900
sg59
g63
sS'trial_loop.thisN'
p4901
I88
sg33
g4262
sg64
g65
sS'trial_loop.thisIndex'
p4902
g60
(g99
S'X\x00\x00\x00'
tRp4903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4904
I0
sg3642
g4266
sS'block_loop.thisRepN'
p4905
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4906
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p4907
Nsg70
Vn
sS'block_loop.thisTrialN'
p4908
I0
sg39
F1.3832067780476791
sg34
g753
(S'\x07\xdf\x07\r\r\x07\x02\x03\x99\xe0'
tRp4909
sa(dp4910
S'trial_loop.thisTrialN'
p4911
I89
sg3633
g4230
sS'block_loop.thisIndex'
p4912
g3627
sg38
S'left'
p4913
sg59
g63
sS'trial_loop.thisN'
p4914
I89
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4915
g60
(g99
S'Y\x00\x00\x00'
tRp4916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4917
I0
sg3642
g4237
sS'block_loop.thisRepN'
p4918
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4919
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4920
Nsg70
Vn
sS'block_loop.thisTrialN'
p4921
I0
sg39
F3.0498717341233714
sg34
g753
(S'\x07\xdf\x07\r\r\x07\x08\t\xe3@'
tRp4922
sa(dp4923
S'trial_loop.thisTrialN'
p4924
I90
sg3633
g4131
sS'block_loop.thisIndex'
p4925
g3627
sg38
S'right'
p4926
sg59
g63
sS'trial_loop.thisN'
p4927
I90
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p4928
g60
(g99
S'Z\x00\x00\x00'
tRp4929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4930
I0
sg3642
g4139
sS'block_loop.thisRepN'
p4931
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4932
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p4933
Nsg70
Vn
sS'block_loop.thisTrialN'
p4934
I0
sg39
F0.9670628397307155
sg34
g753
(S'\x07\xdf\x07\r\r\x07\x10\x0b\x1f\xa8'
tRp4935
sa(dp4936
S'trial_loop.thisTrialN'
p4937
I91
sg3633
g4605
sS'block_loop.thisIndex'
p4938
g3627
sg38
S'right'
p4939
sg59
g63
sS'trial_loop.thisN'
p4940
I91
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4941
g60
(g99
S'[\x00\x00\x00'
tRp4942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4943
I0
sg3642
g4612
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F1.2332648526407866
sg34
g753
(S'\x07\xdf\x07\r\r\x07\x16\x0b7\x18'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g4131
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g4139
sS'block_loop.thisRepN'
p4957
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F0.74987869053074974
sg34
g753
(S'\x07\xdf\x07\r\r\x07\x1c\x0f\x1b0'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g4767
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'left'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g4774
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F0.58341615448807715
sg34
g753
(S'\x07\xdf\x07\r\r\x07"\x0b\xdf\x10'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g3688
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4983
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F1.0666189981748175
sg34
g753
(S'\x07\xdf\x07\r\r\x07(\x06\x03\x10'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g3963
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'left'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g3967
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g3971
sS'block_loop.thisRepN'
p4996
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4997
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vn
sS'block_loop.thisTrialN'
p4999
I0
sg39
F0.78328483805671567
sg34
g753
(S'\x07\xdf\x07\r\r\x07.\x07\x89\xb0'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g3897
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'left'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g3905
sS'block_loop.thisRepN'
p5009
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5010
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F0.66700450855023519
sg34
g753
(S'\x07\xdf\x07\r\r\x074\x04\xc2\xc0'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g4752
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'left'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g4759
sS'block_loop.thisRepN'
p5022
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.69978087318850157
sg34
g753
(S'\x07\xdf\x07\r\r\x07:\x00\x17p'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g3654
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'right'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5035
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F2.0166280928206106
sg34
g753
(S'\x07\xdf\x07\r\r\x08\x03\x0be\xf8'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g4752
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'left'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g4759
sS'block_loop.thisRepN'
p5048
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F0.61663641770064714
sg34
g753
(S'\x07\xdf\x07\r\r\x08\n\x0c-0'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g3671
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'right'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.86657840012776433
sg34
g753
(S'\x07\xdf\x07\r\r\x08\x10\x06\xce0'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g3850
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.68338256986862689
sg34
g753
(S'\x07\xdf\x07\r\r\x08\x16\x057\xf0'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g4538
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'left'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F1.2666270949757745
sg34
g753
(S'\x07\xdf\x07\r\r\x08\x1c\x01\t\xa0'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4437
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'left'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4444
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F1.0665850714376575
sg34
g753
(S'\x07\xdf\x07\r\r\x08"\x05j\xb8'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g3671
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'right'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F1.0499797865068103
sg34
g753
(S'\x07\xdf\x07\r\r\x08(\x06\xedp'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g3818
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'right'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3829
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g3826
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F2.9497214301227359
sg34
g753
(S'\x07\xdf\x07\r\r\x08.\x085\x90'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g4752
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'left'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g4759
sS'block_loop.thisRepN'
p5139
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F1.4666520125974785
sg34
g753
(S'\x07\xdf\x07\r\r\x086\x08\x02\xc8'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4605
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'left'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4612
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F0.76666957467205066
sg34
g753
(S'\x07\xdf\x07\r\r\t\x01\x00y\x18'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g3722
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'right'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g3729
sS'block_loop.thisRepN'
p5165
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F3.1163208135112654
sg34
g753
(S'\x07\xdf\x07\r\r\t\x06\x0c\xb9\xd0'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g4646
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'right'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g4269
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g4653
sS'block_loop.thisRepN'
p5178
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.76664847737447417
sg34
g753
(S'\x07\xdf\x07\r\r\t\x0e\x0e\xe8h'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4452
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'right'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4459
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F0.96663576197533985
sg34
g753
(S'\x07\xdf\x07\r\r\t\x14\x0b\xe6\xe0'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g3835
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g3842
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.7166416064974328
sg34
g753
(S'\x07\xdf\x07\r\r\t\x1a\x0b\xc3\xb8'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4032
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'left'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4039
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.71638758361223154
sg34
g753
(S'\x07\xdf\x07\r\r\t \x08\n\x98'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4452
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'right'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4459
sS'block_loop.thisRepN'
p5230
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.71665472103268257
sg34
g753
(S'\x07\xdf\x07\r\r\t&\x04Qx'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4646
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'right'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g4262
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4653
sS'block_loop.thisRepN'
p5243
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.68323888015584089
sg34
g753
(S'\x07\xdf\x07\r\r\t,\x00]\xc0'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3801
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'left'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3809
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.61666207657799532
sg34
g753
(S'\x07\xdf\x07\r\r\t1\x0bm\xc8'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4176
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4183
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.81657352494221414
sg34
g753
(S'\x07\xdf\x07\r\r\t7\x06\x0e\xc8'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g4275
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'right'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g4282
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vn
sS'block_loop.thisTrialN'
p5285
I0
sg39
F1.1167270790683688
sg34
g753
(S'\x07\xdf\x07\r\r\n\x01\x03\xc4\xd8'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g4605
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'right'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g4612
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vn
sS'block_loop.thisTrialN'
p5298
I0
sg39
F1.7998798594362597
sg34
g753
(S'\x07\xdf\x07\r\r\n\x07\x05\xff('
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g3705
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'left'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5308
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vn
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.73332244256562262
sg34
g753
(S'\x07\xdf\x07\r\r\n\x0e\x03r\xd0'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
S'5-pineapple.png'
p5315
sS'block_loop.thisIndex'
p5316
g3627
sg38
S'left'
p5317
sg59
g63
sS'trial_loop.thisN'
p5318
I120
sg33
g4512
sg64
g65
sS'trial_loop.thisIndex'
p5319
g60
(g99
S'x\x00\x00\x00'
tRp5320
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5321
I0
sg3642
S'40-sardines.png'
p5322
sS'block_loop.thisRepN'
p5323
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F1.2833087863400578
sg34
g753
(S'\x07\xdf\x07\r\r\n\x13\x0f:p'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g3634
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.81652334758291545
sg34
g753
(S'\x07\xdf\x07\r\r\n\x1a\x04\xd2`'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g4342
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'left'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4350
sS'block_loop.thisRepN'
p5349
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.96667966716449882
sg34
g753
(S'\x07\xdf\x07\r\r\n \x02\x88p'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4437
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4444
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.98329778153311054
sg34
g753
(S'\x07\xdf\x07\r\r\n&\x02a`'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g5315
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g4512
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g5322
sS'block_loop.thisRepN'
p5375
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F1.4499726020203525
sg34
g753
(S'\x07\xdf\x07\r\r\n,\x02\xb7P'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4088
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.6665760053001577
sg34
g753
(S'\x07\xdf\x07\r\r\n2\n1`'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4752
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4759
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.8498776071555767
sg34
g753
(S'\x07\xdf\x07\r\r\n8\x05\x86\x10'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g3963
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'left'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3974
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g3971
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F1.4837325569533277
sg34
g753
(S'\x07\xdf\x07\r\r\x0b\x02\x03\xb58'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4767
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4774
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.99989023702619306
sg34
g753
(S'\x07\xdf\x07\r\r\x0b\x08\x0b\xa8`'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4148
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'right'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4155
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F1.1165828191569744
sg34
g753
(S'\x07\xdf\x07\r\r\x0b\x0e\x0c8\xe8'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3880
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'right'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F1.2330099744613108
sg34
g753
(S'\x07\xdf\x07\r\r\x0b\x14\x0es8'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4538
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.91660551300810766
sg34
g753
(S'\x07\xdf\x07\r\r\x0b\x1b\x03\x18\xf8'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3801
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3812
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3809
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F1.3336395292662928
sg34
g753
(S'\x07\xdf\x07\r\r\x0b!\x02x\xd0'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g5315
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g4512
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g5322
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.95002249428216601
sg34
g753
(S"\x07\xdf\x07\r\r\x0b'\x08\n\x98"
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4088
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.81675199668825371
sg34
g753
(S'\x07\xdf\x07\r\r\x0b-\x07\xe3\x88'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3835
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3842
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.99984519143981743
sg34
g753
(S'\x07\xdf\x07\r\r\x0b3\x05\x99\x98'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3948
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3955
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.73320669251916115
sg34
g753
(S'\x07\xdf\x07\r\r\x0b9\x05\xef\x88'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4467
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4474
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.66666410077959881
sg34
g753
(S'\x07\xdf\x07\r\r\x0c\x03\x02t\xe8'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3801
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3809
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3805
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3812
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.60035985149806947
sg34
g753
(S'\x07\xdf\x07\r\r\x0c\x08\r\x0b\xd8'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4437
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4444
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.73303563333865895
sg34
g753
(S'\x07\xdf\x07\r\r\x0c\x0e\x07jp'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4342
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4350
sS'block_loop.thisRepN'
p5583
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.61662957533371809
sg34
g753
(S'\x07\xdf\x07\r\r\x0c\x14\x03\xf3\xb8'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4275
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4282
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.81666817768928013
sg34
g753
(S'\x07\xdf\x07\r\r\x0c\x19\r\xd3\x10'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3931
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3939
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.74989066467242083
sg34
g753
(S'\x07\xdf\x07\r\r\x0c\x1f\x0b\x89 '
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4508
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g4519
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4516
sS'block_loop.thisRepN'
p5622
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.94992099916817097
sg34
g753
(S'\x07\xdf\x07\r\r\x0c%\x08I\x18'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4538
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.53332774539921957
sg34
g753
(S'\x07\xdf\x07\r\r\x0c+\x07\xe7p'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g3705
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F1.233071270666187
sg34
g753
(S'\x07\xdf\x07\r\r\x0c1\x01S\xd8'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4605
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4612
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.88330143079656409
sg34
g753
(S'\x07\xdf\x07\r\r\x0c7\x05zX'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3688
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F1.8331876479296625
sg34
g753
(S'\x07\xdf\x07\r\r\r\x01\x04"\x98'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4437
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4444
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.3166316850638395
sg34
g753
(S'\x07\xdf\x07\r\r\r\x08\x02\x0fX'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g5315
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g4512
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g5322
sS'block_loop.thisRepN'
p5700
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F1.0836784452312713
sg34
g753
(S'\x07\xdf\x07\r\r\r\x0e\x07\xa1 '
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4342
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4350
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.7333007750694378
sg34
g753
(S'\x07\xdf\x07\r\r\r\x14\tbX'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4088
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.74990976628214412
sg34
g753
(S'\x07\xdf\x07\r\r\r\x1a\x05\xa98'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4230
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4237
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F1.3665775448334898
sg34
g753
(S'\x07\xdf\x07\r\r\r \x02m\x18'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g5315
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4512
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g5322
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.1665942516137875
sg34
g753
(S'\x07\xdf\x07\r\r\r&\x08w\xf8'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4176
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4183
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F1.1167208068982291
sg34
g753
(S'\x07\xdf\x07\r\r\r,\x0b\xa8`'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3771
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.0499144989189517
sg34
g753
(S'\x07\xdf\x07\r\r\r2\r\xe2\xb0'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4116
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3974
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4123
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F1.0666201385702152
sg34
g753
(S'\x07\xdf\x07\r\r\r8\x0f*\xd0'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g3880
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.79969996219551831
sg34
g753
(S'\x07\xdf\x07\r\r\x0e\x03\x01o0'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g3948
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3829
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g3955
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3822
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.89987906115857186
sg34
g753
(S'\x07\xdf\x07\r\r\x0e\x08\x0e)\x00'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4258
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4262
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4266
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.88319537410279736
sg34
g753
(S'\x07\xdf\x07\r\r\x0e\x0e\r\x0f\xc0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3722
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3729
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.1498940288365702
sg34
g753
(S'\x07\xdf\x07\r\r\x0e\x14\x0b\xbb\xe8'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4452
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4459
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F2.4998853903489362
sg34
g753
(S'\x07\xdf\x07\r\r\x0e\x1a\x0e\xad\xd0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4047
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.73327112481092627
sg34
g753
(S'\x07\xdf\x07\r\r\x0e"\x07\x95h'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3897
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3905
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.78329709729769093
sg34
g753
(S'\x07\xdf\x07\r\r\x0e(\x03\xdcH'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4131
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4139
sS'block_loop.thisRepN'
p5895
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.7499781899532536
sg34
g753
(S'\x07\xdf\x07\r\r\x0e.\x01\x19@'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4047
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.74989579644898186
sg34
g753
(S'\x07\xdf\x07\r\r\x0e3\r\x1f`'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4148
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4155
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.88328460997581715
sg34
g753
(S'\x07\xdf\x07\r\r\x0e9\t\xdfX'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3914
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3922
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.1666395822958293
sg34
g753
(S'\x07\xdf\x07\r\r\x0f\x03\x08\x8b\x80'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4646
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4269
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4653
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.73311489075967984
sg34
g753
(S'\x07\xdf\x07\r\r\x0f\t\x0b}h'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3931
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3939
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.2499405569342343
sg34
g753
(S'\x07\xdf\x07\r\r\x0f\x0f\x08\x02\xc8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4767
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4774
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.86664311751883361
sg34
g753
(S'\x07\xdf\x07\r\r\x0f\x15\x0cc\xe0'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4342
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4350
sS'block_loop.thisRepN'
p5986
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.88334590618251241
sg34
g753
(S'\x07\xdf\x07\r\r\x0f\x1b\n\xcd\xa0'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4148
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4155
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.66657629039946187
sg34
g753
(S'\x07\xdf\x07\r\r\x0f!\ty\xc8'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4116
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3967
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4123
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.94994523255081731
sg34
g753
(S"\x07\xdf\x07\r\r\x0f'\x05\t\x10"
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4047
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4054
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.88329544372572855
sg34
g753
(S'\x07\xdf\x07\r\r\x0f-\x04\xa7h'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4452
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4459
sS'block_loop.thisRepN'
p6038
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.63336629073455697
sg34
g753
(S'\x07\xdf\x07\r\r\x0f3\x03S\x90'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4467
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4474
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.66665953920164611
sg34
g753
(S'\x07\xdf\x07\r\r\x0f8\r\xac\x00'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3880
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3888
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.6830404515058035
sg34
g753
(S'\x07\xdf\x07\r\r\x10\x02\t\x00\xb0'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4258
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4262
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4266
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4262
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g4269
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.89999338571033149
sg34
g753
(S'\x07\xdf\x07\r\r\x10\x08\x04\x93\xe0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4508
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g4512
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4516
sS'block_loop.thisRepN'
p6090
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.94985229039593833
sg34
g753
(S'\x07\xdf\x07\r\r\x10\x0e\x03\xb58'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4767
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3782
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4774
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.7332705546141369
sg34
g753
(S'\x07\xdf\x07\r\r\x10\x14\x03S\x90'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g3737
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g3745
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.84996997911366634
sg34
g753
(S'\x07\xdf\x07\r\r\x10\x1a\x0f\x17H'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g3754
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g3762
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.58329869384942867
sg34
g753
(S'\x07\xdf\x07\r\r\x10 \rFp'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4032
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4039
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.84966977025032975
sg34
g753
(S'\x07\xdf\x07\r\r\x10&\x07jp'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4538
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4545
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.93326924315988435
sg34
g753
(S'\x07\xdf\x07\r\r\x10,\x05\x99\x98'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4275
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4282
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.96658472931812867
sg34
g753
(S'\x07\xdf\x07\r\r\x102\x057\xf0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3931
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3939
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.94970403910701862
sg34
g753
(S'\x07\xdf\x07\r\r\x108\x05O`'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3654
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.0832727498745953
sg34
g753
(S'\x07\xdf\x07\r\r\x11\x02\x04\xed\xb8'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g3737
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g3745
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.63326165953549207
sg34
g753
(S'\x07\xdf\x07\r\r\x11\x08\x06\xae\xf0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4467
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4474
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.73322864511465013
sg34
g753
(S'\x07\xdf\x07\r\r\x11\x0e\x01\x8a\x88'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3654
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.7665464120618708
sg34
g753
(S'\x07\xdf\x07\r\r\x11\x13\rR('
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4230
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4237
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.61666720835455635
sg34
g753
(S'\x07\xdf\x07\r\r\x11\x19\nP\xa0'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4116
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3967
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4123
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F2.7833324495277338
sg34
g753
(S'\x07\xdf\x07\r\r\x11\x1f\x04\xed\xb8'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4032
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4039
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.54973118049747427
sg34
g753
(S"\x07\xdf\x07\r\r\x11'\x02\x1e\xf8"
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3754
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3762
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.51648240741815243
sg34
g753
(S'\x07\xdf\x07\r\r\x11,\x0b\x088'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4508
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4519
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4516
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4512
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4519
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F1.0000088380584202
sg34
g753
(S'\x07\xdf\x07\r\r\x112\x04:\x08'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4116
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3974
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4123
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3974
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.91656673959550972
sg34
g753
(S'\x07\xdf\x07\r\r\x118\x04\xca\x90'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g3688
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.99994497596344445
sg34
g753
(S'\x07\xdf\x07\r\r\x12\x02\x03\xef\xd0'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4131
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4139
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F1.0503056542474951
sg34
g753
(S'\x07\xdf\x07\r\r\x12\x08\x04\x80X'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3754
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3762
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.66669660202387604
sg34
g753
(S'\x07\xdf\x07\r\r\x12\x0e\x05\xc8x'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F364.19165983855601
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'7-olives.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'7-olives.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'22-daim.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
S'22-daim.png'
p6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6385
I2
sS'img_wrong'
p6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.73308495540186414
sg34
g753
(S'\x07\xdf\x07\r\r\x19\x18\n\x87P'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'44-crunch.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'44-crunch.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6386
S'26-walkers_smoky_bacon.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.71658686755836243
sg34
g753
(S'\x07\xdf\x07\r\r\x19\x1e\x06\xd2\x18'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'50-polo.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'48-twix.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'48-twix.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6386
S'50-polo.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.89989645217610814
sg34
g753
(S'\x07\xdf\x07\r\r\x19$\x03\x18\xf8'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'2-steamed_puddings.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'2-steamed_puddings.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'20-fruit_pastilles.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6386
S'20-fruit_pastilles.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.64995218895819562
sg34
g753
(S'\x07\xdf\x07\r\r\x19*\x01\xff\xb8'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'49-yorkie.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'49-yorkie.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'35-raisins.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6386
S'35-raisins.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.76669893983125803
sg34
g753
(S'\x07\xdf\x07\r\r\x19/\x0c\x96\xa8'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'13-mccoys_steak_crisps.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'3-ellas_strawberries_apples.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6470
I2
sg6386
S'13-mccoys_steak_crisps.png'
p6471
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vn
sS'block_loop.thisTrialN'
p6473
I0
sg39
F0.99997434112265182
sg34
g753
(S'\x07\xdf\x07\r\r\x195\tZ\x88'
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
S'36-fig_rolls.png'
p6477
sS'block_loop.thisIndex'
p6478
g6365
sg38
S'right'
p6479
sg59
g63
sS'trial_loop.thisN'
p6480
I6
sg33
S'36-fig_rolls.png'
p6481
sg64
g65
sS'trial_loop.thisIndex'
p6482
g60
(g99
S'\x06\x00\x00\x00'
tRp6483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6484
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6485
sS'block_loop.thisRepN'
p6486
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6487
I2
sg6386
S'34-hula_hoops_bbq_beef_redo.png'
p6488
sg55
g11
sS'block_loop.thisTrial'
p6489
Nsg70
Vn
sS'block_loop.thisTrialN'
p6490
I0
sg39
F0.88332908536358445
sg34
g753
(S'\x07\xdf\x07\r\r\x19;\t\xeb\x10'
tRp6491
sa(dp6492
S'trial_loop.thisTrialN'
p6493
I7
sg6371
g6443
sS'block_loop.thisIndex'
p6494
g6365
sg38
S'left'
p6495
sg59
g63
sS'trial_loop.thisN'
p6496
I7
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6497
g60
(g99
S'\x07\x00\x00\x00'
tRp6498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6499
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6500
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6501
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p6502
Nsg70
Vn
sS'block_loop.thisTrialN'
p6503
I0
sg39
F0.66664642466275836
sg34
g753
(S'\x07\xdf\x07\r\r\x1a\x05\x08\x93P'
tRp6504
sa(dp6505
S'trial_loop.thisTrialN'
p6506
I8
sg6371
S'51-mars.png'
p6507
sS'block_loop.thisIndex'
p6508
g6365
sg38
S'left'
p6509
sg59
g63
sS'trial_loop.thisN'
p6510
I8
sg33
S'27-hartleys_raspberries_jelly.png'
p6511
sg64
g65
sS'trial_loop.thisIndex'
p6512
g60
(g99
S'\x08\x00\x00\x00'
tRp6513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6514
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6515
sS'block_loop.thisRepN'
p6516
I2
sg6383
S'51-mars.png'
p6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6518
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p6519
Nsg70
Vn
sS'block_loop.thisTrialN'
p6520
I0
sg39
F1.0167193243851216
sg34
g753
(S'\x07\xdf\x07\r\r\x1a\x0b\x04&\x80'
tRp6521
sa(dp6522
S'trial_loop.thisTrialN'
p6523
I9
sg6371
S'3-ellas_strawberries_apples.png'
p6524
sS'block_loop.thisIndex'
p6525
g6365
sg38
S'left'
p6526
sg59
g63
sS'trial_loop.thisN'
p6527
I9
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6528
g60
(g99
S'\t\x00\x00\x00'
tRp6529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6530
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6531
sS'block_loop.thisRepN'
p6532
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6533
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p6534
Nsg70
Vn
sS'block_loop.thisTrialN'
p6535
I0
sg39
F1.0166309438081953
sg34
g753
(S'\x07\xdf\x07\r\r\x1a\x11\x04\xf5\x88'
tRp6536
sa(dp6537
S'trial_loop.thisTrialN'
p6538
I10
sg6371
S'33-ambrosia_rice.png'
p6539
sS'block_loop.thisIndex'
p6540
g6365
sg38
S'right'
p6541
sg59
g63
sS'trial_loop.thisN'
p6542
I10
sg33
S'23-crunchie_redo.png'
p6543
sg64
g65
sS'trial_loop.thisIndex'
p6544
g60
(g99
S'\n\x00\x00\x00'
tRp6545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6546
I0
sg6380
S'23-crunchie_redo.png'
p6547
sS'block_loop.thisRepN'
p6548
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6549
I2
sg6386
S'33-ambrosia_rice.png'
p6550
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vn
sS'block_loop.thisTrialN'
p6552
I0
sg39
F0.74983193435400608
sg34
g753
(S'\x07\xdf\x07\r\r\x1a\x17\x05\x86\x10'
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
S'25-kitkat.png'
p6556
sS'block_loop.thisIndex'
p6557
g6365
sg38
S'right'
p6558
sg59
g63
sS'trial_loop.thisN'
p6559
I11
sg33
S'31-hobnobs.png'
p6560
sg64
g65
sS'trial_loop.thisIndex'
p6561
g60
(g99
S'\x0b\x00\x00\x00'
tRp6562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6563
I0
sg6380
S'31-hobnobs.png'
p6564
sS'block_loop.thisRepN'
p6565
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6566
I2
sg6386
S'25-kitkat.png'
p6567
sg55
g11
sS'block_loop.thisTrial'
p6568
Nsg70
Vn
sS'block_loop.thisTrialN'
p6569
I0
sg39
F1.0334799880711216
sg34
g753
(S'\x07\xdf\x07\r\r\x1a\x1d\x02I\xf0'
tRp6570
sa(dp6571
S'trial_loop.thisTrialN'
p6572
I12
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6573
sS'block_loop.thisIndex'
p6574
g6365
sg38
S'left'
p6575
sg59
g63
sS'trial_loop.thisN'
p6576
I12
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6577
g60
(g99
S'\x0c\x00\x00\x00'
tRp6578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6579
I0
sg6380
S'36-fig_rolls.png'
p6580
sS'block_loop.thisRepN'
p6581
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6582
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p6583
Nsg70
Vn
sS'block_loop.thisTrialN'
p6584
I0
sg39
F0.58326904359091714
sg34
g753
(S'\x07\xdf\x07\r\r\x1a#\x03S\x90'
tRp6585
sa(dp6586
S'trial_loop.thisTrialN'
p6587
I13
sg6371
S'18-mms.png'
p6588
sS'block_loop.thisIndex'
p6589
g6365
sg38
S'left'
p6590
sg59
g63
sS'trial_loop.thisN'
p6591
I13
sg33
S'18-mms.png'
p6592
sg64
g65
sS'trial_loop.thisIndex'
p6593
g60
(g99
S'\r\x00\x00\x00'
tRp6594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6595
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6596
sS'block_loop.thisRepN'
p6597
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6598
I2
sg6386
S'43-mrporky_pork_crackles_redo.png'
p6599
sg55
g11
sS'block_loop.thisTrial'
p6600
Nsg70
Vn
sS'block_loop.thisTrialN'
p6601
I0
sg39
F0.81653389623170369
sg34
g753
(S'\x07\xdf\x07\r\r\x1a(\x0c\xb9\xd0'
tRp6602
sa(dp6603
S'trial_loop.thisTrialN'
p6604
I14
sg6371
S'35-raisins.png'
p6605
sS'block_loop.thisIndex'
p6606
g6365
sg38
S'right'
p6607
sg59
g63
sS'trial_loop.thisN'
p6608
I14
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6609
g60
(g99
S'\x0e\x00\x00\x00'
tRp6610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6611
I0
sg6380
S'49-yorkie.png'
p6612
sS'block_loop.thisRepN'
p6613
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6614
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p6615
Nsg70
Vn
sS'block_loop.thisTrialN'
p6616
I0
sg39
F0.85006035538026481
sg34
g753
(S'\x07\xdf\x07\r\r\x1a.\no\xe0'
tRp6617
sa(dp6618
S'trial_loop.thisTrialN'
p6619
I15
sg6371
S'42-mrkipling_lemon_slices.png'
p6620
sS'block_loop.thisIndex'
p6621
g6365
sg38
S'left'
p6622
sg59
g63
sS'trial_loop.thisN'
p6623
I15
sg33
S'42-mrkipling_lemon_slices.png'
p6624
sg64
g65
sS'trial_loop.thisIndex'
p6625
g60
(g99
S'\x0f\x00\x00\x00'
tRp6626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6627
I0
sg6380
S'16-skips_prawn.png'
p6628
sS'block_loop.thisRepN'
p6629
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6630
I2
sg6386
S'16-skips_prawn.png'
p6631
sg55
g11
sS'block_loop.thisTrial'
p6632
Nsg70
Vn
sS'block_loop.thisTrialN'
p6633
I0
sg39
F1.0831949179464573
sg34
g753
(S'\x07\xdf\x07\r\r\x1a4\x08\x9f\x08'
tRp6634
sa(dp6635
S'trial_loop.thisTrialN'
p6636
I16
sg6371
S'23-crunchie_redo.png'
p6637
sS'block_loop.thisIndex'
p6638
g6365
sg38
S'left'
p6639
sg59
g63
sS'trial_loop.thisN'
p6640
I16
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6641
g60
(g99
S'\x10\x00\x00\x00'
tRp6642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6643
I0
sg6380
S'33-ambrosia_rice.png'
p6644
sS'block_loop.thisRepN'
p6645
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6646
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p6647
Nsg70
Vn
sS'block_loop.thisTrialN'
p6648
I0
sg39
F0.93325498822923691
sg34
g753
(S'\x07\xdf\x07\r\r\x1a:\n`@'
tRp6649
sa(dp6650
S'trial_loop.thisTrialN'
p6651
I17
sg6371
S'21-nakd_banana_crunch.png'
p6652
sS'block_loop.thisIndex'
p6653
g6365
sg38
S'right'
p6654
sg59
g63
sS'trial_loop.thisN'
p6655
I17
sg33
S'1-treacle_cookies.png'
p6656
sg64
g65
sS'trial_loop.thisIndex'
p6657
g60
(g99
S'\x11\x00\x00\x00'
tRp6658
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6659
I0
sg6380
S'1-treacle_cookies.png'
p6660
sS'block_loop.thisRepN'
p6661
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6662
I2
sg6386
S'21-nakd_banana_crunch.png'
p6663
sg55
g11
sS'block_loop.thisTrial'
p6664
Nsg70
Vn
sS'block_loop.thisTrialN'
p6665
I0
sg39
F0.76668012332265789
sg34
g753
(S'\x07\xdf\x07\r\r\x1b\x04\t\xfe\x98'
tRp6666
sa(dp6667
S'trial_loop.thisTrialN'
p6668
I18
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6669
sS'block_loop.thisIndex'
p6670
g6365
sg38
S'right'
p6671
sg59
g63
sS'trial_loop.thisN'
p6672
I18
sg33
g6599
sg64
g65
sS'trial_loop.thisIndex'
p6673
g60
(g99
S'\x12\x00\x00\x00'
tRp6674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6675
I0
sg6380
S'18-mms.png'
p6676
sS'block_loop.thisRepN'
p6677
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6678
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p6679
Nsg70
Vn
sS'block_loop.thisTrialN'
p6680
I0
sg39
F1.183325265041276
sg34
g753
(S'\x07\xdf\x07\r\r\x1b\n\x06\xfd\x10'
tRp6681
sa(dp6682
S'trial_loop.thisTrialN'
p6683
I19
sg6371
S'45-chewy_nougat_redo.png'
p6684
sS'block_loop.thisIndex'
p6685
g6365
sg38
S'left'
p6686
sg59
g63
sS'trial_loop.thisN'
p6687
I19
sg33
S'41-peanuts_redo.png'
p6688
sg64
g65
sS'trial_loop.thisIndex'
p6689
g60
(g99
S'\x13\x00\x00\x00'
tRp6690
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6691
I0
sg6380
S'41-peanuts_redo.png'
p6692
sS'block_loop.thisRepN'
p6693
I2
sg6383
S'45-chewy_nougat_redo.png'
p6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6695
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p6696
Nsg70
Vn
sS'block_loop.thisTrialN'
p6697
I0
sg39
F1.5166386414712179
sg34
g753
(S'\x07\xdf\x07\r\r\x1b\x10\n-x'
tRp6698
sa(dp6699
S'trial_loop.thisTrialN'
p6700
I20
sg6371
S'38-maltesers.png'
p6701
sS'block_loop.thisIndex'
p6702
g6365
sg38
S'left'
p6703
sg59
g63
sS'trial_loop.thisN'
p6704
I20
sg33
S'38-maltesers.png'
p6705
sg64
g65
sS'trial_loop.thisIndex'
p6706
g60
(g99
S'\x14\x00\x00\x00'
tRp6707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6708
I0
sg6380
S'6-sour_patch_kids.png'
p6709
sS'block_loop.thisRepN'
p6710
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6711
I2
sg6386
S'6-sour_patch_kids.png'
p6712
sg55
g11
sS'block_loop.thisTrial'
p6713
Nsg70
Vn
sS'block_loop.thisTrialN'
p6714
I0
sg39
F0.98292344702531409
sg34
g753
(S'\x07\xdf\x07\r\r\x1b\x17\x03Wx'
tRp6715
sa(dp6716
S'trial_loop.thisTrialN'
p6717
I21
sg6371
S'27-hartleys_raspberries_jelly.png'
p6718
sS'block_loop.thisIndex'
p6719
g6365
sg38
S'right'
p6720
sg59
g63
sS'trial_loop.thisN'
p6721
I21
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p6722
g60
(g99
S'\x15\x00\x00\x00'
tRp6723
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6724
I0
sg6380
S'51-mars.png'
p6725
sS'block_loop.thisRepN'
p6726
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6727
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p6728
Nsg70
Vn
sS'block_loop.thisTrialN'
p6729
I0
sg39
F0.66660879164192011
sg34
g753
(S'\x07\xdf\x07\r\r\x1b\x1d\x03\xadh'
tRp6730
sa(dp6731
S'trial_loop.thisTrialN'
p6732
I22
sg6371
S'10-bounty_redo.png'
p6733
sS'block_loop.thisIndex'
p6734
g6365
sg38
S'left'
p6735
sg59
g63
sS'trial_loop.thisN'
p6736
I22
sg33
S'4-corn.png'
p6737
sg64
g65
sS'trial_loop.thisIndex'
p6738
g60
(g99
S'\x16\x00\x00\x00'
tRp6739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6740
I0
sg6380
S'4-corn.png'
p6741
sS'block_loop.thisRepN'
p6742
I2
sg6383
S'10-bounty_redo.png'
p6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6744
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p6745
Nsg70
Vn
sS'block_loop.thisTrialN'
p6746
I0
sg39
F1.1833244097451825
sg34
g753
(S'\x07\xdf\x07\r\r\x1b"\x0eDX'
tRp6747
sa(dp6748
S'trial_loop.thisTrialN'
p6749
I23
sg6371
S'8-liquorice_catherine_wheels.png'
p6750
sS'block_loop.thisIndex'
p6751
g6365
sg38
S'right'
p6752
sg59
g63
sS'trial_loop.thisN'
p6753
I23
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6754
sg64
g65
sS'trial_loop.thisIndex'
p6755
g60
(g99
S'\x17\x00\x00\x00'
tRp6756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6757
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6758
sS'block_loop.thisRepN'
p6759
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6760
I2
sg6386
S'8-liquorice_catherine_wheels.png'
p6761
sg55
g11
sS'block_loop.thisTrial'
p6762
Nsg70
Vn
sS'block_loop.thisTrialN'
p6763
I0
sg39
F0.93327808121830458
sg34
g753
(S'\x07\xdf\x07\r\r\x1b)\x022\x80'
tRp6764
sa(dp6765
S'trial_loop.thisTrialN'
p6766
I24
sg6371
S'19-caramello_redo.png'
p6767
sS'block_loop.thisIndex'
p6768
g6365
sg38
S'left'
p6769
sg59
g63
sS'trial_loop.thisN'
p6770
I24
sg33
S'19-caramello_redo.png'
p6771
sg64
g65
sS'trial_loop.thisIndex'
p6772
g60
(g99
S'\x18\x00\x00\x00'
tRp6773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6774
I0
sg6380
S'30-spaghetti_hoops.png'
p6775
sS'block_loop.thisRepN'
p6776
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6777
I2
sg6386
S'30-spaghetti_hoops.png'
p6778
sg55
g11
sS'block_loop.thisTrial'
p6779
Nsg70
Vn
sS'block_loop.thisTrialN'
p6780
I0
sg39
F0.58351565391058102
sg34
g753
(S'\x07\xdf\x07\r\r\x1b/\x01\xd0\xd8'
tRp6781
sa(dp6782
S'trial_loop.thisTrialN'
p6783
I25
sg6371
S'41-peanuts_redo.png'
p6784
sS'block_loop.thisIndex'
p6785
g6365
sg38
S'left'
p6786
sg59
g63
sS'trial_loop.thisN'
p6787
I25
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p6788
g60
(g99
S'\x19\x00\x00\x00'
tRp6789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6790
I0
sg6380
S'45-chewy_nougat_redo.png'
p6791
sS'block_loop.thisRepN'
p6792
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6793
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p6794
Nsg70
Vn
sS'block_loop.thisTrialN'
p6795
I0
sg39
F1.1332528214770718
sg34
g753
(S'\x07\xdf\x07\r\r\x1b4\x0b7\x18'
tRp6796
sa(dp6797
S'trial_loop.thisTrialN'
p6798
I26
sg6371
g6750
sS'block_loop.thisIndex'
p6799
g6365
sg38
S'right'
p6800
sg59
g63
sS'trial_loop.thisN'
p6801
I26
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p6802
g60
(g99
S'\x1a\x00\x00\x00'
tRp6803
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6804
I0
sg6380
g6758
sS'block_loop.thisRepN'
p6805
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6806
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p6807
Nsg70
Vn
sS'block_loop.thisTrialN'
p6808
I0
sg39
F0.65000179612252396
sg34
g753
(S'\x07\xdf\x07\r\r\x1b:\r\xaf\xe8'
tRp6809
sa(dp6810
S'trial_loop.thisTrialN'
p6811
I27
sg6371
g6539
sS'block_loop.thisIndex'
p6812
g6365
sg38
S'right'
p6813
sg59
g63
sS'trial_loop.thisN'
p6814
I27
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6815
g60
(g99
S'\x1b\x00\x00\x00'
tRp6816
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6817
I0
sg6380
g6547
sS'block_loop.thisRepN'
p6818
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6819
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p6820
Nsg70
Vn
sS'block_loop.thisTrialN'
p6821
I0
sg39
F1.6500331569714035
sg34
g753
(S'\x07\xdf\x07\r\r\x1c\x04\t\x04\x98'
tRp6822
sa(dp6823
S'trial_loop.thisTrialN'
p6824
I28
sg6371
S'26-walkers_smoky_bacon.png'
p6825
sS'block_loop.thisIndex'
p6826
g6365
sg38
S'right'
p6827
sg59
g63
sS'trial_loop.thisN'
p6828
I28
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6829
g60
(g99
S'\x1c\x00\x00\x00'
tRp6830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6831
I0
sg6380
S'44-crunch.png'
p6832
sS'block_loop.thisRepN'
p6833
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6834
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6835
Nsg70
Vn
sS'block_loop.thisTrialN'
p6836
I0
sg39
F0.9665844442188245
sg34
g753
(S'\x07\xdf\x07\r\r\x1c\x0b\x04\x12\xf8'
tRp6837
sa(dp6838
S'trial_loop.thisTrialN'
p6839
I29
sg6371
g6460
sS'block_loop.thisIndex'
p6840
g6365
sg38
S'right'
p6841
sg59
g63
sS'trial_loop.thisN'
p6842
I29
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6843
g60
(g99
S'\x1d\x00\x00\x00'
tRp6844
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6845
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6846
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6847
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p6848
Nsg70
Vn
sS'block_loop.thisTrialN'
p6849
I0
sg39
F1.2332600059635297
sg34
g753
(S'\x07\xdf\x07\r\r\x1c\x11\x04*h'
tRp6850
sa(dp6851
S'trial_loop.thisTrialN'
p6852
I30
sg6371
S'5-pineapple.png'
p6853
sS'block_loop.thisIndex'
p6854
g6365
sg38
S'left'
p6855
sg59
g63
sS'trial_loop.thisN'
p6856
I30
sg33
S'5-pineapple.png'
p6857
sg64
g65
sS'trial_loop.thisIndex'
p6858
g60
(g99
S'\x1e\x00\x00\x00'
tRp6859
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6860
I0
sg6380
S'40-sardines.png'
p6861
sS'block_loop.thisRepN'
p6862
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6863
I2
sg6386
S'40-sardines.png'
p6864
sg55
g11
sS'block_loop.thisTrial'
p6865
Nsg70
Vn
sS'block_loop.thisTrialN'
p6866
I0
sg39
F1.3665293631638633
sg34
g753
(S'\x07\xdf\x07\r\r\x1c\x17\x08\x12h'
tRp6867
sa(dp6868
S'trial_loop.thisTrialN'
p6869
I31
sg6371
S'31-hobnobs.png'
p6870
sS'block_loop.thisIndex'
p6871
g6365
sg38
S'left'
p6872
sg59
g63
sS'trial_loop.thisN'
p6873
I31
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p6874
g60
(g99
S'\x1f\x00\x00\x00'
tRp6875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6876
I0
sg6380
S'25-kitkat.png'
p6877
sS'block_loop.thisRepN'
p6878
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6879
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p6880
Nsg70
Vn
sS'block_loop.thisTrialN'
p6881
I0
sg39
F0.86656813657828025
sg34
g753
(S'\x07\xdf\x07\r\r\x1c\x1d\x0e[\xc8'
tRp6882
sa(dp6883
S'trial_loop.thisTrialN'
p6884
I32
sg6371
S'40-sardines.png'
p6885
sS'block_loop.thisIndex'
p6886
g6365
sg38
S'right'
p6887
sg59
g63
sS'trial_loop.thisN'
p6888
I32
sg33
g6857
sg64
g65
sS'trial_loop.thisIndex'
p6889
g60
(g99
S' \x00\x00\x00'
tRp6890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6891
I0
sg6380
S'5-pineapple.png'
p6892
sS'block_loop.thisRepN'
p6893
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6894
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p6895
Nsg70
Vn
sS'block_loop.thisTrialN'
p6896
I0
sg39
F2.8171120762635837
sg34
g753
(S'\x07\xdf\x07\r\r\x1c#\x0c\xc5\x88'
tRp6897
sa(dp6898
S'trial_loop.thisTrialN'
p6899
I33
sg6371
S'46-pistachios.png'
p6900
sS'block_loop.thisIndex'
p6901
g6365
sg38
S'left'
p6902
sg59
g63
sS'trial_loop.thisN'
p6903
I33
sg33
S'46-pistachios.png'
p6904
sg64
g65
sS'trial_loop.thisIndex'
p6905
g60
(g99
S'!\x00\x00\x00'
tRp6906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6907
I0
sg6380
S'29-beans.png'
p6908
sS'block_loop.thisRepN'
p6909
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6910
I2
sg6386
S'29-beans.png'
p6911
sg55
g11
sS'block_loop.thisTrial'
p6912
Nsg70
Vn
sS'block_loop.thisTrialN'
p6913
I0
sg39
F1.0665867820298445
sg34
g753
(S'\x07\xdf\x07\r\r\x1c+\no\xe0'
tRp6914
sa(dp6915
S'trial_loop.thisTrialN'
p6916
I34
sg6371
S'6-sour_patch_kids.png'
p6917
sS'block_loop.thisIndex'
p6918
g6365
sg38
S'right'
p6919
sg59
g63
sS'trial_loop.thisN'
p6920
I34
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p6921
g60
(g99
S'"\x00\x00\x00'
tRp6922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6923
I0
sg6380
S'38-maltesers.png'
p6924
sS'block_loop.thisRepN'
p6925
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6926
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p6927
Nsg70
Vn
sS'block_loop.thisTrialN'
p6928
I0
sg39
F0.78306388661258097
sg34
g753
(S'\x07\xdf\x07\r\r\x1c1\x0b\xf6\x80'
tRp6929
sa(dp6930
S'trial_loop.thisTrialN'
p6931
I35
sg6371
S'20-fruit_pastilles.png'
p6932
sS'block_loop.thisIndex'
p6933
g6365
sg38
S'right'
p6934
sg59
g63
sS'trial_loop.thisN'
p6935
I35
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p6936
g60
(g99
S'#\x00\x00\x00'
tRp6937
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6938
I0
sg6380
S'2-steamed_puddings.png'
p6939
sS'block_loop.thisRepN'
p6940
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6941
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p6942
Nsg70
Vn
sS'block_loop.thisTrialN'
p6943
I0
sg39
F0.83322385545579891
sg34
g753
(S'\x07\xdf\x07\r\r\x1c7\t3x'
tRp6944
sa(dp6945
S'trial_loop.thisTrialN'
p6946
I36
sg6371
g6556
sS'block_loop.thisIndex'
p6947
g6365
sg38
S'right'
p6948
sg59
g63
sS'trial_loop.thisN'
p6949
I36
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p6950
g60
(g99
S'$\x00\x00\x00'
tRp6951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6952
I0
sg6380
g6564
sS'block_loop.thisRepN'
p6953
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6954
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p6955
Nsg70
Vn
sS'block_loop.thisTrialN'
p6956
I0
sg39
F0.66657771589234471
sg34
g753
(S'\x07\xdf\x07\r\r\x1d\x01\x07$ '
tRp6957
sa(dp6958
S'trial_loop.thisTrialN'
p6959
I37
sg6371
g6524
sS'block_loop.thisIndex'
p6960
g6365
sg38
S'left'
p6961
sg59
g63
sS'trial_loop.thisN'
p6962
I37
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p6963
g60
(g99
S'%\x00\x00\x00'
tRp6964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6965
I0
sg6380
g6531
sS'block_loop.thisRepN'
p6966
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6967
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p6968
Nsg70
Vn
sS'block_loop.thisTrialN'
p6969
I0
sg39
F0.71656291927320126
sg34
g753
(S'\x07\xdf\x07\r\r\x1d\x07\x02x\xd0'
tRp6970
sa(dp6971
S'trial_loop.thisTrialN'
p6972
I38
sg6371
g6767
sS'block_loop.thisIndex'
p6973
g6365
sg38
S'left'
p6974
sg59
g63
sS'trial_loop.thisN'
p6975
I38
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p6976
g60
(g99
S'&\x00\x00\x00'
tRp6977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6978
I0
sg6380
g6775
sS'block_loop.thisRepN'
p6979
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6980
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p6981
Nsg70
Vn
sS'block_loop.thisTrialN'
p6982
I0
sg39
F0.86692764595863991
sg34
g753
(S'\x07\xdf\x07\r\r\x1d\x0c\x0e\x05\xd8'
tRp6983
sa(dp6984
S'trial_loop.thisTrialN'
p6985
I39
sg6371
S'1-treacle_cookies.png'
p6986
sS'block_loop.thisIndex'
p6987
g6365
sg38
S'left'
p6988
sg59
g63
sS'trial_loop.thisN'
p6989
I39
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p6990
g60
(g99
S"'\x00\x00\x00"
tRp6991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6992
I0
sg6380
S'21-nakd_banana_crunch.png'
p6993
sS'block_loop.thisRepN'
p6994
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6995
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p6996
Nsg70
Vn
sS'block_loop.thisTrialN'
p6997
I0
sg39
F0.70000496071588714
sg34
g753
(S'\x07\xdf\x07\r\r\x1d\x12\x0co\x98'
tRp6998
sa(dp6999
S'trial_loop.thisTrialN'
p7000
I40
sg6371
g6605
sS'block_loop.thisIndex'
p7001
g6365
sg38
S'right'
p7002
sg59
g63
sS'trial_loop.thisN'
p7003
I40
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7004
g60
(g99
S'(\x00\x00\x00'
tRp7005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7006
I0
sg6380
g6612
sS'block_loop.thisRepN'
p7007
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7008
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7009
Nsg70
Vn
sS'block_loop.thisTrialN'
p7010
I0
sg39
F0.86670726471311355
sg34
g753
(S'\x07\xdf\x07\r\r\x1d\x18\x08{\xe0'
tRp7011
sa(dp7012
S'trial_loop.thisTrialN'
p7013
I41
sg6371
g6853
sS'block_loop.thisIndex'
p7014
g6365
sg38
S'left'
p7015
sg59
g63
sS'trial_loop.thisN'
p7016
I41
sg33
g6864
sg64
g65
sS'trial_loop.thisIndex'
p7017
g60
(g99
S')\x00\x00\x00'
tRp7018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7019
I0
sg6380
g6861
sS'block_loop.thisRepN'
p7020
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7021
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p7022
Nsg70
Vn
sS'block_loop.thisTrialN'
p7023
I0
sg39
F1.8497153860316757
sg34
g753
(S'\x07\xdf\x07\r\r\x1d\x1e\x06\xe9\x88'
tRp7024
sa(dp7025
S'trial_loop.thisTrialN'
p7026
I42
sg6371
S'16-skips_prawn.png'
p7027
sS'block_loop.thisIndex'
p7028
g6365
sg38
S'right'
p7029
sg59
g63
sS'trial_loop.thisN'
p7030
I42
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7031
g60
(g99
S'*\x00\x00\x00'
tRp7032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7033
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7034
sS'block_loop.thisRepN'
p7035
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7036
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7037
Nsg70
Vn
sS'block_loop.thisTrialN'
p7038
I0
sg39
F0.73320270113799779
sg34
g753
(S'\x07\xdf\x07\r\r\x1d%\x05\x14\xc8'
tRp7039
sa(dp7040
S'trial_loop.thisTrialN'
p7041
I43
sg6371
g6573
sS'block_loop.thisIndex'
p7042
g6365
sg38
S'left'
p7043
sg59
g63
sS'trial_loop.thisN'
p7044
I43
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7045
g60
(g99
S'+\x00\x00\x00'
tRp7046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7047
I0
sg6380
g6580
sS'block_loop.thisRepN'
p7048
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7049
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p7050
Nsg70
Vn
sS'block_loop.thisTrialN'
p7051
I0
sg39
F1.0000319310474879
sg34
g753
(S'\x07\xdf\x07\r\r\x1d+\x01\x9a('
tRp7052
sa(dp7053
S'trial_loop.thisTrialN'
p7054
I44
sg6371
g7027
sS'block_loop.thisIndex'
p7055
g6365
sg38
S'right'
p7056
sg59
g63
sS'trial_loop.thisN'
p7057
I44
sg33
g6631
sg64
g65
sS'trial_loop.thisIndex'
p7058
g60
(g99
S',\x00\x00\x00'
tRp7059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7060
I0
sg6380
g7034
sS'block_loop.thisRepN'
p7061
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7062
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7063
Nsg70
Vn
sS'block_loop.thisTrialN'
p7064
I0
sg39
F5.3164053167474776
sg34
g753
(S'\x07\xdf\x07\r\r\x1d1\x01\xec0'
tRp7065
sa(dp7066
S'trial_loop.thisTrialN'
p7067
I45
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p7068
sS'block_loop.thisIndex'
p7069
g6365
sg38
S'left'
p7070
sg59
g63
sS'trial_loop.thisN'
p7071
I45
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p7072
g60
(g99
S'-\x00\x00\x00'
tRp7073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7074
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p7075
sS'block_loop.thisRepN'
p7076
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7077
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p7078
Nsg70
Vn
sS'block_loop.thisTrialN'
p7079
I0
sg39
F1.1000100354722235
sg34
g753
(S'\x07\xdf\x07\r\r\x1d;\x07f\x88'
tRp7080
sa(dp7081
S'trial_loop.thisTrialN'
p7082
I46
sg6371
g6917
sS'block_loop.thisIndex'
p7083
g6365
sg38
S'right'
p7084
sg59
g63
sS'trial_loop.thisN'
p7085
I46
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7086
g60
(g99
S'.\x00\x00\x00'
tRp7087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7088
I0
sg6380
g6924
sS'block_loop.thisRepN'
p7089
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7090
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p7091
Nsg70
Vn
sS'block_loop.thisTrialN'
p7092
I0
sg39
F1.4663341276173014
sg34
g753
(S'\x07\xdf\x07\r\r\x1e\x05\tf@'
tRp7093
sa(dp7094
S'trial_loop.thisTrialN'
p7095
I47
sg6371
g6684
sS'block_loop.thisIndex'
p7096
g6365
sg38
S'left'
p7097
sg59
g63
sS'trial_loop.thisN'
p7098
I47
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p7099
g60
(g99
S'/\x00\x00\x00'
tRp7100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7101
I0
sg6380
g6692
sS'block_loop.thisRepN'
p7102
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7103
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p7104
Nsg70
Vn
sS'block_loop.thisTrialN'
p7105
I0
sg39
F1.3830362890639663
sg34
g753
(S'\x07\xdf\x07\r\r\x1e\x0c\x01\xd8\xa8'
tRp7106
sa(dp7107
S'trial_loop.thisTrialN'
p7108
I48
sg6371
g6460
sS'block_loop.thisIndex'
p7109
g6365
sg38
S'right'
p7110
sg59
g63
sS'trial_loop.thisN'
p7111
I48
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7112
g60
(g99
S'0\x00\x00\x00'
tRp7113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7114
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7115
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7116
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7117
Nsg70
Vn
sS'block_loop.thisTrialN'
p7118
I0
sg39
F0.73336976893915562
sg34
g753
(S'\x07\xdf\x07\r\r\x1e\x12\x08\x1e '
tRp7119
sa(dp7120
S'trial_loop.thisTrialN'
p7121
I49
sg6371
g6372
sS'block_loop.thisIndex'
p7122
g6365
sg38
S'right'
p7123
sg59
g63
sS'trial_loop.thisN'
p7124
I49
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7125
g60
(g99
S'1\x00\x00\x00'
tRp7126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7127
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7128
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7129
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7130
Nsg70
Vn
sS'block_loop.thisTrialN'
p7131
I0
sg39
F0.54985149212006945
sg34
g753
(S'\x07\xdf\x07\r\r\x1e\x18\x04\xa3\x80'
tRp7132
sa(dp7133
S'trial_loop.thisTrialN'
p7134
I50
sg6371
g6556
sS'block_loop.thisIndex'
p7135
g6365
sg38
S'right'
p7136
sg59
g63
sS'trial_loop.thisN'
p7137
I50
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7138
g60
(g99
S'2\x00\x00\x00'
tRp7139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7140
I0
sg6380
g6564
sS'block_loop.thisRepN'
p7141
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7142
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7143
Nsg70
Vn
sS'block_loop.thisTrialN'
p7144
I0
sg39
F1.0166768446870265
sg34
g753
(S'\x07\xdf\x07\r\r\x1e\x1d\r\x90\xa8'
tRp7145
sa(dp7146
S'trial_loop.thisTrialN'
p7147
I51
sg6371
g6784
sS'block_loop.thisIndex'
p7148
g6365
sg38
S'right'
p7149
sg59
g63
sS'trial_loop.thisN'
p7150
I51
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p7151
g60
(g99
S'3\x00\x00\x00'
tRp7152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7153
I0
sg6380
g6791
sS'block_loop.thisRepN'
p7154
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7155
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p7156
Nsg70
Vn
sS'block_loop.thisTrialN'
p7157
I0
sg39
F1.2166256409727794
sg34
g753
(S'\x07\xdf\x07\r\r\x1e#\x0e!0'
tRp7158
sa(dp7159
S'trial_loop.thisTrialN'
p7160
I52
sg6371
g6900
sS'block_loop.thisIndex'
p7161
g6365
sg38
S'left'
p7162
sg59
g63
sS'trial_loop.thisN'
p7163
I52
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p7164
g60
(g99
S'4\x00\x00\x00'
tRp7165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7166
I0
sg6380
g6908
sS'block_loop.thisRepN'
p7167
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7168
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p7169
Nsg70
Vn
sS'block_loop.thisTrialN'
p7170
I0
sg39
F0.73325972086422553
sg34
g753
(S'\x07\xdf\x07\r\r\x1e*\x02\xc6\xf0'
tRp7171
sa(dp7172
S'trial_loop.thisTrialN'
p7173
I53
sg6371
g6620
sS'block_loop.thisIndex'
p7174
g6365
sg38
S'left'
p7175
sg59
g63
sS'trial_loop.thisN'
p7176
I53
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7177
g60
(g99
S'5\x00\x00\x00'
tRp7178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7179
I0
sg6380
g6628
sS'block_loop.thisRepN'
p7180
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7181
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7182
Nsg70
Vn
sS'block_loop.thisTrialN'
p7183
I0
sg39
F1.0664616237281734
sg34
g753
(S'\x07\xdf\x07\r\r\x1e/\x0e\x8e\x90'
tRp7184
sa(dp7185
S'trial_loop.thisTrialN'
p7186
I54
sg6371
g6652
sS'block_loop.thisIndex'
p7187
g6365
sg38
S'right'
p7188
sg59
g63
sS'trial_loop.thisN'
p7189
I54
sg33
g6663
sg64
g65
sS'trial_loop.thisIndex'
p7190
g60
(g99
S'6\x00\x00\x00'
tRp7191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7192
I0
sg6380
g6660
sS'block_loop.thisRepN'
p7193
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7194
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p7195
Nsg70
Vn
sS'block_loop.thisTrialN'
p7196
I0
sg39
F0.61663841339213832
sg34
g753
(S'\x07\xdf\x07\r\r\x1e6\x00\xd2\xf0'
tRp7197
sa(dp7198
S'trial_loop.thisTrialN'
p7199
I55
sg6371
g6507
sS'block_loop.thisIndex'
p7200
g6365
sg38
S'left'
p7201
sg59
g63
sS'trial_loop.thisN'
p7202
I55
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p7203
g60
(g99
S'7\x00\x00\x00'
tRp7204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7205
I0
sg6380
g6515
sS'block_loop.thisRepN'
p7206
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7207
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p7208
Nsg70
Vn
sS'block_loop.thisTrialN'
p7209
I0
sg39
F1.0165166192546167
sg34
g753
(S'\x07\xdf\x07\r\r\x1e;\n\xb2H'
tRp7210
sa(dp7211
S'trial_loop.thisTrialN'
p7212
I56
sg6371
g6733
sS'block_loop.thisIndex'
p7213
g6365
sg38
S'left'
p7214
sg59
g63
sS'trial_loop.thisN'
p7215
I56
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p7216
g60
(g99
S'8\x00\x00\x00'
tRp7217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7218
I0
sg6380
g6741
sS'block_loop.thisRepN'
p7219
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7220
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p7221
Nsg70
Vn
sS'block_loop.thisTrialN'
p7222
I0
sg39
F0.83319534559268504
sg34
g753
(S'\x07\xdf\x07\r\r\x1f\x05\x0b\x81P'
tRp7223
sa(dp7224
S'trial_loop.thisTrialN'
p7225
I57
sg6371
g6784
sS'block_loop.thisIndex'
p7226
g6365
sg38
S'right'
p7227
sg59
g63
sS'trial_loop.thisN'
p7228
I57
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p7229
g60
(g99
S'9\x00\x00\x00'
tRp7230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7231
I0
sg6380
g6791
sS'block_loop.thisRepN'
p7232
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7233
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p7234
Nsg70
Vn
sS'block_loop.thisTrialN'
p7235
I0
sg39
F0.98336335421845433
sg34
g753
(S'\x07\xdf\x07\r\r\x1f\x0b\tq\xf8'
tRp7236
sa(dp7237
S'trial_loop.thisTrialN'
p7238
I58
sg6371
g7027
sS'block_loop.thisIndex'
p7239
g6365
sg38
S'right'
p7240
sg59
g63
sS'trial_loop.thisN'
p7241
I58
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7242
g60
(g99
S':\x00\x00\x00'
tRp7243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7244
I0
sg6380
g7034
sS'block_loop.thisRepN'
p7245
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7246
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7247
Nsg70
Vn
sS'block_loop.thisTrialN'
p7248
I0
sg39
F1.2331522386793949
sg34
g753
(S'\x07\xdf\x07\r\r\x1f\x11\t\x89h'
tRp7249
sa(dp7250
S'trial_loop.thisTrialN'
p7251
I59
sg6371
g6718
sS'block_loop.thisIndex'
p7252
g6365
sg38
S'right'
p7253
sg59
g63
sS'trial_loop.thisN'
p7254
I59
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p7255
g60
(g99
S';\x00\x00\x00'
tRp7256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7257
I0
sg6380
g6725
sS'block_loop.thisRepN'
p7258
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vn
sS'block_loop.thisTrialN'
p7261
I0
sg39
F0.73322893021213531
sg34
g753
(S'\x07\xdf\x07\r\r\x1f\x17\r\xaf\xe8'
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
g6932
sS'block_loop.thisIndex'
p7265
g6365
sg38
S'right'
p7266
sg59
g63
sS'trial_loop.thisN'
p7267
I60
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7268
g60
(g99
S'<\x00\x00\x00'
tRp7269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7270
I0
sg6380
g6939
sS'block_loop.thisRepN'
p7271
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vn
sS'block_loop.thisTrialN'
p7274
I0
sg39
F1.1163969348472165
sg34
g753
(S'\x07\xdf\x07\r\r\x1f\x1d\n5H'
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
g6870
sS'block_loop.thisIndex'
p7278
g6365
sg38
S'left'
p7279
sg59
g63
sS'trial_loop.thisN'
p7280
I61
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7281
g60
(g99
S'=\x00\x00\x00'
tRp7282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7283
I0
sg6380
g6877
sS'block_loop.thisRepN'
p7284
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vn
sS'block_loop.thisTrialN'
p7287
I0
sg39
F0.73321695607046422
sg34
g753
(S'\x07\xdf\x07\r\r\x1f#\x0co\x98'
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6524
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'left'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6531
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vn
sS'block_loop.thisTrialN'
p7300
I0
sg39
F0.78317963665904244
sg34
g753
(S'\x07\xdf\x07\r\r\x1f)\x08\xf4\xf8'
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
g6900
sS'block_loop.thisIndex'
p7304
g6365
sg38
S'left'
p7305
sg59
g63
sS'trial_loop.thisN'
p7306
I63
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p7307
g60
(g99
S'?\x00\x00\x00'
tRp7308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7309
I0
sg6380
g6908
sS'block_loop.thisRepN'
p7310
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7311
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p7312
Nsg70
Vn
sS'block_loop.thisTrialN'
p7313
I0
sg39
F1.0333060779030347
sg34
g753
(S'\x07\xdf\x07\r\r\x1f/\x061\xf0'
tRp7314
sa(dp7315
S'trial_loop.thisTrialN'
p7316
I64
sg6371
g6701
sS'block_loop.thisIndex'
p7317
g6365
sg38
S'left'
p7318
sg59
g63
sS'trial_loop.thisN'
p7319
I64
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7320
g60
(g99
S'@\x00\x00\x00'
tRp7321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7322
I0
sg6380
g6709
sS'block_loop.thisRepN'
p7323
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7324
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p7325
Nsg70
Vn
sS'block_loop.thisTrialN'
p7326
I0
sg39
F0.78303794263774762
sg34
g753
(S'\x07\xdf\x07\r\r\x1f5\x07\x00\xf8'
tRp7327
sa(dp7328
S'trial_loop.thisTrialN'
p7329
I65
sg6371
g6853
sS'block_loop.thisIndex'
p7330
g6365
sg38
S'left'
p7331
sg59
g63
sS'trial_loop.thisN'
p7332
I65
sg33
g6857
sg64
g65
sS'trial_loop.thisIndex'
p7333
g60
(g99
S'A\x00\x00\x00'
tRp7334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7335
I0
sg6380
g6861
sS'block_loop.thisRepN'
p7336
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7337
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p7338
Nsg70
Vn
sS'block_loop.thisTrialN'
p7339
I0
sg39
F0.75013670479529537
sg34
g753
(S'\x07\xdf\x07\r\r\x1f;\x04:\x08'
tRp7340
sa(dp7341
S'trial_loop.thisTrialN'
p7342
I66
sg6371
g6750
sS'block_loop.thisIndex'
p7343
g6365
sg38
S'right'
p7344
sg59
g63
sS'trial_loop.thisN'
p7345
I66
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p7346
g60
(g99
S'B\x00\x00\x00'
tRp7347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7348
I0
sg6380
g6758
sS'block_loop.thisRepN'
p7349
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7350
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p7351
Nsg70
Vn
sS'block_loop.thisTrialN'
p7352
I0
sg39
F0.91663145698476001
sg34
g753
(S'\x07\xdf\x07\r\r \x05\x00\xfd\xe8'
tRp7353
sa(dp7354
S'trial_loop.thisTrialN'
p7355
I67
sg6371
g6932
sS'block_loop.thisIndex'
p7356
g6365
sg38
S'right'
p7357
sg59
g63
sS'trial_loop.thisN'
p7358
I67
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7359
g60
(g99
S'C\x00\x00\x00'
tRp7360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7361
I0
sg6380
g6939
sS'block_loop.thisRepN'
p7362
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7363
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7364
Nsg70
Vn
sS'block_loop.thisTrialN'
p7365
I0
sg39
F0.81664708038988465
sg34
g753
(S'\x07\xdf\x07\r\r \x0b\x00#('
tRp7366
sa(dp7367
S'trial_loop.thisTrialN'
p7368
I68
sg6371
g6733
sS'block_loop.thisIndex'
p7369
g6365
sg38
S'left'
p7370
sg59
g63
sS'trial_loop.thisN'
p7371
I68
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p7372
g60
(g99
S'D\x00\x00\x00'
tRp7373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7374
I0
sg6380
g6741
sS'block_loop.thisRepN'
p7375
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7376
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p7377
Nsg70
Vn
sS'block_loop.thisTrialN'
p7378
I0
sg39
F3.316512513833004
sg34
g753
(S'\x07\xdf\x07\r\r \x10\r\x1bx'
tRp7379
sa(dp7380
S'trial_loop.thisTrialN'
p7381
I69
sg6371
g6986
sS'block_loop.thisIndex'
p7382
g6365
sg38
S'left'
p7383
sg59
g63
sS'trial_loop.thisN'
p7384
I69
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7385
g60
(g99
S'E\x00\x00\x00'
tRp7386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7387
I0
sg6380
g6993
sS'block_loop.thisRepN'
p7388
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7389
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p7390
Nsg70
Vn
sS'block_loop.thisTrialN'
p7391
I0
sg39
F0.81656440178630874
sg34
g753
(S'\x07\xdf\x07\r\r \x19\x03[`'
tRp7392
sa(dp7393
S'trial_loop.thisTrialN'
p7394
I70
sg6371
g6556
sS'block_loop.thisIndex'
p7395
g6365
sg38
S'right'
p7396
sg59
g63
sS'trial_loop.thisN'
p7397
I70
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7398
g60
(g99
S'F\x00\x00\x00'
tRp7399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7400
I0
sg6380
g6564
sS'block_loop.thisRepN'
p7401
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7402
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7403
Nsg70
Vn
sS'block_loop.thisTrialN'
p7404
I0
sg39
F0.88352437793037097
sg34
g753
(S'\x07\xdf\x07\r\r \x1f\x01\x11p'
tRp7405
sa(dp7406
S'trial_loop.thisTrialN'
p7407
I71
sg6371
g7027
sS'block_loop.thisIndex'
p7408
g6365
sg38
S'right'
p7409
sg59
g63
sS'trial_loop.thisN'
p7410
I71
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7411
g60
(g99
S'G\x00\x00\x00'
tRp7412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7413
I0
sg6380
g7034
sS'block_loop.thisRepN'
p7414
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7415
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7416
Nsg70
Vn
sS'block_loop.thisTrialN'
p7417
I0
sg39
F0.83314402783980768
sg34
g753
(S'\x07\xdf\x07\r\r $\x0e\xff\xd8'
tRp7418
sa(dp7419
S'trial_loop.thisTrialN'
p7420
I72
sg6371
g6669
sS'block_loop.thisIndex'
p7421
g6365
sg38
S'right'
p7422
sg59
g63
sS'trial_loop.thisN'
p7423
I72
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p7424
g60
(g99
S'H\x00\x00\x00'
tRp7425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7426
I0
sg6380
g6676
sS'block_loop.thisRepN'
p7427
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7428
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p7429
Nsg70
Vn
sS'block_loop.thisTrialN'
p7430
I0
sg39
F0.83320817503226863
sg34
g753
(S'\x07\xdf\x07\r\r *\x0c\xf0\x80'
tRp7431
sa(dp7432
S'trial_loop.thisTrialN'
p7433
I73
sg6371
g6605
sS'block_loop.thisIndex'
p7434
g6365
sg38
S'right'
p7435
sg59
g63
sS'trial_loop.thisN'
p7436
I73
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7437
g60
(g99
S'I\x00\x00\x00'
tRp7438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7439
I0
sg6380
g6612
sS'block_loop.thisRepN'
p7440
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7441
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7442
Nsg70
Vn
sS'block_loop.thisTrialN'
p7443
I0
sg39
F0.63331155179730558
sg34
g753
(S'\x07\xdf\x07\r\r 0\n\xe5\x10'
tRp7444
sa(dp7445
S'trial_loop.thisTrialN'
p7446
I74
sg6371
g7068
sS'block_loop.thisIndex'
p7447
g6365
sg38
S'left'
p7448
sg59
g63
sS'trial_loop.thisN'
p7449
I74
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p7450
g60
(g99
S'J\x00\x00\x00'
tRp7451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7452
I0
sg6380
g7075
sS'block_loop.thisRepN'
p7453
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7454
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p7455
Nsg70
Vn
sS'block_loop.thisTrialN'
p7456
I0
sg39
F0.94987709397901199
sg34
g753
(S'\x07\xdf\x07\r\r 6\x05\xc0\xa8'
tRp7457
sa(dp7458
S'trial_loop.thisTrialN'
p7459
I75
sg6371
g6684
sS'block_loop.thisIndex'
p7460
g6365
sg38
S'left'
p7461
sg59
g63
sS'trial_loop.thisN'
p7462
I75
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p7463
g60
(g99
S'K\x00\x00\x00'
tRp7464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7465
I0
sg6380
g6692
sS'block_loop.thisRepN'
p7466
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7467
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p7468
Nsg70
Vn
sS'block_loop.thisTrialN'
p7469
I0
sg39
F0.85007974208747328
sg34
g753
(S'\x07\xdf\x07\r\r!\x00\x05\x99\x98'
tRp7470
sa(dp7471
S'trial_loop.thisTrialN'
p7472
I76
sg6371
g6477
sS'block_loop.thisIndex'
p7473
g6365
sg38
S'right'
p7474
sg59
g63
sS'trial_loop.thisN'
p7475
I76
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7476
g60
(g99
S'L\x00\x00\x00'
tRp7477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7478
I0
sg6380
g6485
sS'block_loop.thisRepN'
p7479
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7480
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p7481
Nsg70
Vn
sS'block_loop.thisTrialN'
p7482
I0
sg39
F0.78366858081790269
sg34
g753
(S'\x07\xdf\x07\r\r!\x06\x03\xc8\xc0'
tRp7483
sa(dp7484
S'trial_loop.thisTrialN'
p7485
I77
sg6371
g6652
sS'block_loop.thisIndex'
p7486
g6365
sg38
S'right'
p7487
sg59
g63
sS'trial_loop.thisN'
p7488
I77
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7489
g60
(g99
S'M\x00\x00\x00'
tRp7490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7491
I0
sg6380
g6660
sS'block_loop.thisRepN'
p7492
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7493
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p7494
Nsg70
Vn
sS'block_loop.thisTrialN'
p7495
I0
sg39
F0.94996661494951695
sg34
g753
(S'\x07\xdf\x07\r\r!\x0c\x01\x05\xb8'
tRp7496
sa(dp7497
S'trial_loop.thisTrialN'
p7498
I78
sg6371
g6825
sS'block_loop.thisIndex'
p7499
g6365
sg38
S'right'
p7500
sg59
g63
sS'trial_loop.thisN'
p7501
I78
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7502
g60
(g99
S'N\x00\x00\x00'
tRp7503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7504
I0
sg6380
g6832
sS'block_loop.thisRepN'
p7505
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7506
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7507
Nsg70
Vn
sS'block_loop.thisTrialN'
p7508
I0
sg39
F0.78323551598987251
sg34
g753
(S'\x07\xdf\x07\r\r!\x12\x00\xa4\x10'
tRp7509
sa(dp7510
S'trial_loop.thisTrialN'
p7511
I79
sg6371
S'4-corn.png'
p7512
sS'block_loop.thisIndex'
p7513
g6365
sg38
S'right'
p7514
sg59
g63
sS'trial_loop.thisN'
p7515
I79
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p7516
g60
(g99
S'O\x00\x00\x00'
tRp7517
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7518
I0
sg6380
S'10-bounty_redo.png'
p7519
sS'block_loop.thisRepN'
p7520
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7521
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p7522
Nsg70
Vn
sS'block_loop.thisTrialN'
p7523
I0
sg39
F0.83338180010105134
sg34
g753
(S'\x07\xdf\x07\r\r!\x17\r#H'
tRp7524
sa(dp7525
S'trial_loop.thisTrialN'
p7526
I80
sg6371
g6767
sS'block_loop.thisIndex'
p7527
g6365
sg38
S'left'
p7528
sg59
g63
sS'trial_loop.thisN'
p7529
I80
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p7530
g60
(g99
S'P\x00\x00\x00'
tRp7531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7532
I0
sg6380
g6775
sS'block_loop.thisRepN'
p7533
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7534
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p7535
Nsg70
Vn
sS'block_loop.thisTrialN'
p7536
I0
sg39
F1.9498177934619889
sg34
g753
(S'\x07\xdf\x07\r\r!\x1d\x0b\x13\xf0'
tRp7537
sa(dp7538
S'trial_loop.thisTrialN'
p7539
I81
sg6371
g6573
sS'block_loop.thisIndex'
p7540
g6365
sg38
S'left'
p7541
sg59
g63
sS'trial_loop.thisN'
p7542
I81
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7543
g60
(g99
S'Q\x00\x00\x00'
tRp7544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7545
I0
sg6380
g6580
sS'block_loop.thisRepN'
p7546
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7547
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p7548
Nsg70
Vn
sS'block_loop.thisTrialN'
p7549
I0
sg39
F0.84999820387747604
sg34
g753
(S'\x07\xdf\x07\r\r!$\n\xe8\xf8'
tRp7550
sa(dp7551
S'trial_loop.thisTrialN'
p7552
I82
sg6371
g6524
sS'block_loop.thisIndex'
p7553
g6365
sg38
S'left'
p7554
sg59
g63
sS'trial_loop.thisN'
p7555
I82
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7556
g60
(g99
S'R\x00\x00\x00'
tRp7557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7558
I0
sg6380
g6531
sS'block_loop.thisRepN'
p7559
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7560
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7561
Nsg70
Vn
sS'block_loop.thisTrialN'
p7562
I0
sg39
F0.66667208354010654
sg34
g753
(S'\x07\xdf\x07\r\r!*\t\x18 '
tRp7563
sa(dp7564
S'trial_loop.thisTrialN'
p7565
I83
sg6371
S'48-twix.png'
p7566
sS'block_loop.thisIndex'
p7567
g6365
sg38
S'left'
p7568
sg59
g63
sS'trial_loop.thisN'
p7569
I83
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7570
g60
(g99
S'S\x00\x00\x00'
tRp7571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7572
I0
sg6380
S'50-polo.png'
p7573
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7575
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vn
sS'block_loop.thisTrialN'
p7577
I0
sg39
F0.84989300248162181
sg34
g753
(S'\x07\xdf\x07\r\r!0\x04\xabP'
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g6573
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'left'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g6580
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7588
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vn
sS'block_loop.thisTrialN'
p7590
I0
sg39
F0.81663795723397925
sg34
g753
(S'\x07\xdf\x07\r\r!6\x02\xdax'
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
g6588
sS'block_loop.thisIndex'
p7594
g6365
sg38
S'left'
p7595
sg59
g63
sS'trial_loop.thisN'
p7596
I85
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p7597
g60
(g99
S'U\x00\x00\x00'
tRp7598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7599
I0
sg6380
g6596
sS'block_loop.thisRepN'
p7600
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7601
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p7602
Nsg70
Vn
sS'block_loop.thisTrialN'
p7603
I0
sg39
F1.5498648917564424
sg34
g753
(S'\x07\xdf\x07\r\r"\x00\x00\x90\x88'
tRp7604
sa(dp7605
S'trial_loop.thisTrialN'
p7606
I86
sg6371
g6392
sS'block_loop.thisIndex'
p7607
g6365
sg38
S'left'
p7608
sg59
g63
sS'trial_loop.thisN'
p7609
I86
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7610
g60
(g99
S'V\x00\x00\x00'
tRp7611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7612
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7613
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7614
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7615
Nsg70
Vn
sS'block_loop.thisTrialN'
p7616
I0
sg39
F0.71659998209543119
sg34
g753
(S'\x07\xdf\x07\r\r"\x06\tu\xe0'
tRp7617
sa(dp7618
S'trial_loop.thisTrialN'
p7619
I87
sg6371
g6669
sS'block_loop.thisIndex'
p7620
g6365
sg38
S'right'
p7621
sg59
g63
sS'trial_loop.thisN'
p7622
I87
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p7623
g60
(g99
S'W\x00\x00\x00'
tRp7624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7625
I0
sg6380
g6676
sS'block_loop.thisRepN'
p7626
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7627
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p7628
Nsg70
Vn
sS'block_loop.thisTrialN'
p7629
I0
sg39
F0.93364614355596132
sg34
g753
(S'\x07\xdf\x07\r\r"\x0c\x05\x82('
tRp7630
sa(dp7631
S'trial_loop.thisTrialN'
p7632
I88
sg6371
g6409
sS'block_loop.thisIndex'
p7633
g6365
sg38
S'right'
p7634
sg59
g63
sS'trial_loop.thisN'
p7635
I88
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7636
g60
(g99
S'X\x00\x00\x00'
tRp7637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7638
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7639
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7640
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7641
Nsg70
Vn
sS'block_loop.thisTrialN'
p7642
I0
sg39
F0.89998169666796457
sg34
g753
(S'\x07\xdf\x07\r\r"\x12\x05 \x80'
tRp7643
sa(dp7644
S'trial_loop.thisTrialN'
p7645
I89
sg6371
g6588
sS'block_loop.thisIndex'
p7646
g6365
sg38
S'left'
p7647
sg59
g63
sS'trial_loop.thisN'
p7648
I89
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p7649
g60
(g99
S'Y\x00\x00\x00'
tRp7650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7651
I0
sg6380
g6596
sS'block_loop.thisRepN'
p7652
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7653
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p7654
Nsg70
Vn
sS'block_loop.thisTrialN'
p7655
I0
sg39
F2.6833212736619316
sg34
g753
(S'\x07\xdf\x07\r\r"\x18\x04\x07@'
tRp7656
sa(dp7657
S'trial_loop.thisTrialN'
p7658
I90
sg6371
S'30-spaghetti_hoops.png'
p7659
sS'block_loop.thisIndex'
p7660
g6365
sg38
S'right'
p7661
sg59
g63
sS'trial_loop.thisN'
p7662
I90
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p7663
g60
(g99
S'Z\x00\x00\x00'
tRp7664
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7665
I0
sg6380
S'19-caramello_redo.png'
p7666
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vn
sS'block_loop.thisTrialN'
p7670
I0
sg39
F0.7999856310289033
sg34
g753
(S'\x07\xdf\x07\r\r"\x1f\x0f\x0b\x90'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
S'22-daim.png'
p7674
sS'block_loop.thisIndex'
p7675
g6365
sg38
S'left'
p7676
sg59
g63
sS'trial_loop.thisN'
p7677
I91
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7678
g60
(g99
S'[\x00\x00\x00'
tRp7679
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7680
I0
sg6380
S'7-olives.png'
p7681
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7683
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vn
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.6831114410651935
sg34
g753
(S'\x07\xdf\x07\r\r"%\x0c\x83 '
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g7027
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'left'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g6631
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g7034
sS'block_loop.thisRepN'
p7695
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vn
sS'block_loop.thisTrialN'
p7698
I0
sg39
F1.4164424365899322
sg34
g753
(S'\x07\xdf\x07\r\r"+\x08\x16P'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g7674
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'left'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g7681
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7709
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vn
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.83328315597464098
sg34
g753
(S'\x07\xdf\x07\r\r"1\x0e\xd8\xc8'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
g6392
sS'block_loop.thisIndex'
p7715
g6365
sg38
S'left'
p7716
sg59
g63
sS'trial_loop.thisN'
p7717
I94
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7718
g60
(g99
S'^\x00\x00\x00'
tRp7719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7720
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7721
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7722
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vn
sS'block_loop.thisTrialN'
p7724
I0
sg39
F0.66664186308480566
sg34
g753
(S'\x07\xdf\x07\r\r"7\r\x07\xf0'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g6750
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'right'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g6758
sS'block_loop.thisRepN'
p7734
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7735
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vn
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.94997630830221169
sg34
g753
(S'\x07\xdf\x07\r\r#\x01\x08\\\xa0'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g6718
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'right'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g6725
sS'block_loop.thisRepN'
p7747
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7748
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vn
sS'block_loop.thisTrialN'
p7750
I0
sg39
F0.69995677904807962
sg34
g753
(S'\x07\xdf\x07\r\r#\x07\x07\xfa\xf8'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6539
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'left'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6547
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7761
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vn
sS'block_loop.thisTrialN'
p7763
I0
sg39
F0.99998175368637021
sg34
g753
(S'\x07\xdf\x07\r\r#\r\x04\x07@'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g7068
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'left'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g7075
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vn
sS'block_loop.thisTrialN'
p7776
I0
sg39
F0.65038411339082813
sg34
g753
(S'\x07\xdf\x07\r\r#\x13\x04\x97\xc8'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6825
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'right'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6832
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vn
sS'block_loop.thisTrialN'
p7789
I0
sg39
F0.78329111022503639
sg34
g753
(S'\x07\xdf\x07\r\r#\x18\x0e\xf08'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g6460
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'right'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vn
sS'block_loop.thisTrialN'
p7802
I0
sg39
F1.2332491722154373
sg34
g753
(S'\x07\xdf\x07\r\r#\x1e\x0c-0'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g6652
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'right'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g6660
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vn
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.8832512534372654
sg34
g753
(S'\x07\xdf\x07\r\r#%\x01\r\x88'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6443
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'left'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vn
sS'block_loop.thisTrialN'
p7828
I0
sg39
F1.0833368970670563
sg34
g753
(S'\x07\xdf\x07\r\r#*\x0e\xfb\xf0'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6588
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'left'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6596
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vn
sS'block_loop.thisTrialN'
p7841
I0
sg39
F0.61671082844441116
sg34
g753
(S'\x07\xdf\x07\r\r#1\x01z\xe8'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g6372
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'right'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vn
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.74992031493275135
sg34
g753
(S'\x07\xdf\x07\r\r#6\x0bZ@'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g7512
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g7519
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vn
sS'block_loop.thisTrialN'
p7867
I0
sg39
F2.5333397195427096
sg34
g753
(S'\x07\xdf\x07\r\r$\x00\x08\x1e '
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g6825
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g6832
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.71665129985012754
sg34
g753
(S'\x07\xdf\x07\r\r$\x08\x01~\xd0'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g7512
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g7519
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.81661115796305239
sg34
g753
(S'\x07\xdf\x07\r\r$\r\r\x07\xf0'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6885
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'right'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6857
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6892
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.98336506481246033
sg34
g753
(S'\x07\xdf\x07\r\r$\x13\n\xbe\x00'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g7659
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g7666
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.78306417171188514
sg34
g753
(S'\x07\xdf\x07\r\r$\x19\n\xd5p'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g6637
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'left'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g6644
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vn
sS'block_loop.thisTrialN'
p7932
I0
sg39
F1.0499877692691371
sg34
g753
(S'\x07\xdf\x07\r\r$\x1f\x08\x12h'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g6372
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'right'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vn
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.64997072037112957
sg34
g753
(S'\x07\xdf\x07\r\r$%\tZ\x88'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
S'29-beans.png'
p7949
sS'block_loop.thisIndex'
p7950
g6365
sg38
S'left'
p7951
sg59
g63
sS'trial_loop.thisN'
p7952
I112
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p7953
g60
(g99
S'p\x00\x00\x00'
tRp7954
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7955
I0
sg6380
S'46-pistachios.png'
p7956
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.73330847273246036
sg34
g753
(S'\x07\xdf\x07\r\r$+\x04p\xb8'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6932
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6939
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F0.93317658610430954
sg34
g753
(S'\x07\xdf\x07\r\r$1\x00\xf6\x18'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g7949
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g7956
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.71703076613266603
sg34
g753
(S'\x07\xdf\x07\r\r$7\x00Y\xd8'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7566
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'left'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7573
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.83330967014808266
sg34
g753
(S'\x07\xdf\x07\r\r%\x00\x0b\xe2\xf8'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g7674
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g7681
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.71665586142989923
sg34
g753
(S'\x07\xdf\x07\r\r%\x06\t\xd7\x88'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g7566
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g7573
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.86663998143558274
sg34
g753
(S'\x07\xdf\x07\r\r%\x0c\x06\x1eh'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6637
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6644
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.81656383158770041
sg34
g753
(S'\x07\xdf\x07\r\r%\x12\x04\x8c\x10'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g6460
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g6468
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F0.6163966497497313
sg34
g753
(S'\x07\xdf\x07\r\r%\x18\x02B '
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g7566
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g7573
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.61711367281714047
sg34
g753
(S'\x07\xdf\x07\r\r%\x1d\x0c!x'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7949
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7956
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.76659744471908198
sg34
g753
(S'\x07\xdf\x07\r\r%#\x06\xbe\x90'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6885
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'right'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6857
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6892
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F1.0332972398464335
sg34
g753
(S'\x07\xdf\x07\r\r%)\x03\xc0\xf0'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6443
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F1.5000019956896722
sg34
g753
(S'\x07\xdf\x07\r\r%/\x04\xca\x90'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7068
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'left'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7075
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.81650852245365968
sg34
g753
(S'\x07\xdf\x07\r\r%5\x0c\xf8P'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6917
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'right'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6924
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.86638652874717081
sg34
g753
(S'\x07\xdf\x07\r\r%;\n\xae`'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6825
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6832
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.63334747422595683
sg34
g753
(S'\x07\xdf\x07\r\r&\x05\t\x1c\x08'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6701
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.81630068554659374
sg34
g753
(S'\x07\xdf\x07\r\r&\x0b\x03\xf7\xa0'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6669
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6676
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.8832649381711235
sg34
g753
(S'\x07\xdf\x07\r\r&\x11\x01\xad\xb0'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6477
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6485
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F1.0999530157441768
sg34
g753
(S'\x07\xdf\x07\r\r&\x17\x00U\xf0'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6539
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'right'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F1.416655120172436
sg34
g753
(S'\x07\xdf\x07\r\r&\x1d\x02\x94('
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7659
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7666
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.84992350803440786
sg34
g753
(S'\x07\xdf\x07\r\r&#\tV\xa0'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6477
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'right'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6485
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.78329795259378443
sg34
g753
(S'\x07\xdf\x07\r\r&)\x07\x85\xc8'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7659
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7666
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.68331101011062856
sg34
g753
(S'\x07\xdf\x07\r\r&/\x04\xc2\xc0'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6885
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6857
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6892
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.98326528028883331
sg34
g753
(S'\x07\xdf\x07\r\r&5\x00R\x08'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6605
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6612
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.78322040576313157
sg34
g753
(S'\x07\xdf\x07\r\r&;\x00\xa7\xf8'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6392
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.66666666666606034
sg34
g753
(S"\x07\xdf\x07\r\r'\x04\r'0"
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6573
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6488
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6580
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.6666752196251764
sg34
g753
(S"\x07\xdf\x07\r\r'\n\x08{\xe0"
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6767
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6775
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.71660967544994492
sg34
g753
(S"\x07\xdf\x07\r\r'\x10\x04\x0b("
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6507
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.73325829537316167
sg34
g753
(S"\x07\xdf\x07\r\r'\x16\x00\x17p"
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7068
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6754
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7075
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.1665534825078794
sg34
g753
(S"\x07\xdf\x07\r\r'\x1b\x0b\xdf\x10"
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6885
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6857
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6892
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F1.3165096628490573
sg34
g753
(S"\x07\xdf\x07\r\r'!\x0e\xd0\xf8"
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6718
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6725
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.88339579844432592
sg34
g753
(S"\x07\xdf\x07\r\r'(\x04\xe5\xe8"
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6426
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.78334242797973275
sg34
g753
(S"\x07\xdf\x07\r\r'.\x03\xcc\xa8"
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6507
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.64999010707833804
sg34
g753
(S"\x07\xdf\x07\r\r'4\x01\x05\xb8"
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7566
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7573
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.79985933233365358
sg34
g753
(S"\x07\xdf\x07\r\r'9\x0bb\x10"
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7674
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7681
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.66661363832099596
sg34
g753
(S'\x07\xdf\x07\r\r(\x03\x08\xd9\xa0'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6539
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.64998782628936169
sg34
g753
(S'\x07\xdf\x07\r\r(\t\x04.P'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6917
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6924
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.89972026121722593
sg34
g753
(S'\x07\xdf\x07\r\r(\x0e\x0e\xc5@'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g7949
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g7956
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.76654869285084715
sg34
g753
(S'\x07\xdf\x07\r\r(\x14\r\xac\x00'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6701
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.66630744238500483
sg34
g753
(S'\x07\xdf\x07\r\r(\x1a\n\xaax'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6652
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6660
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.59987062223808607
sg34
g753
(S'\x07\xdf\x07\r\r( \x05\xff('
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6669
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6676
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.98329835172989988
sg34
g753
(S'\x07\xdf\x07\r\r(&\x00a\xa8'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6556
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6564
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.7166507296533382
sg34
g753
(S'\x07\xdf\x07\r\r(,\x00\xb7\x98'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6477
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6488
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6485
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.66668548317647947
sg34
g753
(S'\x07\xdf\x07\r\r(1\x0c\x06 '
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6718
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6725
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.6333414871533023
sg34
g753
(S'\x07\xdf\x07\r\r(7\x07\x95h'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6932
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6939
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.71662221978840535
sg34
g753
(S'\x07\xdf\x07\r\r)\x01\x02q\x00'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6507
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6517
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6517
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6386
g6511
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.7832454944436904
sg34
g753
(S'\x07\xdf\x07\r\r)\x06\r\xfa '
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6784
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6791
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F2.5998959960179491
sg34
g753
(S'\x07\xdf\x07\r\r)\x0c\x0b7\x18'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6733
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6741
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.85036683641374111
sg34
g753
(S'\x07\xdf\x07\r\r)\x14\x05\x8d\xe0'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6426
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.71656177887962258
sg34
g753
(S'\x07\xdf\x07\r\r)\x1a\x03\xbd\x08'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6900
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6908
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.94999084833398229
sg34
g753
(S'\x07\xdf\x07\r\r) \x00\x03\xe8'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6767
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6775
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.58326163102719875
sg34
g753
(S'\x07\xdf\x07\r\r)%\x0e\xe4\x80'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6870
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6877
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.99998717056041642
sg34
g753
(S'\x07\xdf\x07\r\r)+\t\x08\x80'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6588
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6592
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6596
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6592
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6386
g6599
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.69991914602724137
sg34
g753
(S'\x07\xdf\x07\r\r)1\t\x99\x08'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6426
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.73374353325016273
sg34
g753
(S'\x07\xdf\x07\r\r)7\x05f\xd0'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6637
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6644
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.049974084535279
sg34
g753
(S'\x07\xdf\x07\r\r*\x01\x01\xec0'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6701
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F2.4162693817179388
sg34
g753
(S'\x07\xdf\x07\r\r*\x07\x034P'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6870
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6877
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.68331927797044045
sg34
g753
(S'\x07\xdf\x07\r\r*\x0e\n-x'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6684
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6692
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.66657315431439201
sg34
g753
(S'\x07\xdf\x07\r\r*\x14\x05\xc0\xa8'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6637
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6644
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.84997511088840838
sg34
g753
(S'\x07\xdf\x07\r\r*\x1a\x01\x15X'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g7659
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g7666
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6386
g6778
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.8666559469565982
sg34
g753
(S'\x07\xdf\x07\r\r*\x1f\x0e\xc5@'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7949
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7956
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F1.1498940288365702
sg34
g753
(S'\x07\xdf\x07\r\r*%\r/\x00'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6392
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.56669255362248805
sg34
g753
(S'\x07\xdf\x07\r\r*,\x00\xa4\x10'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6426
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.58329812365263933
sg34
g753
(S'\x07\xdf\x07\r\r*1\t\xcf\xb8'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6620
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6631
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6628
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F1.4664458862825995
sg34
g753
(S'\x07\xdf\x07\r\r*7\x03\xf3\xb8'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6605
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6612
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.73340369567631569
sg34
g753
(S'\x07\xdf\x07\r\r+\x01\x0b\xa8`'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6372
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.6166244435589761
sg34
g753
(S'\x07\xdf\x07\r\r+\x07\x07\xef@'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6409
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.76654071009033942
sg34
g753
(S'\x07\xdf\x07\r\r+\x0e\x02\xc3\x08'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6684
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6692
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.83322185976612673
sg34
g753
(S'\x07\xdf\x07\r\r+\x13\x0e\xc9('
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6900
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6904
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6908
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6904
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6386
g6911
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.81665534824969654
sg34
g753
(S'\x07\xdf\x07\r\r+\x19\x0c\xf8P'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6409
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.93372055430154433
sg34
g753
(S'\x07\xdf\x07\r\r+\x1f\n\xae`'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6853
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6864
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6861
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.9499834357702639
sg34
g753
(S'\x07\xdf\x07\r\r+%\n\x0e8'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6733
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6741
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.86656072401274287
sg34
g753
(S'\x07\xdf\x07\r\r++\t\xeb\x10'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6620
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6628
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.76642496004387795
sg34
g753
(S'\x07\xdf\x07\r\r+1\x08X\xb8'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6853
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6857
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6861
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6857
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6386
g6864
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F1.3999731437070295
sg34
g753
(S'\x07\xdf\x07\r\r+7\x05W0'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6409
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.98367724781746801
sg34
g753
(S'\x07\xdf\x07\r\r,\x01\x0b\xdb('
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6620
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6628
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.81647231492752326
sg34
g753
(S'\x07\xdf\x07\r\r,\x07\x0c1\x18'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6986
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6663
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6993
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.79995455527750892
sg34
g753
(S'\x07\xdf\x07\r\r,\r\t\xe7('
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g7674
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7681
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.79991863284885767
sg34
g753
(S'\x07\xdf\x07\r\r,\x13\x07^\xb8'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6870
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'left'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6877
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.89997884568037989
sg34
g753
(S'\x07\xdf\x07\r\r,\x19\x04\x9b\xb0'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7512
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7519
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F1.716652155146221
sg34
g753
(S'\x07\xdf\x07\r\r,\x1f\x03\xbd\x08'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6524
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6531
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.61665352362069825
sg34
g753
(S'\x07\xdf\x07\r\r,&\x00\x00\x00'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6986
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6663
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6993
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.71657061693622381
sg34
g753
(S'\x07\xdf\x07\r\r,+\t\xe3@'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6917
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6924
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F1.2829772166278417
sg34
g753
(S'\x07\xdf\x07\r\r,1\x05\xeb\xa0'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6443
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6451
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.9332569839189091
sg34
g753
(S'\x07\xdf\x07\r\r,7\n\xc5\xd0'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g7512
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6743
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g7519
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6386
g6737
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F2.4832752587408322
sg34
g753
(S'\x07\xdf\x07\r\r-\x01\nd('
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6986
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6993
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6386
g6663
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.58330496601956838
sg34
g753
(S'\x07\xdf\x07\r\r-\t\x02\xd2\xa8'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6784
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6791
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6694
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6386
g6688
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.0332142761435534
sg34
g753
(S'\x07\xdf\x07\r\r-\x0e\x0cs\x80'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6750
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6761
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6758
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6754
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6386
g6761
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.81664879098207166
sg34
g753
(S'\x07\xdf\x07\r\r-\x14\rB\x88'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I76
sg56
g57
sg58
Vn
sg42
I524
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I76
sg55
g11
sg56
g57
sg45
F1.3999999999999999
sg42
I524
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g679
sg51
F28.840000000000003
sg46
F3
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I82637136
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S"\x1f\x85\xeb?\x00\x00@@\\\x8f\x02@\x00\x00@@\xaeG!@\x00\x00@@\xd7\xa3\x10@\x00\x00@@\x00\x00\x00@\x00\x00 @\xa4p\xfd?\x00\x00@@\x00\x00@@\xecQ8@ff&@\xc3\xf5\x08@\x1f\x85+@\x00\x00@@\xf6(\x1c@\x00\x00@@\x00\x00@@\x00\x00@@ff&@\x00\x00@@\x00\x00@@\xa4p\xfd?\x00\x00@@\x00\x00\x00\x00\x00\x00@@\x00\x00\x00\x00\x00\x00@@\xd7\xa3\xb0?\x00\x00@@\xaeG!@\xb8\x1e%@\x00\x00@@\xb8\x1e%@\x14\xae'@ff&@\x00\x00@@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'!\xb0\x1a@\xb6\xf3\xdd?\x87\x16\xd9@\xe9&\xf1?\xe9&Q?B`5@\xfc\xa9)@\xc9v6@1\x08\xc0@\xdb\xf9\xae?33\x0fA\x0e-R@\xdb\xf9.@\xdb\xf9\xee?\xc9vv@\xbaID@T\xe3\x8d@+\x87\x86?B`\xd5?B`\xd5?\x83\xc0\xea?\xfc\xa9\t@/\xdd|@\xb6\xf3\xdd?\xc9v\x06@\xdb\xf9\xae?P\x8d\xf7?\xbaIT@\x0e-\x12@\xdd$\x02A\x0e-\x12@P\x8d\xf7?/\xdd\x1c@\xa8\xc6\x9b?\x06\x81\xd5?\x87\x16\x01@\xe9&\xd1?\xc9v6@b\x100@\x83\xc0\xca?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00@\x00\x00\x08B\x00\x00\x00\x00\x00\x00\xb8A\x00\x00\xe8A\x00\x00\x04B\x00\x00@@\x00\x00\xa0@\x00\x00\x80?\x00\x00\xc0A\x00\x00\x10B\x00\x00\xd0A\x00\x00\x80@\x00\x00PA\x00\x00\x1cB\x00\x00\xe0@\x00\x00\x0cB\x00\x00\xa8A\x00\x00@A\x00\x00\x98A\x00\x00\xb0A\x00\x00\xe0A\x00\x00\x00B\x00\x00\x14B\x00\x00\x88A\x00\x00\xd8A\x00\x00\x90A\x00\x00\xf8A\x00\x00\xc8A\x00\x00 A\x00\x00\x10A\x00\x00\x18B\x00\x00\xc0@\x00\x00pA\x00\x00`A\x00\x00\x80A\x00\x00\xf0A\x00\x000A\x00\x00\x00A\x00\x00\xa0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x9a\x99\xd9?33\xf3?33\xf3?\xcd\xcc\xcc?\x00\x00\x80?\x9a\x99\x99?ff\xe6?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\x99?ff\xa6?\x9a\x99\xd9?\xcd\xcc\xcc?\xcd\xcc\xcc?33\xb3?\xcd\xcc\xcc?ff\xe6?ff\xa6?ff\xe6?33\xb3?\x9a\x99\x99?\xcd\xcc\x8c?33\xf3?33\xb3?\x00\x00\x80?\x00\x00\xc0?\x9a\x99\xd9?\x9a\x99\xd9?\xcd\xcc\x8c?33\xf3?\x00\x00\xc0?\xcd\xcc\x8c?\x9a\x99\xd9?\x9a\x99\x99?\xcd\xcc\x8c?\xcd\xcc\x8c?\x9a\x99\xd9?ff\xe6?ff\xe6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x02\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x0c\x00\x00\x00\x07\x00\x00\x00 \x00\x00\x00\x0f\x00\x00\x00&\x00\x00\x00\x1e\x00\x00\x00\x1d\x00\x00\x00%\x00\x00\x00\x12\x00\x00\x00\r\x00\x00\x00"\x00\x00\x00!\x00\x00\x00#\x00\x00\x00\x18\x00\x00\x00\x1a\x00\x00\x00\x13\x00\x00\x00\'\x00\x00\x00\x11\x00\x00\x00\x14\x00\x00\x00\x03\x00\x00\x00\t\x00\x00\x00\x1c\x00\x00\x00\x0b\x00\x00\x00\x19\x00\x00\x00\x15\x00\x00\x00\x04\x00\x00\x00$\x00\x00\x00\x1b\x00\x00\x00\x16\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\n\x00\x00\x00\x17\x00\x00\x00\x1f\x00\x00\x00\x0e\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g117
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g341
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g103
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g264
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g306
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g334
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g124
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g138
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g110
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g271
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g355
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g285
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g131
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g194
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g376
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g152
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g348
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g250
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g187
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g236
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g257
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g299
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g327
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g362
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g222
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g292
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g229
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g320
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g278
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g173
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g166
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g369
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g145
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g208
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g201
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g215
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g313
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g180
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g159
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g243
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I82637136
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'33s@333@\x00\x00\x90@\x00\x00\xa0@\x00\x00\xc0@ff\xa6?\xcd\xcc\x0c@\xcd\xccL@\x00\x00\xc0@33\x93@\x00\x00\x00@\x00\x00\xa0@ffF@\x00\x00\x00@\x00\x00\xc0@\x9a\x99y@\x9a\x99\xb9@\x9a\x99\x19@\x9a\x99\xa9@ff\x06@\x00\x00\xc0@ff\x96@\x00\x00\x80@\x00\x00\x80?\x00\x00\xc0@\x00\x00\x80?\x00\x00\xc0@33\xb3?\x00\x00\xc0@\x00\x00\x00@\x00\x00\xc0@\x9a\x99\x99?\x00\x00\x80?ff\x96@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xc0@33\xa3@\x00\x00\xc0@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xc9TE@ \xf4\xce?W"\x02A\x06h\xa6?\x0c\xbe\xbb?\xffDt@Zx\x9f@\xd4\x05\x80?&\xf5\xae?\x15\xdf\xbd?\xdd0\xb3?\x19\xcf\xfb?\xca\xdd\xed@/\x15Q?\xf0j\xe6?\x0e%\xfa@\n\x1c\xc2?\x05X\xb5?\x9bE\x84?\x1f\xd1\xec?\x0e\x13\xd1??\xe4\x9d?u\xcb\x8c?\xef\xcd\x1c@\xd6\xab\xea?\x80\x9d\x99?^\x0f\x80?\xdd\x89\xe8?\xce\x81\x88?!ED@]#\x82?\x14\xae\xea?\x9f\xcd\xac@9h\x86?v\xce\xac?\xa8\x88\xa8?\xfb\xdf\xfd?\x15\x8aH?\x84\xd9L?7\xef\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'ff\x86@33\x83@\xcd\xccl@\x00\x00@@33S@ffF@\x9a\x99Y@\xcd\xcc,@\x00\x00`@\x00\x00@@33s@ffF@fff@\x00\x00@@\xcd\xccl@\xcd\xccL@\x9a\x99Y@\x00\x00\x80@\x00\x00\x80@\xcd\xccL@33S@fff@33S@\xcd\xccl@\x00\x00`@\x00\x00\x80@ffF@33s@\x00\x00@@\x9a\x99Y@\xcd\xccl@\x9a\x999@33s@\xcd\xccL@\x9a\x99Y@\x00\x00`@\x9a\x99\x89@33s@\xcd\xccL@ffF@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xa0\xd3\xc1\x0c\x80\x03\xc4\x0c`P\x9f\x04\xc0P\x9f\x04`[\xc2\x0c`Z\xc2\x0c\x00\xd4\xc1\x0c\x00[\xc2\x0c\x00\x0c\xc4\x0c \xd1\xc1\x0c\xe0\xdc\xa1\x04\xe0U\xc2\x0c`\xd1\xa1\x04\x80P\xc2\x0c`\x06\xc4\x0c\x80\x06\xc4\x0c\xe0\x0b\xc4\x0c\xe0\x07\xc4\x0c`\x08\xc4\x0c\xe0\x05\xc4\x0c@\x0c\xc4\x0c\x80\xd3\xa1\x04\xa0\x06\xc4\x0c\x00\x0b\xc4\x0c`\r\xc4\x0c\xa0Y\xc2\x0c\x80P\x9f\x04`Q\x9f\x04 P\x9f\x04 S\x9f\x04\x80\xd0\xc1\x0c@P\x9f\x04\xc0\x06\xc4\x0c\x00Q\x9f\x04\x80\xe9\x1e\r\xe0\xea\x1e\r\x80\xe6\x1e\r@\xea\x1e\r \xe6\x1e\r\xe0\xe9\x1e\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\x7fj\x16A\x91\xed\xec?\xbaI\x8c@/\xdd,@\xc9vf@\xfc\xa9I@\xbaID@\x96C\x03@\x89A@?u\x93\x18@\xdb\xf9\x0e@\x87\x16\x01@\xdb\xf9\xae?b\x10p@\xb6\xf3\x9d?\xb6\xf3\xdd?P\x8d\xd7?P\x8dw?u\x93\x88?P\x8d\xb7?P\x8d7?\xe9&\x91?\xb6\xf3\x9d?\x89A@?!\xb0\n@!\xb0\x9a@\xa0\x1a/?\xc5 \xe0?\xb6\xf3\x1d?\xc5 \xc0?\x06\x81\x15?#\xdb\x19?V\x0e\r?m\xe7;?\xee|\x17@V\x0e\r?u\x93\xa8?\xa8\xc6\xfb?\x91\xed\xac?B`\xf5?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I82637136
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\xb06;\r\xb8\xf3S\r\xf0\xf2S\r\x18\xf3S\r\x107;\r\x18\xf3S\r\xe06;\r\xf0\xf2S\r\xc8\xf2S\r@\xf3S\rh\xf3S\r\xe06;\rh\xf3S\r\xe0\xf3S\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'(\x94\xdc\x04H\x95\xdc\x04\x10\x9d\xdc\x04\x80\x99\xdc\x04p\x9d\xdc\x04h\x89\xf5\x048\x8c\xf5\x04\x10\x87\xf5\x04\xa8\x88\xf5\x04\xb0\x86\xf5\x04\x90\x8b\xf5\x04\x18\x85\xf5\x04\x10\x84\xf5\x04\xb8\x81\xf5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g744
sg83
g789
sg84
g749
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g778
sg83
g798
sg84
g783
sg85
g802
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g807
sg83
g808
sg84
g812
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g767
sg83
g818
sg84
g772
sg85
g822
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g756
sg83
g827
sg84
g761
sg85
g831
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g836
sg83
g837
sg84
g841
sg85
g842
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g847
sg83
g848
sg84
g852
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g807
sg83
g858
sg84
g812
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g847
sg83
g867
sg84
g852
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g836
sg83
g876
sg84
g841
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I82637136
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I82637136
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xa0\xc1\x1d\r\x80\xf6U\r\xb0\xf6U\r\xe0\xf6U\r\xa0\xc1\x1d\r\xb8\x13V\r\x80\xf6U\r\xa0\xc1\x1d\r(\x12V\r\x80\xc1\x1d\r\x90\x8eU\r \xc0\x1d\r\x80\xc5\x1d\r`\xc0\x1d\r\xa0\xc1\x1d\r\xa8\x8fU\r\x00\x12V\rP\x12V\r\x00\xf8U\rP\x12V\r\xc8\x8eU\r\xa0\xc1\x1d\rx\x12V\r\x90\x8eU\r\xc8\x8eU\r\x80\xc5\x1d\r\xa0\x12V\r \xc0\x1d\r\x80\xc5\x1d\rh\x13V\r\xc8\x12V\r\xc8\x8eU\r\x00\x12V\r\xc8\x12V\r\xe0\xf6U\r\x80\xc5\x1d\rP\x12V\r\xe0\x13V\r\xa0\xc1\x1d\r\x08\x14V\r0\x14V\rX\x14V\r\x10\xf7U\r\xb0\xf6U\r@\xec\x1e\r\xa0\xf7U\r\x80\xf6U\r\x90\x8eU\r\xb0\xf6U\r \xc0\x1d\r@\xf7U\r`\xc0\x1d\r\x00\x12V\r\xb0\xf6U\r\xa0\x12V\r\x80\xc5\x1d\rh\x13V\r  V\r\x08\x14V\r \xc0\x1d\r\x00\x8fU\r\xd0\xf7U\r\xf0\x12V\r`\xf8U\r\x00\xf8U\r\xc8\x12V\r\x90\x8eU\r\x18\x13V\r\xc8\x12V\rx\x12V\r\xc8\x12V\r  V\r\x80\xf6U\r\xe0\x13V\r\x80\xc5\x1d\r\x90\x8eU\r\xc8\x12V\rX\x14V\r\x18\x13V\r\xa0\xf7U\r\xb0\xf6U\r \xc0\x1d\r\x90\x8eU\r\x18\x13V\r`\xc0\x1d\r\x80\xc1\x1d\r\xe0\xf6U\r\x10\xf7U\r\xc8\x8eU\r@\xf7U\r  V\rP\x12V\r\xe0\xf6U\r\xb0\xf6U\r\xa0\x12V\r\x00\x12V\r\x90\x13V\r`\xc0\x1d\r\x18\x13V\rp\xf7U\rP\x12V\r@\xec\x1e\r\x80\xf6U\r\xa0\xc1\x1d\r\xf0\x12V\r\x80\xc1\x1d\r\x00\x8fU\rX\x14V\r\x00\x8fU\rP\x12V\r\xa0\x12V\r\xc8\x8eU\r  V\r\xe0\xf6U\r\x80\xc1\x1d\r\x80\xc5\x1d\r\x00\x12V\r\x80\xf6U\r\x80\xc5\x1d\r\x10\xf7U\r\x80\xc1\x1d\r\xa0\x12V\r\xe0\xf6U\r\x00\x8fU\r(\x12V\r\x18\x13V\r@\xf7U\r\xf0\x12V\r\xa0\x12V\r\xf0\x12V\r(\x12V\r\x10\xf7U\r`\xc0\x1d\r\xc8\x8eU\r \xc0\x1d\r\xc8\x12V\r\x90\x8eU\r\x18\x13V\r@\xf7U\rP\x12V\r\xb0\xf6U\r\x18\x13V\r@\xf7U\r\x10\xf7U\r@\xf7U\r\xc8\x8eU\r\x80\xc1\x1d\r\x00\x8fU\r0\xf8U\r\x00\x12V\r0\xf8U\r\xf0\x12V\r\x80\xf6U\rx\x12V\r\xe0\xf6U\r\x10\xf7U\r\x18\x13V\r\x10\xf7U\rx\x12V\r\xb0\xf6U\r`\xf8U\r\x00\xf8U\r\x00\x12V\r(\x12V\r\x80\xf6U\r\x80\xc1\x1d\r\xc8\x8eU\r\x18\x13V\r\x00\x8fU\r\x00\x12V\r\x80\xf6U\r\x80\xc1\x1d\r0\x14V\r\x80\xc1\x1d\r\xb0\xf6U\r\x00\x8fU\rh\x13V\r\xd0\xf7U\r\xc8\x12V\r\x18\x13V\r \xc0\x1d\r(\x12V\rx\x12V\r\xa0\x12V\r \xc0\x1d\r\x90\x8eU\r\x80\xc1\x1d\rP\x12V\r\xc8\x8eU\rX\x14V\r0\xf8U\r\xe0\xf6U\r \xc0\x1d\r\x00\x12V\r0\xf8U\r\xa0\x12V\r  V\r \xc0\x1d\r\xf0\x12V\r\x00\x8fU\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'`\xd8;\r \xd9;\r \xda;\r \x81\xc4\x0c\x00\xec\x1e\r@\xab\x1c\r\x00\xac\x1c\r@\xda;\r@\xdb;\r\xa0\xd9;\r\xe0\xd9;\r\xa0\xdb;\r\xe0\xdb;\r\xe0\xd8;\r\x00\xdb;\r\xa0\xda;\r \xdb;\r\xc0\xdb;\r\x00\xdc;\r@\xdc;\r`\xdb;\r\x80\xdc;\r\xa0\xdc;\r\x00\xda;\r\x80\xda;\r\xc0\xdc;\r\xe0\xdc;\r\x00\xdd;\r \xdd;\r \xa5\x1c\r`\x1d\x1e\r\xe0\x1e\x1e\r@\x80\xc4\x0c\x00\x1f\x1e\r\xa0\xd1\x1f\r\xa0\x1f\x1e\r\xc0{\x1f\r@{\x1f\r@|\x1f\r\x00~\x1f\r\x00{\x1f\r\xc0|\x1f\r@~\x1f\r\x00|\x1f\r\x00}\x1f\r`w\x1f\r\xa0v\x1f\r@z\x1f\r\x80|\x1f\r@v\x1f\r\x00v\x1f\r\xc0u\x1f\r`u\x1f\r\xc0y\x1f\r\x80~\x1f\r@\x7f\x1f\r\x80}\x1f\r\xc0~\x1f\r\x80v\x1f\r\xc0w\x1f\r\x80z\x1f\r\x00z\x1f\r\x00y\x1f\r\xc0x\x1f\r\x80x\x1f\r\xa0p\x1f\r\xc0}\x1f\r\x80{\x1f\r@}\x1f\r p\x1f\r\xe0p\x1f\r@y\x1f\r\xe0v\x1f\r\x00x\x1f\r\x00q\x1f\r@x\x1f\r@p\x1f\r\x80y\x1f\r\x80p\x1f\r w\x1f\r\xc0p\x1f\r\x00\x7f\x1f\r\xc0\x1f\x1e\r\xe0\xbd\x9e\x04@\xee\x1e\r \xe3\x1e\r`\xe7\x1e\r`p\x1f\r@\xef\x1e\r\x00\xe2\x1e\r \xef\x1e\r \xe2\x1e\r \xeb\x1e\r\xe0\xee\x1e\r`\xe8\x1e\r\xe0\xef\x1e\r`\xe0\x1e\r\xa0\xef\x1e\r\xa0\xee\x1e\r\x00\xe1\x1e\r@\xe2\x1e\r@\xe1\x1e\r \xe1\x1e\r\xa0\xe2\x1e\r`\xe1\x1e\r\xc0\xe2\x1e\r \xee\x1e\r\x80\xe1\x1e\r`\xe2\x1e\r\xe0\xe2\x1e\r\xc0z\x1f\r\xe0\xe1\x1e\r\x00\xe3\x1e\r`\xe3\x1e\r\x80\xee\x1e\r\xc0\xe3\x1e\r\xe0\xe3\x1e\r\xc0\xef\x1e\r\xc0\xee\x1e\r\x00\xef\x1e\r\xc0\xe1\x1e\r R\x9f\x04 \x1b\xa0\x04\xa0\x13\xa0\x04\xc0\x10\xa0\x04\xa0\xe3\x1e\r\x00\xe4\x1e\r\x80\xe2\x1e\r\xa0\xeb\x1e\r \xe4\x1e\r\x80\xef\x1e\r`\xee\x1e\r\xa0\xe1\x1e\r\x80\x07\xc4\x0c@\xe3\x1e\r\x80\xec\x1e\r`R\x9f\x04@\xdd;\r\x00\xde;\r`\xda;\r \xde;\r`\xd9;\r\x80\xdd;\r\x80\xdb;\r\x80\xde;\r@\xde;\r`\xde;\r\xa0\xde;\r\xe0\xde;\r\x00\xdf;\r \xdf;\r\xc0\xde;\r \x80\xc4\x0c\xa0\xd8;\r`\xdc;\r\xa0\xdd;\r`\xdd;\r\x80\xdf;\r\xc0\xda;\r\xc0\xdf;\r\xa0\xdf;\r`\xdf;\r\xe0\xdf;\r\xc0\xd9;\r\xe0\xdd;\r\xc0\xdd;\r \x12\xa0\x04@\xdf;\r @\xc2\x1e@B\xc2\x1e\x80@\xc2\x1e\x80A\xc2\x1e A\xc2\x1e@@\xc2\x1e\xe0A\xc2\x1e`B\xc2\x1e\xc0A\xc2\x1e\xe0@\xc2\x1e\xa0B\xc2\x1e\x80B\xc2\x1e\x00C\xc2\x1e\xe0B\xc2\x1e\x00B\xc2\x1e C\xc2\x1e@C\xc2\x1e`C\xc2\x1e\xc0C\xc2\x1e\xa0C\xc2\x1e\x00D\xc2\x1e D\xc2\x1e`A\xc2\x1e`D\xc2\x1e@D\xc2\x1e\xa0A\xc2\x1e\x80D\xc2\x1e\xe0\xec\x19\x05\xe0\xe9\x19\x05\x00\xe9\x19\x05 \xe8\x19\x05\xa0\xe8\x19\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\\b\xe6?\xbc\xdb}@J\xfa\x9f?\xe1\xfc\x7f?5U\xb5?\xf8\x9fj?\x1e\x96\xd9?f\x86\xa8?\x0b\xfe\x1f@I\x9e9@\xf5\xa7\n@\xc7\xda\xbd?X!\x12@\xb4\x87\xa8?\x1c\xcfL?\x14\x10\x89@z!\xc2?R\x0fb?\xa8\xec\xee?WP\x15@6\xecN@T\xcc\x1c@\xd9S\xd5?G\'s?9\xcc\xcc?\xec\xef??5!"@\xaf\xfc??|B\x04@+\xbc{?\x06\x0e\xf1?\x9a\xde]?\x98q\xb7?@\x8aH?\x12\xa4\xb9?\x03 \x82?\xcd\xbe]?\xbaiw?\x18!\x82?\x17\xea.?\x9foU?\xb6\xd5]?\x0ce\x86?r\x1db?B\xb4;?\x91\xfe\xe7@BA\xa4?;`\xa6?\xa9\xc7\xac?\xdc\xbb;?%\xde\x1d?\xc0\xa8j?\xe8\xb6\x9b?7\xbb{?M\xdc\x1d@\\F\xa4?\xf6\xd7\x1d?8\xdd\x9d?\xaa\x82\x88?\x98\xa9\xea?\xc6\x9e9@^\x0cb?\xc2\xdb\xfd?\x0b\xda]?;RU?8\x94\x88?\xed\r\x91?\x8c\x88\xa8?1\xf9??Hvw?9ED?\xbfS\x95?\x8d1\x03@\x05\x95\xb9?\x06\x88\xa8?\x82\x7fH?\x0c\xa8{?\xef\x1e\x82?\x11\xbb\xbb?\x06\xee~@+0\xa2?\xf7\xf9\x7f?I\xb3;?\x9c03?\xe9\xa6\xea?\x9fy\x9f@L\x1bb?\x11\x08\x91? \xa9\n@Da\xa6?\xca+Q?I\xf0\x7f?\x7fO\xd5?\xbf\x0e\x91?\x92\r\x91?\xf8\xe2L?\x92\x97)@\xd4\xa8\xea?\x12\x13Q?\x06w\x97?>\xef\x7f?\x16/s?iAD?\x0c\x84H?\x1e\x97\x99?,E\xa4?c\xda\xbd?is\xd7?\x86!\xc2?9?\x04@c\x18\xc2?\x8de\x86?+\x84\x88?5S\xb5?9\x98\x99?\xad\xd3\x8c?J\xa8\x8a?\xc4e\x86?,vw?\xd5\x1e\x82?\xb4\xd3;?\x9e.\xd3?\x1b\xdf\xdd?\x92\r\x91?\xfbP\xd5?\x95L3?\xa8>\xc4?\xd2\xec\xce?\x81\xbb;?z!\x82?x4s?\x85\x99Y?C\xfe\xff?$\x00\x80?\xf1\xed\x8e?\xd7\xe8\x9d?\xa9Q\x95?\xd4\xe6n?X\x99\x99?\x89\x06\x91?Z\xfe\xdf?\x1b\xb2;?\xe2\xab*?<\xefn?\x00\x87H?\x94\x10\x91?\xb6\xad*?ku\x97?\xf9\xc3L?\x9d\x83\xa8?\xa5\xd7\x1d?\x98!\xa2?\n\x12"?\xf5lw?\x9a+\xb3?zww?\x9a\x8dw?\x80\x1fb?6nw?jd&@\x8ac\xa6?U}&?6bf?\x8a2\x8b@\x0f@\x84? p7?0\x01@?\xea\rQ?\x84!\xc2?7c\xc6?\xf7\xfd\x7f?\xa7\xcb\x8c?,\xdd\x1d@B\x8cj?\xf3#b?j\xde]?\x03\x0b/?[\xda.?\x04QU?\r\xca\xac?!\x87H?fv\x17@\x1b\x82H?d\x87\xc8?\xa8KU?\x18IU?,\xaaj?\xa4wH?N\xd8]?u\xdc\xfd?a2S@[\xb1*?\x1b\xf0.?\xd5\xfa??\xb4\xfc\xbf?\xbe\x1fb?\x00\x0fQ?\x01\xb6{?7\xbc\xbb?[u7?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x00\x88\xf5\x040\x85\xf5\x04\x00"\xd4\x04\xa0!\xd4\x04H.\xd4\x04\x10*\xd4\x04x+\xd4\x048#\xd4\x04X!\xd4\x04\xb8$\xd4\x04\xb8\'\xd4\x04\x88\'\xd4\x04\x98)\xd4\x04\xd0*\xd4\x04 ,\xd4\x04`"\xd4\x048)\xd4\x04x(\xd4\x04x%\xd4\x04\x98#\xd4\x04 /\xd4\x04\xc0+\xd4\x04X\'\xd4\x04`.\xd4\x04P/\xd4\x04\xd8+\xd4\x04\xe0)\xd4\x04\xd0!\xd4\x04\xe0&\xd4\x048\xa0P\x02X\x17\xcc\x03 \x1c\xcc\x03 \x96\xdc\x04\x10!\xd4\x0408\xd5\x04\xa0\x9a\xdc\x04\xb0/\xd4\x04\xb0<\xd5\x04\xd8\x9e\xdc\x04\xc8&\xd4\x04\xe00\xd5\x04\x80\x93\xdc\x04h/\xd4\x04\xf0;\xd5\x04\xc8\x99\xdc\x04\xd8.\xd4\x04p:\xd5\x04`\x9e\xdc\x04\x08/\xd4\x04\x989\xd5\x04\xe0\x9c\xdc\x04h \xd4\x04\xc05\xd5\x04\xa0\x91\xdc\x04\xc0"\xd4\x04\xe84\xd5\x04\x08\x9f\xdc\x04h\x99\xdc\x04\x10\x94\xdc\x04\xb0\x93\xdc\x04\xa8"\xd4\x04\x98,\xd4\x04x"\xd4\x04`(\xd4\x04\x10$\xd4\x040(\xd4\x04p\'\xd4\x04\x18.\xd4\x04\xe0/\xd4\x04X*\xd4\x04\xf0(\xd4\x04\x08)\xd4\x04\xe8$\xd4\x04p$\xd4\x04\x10\'\xd4\x04\x88$\xd4\x04h)\xd4\x04\xf0.\xd4\x04(!\xd4\x04p-\xd4\x040+\xd4\x04\x90.\xd4\x04 &\xd4\x048/\xd4\x04\xd0-\xd4\x04\xc8/\xd4\x04\xe8-\xd4\x04x.\xd4\x04@\'\xd4\x048 \xd4\x04\xb0#\xd4\x04h&\xd4\x04\xe8\'\xd4\x04\x88-\xd4\x04\xe0#\xd4\x04\x88*\xd4\x04H%\xd4\x040.\xd4\x04\xa0*\xd4\x04\xf8,\xd4\x04\xf8#\xd4\x04\x00+\xd4\x04\xc8,\xd4\x04\x98/\xd4\x04\xa8+\xd4\x04\x00.\xd4\x04\x18+\xd4\x04\x80/\xd4\x04P \xd4\x04\xc0.\xd4\x04@-\xd4\x04\x00%\xd4\x04p*\xd4\x04X-\xd4\x04\x10-\xd4\x048&\xd4\x04h#\xd4\x04\x00(\xd4\x04\xb0)\xd4\x04\xa0-\xd4\x04@$\xd4\x04\xf8&\xd4\x04\xe0,\xd4\x04\xb0,\xd4\x04\x08,\xd4\x04\xb8*\xd4\x04  \xd4\x04\xb8-\xd4\x04(:\xd5\x04\xc0>\xd5\x04\xa0:\xd5\x04\x18;\xd5\x04\xc8?\xd5\x04\xe0?\xd5\x04\xf0>\xd5\x04\xb0l\xd5\x04\x00b\xd5\x04\x88d\xd5\x04\xa8b\xd5\x04\x08o\xd5\x04\xd0a\xd5\x04 f\xd5\x040%\xd4\x04\xe8*\xd4\x040"\xd4\x04\x90(\xd4\x048,\xd4\x04\xf8 \xd4\x04\x80 \xd4\x04 )\xd4\x04X$\xd4\x04\xf0%\xd4\x04\xc8 \xd4\x04\x80#\xd4\x04 #\xd4\x04\xf8l\xd5\x04\xc0%\xd4\x04\xd0\'\xd4\x04\x18"\xd4\x04p!\xd4\x04\x08&\xd4\x04\xa8(\xd4\x04\xb0&\xd4\x04\x18%\xd4\x04\xe0 \xd4\x04\xf0"\xd4\x04`%\xd4\x04\x80)\xd4\x04\xa0$\xd4\x04H"\xd4\x04(\'\xd4\x04\xc8#\xd4\x04\xe8!\xd4\x04($\xd4\x04P)\xd4\x04\xc8)\xd4\x04\xd8"\xd4\x04\xc0(\xd4\x04\x90"\xd4\x04\xb0 \xd4\x04@!\xd4\x04\x08#\xd4\x04\xd8(\xd4\x04\x18(\xd4\x04@*\xd4\x04h,\xd4\x04\xf0+\xd4\x04H(\xd4\x04\x88!\xd4\x04\xd0$\xd4\x04\x90+\xd4\x04\x80,\xd4\x04\x98 \xd4\x04(*\xd4\x04\xb8!\xd4\x04p\x94\xdc\x04H\x92\xdc\x04\xb8\x97\xdc\x04\xf8\x99\xdc\x04X\x9d\xdc\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g920
sg895
g997
sg909
g927
sg904
g1004
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g900
sg895
g1012
sg909
g910
sg904
g1019
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1031
sg895
g1027
sg909
g1038
sg904
g1035
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1082
sg895
g1078
sg909
g1089
sg904
g1086
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1099
sg895
g1095
sg909
g1106
sg904
g1103
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1031
sg895
g1112
sg909
g1038
sg904
g1119
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1150
sg895
g1140
sg909
g1144
sg904
g1148
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1197
sg895
g1187
sg909
g1191
sg904
g1195
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1174
sg895
g1204
sg909
g1181
sg904
g1211
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1150
sg895
g1219
sg909
g1144
sg904
g1226
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1150
sg895
g1140
sg909
g1144
sg904
g1148
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1099
sg895
g1292
sg909
g1106
sg904
g1299
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1082
sg895
g1078
sg909
g1089
sg904
g1086
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1099
sg895
g1292
sg909
g1106
sg904
g1299
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g900
sg895
g1012
sg909
g910
sg904
g1019
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1367
sg895
g1363
sg909
g1374
sg904
g1371
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1150
sg895
g1219
sg909
g1144
sg904
g1226
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g990
sg895
g1393
sg909
g984
sg904
g1400
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1367
sg895
g1363
sg909
g1374
sg904
g1371
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g954
sg895
g1421
sg909
g961
sg904
g1428
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1099
sg895
g1095
sg909
g1106
sg904
g1103
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1174
sg895
g1204
sg909
g1181
sg904
g1211
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g900
sg895
g1012
sg909
g910
sg904
g1019
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1367
sg895
g1501
sg909
g1374
sg904
g1508
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1526
sg895
g1516
sg909
g1520
sg904
g1524
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1197
sg895
g1187
sg909
g1191
sg904
g1195
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g937
sg895
g1546
sg909
g944
sg904
g1553
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1099
sg895
g1292
sg909
g1106
sg904
g1299
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g937
sg895
g1546
sg909
g944
sg904
g1553
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1082
sg895
g1078
sg909
g1089
sg904
g1086
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1643
sg895
g1639
sg909
g1650
sg904
g1647
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1031
sg895
g1027
sg909
g1038
sg904
g1035
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1311
sg895
g1695
sg909
g1318
sg904
g1702
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1099
sg895
g1095
sg909
g1106
sg904
g1103
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g900
sg895
g1012
sg909
g910
sg904
g1019
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1251
sg895
g1736
sg909
g1258
sg904
g1743
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1311
sg895
g1695
sg909
g1318
sg904
g1702
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1082
sg895
g1764
sg909
g1089
sg904
g1771
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1783
sg895
g1779
sg909
g1790
sg904
g1787
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1526
sg895
g1809
sg909
g1520
sg904
g1816
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1783
sg895
g1824
sg909
g1790
sg904
g1831
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1197
sg895
g1187
sg909
g1191
sg904
g1195
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1367
sg895
g1501
sg909
g1374
sg904
g1508
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1882
sg895
g1878
sg909
g1889
sg904
g1886
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1367
sg895
g1501
sg909
g1374
sg904
g1508
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1251
sg895
g1736
sg909
g1258
sg904
g1743
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1367
sg895
g1501
sg909
g1374
sg904
g1508
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1251
sg895
g1736
sg909
g1258
sg904
g1743
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1099
sg895
g1292
sg909
g1106
sg904
g1299
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1367
sg895
g1363
sg909
g1374
sg904
g1371
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1526
sg895
g1516
sg909
g1520
sg904
g1524
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1882
sg895
g2025
sg909
g1889
sg904
g2032
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1082
sg895
g1764
sg909
g1089
sg904
g1771
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1882
sg895
g2025
sg909
g1889
sg904
g2032
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1031
sg895
g1027
sg909
g1038
sg904
g1035
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1048
sg895
g2118
sg909
g1055
sg904
g2125
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1197
sg895
g2146
sg909
g1191
sg904
g2153
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1150
sg895
g1140
sg909
g1144
sg904
g1148
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1643
sg895
g1639
sg909
g1650
sg904
g1647
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1174
sg895
g1204
sg909
g1181
sg904
g1211
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g954
sg895
g1421
sg909
g961
sg904
g1428
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g937
sg895
g1546
sg909
g944
sg904
g1553
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1311
sg895
g1695
sg909
g1318
sg904
g1702
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g990
sg895
g1393
sg909
g984
sg904
g1400
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1031
sg895
g1112
sg909
g1038
sg904
g1119
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1882
sg895
g2025
sg909
g1889
sg904
g2032
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g920
sg895
g997
sg909
g927
sg904
g1004
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1099
sg895
g1095
sg909
g1106
sg904
g1103
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1526
sg895
g1809
sg909
g1520
sg904
g1816
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1048
sg895
g2118
sg909
g1055
sg904
g2125
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1783
sg895
g1779
sg909
g1790
sg904
g1787
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1526
sg895
g1516
sg909
g1520
sg904
g1524
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1783
sg895
g1824
sg909
g1790
sg904
g1831
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1174
sg895
g1204
sg909
g1181
sg904
g1211
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1150
sg895
g1219
sg909
g1144
sg904
g1226
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1099
sg895
g1095
sg909
g1106
sg904
g1103
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g990
sg895
g1393
sg909
g984
sg904
g1400
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g920
sg895
g997
sg909
g927
sg904
g1004
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1099
sg895
g1292
sg909
g1106
sg904
g1299
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1197
sg895
g2146
sg909
g1191
sg904
g2153
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1311
sg895
g1695
sg909
g1318
sg904
g1702
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g954
sg895
g1421
sg909
g961
sg904
g1428
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1783
sg895
g1824
sg909
g1790
sg904
g1831
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1031
sg895
g1112
sg909
g1038
sg904
g1119
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1882
sg895
g2025
sg909
g1889
sg904
g2032
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1643
sg895
g1639
sg909
g1650
sg904
g1647
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1526
sg895
g1516
sg909
g1520
sg904
g1524
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1311
sg895
g1695
sg909
g1318
sg904
g1702
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1526
sg895
g1809
sg909
g1520
sg904
g1816
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1031
sg895
g1112
sg909
g1038
sg904
g1119
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1197
sg895
g1187
sg909
g1191
sg904
g1195
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1031
sg895
g1027
sg909
g1038
sg904
g1035
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1150
sg895
g1140
sg909
g1144
sg904
g1148
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1082
sg895
g1764
sg909
g1089
sg904
g1771
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1367
sg895
g1363
sg909
g1374
sg904
g1371
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1882
sg895
g1878
sg909
g1889
sg904
g1886
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1643
sg895
g2811
sg909
g1650
sg904
g2818
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g937
sg895
g1546
sg909
g944
sg904
g1553
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1882
sg895
g1878
sg909
g1889
sg904
g1886
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1643
sg895
g2811
sg909
g1650
sg904
g2818
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1197
sg895
g2146
sg909
g1191
sg904
g2153
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1643
sg895
g2811
sg909
g1650
sg904
g2818
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1150
sg895
g1219
sg909
g1144
sg904
g1226
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1048
sg895
g2118
sg909
g1055
sg904
g2125
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1783
sg895
g1779
sg909
g1790
sg904
g1787
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1643
sg895
g2811
sg909
g1650
sg904
g2818
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g990
sg895
g1393
sg909
g984
sg904
g1400
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1643
sg895
g2811
sg909
g1650
sg904
g2818
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1526
sg895
g1809
sg909
g1520
sg904
g1816
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1251
sg895
g1736
sg909
g1258
sg904
g1743
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g954
sg895
g1421
sg909
g961
sg904
g1428
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1197
sg895
g1187
sg909
g1191
sg904
g1195
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1882
sg895
g1878
sg909
g1889
sg904
g1886
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1197
sg895
g2146
sg909
g1191
sg904
g2153
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g937
sg895
g1546
sg909
g944
sg904
g1553
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1783
sg895
g1824
sg909
g1790
sg904
g1831
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1197
sg895
g2146
sg909
g1191
sg904
g2153
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1031
sg895
g1112
sg909
g1038
sg904
g1119
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g920
sg895
g997
sg909
g927
sg904
g1004
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1150
sg895
g1140
sg909
g1144
sg904
g1148
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1882
sg895
g2025
sg909
g1889
sg904
g2032
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1783
sg895
g1824
sg909
g1790
sg904
g1831
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g920
sg895
g997
sg909
g927
sg904
g1004
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1048
sg895
g2118
sg909
g1055
sg904
g2125
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1367
sg895
g1501
sg909
g1374
sg904
g1508
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1783
sg895
g1779
sg909
g1790
sg904
g1787
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g900
sg895
g1012
sg909
g910
sg904
g1019
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1174
sg895
g1204
sg909
g1181
sg904
g1211
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1367
sg895
g1363
sg909
g1374
sg904
g1371
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1882
sg895
g1878
sg909
g1889
sg904
g1886
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1082
sg895
g1764
sg909
g1089
sg904
g1771
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1031
sg895
g1027
sg909
g1038
sg904
g1035
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1251
sg895
g1736
sg909
g1258
sg904
g1743
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1082
sg895
g1078
sg909
g1089
sg904
g1086
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1048
sg895
g2118
sg909
g1055
sg904
g2125
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1174
sg895
g1170
sg909
g1181
sg904
g1178
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1150
sg895
g1219
sg909
g1144
sg904
g1226
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1526
sg895
g1809
sg909
g1520
sg904
g1816
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1643
sg895
g1639
sg909
g1650
sg904
g1647
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g954
sg895
g1421
sg909
g961
sg904
g1428
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1082
sg895
g1078
sg909
g1089
sg904
g1086
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g990
sg895
g1393
sg909
g984
sg904
g1400
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1643
sg895
g1639
sg909
g1650
sg904
g1647
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1082
sg895
g1764
sg909
g1089
sg904
g1771
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1526
sg895
g1516
sg909
g1520
sg904
g1524
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1783
sg895
g1779
sg909
g1790
sg904
g1787
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I82637136
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\x00\xe7\x1e\r\xa0\xe6\x1e\r\x00\xe8\x1e\rpt\xc3\x0c@\xe8\x1e\rpt\xc3\x0c\xa0t\xc3\x0c \x15\xc3\x0c\xd0t\xc3\x0c\x90\x13\xc3\x0c\x00u\xc3\x0c\xd8\x9a\xc3\x0c\x00u\xc3\x0c\xf8\x14\xc3\x0c@\xe8\x1e\r\xd0\x14\xc3\x0c\xa8\x14\xc3\x0c\x80\x14\xc3\x0c0u\xc3\x0c@\x13\xc3\x0cX\x14\xc3\x0c\x00\xe7\x1e\r\x00u\xc3\x0c\xd0\x14\xc3\x0c\x80\x14\xc3\x0c\xd0\x14\xc3\x0c\xf8\x14\xc3\x0cX\x14\xc3\x0c\x80\x14\xc3\x0c\xf0\x9b\xc3\x0c\x90u\xc3\x0cX\x14\xc3\x0c\x10\x9b\xc3\x0c\x00\xe7\x1e\r\xa0t\xc3\x0c\xb8\x9b\xc3\x0c\xa0\xe6\x1e\r\xf8\x14\xc3\x0c\xd8\x9a\xc3\x0c\x00\xe9\x1e\r\xd0\x14\xc3\x0cH\x9b\xc3\x0c \x15\xc3\x0c\x00\xe7\x1e\r@\xe8\x1e\rH\x9b\xc3\x0c\x00\xe9\x1e\r0\x14\xc3\x0c\xd8\x9a\xc3\x0cpt\xc3\x0c\x80\x14\xc3\x0c\xd0t\xc3\x0c\x00\xe9\x1e\r\x00\xe7\x1e\r\xa0\xe6\x1e\r0\x14\xc3\x0c\x80\x14\xc3\x0c\xa8\x14\xc3\x0c\xf8\x14\xc3\x0c\x08\x14\xc3\x0c\x00u\xc3\x0cPv\xc3\x0c`\xe5\x1e\r\x00\xe8\x1e\r\xf8\x14\xc3\x0c\xd8\x9a\xc3\x0c`u\xc3\x0c\x90\x13\xc3\x0c\xb8\x13\xc3\x0cH\x9b\xc3\x0c \x15\xc3\x0c(\x9c\xc3\x0c\xb8\x9b\xc3\x0c\xd8\x9a\xc3\x0c\x08\x14\xc3\x0c\xd0t\xc3\x0cPv\xc3\x0c\x10\x9b\xc3\x0c\x90u\xc3\x0c\xa0t\xc3\x0c\x80\x14\xc3\x0c\x00u\xc3\x0c\xf8\x14\xc3\x0c\xa8\x14\xc3\x0c@\xe8\x1e\r \x15\xc3\x0c\xf0\x9b\xc3\x0c\xd8\x9a\xc3\x0cH\x9b\xc3\x0c\x00\xe9\x1e\r\x10\x9b\xc3\x0c\xa0t\xc3\x0c\x10\x9b\xc3\x0c\xd0t\xc3\x0cpt\xc3\x0cX\x14\xc3\x0c\xf0\x9b\xc3\x0c\x80v\xc3\x0c\xa0\xe6\x1e\r\x10\x9b\xc3\x0c\x00\xe9\x1e\r\xf8\x14\xc3\x0c0u\xc3\x0c\xa0\xe6\x1e\r\x00\xe9\x1e\r@\x13\xc3\x0c\x80v\xc3\x0c\xa0t\xc3\x0cpt\xc3\x0c(\x9c\xc3\x0c0\x14\xc3\x0c\x00u\xc3\x0c\xd0\x14\xc3\x0c0\x14\xc3\x0cH\x9b\xc3\x0c\x00u\xc3\x0c@\xe8\x1e\r \x15\xc3\x0c\xa0t\xc3\x0c@\xe8\x1e\r\x08\x14\xc3\x0c\x00\xe7\x1e\r0\x14\xc3\x0c\xa0\xe6\x1e\r\x08\x14\xc3\x0c\xa8\x14\xc3\x0c\x10\x9b\xc3\x0c`\xe5\x1e\r\xd0t\xc3\x0c\x00\xe7\x1e\r\xd0\x14\xc3\x0c0u\xc3\x0c\xc0u\xc3\x0c\x08\x14\xc3\x0c\xa8\x14\xc3\x0c\x00u\xc3\x0c\xd8\x9a\xc3\x0c\x80\x14\xc3\x0c\x00u\xc3\x0c\x80\x9b\xc3\x0c0\x14\xc3\x0c \x15\xc3\x0c0u\xc3\x0c\xc8\x12\xc3\x0c0u\xc3\x0c\xb8\x9b\xc3\x0c\xa0t\xc3\x0c\x90\x13\xc3\x0c\xa0\xe6\x1e\r\x08\x14\xc3\x0c0\x14\xc3\x0c\xa8\x14\xc3\x0c\x00\xe9\x1e\r\x08\x14\xc3\x0c@\xe8\x1e\r\xd0t\xc3\x0c`\xe5\x1e\r\xd0\x14\xc3\x0c@\x13\xc3\x0cH\x9b\xc3\x0c\x90\x13\xc3\x0c0\x14\xc3\x0c\xf8\x14\xc3\x0c\xf0\x9b\xc3\x0c\x80v\xc3\x0c\xf8\x14\xc3\x0c\x00\xe7\x1e\r\x80\x14\xc3\x0c(\x9c\xc3\x0c0u\xc3\x0c\xd0t\xc3\x0c0\x14\xc3\x0c\x00\xe7\x1e\rX\x14\xc3\x0c\xf8\x14\xc3\x0c0\x14\xc3\x0c v\xc3\x0c\xd0\x14\xc3\x0cH\x9b\xc3\x0c\x08\x14\xc3\x0c\x90u\xc3\x0c\xa0t\xc3\x0c \x15\xc3\x0c\xd0\x14\xc3\x0c0u\xc3\x0c \x15\xc3\x0c0u\xc3\x0c\xa0\xe6\x1e\r\xa0t\xc3\x0c\x80\x14\xc3\x0c\xa0\xe6\x1e\r\x00\xe8\x1e\rX\x14\xc3\x0c\xd0\x14\xc3\x0ch\x13\xc3\x0c\xc8\x12\xc3\x0c`\xe5\x1e\rpt\xc3\x0c\x10\x9b\xc3\x0c \x15\xc3\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\x00F\xc2\x1e\x80G\xc2\x1e\xe0F\xc2\x1e\xa0G\xc2\x1e\xa0E\xc2\x1e\xc0G\xc2\x1e H\xc2\x1e\xa0F\xc2\x1e\x80F\xc2\x1e`G\xc2\x1e\xe0E\xc2\x1e@G\xc2\x1e@I\xc2\x1e@H\xc2\x1e\xe0H\xc2\x1e I\xc2\x1e\xc0H\xc2\x1e F\xc2\x1e`F\xc2\x1e\x80C\xc2\x1e\xa0H\xc2\x1e\xa0I\xc2\x1e\x00G\xc2\x1e@J\xc2\x1e\xe0G\xc2\x1e`J\xc2\x1e\x80I\xc2\x1e\x00J\xc2\x1e\x80J\xc2\x1e\x00I\xc2\x1e J\xc2\x1e\x80H\xc2\x1e\x00H\xc2\x1e G\xc2\x1e@F\xc2\x1e`I\xc2\x1e@K\xc2\x1e\x80K\xc2\x1e`H\xc2\x1e\xe0J\xc2\x1e\xc0\xed\x19\x05 L\xc2\x1e\xc0L\xc2\x1e\x00L\xc2\x1e\xc0E\xc2\x1e\xe0L\xc2\x1e\x80L\xc2\x1e\xe0K\xc2\x1e\xc0I\xc2\x1e\x00M\xc2\x1e\xa0M\xc2\x1e M\xc2\x1e@M\xc2\x1e\xa0K\xc2\x1e\xe0I\xc2\x1e`L\xc2\x1e\x80M\xc2\x1e\xc0K\xc2\x1e\x80N\xc2\x1e\xe0N\xc2\x1e K\xc2\x1e\xa0L\xc2\x1e\x00K\xc2\x1e O\xc2\x1e\x80O\xc2\x1e@N\xc2\x1e`M\xc2\x1e\xc0J\xc2\x1e`N\xc2\x1e\xc0O\xc2\x1e\x00N\xc2\x1e\xc0N\xc2\x1e\xe0M\xc2\x1e`K\xc2\x1e\xa0J\xc2\x1e\xa0N\xc2\x1e\xc0F\xc2\x1e\x00O\xc2\x1e\xa0D\xc2\x1e@L\xc2\x1e N\xc2\x1e@\xe9\x19\x05\xa0O\xc2\x1e\xc0M\xc2\x1e "\xe6\x1e\xa0 \xe6\x1e`!\xe6\x1e !\xe6\x1e\x00!\xe6\x1e` \xe6\x1e@"\xe6\x1e\xe0!\xe6\x1e@ \xe6\x1e@!\xe6\x1e\xc0 \xe6\x1e\xa0!\xe6\x1e  \xe6\x1e`#\xe6\x1e #\xe6\x1e\xc0"\xe6\x1e\x80#\xe6\x1e\xa0"\xe6\x1e\x00"\xe6\x1e\xa0#\xe6\x1e\xc0#\xe6\x1e\xe0#\xe6\x1e\x00$\xe6\x1e`$\xe6\x1e\xc0\xe7\x1e\r\x00#\xe6\x1e\xa0$\xe6\x1e\x80$\xe6\x1e`%\xe6\x1e@#\xe6\x1e\xe0"\xe6\x1e\x80 \xe6\x1e`"\xe6\x1e\xc0%\xe6\x1e@&\xe6\x1e\xe0$\xe6\x1e\x80%\xe6\x1e $\xe6\x1e\x00%\xe6\x1e\xc0!\xe6\x1e\xa0&\xe6\x1e \'\xe6\x1e\xc0&\xe6\x1e\x80"\xe6\x1e\xa0%\xe6\x1e\xa0\'\xe6\x1e\xc0$\xe6\x1e`\'\xe6\x1e\xe0%\xe6\x1e\x80!\xe6\x1e@(\xe6\x1e\xe0 \xe6\x1e\xe0\'\xe6\x1e &\xe6\x1e\x00(\xe6\x1e\xe0O\xc2\x1e@\'\xe6\x1e@%\xe6\x1e\x00&\xe6\x1e\x80)\xe6\x1e\xc0(\xe6\x1e\xa0)\xe6\x1e\x80(\xe6\x1e\xe0)\xe6\x1e\x00*\xe6\x1e`&\xe6\x1e`)\xe6\x1e *\xe6\x1e`*\xe6\x1e`(\xe6\x1e@*\xe6\x1e\x80&\xe6\x1e\xc0)\xe6\x1e\x80\'\xe6\x1e\x00\'\xe6\x1e\x00)\xe6\x1e\x80+\xe6\x1e\xa0(\xe6\x1e\xe0*\xe6\x1e\xc0\'\xe6\x1e@$\xe6\x1e@,\xe6\x1e )\xe6\x1e`,\xe6\x1e +\xe6\x1e\x80,\xe6\x1e (\xe6\x1e ,\xe6\x1e\xe0(\xe6\x1e@+\xe6\x1e`-\xe6\x1e\xa0,\xe6\x1e %\xe6\x1e\xe0,\xe6\x1e\xa0*\xe6\x1e\x80*\xe6\x1e .\xe6\x1e@-\xe6\x1e\x00-\xe6\x1e\x00,\xe6\x1e\x00.\xe6\x1e\x80.\xe6\x1e@/\xe6\x1e\xa0.\xe6\x1e /\xe6\x1e\xc0-\xe6\x1e\xe0.\xe6\x1e\xc0.\xe6\x1e\xc0*\xe6\x1e\xe0/\xe6\x1e\xe0&\xe6\x1e\xe0-\xe6\x1e@)\xe6\x1e`/\xe6\x1e\xa0/\xe6\x1e\x00+\xe6\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\x199D?@\x1ab?\xdc\xab\x8a?\xff\xd9\x9d?\xb43s?\xb7\xc1j?/!\x02@\xec\x98Y?\xaa\x92Y?\xf6e\x86?\x96\x15\x91?=zH?\xbf\x84\x88?4\xb9\x9b?\xc7\x85\x88?\xc6\x14Q?n@\x84?\x13\x8bH?\xe9\x0c\xf1?!d7?\x90\xed.@M/3?\xfa\xe9.?X/D?\x9b\xdb\x1d?\xbdU&?tpw?8\xf8??V\x93Y?\\\xf1??\x16\xf9\x7f?\x91\xe7.?N\xb7\xaa?/^&?\xef\xed\xce?\x85\xcdL?\xc6\xec\x1e@\n\x907?Z6D?L\x87H?\xbdv\x19?o\xaaj?\x1fh\xf7>@\xac\x19?pJD?xs7?\xf8ow?\xce\xf8\x7f?E\x16b?\xdekU?\xc5\xb7;?\x864s?\xed\xfe??\xe64\xb3?\xf2sw?F\xb3{?\x82\xb8{?\x0f\xaaj?\xd3@\x84?\x9b\x8bx@\xec\x96\x99?1VU?\r\xa6\xea?\xe1\xba\xbb?\xc7\xa5Y?H\r\x91?\x9c\x858@\x04\xee\x8e?\n\x14"?\xaaz7?/\x89H?\x03T\x15@\xb8M\x15?\x92\\f?J\xb8\xaa?b\xd0]?\xb1\xb7*?\xb3DD?\x9d\x89H?\x86\xdb-@\xc2\xee.?\xfd\xcbL?C\x08\x11?\xee_f?\x8dC\x84?\x13\xd2;?$\x84H?\xa3\tQ?\xeb\x0c\xb1?\x191C@n\x91w?\x9f\xdb\x9d?\r\xf8??\xc3Z\x15?\xf9\x86\x88?[\x85H?\xcf\xc0*?\xd7$3?o\x10\x01@\xe2\xdb\x1d?\x15\xd8]?)\xf2.?\xd6 \xa2?\xdc\x85\x88?\xbde\x86?<\xc8<@A\xbb\xbb?uDD?\xcdqG@\x13CD?quw?\xd3u7?-e7?\xafv7?\xbe\xe8.?\x91\xdd\x1d?\xf6\nQ?\xea\xf0\x8e?wb\xe6?\x05\xbb;?vC\xa4?\xad\x07Q?Rxw?g\xb9{?\xb4\x98\xb9?\xba\xa4*?\x94\x91Y?\xf3\xea\xbd?\xce\xf8\x7f?0\xec\x8e?E\xd3\x9d?\xa9\xa6j?\xb3\xb4\xaa?\xad4s?\xa9\x16Q?\xdb\xf5\x7f?o\xb3;?\x80\xaa*?/\xb1\x19?9\xa8;?p\xdb\x1d?*\x11Q?\xd6\xf8??\x06.s?+\x88\x08?H\xd5\x9d?\x0b b?\xe5\xa5\xea?c\x87\xa8?\xfa\xb5\x8a?\x99\xb9;?\x16\xfa??\x03\xec\xae?\xf6R\x95?\xb5\xf0\x8e?\x99c\x86?\x02\x87\x88?#\xb9L?y^f?\x18\x19b?\xba/\x93?\x1f\xfe\x1f@\xa8\xb7;?)\x86H?\x92\xfe??,\xf9??\xf1\x1eb?rT\x95?k\xad;?\r\xfe\x9f?S\xdc]?\xf5"b?\xbe\xa4*?\x9c/s?\xa6\x1fb?K$"?3\xaa*?\xbd\xdb.?\xf7ef?\x85)s?\xcf\xdb\xdd?\xa2\x97Y?\x10S\x15?\xf5\x83Y?\xbc\xean?\x19rw?\xce\x1fs?\xae\xa8\x8a?p\x1d"?\xdf\xb4;?c<D?\xe7\xdd\x1d?\x1e"2@/\xbb\x0c?18\x04?J\x00\x80?\x1e\xa4j?e\xfc\x7f?jp\x86?\xa1\xac*?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'h?\xd5\x04\x08\x9c\xdc\x04X\x87\xf5\x04\xd0\x84\xf5\x04H\x88\xf5\x04p\x8d\xf5\x04 \x86\xf5\x04\xc8\x8c\xf5\x04\x88\x8d\xf5\x04P\x80\xf5\x040\x82\xf5\x04H\x85\xf5\x04@\x87\xf5\x04H\x8e\xf5\x04\xa0\x8a\xf5\x04\xf8\x8c\xf5\x04\xd0\x8a\xf5\x04\xf0\x85\xf5\x04h\x86\xf5\x04\x80\x80\xf5\x04\xf0\x8e\xf5\x04\xf8\x89\xf5\x04\x80\x8c\xf5\x04(\x8d\xf5\x048\x89\xf5\x04\xe0\x8c\xf5\x04P\x86\xf5\x04\x80\x8f\xf5\x04P\x83\xf5\x04@\x84\xf5\x04\xa0\x81\xf5\x04\xc8\x86\xf5\x04h\x83\xf5\x04\x88\x8a\xf5\x04(\x81\xf5\x04X\x81\xf5\x04\x80\x89\xf5\x04\x88\x87\xf5\x04X\x8a\xf5\x04\xc8\x89\xf5\x040\x8b\xf5\x04\x80\x83\xf5\x04\xb8\x8a\xf5\x04\x88\x81\xf5\x04(\x8a\xf5\x04p\x87\xf5\x04`\x8e\xf5\x04\xc0\x85\xf5\x04`\x82\xf5\x04\x80\x86\xf5\x04x\x88\xf5\x04`\x85\xf5\x04\x98\x8c\xf5\x04\xb8\x84\xf5\x04P\x89\xf5\x04\xc0\x82\xf5\x04\x08\x86\xf5\x04\xf8\x83\xf5\x04X\x8d\xf5\x04\xe8\x84\xf5\x04 \x80\xf5\x04\xc0n\xd5\x04(g\xd5\x04\xe0f\xd5\x040e\xd5\x048`\xd5\x048l\xd5\x04\x08i\xd5\x04xn\xd5\x04\x08f\xd5\x04\xc8c\xd5\x04\x18n\xd5\x04pj\xd5\x04Pl\xd5\x04(j\xd5\x048o\xd5\x04\xd0j\xd5\x04\xd8k\xd5\x04Hn\xd5\x04 i\xd5\x04\xb8a\xd5\x04\xd8e\xd5\x04\xb8d\xd5\x04\x90b\xd5\x04\xa0a\xd5\x04\xe0i\xd5\x04\x08c\xd5\x04@a\xd5\x048i\xd5\x04\x88a\xd5\x04\xd0g\xd5\x04P`\xd5\x04\x98i\xd5\x04\xd0d\xd5\x04\xd8b\xd5\x04Xg\xd5\x04h`\xd5\x048f\xd5\x04@j\xd5\x04hi\xd5\x04\xf0b\xd5\x04\xa0g\xd5\x04\xe8a\xd5\x04Xa\xd5\x04\x90h\xd5\x04\x90e\xd5\x04hf\xd5\x04 c\xd5\x04\x88m\xd5\x04 `\xd5\x04pa\xd5\x040k\xd5\x04hc\xd5\x04Xm\xd5\x04\xa8e\xd5\x04\x00n\xd5\x04\xe0l\xd5\x040b\xd5\x04\xe0`\xd5\x04\x10d\xd5\x04 l\xd5\x04\x80l\xd5\x04\xe8m\xd5\x04\xb8g\xd5\x04pg\xd5\x04\xb0o\xd5\x04He\xd5\x04\xa8k\xd5\x04\xb8j\xd5\x04\xe8d\xd5\x04pm\xd5\x04`n\xd5\x04\x80`\xd5\x048c\xd5\x04Pi\xd5\x04pd\xd5\x04\x10a\xd5\x04\xc0k\xd5\x04\x98o\xd5\x04xe\xd5\x04\x10m\xd5\x048\x86\xf5\x04x\x8b\xf5\x04\xe8\x8d\xf5\x04\x90\x88\xf5\x04\xb0\x89\xf5\x04\xd0\x87\xf5\x04(\x87\xf5\x04\xb8\x87\xf5\x04`\x8b\xf5\x04\xe0\x80\xf5\x04\x18\x8e\xf5\x04\x08\x8c\xf5\x04\x18\x8b\xf5\x04@\x8d\xf5\x04 \x89\xf5\x04h\x8c\xf5\x04\xa0\x87\xf5\x04\xa8\x8b\xf5\x04\xb0\x83\xf5\x04\xd8\x85\xf5\x04\xd8\x88\xf5\x04\xa0\x84\xf5\x040\x8e\xf5\x04\x08\x83\xf5\x04\xf0\x8b\xf5\x04\x98\x83\xf5\x04x\x8e\xf5\x04\xb8\x8d\xf5\x04h\x80\xf5\x04\xb0\x8c\xf5\x04\x00\x8b\xf5\x04\x90\x8e\xf5\x04\xe0\x89\xf5\x04 \x8c\xf5\x04\xf8\x80\xf5\x04\xf8\x86\xf5\x04\xa8\x85\xf5\x04\xc0\x8e\xf5\x04\x88\x84\xf5\x04\xd0\x8d\xf5\x04\xd8\x8e\xf5\x04p\x8a\xf5\x04\xc0\x88\xf5\x04\xa0\x8d\xf5\x04\x00\x8e\xf5\x04@\x8a\xf5\x04\xf0\x82\xf5\x04\xf0\x88\xf5\x04x\x85\xf5\x04H\x8b\xf5\x04\xe8\x87\xf5\x04\x08\x89\xf5\x04\x10\x81\xf5\x04p\x84\xf5\x04\xc8\x83\xf5\x04\xe0\x8f\xf5\x04\xa8\x8e\xf5\x04\x10\x8a\xf5\x04\xc0\x8b\xf5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3805
sg3633
g3801
sg3647
g3812
sg3642
g3809
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3805
sg3633
g3835
sg3647
g3812
sg3642
g3842
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3822
sg3633
g3948
sg3647
g3829
sg3642
g3955
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3967
sg3633
g3963
sg3647
g3974
sg3642
g3971
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3805
sg3633
g3835
sg3647
g3812
sg3642
g3842
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3884
sg3633
g4032
sg3647
g3891
sg3642
g4039
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3854
sg3633
g4047
sg3647
g3861
sg3642
g4054
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3967
sg3633
g3963
sg3647
g3974
sg3642
g3971
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3901
sg3633
g4088
sg3647
g3908
sg3642
g4095
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3967
sg3633
g4116
sg3647
g3974
sg3642
g4123
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3638
sg3633
g4148
sg3647
g3648
sg3642
g4155
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3709
sg3633
g4176
sg3647
g3716
sg3642
g4183
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3822
sg3633
g3948
sg3647
g3829
sg3642
g3955
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3681
sg3633
g4230
sg3647
g3675
sg3642
g4237
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3884
sg3633
g4032
sg3647
g3891
sg3642
g4039
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g4262
sg3633
g4258
sg3647
g4269
sg3642
g4266
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3758
sg3633
g4275
sg3647
g3765
sg3642
g4282
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3709
sg3633
g4176
sg3647
g3716
sg3642
g4183
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4262
sg3633
g4258
sg3647
g4269
sg3642
g4266
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3681
sg3633
g4230
sg3647
g3675
sg3642
g4237
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3638
sg3633
g4148
sg3647
g3648
sg3642
g4155
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3658
sg3633
g4437
sg3647
g3665
sg3642
g4444
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g4346
sg3633
g4452
sg3647
g4353
sg3642
g4459
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3918
sg3633
g4467
sg3647
g3925
sg3642
g4474
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3901
sg3633
g4088
sg3647
g3908
sg3642
g4095
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g4512
sg3633
g4508
sg3647
g4519
sg3642
g4516
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3805
sg3633
g3835
sg3647
g3812
sg3642
g3842
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3935
sg3633
g4538
sg3647
g3942
sg3642
g4545
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3967
sg3633
g3963
sg3647
g3974
sg3642
g3971
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3741
sg3633
g4605
sg3647
g3748
sg3642
g4612
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g4262
sg3633
g4646
sg3647
g4269
sg3642
g4653
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4262
sg3633
g4646
sg3647
g4269
sg3642
g4653
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3709
sg3633
g4176
sg3647
g3716
sg3642
g4183
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4512
sg3633
g4508
sg3647
g4519
sg3642
g4516
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g4135
sg3633
g4752
sg3647
g4142
sg3642
g4759
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3775
sg3633
g4767
sg3647
g3782
sg3642
g4774
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3918
sg3633
g4467
sg3647
g3925
sg3642
g4474
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3805
sg3633
g3801
sg3647
g3812
sg3642
g3809
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3854
sg3633
g4047
sg3647
g3861
sg3642
g4054
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3758
sg3633
g4275
sg3647
g3765
sg3642
g4282
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3822
sg3633
g3948
sg3647
g3829
sg3642
g3955
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g4262
sg3633
g4258
sg3647
g4269
sg3642
g4266
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3681
sg3633
g4230
sg3647
g3675
sg3642
g4237
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3741
sg3633
g4605
sg3647
g3748
sg3642
g4612
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3775
sg3633
g4767
sg3647
g3782
sg3642
g4774
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3967
sg3633
g3963
sg3647
g3974
sg3642
g3971
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g4135
sg3633
g4752
sg3647
g4142
sg3642
g4759
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g4135
sg3633
g4752
sg3647
g4142
sg3642
g4759
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3935
sg3633
g4538
sg3647
g3942
sg3642
g4545
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3658
sg3633
g4437
sg3647
g3665
sg3642
g4444
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4135
sg3633
g4752
sg3647
g4142
sg3642
g4759
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3741
sg3633
g4605
sg3647
g3748
sg3642
g4612
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4262
sg3633
g4646
sg3647
g4269
sg3642
g4653
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4346
sg3633
g4452
sg3647
g4353
sg3642
g4459
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3805
sg3633
g3835
sg3647
g3812
sg3642
g3842
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3884
sg3633
g4032
sg3647
g3891
sg3642
g4039
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4346
sg3633
g4452
sg3647
g4353
sg3642
g4459
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g4262
sg3633
g4646
sg3647
g4269
sg3642
g4653
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3805
sg3633
g3801
sg3647
g3812
sg3642
g3809
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3709
sg3633
g4176
sg3647
g3716
sg3642
g4183
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3758
sg3633
g4275
sg3647
g3765
sg3642
g4282
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3741
sg3633
g4605
sg3647
g3748
sg3642
g4612
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4512
sg3633
g5315
sg3647
g4519
sg3642
g5322
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3658
sg3633
g4437
sg3647
g3665
sg3642
g4444
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g4512
sg3633
g5315
sg3647
g4519
sg3642
g5322
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3901
sg3633
g4088
sg3647
g3908
sg3642
g4095
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4135
sg3633
g4752
sg3647
g4142
sg3642
g4759
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3967
sg3633
g3963
sg3647
g3974
sg3642
g3971
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3775
sg3633
g4767
sg3647
g3782
sg3642
g4774
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3638
sg3633
g4148
sg3647
g3648
sg3642
g4155
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3935
sg3633
g4538
sg3647
g3942
sg3642
g4545
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3805
sg3633
g3801
sg3647
g3812
sg3642
g3809
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4512
sg3633
g5315
sg3647
g4519
sg3642
g5322
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3901
sg3633
g4088
sg3647
g3908
sg3642
g4095
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3805
sg3633
g3835
sg3647
g3812
sg3642
g3842
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3822
sg3633
g3948
sg3647
g3829
sg3642
g3955
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3918
sg3633
g4467
sg3647
g3925
sg3642
g4474
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3805
sg3633
g3801
sg3647
g3812
sg3642
g3809
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3658
sg3633
g4437
sg3647
g3665
sg3642
g4444
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3758
sg3633
g4275
sg3647
g3765
sg3642
g4282
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g4512
sg3633
g4508
sg3647
g4519
sg3642
g4516
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3935
sg3633
g4538
sg3647
g3942
sg3642
g4545
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3741
sg3633
g4605
sg3647
g3748
sg3642
g4612
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3658
sg3633
g4437
sg3647
g3665
sg3642
g4444
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g4512
sg3633
g5315
sg3647
g4519
sg3642
g5322
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3901
sg3633
g4088
sg3647
g3908
sg3642
g4095
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3681
sg3633
g4230
sg3647
g3675
sg3642
g4237
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4512
sg3633
g5315
sg3647
g4519
sg3642
g5322
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3709
sg3633
g4176
sg3647
g3716
sg3642
g4183
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3967
sg3633
g4116
sg3647
g3974
sg3642
g4123
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3822
sg3633
g3948
sg3647
g3829
sg3642
g3955
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4262
sg3633
g4258
sg3647
g4269
sg3642
g4266
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4346
sg3633
g4452
sg3647
g4353
sg3642
g4459
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3854
sg3633
g4047
sg3647
g3861
sg3642
g4054
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3854
sg3633
g4047
sg3647
g3861
sg3642
g4054
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3638
sg3633
g4148
sg3647
g3648
sg3642
g4155
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4262
sg3633
g4646
sg3647
g4269
sg3642
g4653
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3775
sg3633
g4767
sg3647
g3782
sg3642
g4774
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3638
sg3633
g4148
sg3647
g3648
sg3642
g4155
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3967
sg3633
g4116
sg3647
g3974
sg3642
g4123
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3854
sg3633
g4047
sg3647
g3861
sg3642
g4054
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g4346
sg3633
g4452
sg3647
g4353
sg3642
g4459
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3918
sg3633
g4467
sg3647
g3925
sg3642
g4474
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4262
sg3633
g4258
sg3647
g4269
sg3642
g4266
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g4512
sg3633
g4508
sg3647
g4519
sg3642
g4516
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3775
sg3633
g4767
sg3647
g3782
sg3642
g4774
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3884
sg3633
g4032
sg3647
g3891
sg3642
g4039
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3935
sg3633
g4538
sg3647
g3942
sg3642
g4545
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3758
sg3633
g4275
sg3647
g3765
sg3642
g4282
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3918
sg3633
g4467
sg3647
g3925
sg3642
g4474
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3681
sg3633
g4230
sg3647
g3675
sg3642
g4237
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3967
sg3633
g4116
sg3647
g3974
sg3642
g4123
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3884
sg3633
g4032
sg3647
g3891
sg3642
g4039
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4512
sg3633
g4508
sg3647
g4519
sg3642
g4516
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3967
sg3633
g4116
sg3647
g3974
sg3642
g4123
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I82637136
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'P7\x07\x1f\xe85\x07\x1f@Q\x07\x1f\xc0k\x06\x1f\x106\x07\x1f\xc0B\x07\x1f86\x07\x1f\x106\x07\x1f\xa0C\x07\x1f\xc0B\x07\x1f\xf0k\x06\x1f`6\x07\x1f86\x07\x1f\x80Q\x07\x1f\x106\x07\x1f\xf8B\x07\x1f\xf0k\x06\x1f l\x06\x1f\xd8C\x07\x1f\xf07\x07\x1f\x886\x07\x1f`Q\x07\x1f\xc0Q\x07\x1f0C\x07\x1f\x80l\x06\x1fPl\x06\x1f0C\x07\x1f\xf0k\x06\x1f\xe85\x07\x1f\xc0B\x07\x1f\xd86\x07\x1f`6\x07\x1f\xd86\x07\x1f\x007\x07\x1f\xa0m\x06\x1f\xe0l\x06\x1f\xa07\x07\x1f\x10m\x06\x1f\x80l\x06\x1f l\x06\x1f\x106\x07\x1f\x188\x07\x1f\xf8B\x07\x1f86\x07\x1f\xc87\x07\x1f0C\x07\x1f\x886\x07\x1fPl\x06\x1f\xc0B\x07\x1f Q\x07\x1f`6\x07\x1fPl\x06\x1f\x007\x07\x1f\xf8B\x07\x1fpm\x06\x1f`Q\x07\x1f\xb06\x07\x1fPl\x06\x1f\xf8B\x07\x1f`Q\x07\x1f\xc0k\x06\x1f`6\x07\x1f\x10m\x06\x1f\x007\x07\x1f\xa0m\x06\x1f\xd86\x07\x1f0C\x07\x1f\xc0k\x06\x1f\xb06\x07\x1f l\x06\x1f`6\x07\x1f\xf8B\x07\x1f\x80Q\x07\x1f\x106\x07\x1f0C\x07\x1fPl\x06\x1f86\x07\x1f l\x06\x1f\xb0l\x06\x1f\xb06\x07\x1f\xd0m\x06\x1f86\x07\x1f\xc0B\x07\x1f@Q\x07\x1f86\x07\x1f\x80Q\x07\x1f\xe85\x07\x1f\x80Q\x07\x1f\xa0Q\x07\x1f\x80Q\x07\x1f\x80l\x06\x1f Q\x07\x1f\xc87\x07\x1f Q\x07\x1f\xe85\x07\x1f0C\x07\x1f`Q\x07\x1f\xf0k\x06\x1f0C\x07\x1f\xb0l\x06\x1f\xc0B\x07\x1f l\x06\x1fx7\x07\x1f\x80Q\x07\x1fP7\x07\x1f\xb06\x07\x1f\xe85\x07\x1f\xb06\x07\x1f\xd86\x07\x1f\x80l\x06\x1f\xf0k\x06\x1fP7\x07\x1f\x007\x07\x1f\xc0k\x06\x1f\x007\x07\x1f@Q\x07\x1f Q\x07\x1f@Q\x07\x1f\xf0k\x06\x1f\x10m\x06\x1f@Q\x07\x1f\x007\x07\x1f\xd86\x07\x1f\x106\x07\x1f0C\x07\x1f\x886\x07\x1f\xe85\x07\x1f\x886\x07\x1f\x80Q\x07\x1f86\x07\x1f\xf0k\x06\x1f\xd0m\x06\x1f86\x07\x1f\x80l\x06\x1f\xd86\x07\x1f\x106\x07\x1f\xe85\x07\x1fhC\x07\x1f\x80l\x06\x1f`Q\x07\x1f0C\x07\x1f\xd86\x07\x1f`Q\x07\x1f\xe0l\x06\x1f`Q\x07\x1f@Q\x07\x1fP7\x07\x1f\xf0k\x06\x1f\x886\x07\x1f\x007\x07\x1f\x886\x07\x1f l\x06\x1f\x80Q\x07\x1f\xa07\x07\x1fhC\x07\x1f`Q\x07\x1f\xc0k\x06\x1f`Q\x07\x1f\xf07\x07\x1f\xb06\x07\x1f\xe0l\x06\x1f\x007\x07\x1f\xd0m\x06\x1f`6\x07\x1f\x80Q\x07\x1f\xc0k\x06\x1f\xf0k\x06\x1f\x886\x07\x1f\xa07\x07\x1fPl\x06\x1f\xf0k\x06\x1f\xd0m\x06\x1f\x007\x07\x1f\xe85\x07\x1f\xc0k\x06\x1f\xc87\x07\x1f\x106\x07\x1fP7\x07\x1f\xa0Q\x07\x1fPl\x06\x1f\x007\x07\x1f@Q\x07\x1f\x188\x07\x1f\xb06\x07\x1f\xf8B\x07\x1f\xd86\x07\x1f@Q\x07\x1f\xf8B\x07\x1fpm\x06\x1f Q\x07\x1f`6\x07\x1f\xb06\x07\x1f\xc0B\x07\x1fpm\x06\x1f\x886\x07\x1f\x106\x07\x1f\xb06\x07\x1f l\x06\x1f\xf07\x07\x1f\x10D\x07\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'`+\xe6\x1e`R\x07\x1f\x00S\x07\x1f S\x07\x1f\xa0S\x07\x1f\xe0Q\x07\x1f\xe0S\x07\x1f\x80R\x07\x1f\xc0R\x07\x1f@T\x07\x1f`T\x07\x1f\x80T\x07\x1f\xa0T\x07\x1f\xc0T\x07\x1f\xa0R\x07\x1f R\x07\x1f U\x07\x1f@U\x07\x1f@R\x07\x1f\x80U\x07\x1f`U\x07\x1f@S\x07\x1f\xe0U\x07\x1f\x00V\x07\x1f\x00R\x07\x1f@V\x07\x1f V\x07\x1f`S\x07\x1f\xc0V\x07\x1f`V\x07\x1f\xa0V\x07\x1f\x00W\x07\x1f W\x07\x1f@W\x07\x1f\xe0T\x07\x1f\x80W\x07\x1f`W\x07\x1f\xc0U\x07\x1f\xa0W\x07\x1f\xc0W\x07\x1f\xe0W\x07\x1f@O\xc2\x1e\x80S\x07\x1f\x00U\x07\x1f\xe0V\x07\x1f`X\x07\x1f@X\x07\x1f`O\xc2\x1e\x00T\x07\x1f`Y\x07\x1f\xa0X\x07\x1f\xa0Y\x07\x1f Z\x07\x1f\xe0R\x07\x1f\xc0S\x07\x1f\x80Z\x07\x1f\xa0Z\x07\x1f Y\x07\x1f\xe0X\x07\x1f\x00[\x07\x1f T\x07\x1f\x00Y\x07\x1f\xe0Z\x07\x1f\x00X\x07\x1f\x80V\x07\x1f [\x07\x1f`[\x07\x1f \\\x07\x1f@Z\x07\x1f\x80Y\x07\x1f\x80\\\x07\x1f\x00Z\x07\x1f`Z\x07\x1f\xa0U\x07\x1f X\x07\x1f\x00]\x07\x1f\xc0X\x07\x1f\x00\\\x07\x1f\xc0Z\x07\x1f ]\x07\x1f\xc0]\x07\x1f\xc0[\x07\x1f\xe0Y\x07\x1f ^\x07\x1f\xa0]\x07\x1f\xe0]\x07\x1f@]\x07\x1f`\\\x07\x1f\x80^\x07\x1f@^\x07\x1f\xc0\\\x07\x1f@\\\x07\x1f\xc0Y\x07\x1f@Y\x07\x1f@_\x07\x1f\x80_\x07\x1f`_\x07\x1f _\x07\x1f\xc0^\x07\x1f\xe0[\x07\x1f`^\x07\x1f@[\x07\x1f\x00^\x07\x1f\xe0_\x07\x1f\xa0^\x07\x1f\x00_\x07\x1f\xe0^\x07\x1f\x80[\x07\x1f\x80]\x07\x1f\xe0\\\x07\x1f`]\x07\x1f\xa0[\x07\x1f\xa0_\x07\x1f\xc0_\x07\x1f \xd0.\x1f@\xd2.\x1f`\xd0.\x1f\x80\xd1.\x1f \xd1.\x1f\xe0\xe8\x19\x05\xe0\xd0.\x1f\xa0\xd0.\x1f\xe0\xd1.\x1f\x80\xd0.\x1f\xc0\xd0.\x1f`\xd2.\x1f\x80\xd3.\x1f@\xd1.\x1f \xd2.\x1f\xc0\xd2.\x1f\xa0\xd3.\x1f\xe0\xd2.\x1f\x00\xd1.\x1f\x00\xd3.\x1f@\xd0.\x1f\xc0\xd3.\x1f\xa0\xd1.\x1f\x00\xd2.\x1f\x80\xd2.\x1f\xe0\xd3.\x1f\xa0\xd2.\x1f@\xd3.\x1f\x80\xd5.\x1f \xd5.\x1f\xc0\xd4.\x1f@\xd4.\x1f \xd3.\x1f\x80\xd4.\x1f`\xd4.\x1f\xc0\xd5.\x1f`\xd6.\x1f\xc0\xd1.\x1f \xd6.\x1f\xe0\xd5.\x1f\x00\xd7.\x1f \xd4.\x1f\x00\xd6.\x1f@\xd7.\x1f\x80\xd7.\x1f\xa0\xd7.\x1f@\xd6.\x1f \xd8.\x1f\xe0\xd4.\x1f\xe0\xd7.\x1f \xd7.\x1f\x00\xd5.\x1f`\xd7.\x1f`\xd1.\x1f`\xd8.\x1f\x00\xd4.\x1f\xa0\xd8.\x1f\xe0\xd8.\x1f\xa0\xd4.\x1f\xc0\xd8.\x1f\xc0\xd6.\x1f\x80\xd9.\x1f@\xd8.\x1f\x00\xd8.\x1f\xa0\xd9.\x1f\xc0\xd7.\x1f\xe0\xd6.\x1f\x80\xd8.\x1f`\xd9.\x1f\xa0\xda.\x1f`\xda.\x1f\xa0\xd5.\x1f\x00\xda.\x1f\xc0\xda.\x1f\xa0\xd6.\x1f \xd9.\x1f\x80\xda.\x1f@\xda.\x1f \xdb.\x1f@\xdb.\x1f\xc0\xd9.\x1f \xdc.\x1f`\xdb.\x1f`\xd5.\x1f\xe0\xdb.\x1f\xa0\xdb.\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'u\xab;?=r7?\x9d_f?Dc&?bFD?R\xfe\x7f?\xdb!b?W\xa9*?\xdc#\x82?\xf6 \x82?\xfc\xf4??\x12I\x84?\x1fQ\x15?^\x08Q?\x8e\x9dY?"\xa6\x8a?\xcd\xe9n?&ED?4w\x97?7!\xc2?\xdf\xa0{?\xe0\xa6*?-w\x97?P\xebn?Ha\x15?n\x0e\x91?\x85f&?I4\xd3?\x14rw?w\xdb\x9d?o\xea\xae?i\xd7]?\x90K4@\xea\x85\x88?\xe0vH?)NU?\xd6\xa4*?\xabp7?\xf8\xee]?\x8633?\x87\xe0]?y\xc3\xec?,\xb3;?\x0c\x01\x80?\xfe\x1f\xaa@!\xcd\x8c?\xd6\xb0\xbb?U\x07\xb1?\x1f\xbe;?\x11\xc3\x0c?x"\x82?d\xba\x9b?\xe9\xb6;?\xd1\x81\x88?\x04\xdc\x1d?7\x1d\x82?JLU?\xb3\xbd{?\xef\xd7\x9d?\xe4\xb4;?\x18\xe6\x8e?\x1b\xb4;?v~H?`C\x84?-uH?\xf6\x08@?\\\xa8j?\xc8\x0fQ?\xbeAT@]\nQ?\xa7.b?\xedHU?"MU?\xb5 "?%+s?\xd3\x9eY?\x81\x9eH?\x031s?\x1f\x82H?\x82XU?\xa1\x93\xf9?{\x99Y?\x06\xab*?\x96\x92Y?/\x0fQ?\xf9a\xc6?\x19s7?o\x03o?3ef?\x89\xbb+@\xdc\xcbL?d\xe0.?\xfcM\xb5?\x0bRU?\x0b\xa9*?\xa61s?^03?\xce\xfe\x7f?\x93\x7f&?\xc4\x85H?\x1c\xdb\x9d?\xc1\x1cb?\xc9\xaa\x8a?\xc3\xe0\x1d?\xc7\xfa??=""@vv7?n\rQ?\xd0\xbd{?\xe5vH?\x00f\x86?{d&?\x1b\xba;?\xa9\xe4n?T\x8f7?\xc8SU?\xc2v7?\x1e\xdc]?T\nQ?,\xcc\x1d?)\xfb\x1d?\xbb?D?\x15C\x84?\x11\x00\xc0?\xb4\x06Q?\x82\xcb]?\x0f#"?\x15\xf9P?\xa7\x1db?C\xcb\x8c?\xf4T\xb5?\x96\x94Y?7\x86H?x\xed.?F\xb7{?"\x81H?\xab\xaa*?:\xab*?\xbbs7?\xd1\xb6;?\xa0Q\x95?c\x83\xa8?:&b?!\x89H?\xc0e&?\x95\xc3L?1\xa7*?\x9ae&?\x11Tf?\x89<D? \x93*?\x1f\x91\x19?q\xb9{?lv7?\xe6\xab*?\xab""?\x8et7?\xc7\x82H?\xb2d&@\xa4\xb1Y?\x98p7?\x9a2s?\xa2P\x15?)\xff\x7f?\xe7-3?\x9e\xd6;?\x8de\x86?(\xa4\x1a@\x03\xee.?\x8a\xa4*?\xf8\x97Y?*\xdd]?\xba/\x93?\xc3\x12\x11?\x07S\x15?\x80\xb4\xbb?X\xc0;?\x8d\xed\xce?\x03<D?\x07NU?S\x10Q?O\x08o?\x1d2s?\xec\xd6]?m4D?R2\xb3?F\xd2{?T\x04Q?\xd2\xc9L?x\xc7L?\x03ef?B\xbb\xdb?\x01\xdd\x1d?,q7?\x998\xa4?\xee\xe9n?\xfb\xed\x1e@yS\x15?^@\x84?\xe5\x0fQ?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\x80c\xd5\x04xb\xd5\x04`\x9b\xf5\x04H\x9b\xf5\x04`\x98\xf5\x04\xd0\x9a\xf5\x04(\x9d\xf5\x04 \x99\xf5\x04X\x91\xf5\x04@\x91\xf5\x04\xd8\x92\xf5\x04\xe0\x99\xf5\x04\xd0\x91\xf5\x040\x9e\xf5\x04\xc8\x93\xf5\x04P\x93\xf5\x04\x88\x97\xf5\x04h\x99\xf5\x04P\x9f\xf5\x04\xf0\x9e\xf5\x04\x10\x91\xf5\x04p\x9d\xf5\x04`\x92\xf5\x048&\xdc\x048)\xdc\x040+\xdc\x04\x08&\xdc\x04\xd0\'\xdc\x04x"\xdc\x04`"\xdc\x04\xa0*\xdc\x04(\'\xdc\x04\xf8)\xdc\x04\xb0 \xdc\x04\xf8 \xdc\x04\x80 \xdc\x04`%\xdc\x04\xf8&\xdc\x04p\'\xdc\x04@!\xdc\x04\xc8 \xdc\x04\xe8$\xdc\x04H(\xdc\x04\x98#\xdc\x04\xb8$\xdc\x04X$\xdc\x04\x90(\xdc\x04X!\xdc\x04\xa0-\xdc\x04\x10$\xdc\x04\x88*\xdc\x04\x10*\xdc\x04H+\xdc\x048,\xdc\x04\x18%\xdc\x04\xa0!\xdc\x04\xe8!\xdc\x04\x18"\xdc\x04\xa0\'\xdc\x04\x90+\xdc\x04\xd8"\xdc\x04p*\xdc\x04h,\xdc\x04\xb8-\xdc\x04\xc0%\xdc\x04\x98&\xdc\x04\x18(\xdc\x04\xb0#\xdc\x04\xa8(\xdc\x04\x00(\xdc\x04\x80)\xdc\x04\x98)\xdc\x04\x80#\xdc\x04\xa8%\xdc\x04\xf0"\xdc\x04\xe0,\xdc\x04\x88-\xdc\x04x.\xdc\x04  \xdc\x04\xc0"\xdc\x04\xb0)\xdc\x04\xa8.\xdc\x04\xb8\'\xdc\x04\xf0.\xdc\x040(\xdc\x04\x98,\xdc\x04 /\xdc\x04P/\xdc\x04\xe0 \xdc\x04P&\xdc\x04H%\xdc\x04X\'\xdc\x04\x00"\xdc\x04\xc0.\xdc\x04\x80&\xdc\x04\xd8%\xdc\x04\x80,\xdc\x04p!\xdc\x04\xa0$\xdc\x04\xf0+\xdc\x04\xb8*\xdc\x04\x98 \xdc\x04@\'\xdc\x04\x08/\xdc\x04h&\xdc\x04\xe0&\xdc\x04h)\xdc\x04(-\xdc\x040"\xdc\x04\x00+\xdc\x04\xc0+\xdc\x04\x08)\xdc\x04\xe8*\xdc\x04@$\xdc\x04X*\xdc\x04\xb0&\xdc\x04\x88\'\xdc\x040.\xdc\x04\x18+\xdc\x04\xd8+\xdc\x04\xd8(\xdc\x04\xc8,\xdc\x04\xf8,\xdc\x048/\xdc\x04\xb0,\xdc\x04 ,\xdc\x04\x08#\xdc\x04\x10-\xdc\x04x(\xdc\x04\xd8.\xdc\x04\xe0/\xdc\x040%\xdc\x04`.\xdc\x04\x80/\xdc\x04\x88$\xdc\x04x%\xdc\x04 )\xdc\x04\xe0#\xdc\x04\xc8/\xdc\x04\x10\'\xdc\x04\xe8\'\xdc\x04`+\xdc\x04h/\xdc\x04\xf0%\xdc\x04\x00%\xdc\x04\x98/\xdc\x04X-\xdc\x04\x18.\xdc\x04x+\xdc\x04P \xdc\x04\xc0(\xdc\x04\xc8&\xdc\x04@-\xdc\x04\x10!\xdc\x04\xd0-\xdc\x04\xc8#\xdc\x04p-\xdc\x04\xb0/\xdc\x04\xb8!\xdc\x04\xd0!\xdc\x04@*\xdc\x04\xa8"\xdc\x04\x90%\xdc\x04 #\xdc\x04h#\xdc\x04\x88!\xdc\x04H.\xdc\x04P#\xdc\x04\xa8+\xdc\x04P,\xdc\x04\x90.\xdc\x04\xe8-\xdc\x04(!\xdc\x04\xf0(\xdc\x04\x08,\xdc\x04(*\xdc\x04($\xdc\x04H"\xdc\x04\xf8#\xdc\x04\x08<\xd5\x04\x101\xd5\x04p4\xd5\x048<\xd5\x04x8\xd5\x04\xa85\xd5\x04\xb00\xd5\x04\x08?\xd5\x0402\xd5\x04\x986\xd5\x04h3\xd5\x04\x00;\xd5\x04`;\xd5\x04\xa8;\xd5\x04\x10:\xd5\x04\x182\xd5\x04 9\xd5\x04\xe09\xd5\x04H2\xd5\x04\x98<\xd5\x04H>\xd5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6517
sg6371
g6507
sg6386
g6511
sg6380
g6515
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6464
sg6371
g6524
sg6386
g6471
sg6380
g6531
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6481
sg6371
g6573
sg6386
g6488
sg6380
g6580
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6592
sg6371
g6588
sg6386
g6599
sg6380
g6596
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6447
sg6371
g6605
sg6386
g6454
sg6380
g6612
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6543
sg6371
g6637
sg6386
g6550
sg6380
g6644
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6656
sg6371
g6652
sg6386
g6663
sg6380
g6660
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6592
sg6371
g6669
sg6386
g6599
sg6380
g6676
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6694
sg6371
g6684
sg6386
g6688
sg6380
g6692
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6517
sg6371
g6718
sg6386
g6511
sg6380
g6725
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6743
sg6371
g6733
sg6386
g6737
sg6380
g6741
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6754
sg6371
g6750
sg6386
g6761
sg6380
g6758
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6771
sg6371
g6767
sg6386
g6778
sg6380
g6775
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6694
sg6371
g6784
sg6386
g6688
sg6380
g6791
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6754
sg6371
g6750
sg6386
g6761
sg6380
g6758
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6396
sg6371
g6825
sg6386
g6403
sg6380
g6832
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6857
sg6371
g6853
sg6386
g6864
sg6380
g6861
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6560
sg6371
g6870
sg6386
g6567
sg6380
g6877
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6857
sg6371
g6885
sg6386
g6864
sg6380
g6892
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6904
sg6371
g6900
sg6386
g6911
sg6380
g6908
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6705
sg6371
g6917
sg6386
g6712
sg6380
g6924
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6430
sg6371
g6932
sg6386
g6437
sg6380
g6939
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6464
sg6371
g6524
sg6386
g6471
sg6380
g6531
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6771
sg6371
g6767
sg6386
g6778
sg6380
g6775
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6656
sg6371
g6986
sg6386
g6663
sg6380
g6993
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6447
sg6371
g6605
sg6386
g6454
sg6380
g6612
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6857
sg6371
g6853
sg6386
g6864
sg6380
g6861
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6624
sg6371
g7027
sg6386
g6631
sg6380
g7034
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6481
sg6371
g6573
sg6386
g6488
sg6380
g6580
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6624
sg6371
g7027
sg6386
g6631
sg6380
g7034
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6754
sg6371
g7068
sg6386
g6761
sg6380
g7075
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6705
sg6371
g6917
sg6386
g6712
sg6380
g6924
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6694
sg6371
g6684
sg6386
g6688
sg6380
g6692
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6694
sg6371
g6784
sg6386
g6688
sg6380
g6791
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6904
sg6371
g6900
sg6386
g6911
sg6380
g6908
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6656
sg6371
g6652
sg6386
g6663
sg6380
g6660
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6517
sg6371
g6507
sg6386
g6511
sg6380
g6515
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6743
sg6371
g6733
sg6386
g6737
sg6380
g6741
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6694
sg6371
g6784
sg6386
g6688
sg6380
g6791
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6624
sg6371
g7027
sg6386
g6631
sg6380
g7034
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6517
sg6371
g6718
sg6386
g6511
sg6380
g6725
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6430
sg6371
g6932
sg6386
g6437
sg6380
g6939
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6560
sg6371
g6870
sg6386
g6567
sg6380
g6877
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6464
sg6371
g6524
sg6386
g6471
sg6380
g6531
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6904
sg6371
g6900
sg6386
g6911
sg6380
g6908
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6857
sg6371
g6853
sg6386
g6864
sg6380
g6861
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6754
sg6371
g6750
sg6386
g6761
sg6380
g6758
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6430
sg6371
g6932
sg6386
g6437
sg6380
g6939
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6743
sg6371
g6733
sg6386
g6737
sg6380
g6741
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6656
sg6371
g6986
sg6386
g6663
sg6380
g6993
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6624
sg6371
g7027
sg6386
g6631
sg6380
g7034
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6592
sg6371
g6669
sg6386
g6599
sg6380
g6676
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6447
sg6371
g6605
sg6386
g6454
sg6380
g6612
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6754
sg6371
g7068
sg6386
g6761
sg6380
g7075
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6694
sg6371
g6684
sg6386
g6688
sg6380
g6692
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6656
sg6371
g6652
sg6386
g6663
sg6380
g6660
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6396
sg6371
g6825
sg6386
g6403
sg6380
g6832
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6743
sg6371
g7512
sg6386
g6737
sg6380
g7519
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6771
sg6371
g6767
sg6386
g6778
sg6380
g6775
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6481
sg6371
g6573
sg6386
g6488
sg6380
g6580
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6464
sg6371
g6524
sg6386
g6471
sg6380
g6531
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6413
sg6371
g7566
sg6386
g6420
sg6380
g7573
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6481
sg6371
g6573
sg6386
g6488
sg6380
g6580
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6592
sg6371
g6588
sg6386
g6599
sg6380
g6596
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6592
sg6371
g6669
sg6386
g6599
sg6380
g6676
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6592
sg6371
g6588
sg6386
g6599
sg6380
g6596
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6771
sg6371
g7659
sg6386
g6778
sg6380
g7666
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6384
sg6371
g7674
sg6386
g6376
sg6380
g7681
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6624
sg6371
g7027
sg6386
g6631
sg6380
g7034
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6384
sg6371
g7674
sg6386
g6376
sg6380
g7681
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6754
sg6371
g6750
sg6386
g6761
sg6380
g6758
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6517
sg6371
g6718
sg6386
g6511
sg6380
g6725
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6754
sg6371
g7068
sg6386
g6761
sg6380
g7075
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6396
sg6371
g6825
sg6386
g6403
sg6380
g6832
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6656
sg6371
g6652
sg6386
g6663
sg6380
g6660
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6592
sg6371
g6588
sg6386
g6599
sg6380
g6596
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6743
sg6371
g7512
sg6386
g6737
sg6380
g7519
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6396
sg6371
g6825
sg6386
g6403
sg6380
g6832
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6743
sg6371
g7512
sg6386
g6737
sg6380
g7519
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6857
sg6371
g6885
sg6386
g6864
sg6380
g6892
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6771
sg6371
g7659
sg6386
g6778
sg6380
g7666
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6543
sg6371
g6637
sg6386
g6550
sg6380
g6644
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6904
sg6371
g7949
sg6386
g6911
sg6380
g7956
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6430
sg6371
g6932
sg6386
g6437
sg6380
g6939
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6904
sg6371
g7949
sg6386
g6911
sg6380
g7956
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6413
sg6371
g7566
sg6386
g6420
sg6380
g7573
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6384
sg6371
g7674
sg6386
g6376
sg6380
g7681
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6413
sg6371
g7566
sg6386
g6420
sg6380
g7573
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6543
sg6371
g6637
sg6386
g6550
sg6380
g6644
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6413
sg6371
g7566
sg6386
g6420
sg6380
g7573
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6904
sg6371
g7949
sg6386
g6911
sg6380
g7956
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6857
sg6371
g6885
sg6386
g6864
sg6380
g6892
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6754
sg6371
g7068
sg6386
g6761
sg6380
g7075
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6705
sg6371
g6917
sg6386
g6712
sg6380
g6924
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6396
sg6371
g6825
sg6386
g6403
sg6380
g6832
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6592
sg6371
g6669
sg6386
g6599
sg6380
g6676
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6771
sg6371
g7659
sg6386
g6778
sg6380
g7666
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6771
sg6371
g7659
sg6386
g6778
sg6380
g7666
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6857
sg6371
g6885
sg6386
g6864
sg6380
g6892
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6447
sg6371
g6605
sg6386
g6454
sg6380
g6612
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6481
sg6371
g6573
sg6386
g6488
sg6380
g6580
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6771
sg6371
g6767
sg6386
g6778
sg6380
g6775
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6517
sg6371
g6507
sg6386
g6511
sg6380
g6515
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6754
sg6371
g7068
sg6386
g6761
sg6380
g7075
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6857
sg6371
g6885
sg6386
g6864
sg6380
g6892
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6517
sg6371
g6718
sg6386
g6511
sg6380
g6725
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6517
sg6371
g6507
sg6386
g6511
sg6380
g6515
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6413
sg6371
g7566
sg6386
g6420
sg6380
g7573
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6384
sg6371
g7674
sg6386
g6376
sg6380
g7681
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6705
sg6371
g6917
sg6386
g6712
sg6380
g6924
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6904
sg6371
g7949
sg6386
g6911
sg6380
g7956
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6656
sg6371
g6652
sg6386
g6663
sg6380
g6660
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6592
sg6371
g6669
sg6386
g6599
sg6380
g6676
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6517
sg6371
g6718
sg6386
g6511
sg6380
g6725
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6430
sg6371
g6932
sg6386
g6437
sg6380
g6939
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6517
sg6371
g6507
sg6386
g6511
sg6380
g6515
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6694
sg6371
g6784
sg6386
g6688
sg6380
g6791
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6743
sg6371
g6733
sg6386
g6737
sg6380
g6741
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6904
sg6371
g6900
sg6386
g6911
sg6380
g6908
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6771
sg6371
g6767
sg6386
g6778
sg6380
g6775
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6560
sg6371
g6870
sg6386
g6567
sg6380
g6877
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6592
sg6371
g6588
sg6386
g6599
sg6380
g6596
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6543
sg6371
g6637
sg6386
g6550
sg6380
g6644
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6560
sg6371
g6870
sg6386
g6567
sg6380
g6877
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6694
sg6371
g6684
sg6386
g6688
sg6380
g6692
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6543
sg6371
g6637
sg6386
g6550
sg6380
g6644
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6771
sg6371
g7659
sg6386
g6778
sg6380
g7666
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6904
sg6371
g7949
sg6386
g6911
sg6380
g7956
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6447
sg6371
g6605
sg6386
g6454
sg6380
g6612
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6694
sg6371
g6684
sg6386
g6688
sg6380
g6692
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6904
sg6371
g6900
sg6386
g6911
sg6380
g6908
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6857
sg6371
g6853
sg6386
g6864
sg6380
g6861
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6743
sg6371
g6733
sg6386
g6737
sg6380
g6741
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6857
sg6371
g6853
sg6386
g6864
sg6380
g6861
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6656
sg6371
g6986
sg6386
g6663
sg6380
g6993
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6384
sg6371
g7674
sg6386
g6376
sg6380
g7681
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6560
sg6371
g6870
sg6386
g6567
sg6380
g6877
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6743
sg6371
g7512
sg6386
g6737
sg6380
g7519
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6464
sg6371
g6524
sg6386
g6471
sg6380
g6531
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6656
sg6371
g6986
sg6386
g6663
sg6380
g6993
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6705
sg6371
g6917
sg6386
g6712
sg6380
g6924
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6743
sg6371
g7512
sg6386
g6737
sg6380
g7519
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6656
sg6371
g6986
sg6386
g6663
sg6380
g6993
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6694
sg6371
g6784
sg6386
g6688
sg6380
g6791
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6754
sg6371
g6750
sg6386
g6761
sg6380
g6758
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.