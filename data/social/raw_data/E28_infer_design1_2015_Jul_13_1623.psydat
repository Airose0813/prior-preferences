ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E28_infer_design1_2015_Jul_13_1623
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x85u\x04\xb8\xbf\x00N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_13_1623
p67
sVparticipant
p68
VE28
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.93350188365002396
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F17.883061947941314
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P11'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F28.466999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F1.8600000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS' \x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p103
sg21
F1.6000000000000001
sg70
Vy
sa(dp104
g64
g65
sg20
F13.750999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.63999999999999879
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x1a\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V35-raisins.png
p110
sg21
F1.8999999999999999
sg70
Vy
sa(dp111
g64
g65
sg20
F12.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.29999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x01\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p117
sg21
F1.1000000000000001
sg70
Vy
sa(dp118
g64
g65
sg20
F4.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.039999999999999161
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\t\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p124
sg21
F1.3
sg70
Vy
sa(dp125
g64
g65
sg20
F5.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.23999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x07\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p131
sg21
F1.6000000000000001
sg70
Vy
sa(dp132
g64
g65
sg20
F11.034000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.59999999999999942
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x12\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p138
sg21
F1.2
sg70
Vy
sa(dp139
g64
g65
sg20
F16.766999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F2.1200000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'#\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p145
sg21
F1.8
sg70
Vy
sa(dp146
g64
g65
sg20
F3.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.059999999999998943
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\n\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p152
sg21
F1.3999999999999999
sg70
Vy
sa(dp153
g64
g65
sg20
F8.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F1.2799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x1c\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p159
sg21
F1.5
sg70
Vy
sa(dp160
g64
g65
sg20
F8.9510000000000005
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.53999999999999915
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1f\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p166
sg21
F1.3999999999999999
sg70
Vy
sa(dp167
g64
g65
sg20
F3.3340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.55999999999999939
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S"'\x00\x00\x00"
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V51-mars.png
p173
sg21
F1.2
sg70
Vy
sa(dp174
g64
g65
sg20
F8.2010000000000005
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.059999999999998943
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x19\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p180
sg21
F1.3999999999999999
sg70
Vy
sa(dp181
g64
g65
sg20
F13.667
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.7000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x17\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p187
sg21
F1.3999999999999999
sg70
Vy
sa(dp188
g64
g65
sg20
F3.2170000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.059999999999998499
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x08\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p194
sg21
F1.8999999999999999
sg70
Vy
sa(dp195
g64
g65
sg20
F2.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x15\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V29-beans.png
p201
sg21
F1.5
sg70
Vy
sa(dp202
g64
g65
sg20
F2.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.039999999999999161
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x13\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p208
sg21
F1.2
sg70
Vy
sa(dp209
g64
g65
sg20
F8.5009999999999994
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.6599999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'!\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V44-crunch.png
p215
sg21
F1.7
sg70
Vy
sa(dp216
g64
g65
sg20
F10.801
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F1.3200000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x06\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V7-olives.png
p222
sg21
F1.3
sg70
Vy
sa(dp223
g64
g65
sg20
F6.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.63999999999999879
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x10\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V22-daim.png
p229
sg21
F1.8999999999999999
sg70
Vy
sa(dp230
g64
g65
sg20
F5.8339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F1.2000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x14\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p236
sg21
F1.1000000000000001
sg70
Vy
sa(dp237
g64
g65
sg20
F3.2170000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.619999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\r\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p243
sg21
F1.7
sg70
Vy
sa(dp244
g64
g65
sg20
F5.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.19999999999999848
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x1b\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p250
sg21
F2
sg70
Vy
sa(dp251
g64
g65
sg20
F13.050000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F2.1800000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x1e\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p257
sg21
F1.6000000000000001
sg70
Vy
sa(dp258
g64
g65
sg20
F5.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.039999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x04\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p264
sg21
F1.5
sg70
Vy
sa(dp265
g64
g65
sg20
F4.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.35999999999999899
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x02\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p271
sg21
F1.6000000000000001
sg70
Vy
sa(dp272
g64
g65
sg20
F2.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.61999999999999922
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'$\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V48-twix.png
p278
sg21
F1.3999999999999999
sg70
Vy
sa(dp279
g64
g65
sg20
F6.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.89999999999999947
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x03\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V4-corn.png
p285
sg21
F1.6000000000000001
sg70
Vy
sa(dp286
g64
g65
sg20
F7.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x1d\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V40-sardines.png
p292
sg21
F1.3999999999999999
sg70
Vy
sa(dp293
g64
g65
sg20
F3.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.67999999999999927
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x11\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p299
sg21
F1.5
sg70
Vy
sa(dp300
g64
g65
sg20
F10.817
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.7800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x0c\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V18-mms.png
p306
sg21
F1.2
sg70
Vy
sa(dp307
g64
g65
sg20
F5.5839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F2.0800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x00\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p313
sg21
F1.2
sg70
Vy
sa(dp314
g64
g65
sg20
F4.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F1.2200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x18\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p320
sg21
F1.1000000000000001
sg70
Vy
sa(dp321
g64
g65
sg20
F1.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.8199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x05\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p327
sg21
F1.3999999999999999
sg70
Vy
sa(dp328
g64
g65
sg20
F8.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.45999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'"\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p334
sg21
F1.5
sg70
Vy
sa(dp335
g64
g65
sg20
F2.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.17999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x0f\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p341
sg21
F1.3
sg70
Vy
sa(dp342
g64
g65
sg20
F3.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.77999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'%\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p348
sg21
F1.8999999999999999
sg70
Vy
sa(dp349
g64
g65
sg20
F3.3839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.059999999999998499
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x16\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p355
sg21
F1.8999999999999999
sg70
Vy
sa(dp356
g64
g65
sg20
F4.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.29999999999999849
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x0b\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p362
sg21
F1.8999999999999999
sg70
Vy
sa(dp363
g64
g65
sg20
F7.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.099999999999998951
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'&\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V50-polo.png
p369
sg21
F1.6000000000000001
sg70
Vy
sa(dp370
g64
g65
sg20
F3.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.059999999999998721
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x0e\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p376
sg21
F1.7
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F6.2338749637201545
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p381
sg26
F2.899999999999999
sg28
F4
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F10.749939416538837
sg27
F10.967000000000001
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'44-crunch.png'
p390
sg26
F5.5999999999999988
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.2499910193946562
sg27
F5.8170000000000002
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'25-kitkat.png'
p399
sg26
F4.4000000000000004
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F2.7999899075075518
sg27
F2.5009999999999999
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'22-daim.png'
p408
sg26
F1.9999999999999982
sg28
F4
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F3.3334559257455112
sg27
F2.4009999999999998
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p417
sg26
F2.5999999999999996
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F6.8666317135721329
sg27
F2.3340000000000001
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p426
sg26
F3.5
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F5.7499964362687024
sg27
F6.0510000000000002
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p435
sg26
F4.0999999999999996
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F9.9999863152661419
sg27
F2.9340000000000002
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p444
sg26
F5.4999999999999991
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.5835475849598879
sg27
F4.5510000000000002
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'50-polo.png'
p453
sg26
F5.4999999999999991
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.6500263146044745
sg27
F1.0840000000000001
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'51-mars.png'
p462
sg26
F2.6999999999999993
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F2.4500082393533376
sg27
F2.601
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p471
sg26
F5.4999999999999991
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F1.6833982502903382
sg27
F4.3010000000000002
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p480
sg26
F5.8999999999999986
sg28
F3
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.8334579214351834
sg27
F2.351
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p489
sg26
F4.1000000000000014
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F2.6000602128333412
sg27
F11.117000000000001
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'29-beans.png'
p498
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.1166133247097605
sg27
F3.8010000000000002
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'31-hobnobs.png'
p507
sg26
F3.5999999999999996
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F2.1832867767261632
sg27
F1.8340000000000001
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p516
sg26
F5.3999999999999995
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.3667950750932505
sg27
F2.117
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'18-mms.png'
p525
sg26
F1.9999999999999982
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F28.833242386866914
sg27
F5.2839999999999998
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'5-pineapple.png'
p534
sg26
F5.2000000000000002
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F2.6167590101140377
sg27
F1.0840000000000001
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'4-corn.png'
p543
sg26
F5.5
sg28
F3
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'left'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.2333808877883712
sg27
F2.367
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p552
sg26
F5.0000000000000009
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.766676987237588
sg27
F1.651
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'38-maltesers.png'
p561
sg26
F4.6000000000000005
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F2.1997885708515241
sg27
F2.734
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p570
sg26
F5.7999999999999989
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.0333821992389858
sg27
F5.101
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'48-twix.png'
p579
sg26
F3.9000000000000008
sg28
F3
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F2.3499939274006465
sg27
F4.6509999999999998
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'40-sardines.png'
p588
sg26
F4.2000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F2.1833446517484845
sg27
F1.7669999999999999
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'49-yorkie.png'
p597
sg26
F4.8000000000000007
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.4334556976682507
sg27
F2.3010000000000002
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p606
sg26
F1.8999999999999988
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F5.7666852550973999
sg27
F1.4339999999999999
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'7-olives.png'
p615
sg26
F2.2999999999999989
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F2.7334071168588707
sg27
F1.101
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p624
sg26
F5.5
sg28
F3
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.7334102529457596
sg27
F2.351
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p633
sg26
F4.9000000000000012
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F4.48352329455156
sg27
F1.7509999999999999
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p642
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F2.0831658378847351
sg27
F7.4009999999999998
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p651
sg26
F5.1000000000000005
sg28
F4
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F5.9834326331874763
sg27
F1.5509999999999999
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p660
sg26
F4.9000000000000021
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.5667575561128615
sg27
F1.5009999999999999
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'46-pistachios.png'
p669
sg26
F5.799999999999998
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.0001163202432508
sg27
F1.5509999999999999
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p678
sg26
F5.2000000000000002
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.0000949378445512
sg27
F1.151
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p687
sg26
F4.9000000000000004
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F3.0834785910883511
sg27
F4.0010000000000003
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'35-raisins.png'
p696
sg26
F4.6000000000000014
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.266720892424928
sg27
F1.5509999999999999
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p705
sg26
F5.6999999999999984
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F0.95004986375352019
sg27
F3.0169999999999999
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p714
sg26
F2.5999999999999996
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F2.1833643235549971
sg27
F2.7669999999999999
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p723
sg26
F5.0000000000000018
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F5.3500230074605497
sg27
F1.8009999999999999
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p732
sg26
F5.2000000000000002
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F6.7167727518681204
sg27
F1.0509999999999999
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F271.12678678442171
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F21.016428238679509
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'32-hovis_crackers.png'
p744
sg83
S'24-food_doctor_apple_walnut_bar.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\r\x10($\t\x81\x98'
tRp754
sa(dp755
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p756
sg83
S'9-yu_mango_pieces.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'9-yu_mango_pieces.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\r\x10(.\x0b\xdf\x10'
tRp765
sa(dp766
g64
g65
sg82
S'12-topic.png'
p767
sg83
S'39-mackerel.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'39-mackerel.png'
p772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\r\x10(7\t\x81\x98'
tRp776
sa(dp777
g64
g65
sg82
S'15-walnut_whip.png'
p778
sg83
S'15-walnut_whip.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'28-maple_pecan.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\r\x10)\x03\x06\xb2\xd8'
tRp787
sa(dp788
g64
g65
sg82
g744
sg83
S'32-hovis_crackers.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\r\x10)\x0e\n{\x98'
tRp796
sa(dp797
g64
g65
sg82
S'11-snickers.png'
p798
sg83
S'54-frubes_yogurt.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'54-frubes_yogurt.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\r\x10)\x16\x00J8'
tRp807
sa(dp808
g64
g65
sg82
g778
sg83
S'28-maple_pecan.png'
p809
sg56
g57
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p812
I0
sg84
g783
sg33
g783
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\r\x10)\x1e\x00U\xf0'
tRp816
sa(dp817
g64
g65
sg82
S'52-aero_mousse.png'
p818
sg83
S'14-discos_salt_vinegar.png'
p819
sg56
g57
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p822
I0
sg84
S'14-discos_salt_vinegar.png'
p823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S"\x07\xdf\x07\r\x10)'\x00\x1bX"
tRp827
sa(dp828
g64
g65
sg82
S'53-cheestrings.png'
p829
sg83
S'53-cheestrings.png'
p830
sg56
g57
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p833
I0
sg84
S'47-picnic.png'
p834
sg33
g834
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S"\x07\xdf\x07\r\x10)/\x00'\x10"
tRp838
sa(dp839
g64
g65
sg82
g798
sg83
S'11-snickers.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g803
sg33
g803
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\r\x10)5\x0c\x9ex'
tRp847
sa(dp848
g64
g65
sg82
g756
sg83
S'37-nakd_cashew_cookie.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\r\x10*\x02\x0bq\xb0'
tRp856
sa(dp857
g64
g65
sg82
g818
sg83
S'52-aero_mousse.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\r\x10*\x0b\x02m\x18'
tRp865
sa(dp866
g64
g65
sg82
g767
sg83
S'12-topic.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\r\x10*\x10\x0e\xecP'
tRp874
sa(dp875
g64
g65
sg82
g829
sg83
S'47-picnic.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g834
sg33
g829
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\r\x10*\x17\x0c!x'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F83.031598622172169
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'3-ellas_strawberries_apples.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'3-ellas_strawberries_apples.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'13-mccoys_steak_crisps.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'13-mccoys_steak_crisps.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.7331414049331215
sg34
g753
(S'\x07\xdf\x07\r\x10-$\t\x18 '
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'27-hartleys_raspberries_jelly.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'51-mars.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'51-mars.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F2.9665701892881771
sg34
g753
(S'\x07\xdf\x07\r\x10-,\x05\x8d\xe0'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'7-olives.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'22-daim.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'22-daim.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'7-olives.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.8999372212783783
sg34
g753
(S'\x07\xdf\x07\r\x10-4\x05\x99\x98'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
g896
sS'block_loop.thisIndex'
p950
g889
sg38
S'left'
p951
sg59
g63
sS'trial_loop.thisN'
p952
I3
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p953
g60
(g99
S'\x03\x00\x00\x00'
tRp954
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p955
I0
sg904
g905
sS'block_loop.thisRepN'
p956
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p957
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p958
Nsg70
Vy
sS'block_loop.thisTrialN'
p959
I0
sg39
F1.4664629922008316
sg34
g753
(S'\x07\xdf\x07\r\x10-;\x04|p'
tRp960
sa(dp961
S'trial_loop.thisTrialN'
p962
I4
sg895
S'31-hobnobs.png'
p963
sS'block_loop.thisIndex'
p964
g889
sg38
S'left'
p965
sg59
g63
sS'trial_loop.thisN'
p966
I4
sg33
S'25-kitkat.png'
p967
sg64
g65
sS'trial_loop.thisIndex'
p968
g60
(g99
S'\x04\x00\x00\x00'
tRp969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p970
I0
sg904
S'25-kitkat.png'
p971
sS'block_loop.thisRepN'
p972
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p973
I0
sg909
S'31-hobnobs.png'
p974
sg55
g11
sS'block_loop.thisTrial'
p975
Nsg70
Vy
sS'block_loop.thisTrialN'
p976
I0
sg39
F1.766643060498609
sg34
g753
(S'\x07\xdf\x07\r\x10.\x05\x0c1\x18'
tRp977
sa(dp978
S'trial_loop.thisTrialN'
p979
I5
sg895
S'41-peanuts_redo.png'
p980
sS'block_loop.thisIndex'
p981
g889
sg38
S'left'
p982
sg59
g63
sS'trial_loop.thisN'
p983
I5
sg33
S'45-chewy_nougat_redo.png'
p984
sg64
g65
sS'trial_loop.thisIndex'
p985
g60
(g99
S'\x05\x00\x00\x00'
tRp986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p987
I0
sg904
S'45-chewy_nougat_redo.png'
p988
sS'block_loop.thisRepN'
p989
I0
sg907
S'41-peanuts_redo.png'
p990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p991
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vy
sS'block_loop.thisTrialN'
p993
I0
sg39
F1.649913985744206
sg34
g753
(S"\x07\xdf\x07\r\x10.\x0c\t'\xc0"
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'20-fruit_pastilles.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
S'2-steamed_puddings.png'
p1001
sg64
g65
sS'trial_loop.thisIndex'
p1002
g60
(g99
S'\x06\x00\x00\x00'
tRp1003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1004
I0
sg904
S'2-steamed_puddings.png'
p1005
sS'block_loop.thisRepN'
p1006
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1007
I0
sg909
S'20-fruit_pastilles.png'
p1008
sg55
g11
sS'block_loop.thisTrial'
p1009
Nsg70
Vy
sS'block_loop.thisTrialN'
p1010
I0
sg39
F3.0665254858213302
sg34
g753
(S'\x07\xdf\x07\r\x10.\x13\x04:\x08'
tRp1011
sa(dp1012
S'trial_loop.thisTrialN'
p1013
I7
sg895
S'40-sardines.png'
p1014
sS'block_loop.thisIndex'
p1015
g889
sg38
S'right'
p1016
sg59
g63
sS'trial_loop.thisN'
p1017
I7
sg33
S'5-pineapple.png'
p1018
sg64
g65
sS'trial_loop.thisIndex'
p1019
g60
(g99
S'\x07\x00\x00\x00'
tRp1020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1021
I0
sg904
S'5-pineapple.png'
p1022
sS'block_loop.thisRepN'
p1023
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1024
I0
sg909
S'40-sardines.png'
p1025
sg55
g11
sS'block_loop.thisTrial'
p1026
Nsg70
Vy
sS'block_loop.thisTrialN'
p1027
I0
sg39
F2.0998877281563182
sg34
g753
(S'\x07\xdf\x07\r\x10.\x1b\x05\xef\x88'
tRp1028
sa(dp1029
S'trial_loop.thisTrialN'
p1030
I8
sg895
g980
sS'block_loop.thisIndex'
p1031
g889
sg38
S'right'
p1032
sg59
g63
sS'trial_loop.thisN'
p1033
I8
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p1034
g60
(g99
S'\x08\x00\x00\x00'
tRp1035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1036
I0
sg904
g988
sS'block_loop.thisRepN'
p1037
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1038
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p1039
Nsg70
Vy
sS'block_loop.thisTrialN'
p1040
I0
sg39
F1.6498863311753666
sg34
g753
(S'\x07\xdf\x07\r\x10."\x07\xe7p'
tRp1041
sa(dp1042
S'trial_loop.thisTrialN'
p1043
I9
sg895
g1014
sS'block_loop.thisIndex'
p1044
g889
sg38
S'right'
p1045
sg59
g63
sS'trial_loop.thisN'
p1046
I9
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1047
g60
(g99
S'\t\x00\x00\x00'
tRp1048
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1049
I0
sg904
g1022
sS'block_loop.thisRepN'
p1050
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1051
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1052
Nsg70
Vy
sS'block_loop.thisTrialN'
p1053
I0
sg39
F1.8999397871666588
sg34
g753
(S'\x07\xdf\x07\r\x10.)\x02\xf9\xb8'
tRp1054
sa(dp1055
S'trial_loop.thisTrialN'
p1056
I10
sg895
S'50-polo.png'
p1057
sS'block_loop.thisIndex'
p1058
g889
sg38
S'right'
p1059
sg59
g63
sS'trial_loop.thisN'
p1060
I10
sg33
S'48-twix.png'
p1061
sg64
g65
sS'trial_loop.thisIndex'
p1062
g60
(g99
S'\n\x00\x00\x00'
tRp1063
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1064
I0
sg904
S'48-twix.png'
p1065
sS'block_loop.thisRepN'
p1066
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1067
I0
sg909
S'50-polo.png'
p1068
sg55
g11
sS'block_loop.thisTrial'
p1069
Nsg70
Vy
sS'block_loop.thisTrialN'
p1070
I0
sg39
F2.3998782058624784
sg34
g753
(S'\x07\xdf\x07\r\x10.0\x02\x17('
tRp1071
sa(dp1072
S'trial_loop.thisTrialN'
p1073
I11
sg895
g963
sS'block_loop.thisIndex'
p1074
g889
sg38
S'right'
p1075
sg59
g63
sS'trial_loop.thisN'
p1076
I11
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p1077
g60
(g99
S'\x0b\x00\x00\x00'
tRp1078
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1079
I0
sg904
g971
sS'block_loop.thisRepN'
p1080
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1081
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p1082
Nsg70
Vy
sS'block_loop.thisTrialN'
p1083
I0
sg39
F1.699893202050589
sg34
g753
(S'\x07\xdf\x07\r\x10.7\x08\x978'
tRp1084
sa(dp1085
S'trial_loop.thisTrialN'
p1086
I12
sg895
S'22-daim.png'
p1087
sS'block_loop.thisIndex'
p1088
g889
sg38
S'left'
p1089
sg59
g63
sS'trial_loop.thisN'
p1090
I12
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1091
g60
(g99
S'\x0c\x00\x00\x00'
tRp1092
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1093
I0
sg904
S'7-olives.png'
p1094
sS'block_loop.thisRepN'
p1095
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1096
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1097
Nsg70
Vy
sS'block_loop.thisTrialN'
p1098
I0
sg39
F2.1665326703077881
sg34
g753
(S'\x07\xdf\x07\r\x10/\x02\x04\x9b\xb0'
tRp1099
sa(dp1100
S'trial_loop.thisTrialN'
p1101
I13
sg895
S'33-ambrosia_rice.png'
p1102
sS'block_loop.thisIndex'
p1103
g889
sg38
S'left'
p1104
sg59
g63
sS'trial_loop.thisN'
p1105
I13
sg33
S'33-ambrosia_rice.png'
p1106
sg64
g65
sS'trial_loop.thisIndex'
p1107
g60
(g99
S'\r\x00\x00\x00'
tRp1108
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1109
I0
sg904
S'23-crunchie_redo.png'
p1110
sS'block_loop.thisRepN'
p1111
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1112
I0
sg909
S'23-crunchie_redo.png'
p1113
sg55
g11
sS'block_loop.thisTrial'
p1114
Nsg70
Vy
sS'block_loop.thisTrialN'
p1115
I0
sg39
F1.6832249103244976
sg34
g753
(S'\x07\xdf\x07\r\x10/\t\x07\x89\xb0'
tRp1116
sa(dp1117
S'trial_loop.thisTrialN'
p1118
I14
sg895
g980
sS'block_loop.thisIndex'
p1119
g889
sg38
S'right'
p1120
sg59
g63
sS'trial_loop.thisN'
p1121
I14
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p1122
g60
(g99
S'\x0e\x00\x00\x00'
tRp1123
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1124
I0
sg904
g988
sS'block_loop.thisRepN'
p1125
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1126
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p1127
Nsg70
Vy
sS'block_loop.thisTrialN'
p1128
I0
sg39
F1.4836732564363047
sg34
g753
(S'\x07\xdf\x07\r\x10/\x10\x03O\xa8'
tRp1129
sa(dp1130
S'trial_loop.thisTrialN'
p1131
I15
sg895
S'51-mars.png'
p1132
sS'block_loop.thisIndex'
p1133
g889
sg38
S'left'
p1134
sg59
g63
sS'trial_loop.thisN'
p1135
I15
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1136
g60
(g99
S'\x0f\x00\x00\x00'
tRp1137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1138
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1139
sS'block_loop.thisRepN'
p1140
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1141
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1142
Nsg70
Vy
sS'block_loop.thisTrialN'
p1143
I0
sg39
F1.4832059797736292
sg34
g753
(S'\x07\xdf\x07\r\x10/\x16\x0bB\xd0'
tRp1144
sa(dp1145
S'trial_loop.thisTrialN'
p1146
I16
sg895
S'6-sour_patch_kids.png'
p1147
sS'block_loop.thisIndex'
p1148
g889
sg38
S'right'
p1149
sg59
g63
sS'trial_loop.thisN'
p1150
I16
sg33
S'38-maltesers.png'
p1151
sg64
g65
sS'trial_loop.thisIndex'
p1152
g60
(g99
S'\x10\x00\x00\x00'
tRp1153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1154
I0
sg904
S'38-maltesers.png'
p1155
sS'block_loop.thisRepN'
p1156
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1157
I0
sg909
S'6-sour_patch_kids.png'
p1158
sg55
g11
sS'block_loop.thisTrial'
p1159
Nsg70
Vy
sS'block_loop.thisTrialN'
p1160
I0
sg39
F1.8662967226773617
sg34
g753
(S'\x07\xdf\x07\r\x10/\x1d\x03\xb58'
tRp1161
sa(dp1162
S'trial_loop.thisTrialN'
p1163
I17
sg895
g1087
sS'block_loop.thisIndex'
p1164
g889
sg38
S'left'
p1165
sg59
g63
sS'trial_loop.thisN'
p1166
I17
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1167
g60
(g99
S'\x11\x00\x00\x00'
tRp1168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1169
I0
sg904
g1094
sS'block_loop.thisRepN'
p1170
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1171
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1172
Nsg70
Vy
sS'block_loop.thisTrialN'
p1173
I0
sg39
F1.3499178060628765
sg34
g753
(S'\x07\xdf\x07\r\x10/$\x02Y\x90'
tRp1174
sa(dp1175
S'trial_loop.thisTrialN'
p1176
I18
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1177
sS'block_loop.thisIndex'
p1178
g889
sg38
S'left'
p1179
sg59
g63
sS'trial_loop.thisN'
p1180
I18
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1181
sg64
g65
sS'trial_loop.thisIndex'
p1182
g60
(g99
S'\x12\x00\x00\x00'
tRp1183
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1184
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1185
sS'block_loop.thisRepN'
p1186
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1187
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1188
sg55
g11
sS'block_loop.thisTrial'
p1189
Nsg70
Vy
sS'block_loop.thisTrialN'
p1190
I0
sg39
F2.0832604906318011
sg34
g753
(S'\x07\xdf\x07\r\x10/*\x08)\xd8'
tRp1191
sa(dp1192
S'trial_loop.thisTrialN'
p1193
I19
sg895
S'16-skips_prawn.png'
p1194
sS'block_loop.thisIndex'
p1195
g889
sg38
S'right'
p1196
sg59
g63
sS'trial_loop.thisN'
p1197
I19
sg33
S'42-mrkipling_lemon_slices.png'
p1198
sg64
g65
sS'trial_loop.thisIndex'
p1199
g60
(g99
S'\x13\x00\x00\x00'
tRp1200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1201
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1202
sS'block_loop.thisRepN'
p1203
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1204
I0
sg909
S'16-skips_prawn.png'
p1205
sg55
g11
sS'block_loop.thisTrial'
p1206
Nsg70
Vy
sS'block_loop.thisTrialN'
p1207
I0
sg39
F2.4001952355465619
sg34
g753
(S'\x07\xdf\x07\r\x10/1\t\xe3@'
tRp1208
sa(dp1209
S'trial_loop.thisTrialN'
p1210
I20
sg895
S'2-steamed_puddings.png'
p1211
sS'block_loop.thisIndex'
p1212
g889
sg38
S'left'
p1213
sg59
g63
sS'trial_loop.thisN'
p1214
I20
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1215
g60
(g99
S'\x14\x00\x00\x00'
tRp1216
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1217
I0
sg904
S'20-fruit_pastilles.png'
p1218
sS'block_loop.thisRepN'
p1219
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1220
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1221
Nsg70
Vy
sS'block_loop.thisTrialN'
p1222
I0
sg39
F1.3332971258059843
sg34
g753
(S'\x07\xdf\x07\r\x10/9\x01!\x10'
tRp1223
sa(dp1224
S'trial_loop.thisTrialN'
p1225
I21
sg895
S'35-raisins.png'
p1226
sS'block_loop.thisIndex'
p1227
g889
sg38
S'right'
p1228
sg59
g63
sS'trial_loop.thisN'
p1229
I21
sg33
S'35-raisins.png'
p1230
sg64
g65
sS'trial_loop.thisIndex'
p1231
g60
(g99
S'\x15\x00\x00\x00'
tRp1232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1233
I0
sg904
S'49-yorkie.png'
p1234
sS'block_loop.thisRepN'
p1235
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1236
I0
sg909
S'49-yorkie.png'
p1237
sg55
g11
sS'block_loop.thisTrial'
p1238
Nsg70
Vy
sS'block_loop.thisTrialN'
p1239
I0
sg39
F1.8498684840014903
sg34
g753
(S'\x07\xdf\x07\r\x100\x03\x06\xedp'
tRp1240
sa(dp1241
S'trial_loop.thisTrialN'
p1242
I22
sg895
g997
sS'block_loop.thisIndex'
p1243
g889
sg38
S'right'
p1244
sg59
g63
sS'trial_loop.thisN'
p1245
I22
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1246
g60
(g99
S'\x16\x00\x00\x00'
tRp1247
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1248
I0
sg904
g1005
sS'block_loop.thisRepN'
p1249
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1250
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1251
Nsg70
Vy
sS'block_loop.thisTrialN'
p1252
I0
sg39
F1.3499448904331075
sg34
g753
(S'\x07\xdf\x07\r\x100\n\x05\x18\xb0'
tRp1253
sa(dp1254
S'trial_loop.thisTrialN'
p1255
I23
sg895
S'29-beans.png'
p1256
sS'block_loop.thisIndex'
p1257
g889
sg38
S'right'
p1258
sg59
g63
sS'trial_loop.thisN'
p1259
I23
sg33
S'29-beans.png'
p1260
sg64
g65
sS'trial_loop.thisIndex'
p1261
g60
(g99
S'\x17\x00\x00\x00'
tRp1262
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1263
I0
sg904
S'46-pistachios.png'
p1264
sS'block_loop.thisRepN'
p1265
I0
sg907
S'46-pistachios.png'
p1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1267
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p1268
Nsg70
Vy
sS'block_loop.thisTrialN'
p1269
I0
sg39
F1.5498916910291882
sg34
g753
(S'\x07\xdf\x07\r\x100\x10\n\xe5\x10'
tRp1270
sa(dp1271
S'trial_loop.thisTrialN'
p1272
I24
sg895
g1147
sS'block_loop.thisIndex'
p1273
g889
sg38
S'right'
p1274
sg59
g63
sS'trial_loop.thisN'
p1275
I24
sg33
g1151
sg64
g65
sS'trial_loop.thisIndex'
p1276
g60
(g99
S'\x18\x00\x00\x00'
tRp1277
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1278
I0
sg904
g1155
sS'block_loop.thisRepN'
p1279
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1280
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p1281
Nsg70
Vy
sS'block_loop.thisTrialN'
p1282
I0
sg39
F3.0663233508894336
sg34
g753
(S'\x07\xdf\x07\r\x100\x17\x04\x88('
tRp1283
sa(dp1284
S'trial_loop.thisTrialN'
p1285
I25
sg895
S'4-corn.png'
p1286
sS'block_loop.thisIndex'
p1287
g889
sg38
S'right'
p1288
sg59
g63
sS'trial_loop.thisN'
p1289
I25
sg33
S'4-corn.png'
p1290
sg64
g65
sS'trial_loop.thisIndex'
p1291
g60
(g99
S'\x19\x00\x00\x00'
tRp1292
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1293
I0
sg904
S'10-bounty_redo.png'
p1294
sS'block_loop.thisRepN'
p1295
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1296
I0
sg909
S'10-bounty_redo.png'
p1297
sg55
g11
sS'block_loop.thisTrial'
p1298
Nsg70
Vy
sS'block_loop.thisTrialN'
p1299
I0
sg39
F5.1164684946052148
sg34
g753
(S'\x07\xdf\x07\r\x100\x1f\x06\x03\x10'
tRp1300
sa(dp1301
S'trial_loop.thisTrialN'
p1302
I26
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1303
sS'block_loop.thisIndex'
p1304
g889
sg38
S'right'
p1305
sg59
g63
sS'trial_loop.thisN'
p1306
I26
sg33
S'36-fig_rolls.png'
p1307
sg64
g65
sS'trial_loop.thisIndex'
p1308
g60
(g99
S'\x1a\x00\x00\x00'
tRp1309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1310
I0
sg904
S'36-fig_rolls.png'
p1311
sS'block_loop.thisRepN'
p1312
I0
sg907
S'34-hula_hoops_bbq_beef_redo.png'
p1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1314
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p1315
Nsg70
Vy
sS'block_loop.thisTrialN'
p1316
I0
sg39
F2.7665147661136871
sg34
g753
(S'\x07\xdf\x07\r\x100)\x08dp'
tRp1317
sa(dp1318
S'trial_loop.thisTrialN'
p1319
I27
sg895
g1226
sS'block_loop.thisIndex'
p1320
g889
sg38
S'left'
p1321
sg59
g63
sS'trial_loop.thisN'
p1322
I27
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p1323
g60
(g99
S'\x1b\x00\x00\x00'
tRp1324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1325
I0
sg904
g1234
sS'block_loop.thisRepN'
p1326
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1327
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p1328
Nsg70
Vy
sS'block_loop.thisTrialN'
p1329
I0
sg39
F1.2166475935664494
sg34
g753
(S'\x07\xdf\x07\r\x1001\x05W0'
tRp1330
sa(dp1331
S'trial_loop.thisTrialN'
p1332
I28
sg895
S'26-walkers_smoky_bacon.png'
p1333
sS'block_loop.thisIndex'
p1334
g889
sg38
S'right'
p1335
sg59
g63
sS'trial_loop.thisN'
p1336
I28
sg33
S'44-crunch.png'
p1337
sg64
g65
sS'trial_loop.thisIndex'
p1338
g60
(g99
S'\x1c\x00\x00\x00'
tRp1339
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1340
I0
sg904
S'44-crunch.png'
p1341
sS'block_loop.thisRepN'
p1342
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1343
I0
sg909
S'26-walkers_smoky_bacon.png'
p1344
sg55
g11
sS'block_loop.thisTrial'
p1345
Nsg70
Vy
sS'block_loop.thisTrialN'
p1346
I0
sg39
F2.9999686391493015
sg34
g753
(S'\x07\xdf\x07\r\x1007\t;H'
tRp1347
sa(dp1348
S'trial_loop.thisTrialN'
p1349
I29
sg895
S'19-caramello_redo.png'
p1350
sS'block_loop.thisIndex'
p1351
g889
sg38
S'left'
p1352
sg59
g63
sS'trial_loop.thisN'
p1353
I29
sg33
S'19-caramello_redo.png'
p1354
sg64
g65
sS'trial_loop.thisIndex'
p1355
g60
(g99
S'\x1d\x00\x00\x00'
tRp1356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1357
I0
sg904
S'30-spaghetti_hoops.png'
p1358
sS'block_loop.thisRepN'
p1359
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1360
I0
sg909
S'30-spaghetti_hoops.png'
p1361
sg55
g11
sS'block_loop.thisTrial'
p1362
Nsg70
Vy
sS'block_loop.thisTrialN'
p1363
I0
sg39
F1.2499565224570688
sg34
g753
(S'\x07\xdf\x07\r\x101\x03\t\x85\x80'
tRp1364
sa(dp1365
S'trial_loop.thisTrialN'
p1366
I30
sg895
S'48-twix.png'
p1367
sS'block_loop.thisIndex'
p1368
g889
sg38
S'left'
p1369
sg59
g63
sS'trial_loop.thisN'
p1370
I30
sg33
g1068
sg64
g65
sS'trial_loop.thisIndex'
p1371
g60
(g99
S'\x1e\x00\x00\x00'
tRp1372
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1373
I0
sg904
S'50-polo.png'
p1374
sS'block_loop.thisRepN'
p1375
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1376
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p1377
Nsg70
Vy
sS'block_loop.thisTrialN'
p1378
I0
sg39
F1.9665211523206381
sg34
g753
(S'\x07\xdf\x07\r\x101\t\r\xe2\xb0'
tRp1379
sa(dp1380
S'trial_loop.thisTrialN'
p1381
I31
sg895
S'1-treacle_cookies.png'
p1382
sS'block_loop.thisIndex'
p1383
g889
sg38
S'left'
p1384
sg59
g63
sS'trial_loop.thisN'
p1385
I31
sg33
S'1-treacle_cookies.png'
p1386
sg64
g65
sS'trial_loop.thisIndex'
p1387
g60
(g99
S'\x1f\x00\x00\x00'
tRp1388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1389
I0
sg904
S'21-nakd_banana_crunch.png'
p1390
sS'block_loop.thisRepN'
p1391
I0
sg907
S'21-nakd_banana_crunch.png'
p1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1393
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p1394
Nsg70
Vy
sS'block_loop.thisTrialN'
p1395
I0
sg39
F1.3998799164546654
sg34
g753
(S'\x07\xdf\x07\r\x101\x10\r\xf68'
tRp1396
sa(dp1397
S'trial_loop.thisTrialN'
p1398
I32
sg895
S'43-mrporky_pork_crackles_redo.png'
p1399
sS'block_loop.thisIndex'
p1400
g889
sg38
S'right'
p1401
sg59
g63
sS'trial_loop.thisN'
p1402
I32
sg33
S'18-mms.png'
p1403
sg64
g65
sS'trial_loop.thisIndex'
p1404
g60
(g99
S' \x00\x00\x00'
tRp1405
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1406
I0
sg904
S'18-mms.png'
p1407
sS'block_loop.thisRepN'
p1408
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1409
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1410
sg55
g11
sS'block_loop.thisTrial'
p1411
Nsg70
Vy
sS'block_loop.thisTrialN'
p1412
I0
sg39
F2.9331951175154245
sg34
g753
(S'\x07\xdf\x07\r\x101\x17\x057\xf0'
tRp1413
sa(dp1414
S'trial_loop.thisTrialN'
p1415
I33
sg895
S'23-crunchie_redo.png'
p1416
sS'block_loop.thisIndex'
p1417
g889
sg38
S'right'
p1418
sg59
g63
sS'trial_loop.thisN'
p1419
I33
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p1420
g60
(g99
S'!\x00\x00\x00'
tRp1421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1422
I0
sg904
S'33-ambrosia_rice.png'
p1423
sS'block_loop.thisRepN'
p1424
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1425
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p1426
Nsg70
Vy
sS'block_loop.thisTrialN'
p1427
I0
sg39
F1.3000286809256067
sg34
g753
(S'\x07\xdf\x07\r\x101\x1f\x04\xca\x90'
tRp1428
sa(dp1429
S'trial_loop.thisTrialN'
p1430
I34
sg895
g1014
sS'block_loop.thisIndex'
p1431
g889
sg38
S'left'
p1432
sg59
g63
sS'trial_loop.thisN'
p1433
I34
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1434
g60
(g99
S'"\x00\x00\x00'
tRp1435
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1436
I0
sg904
g1022
sS'block_loop.thisRepN'
p1437
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1438
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1439
Nsg70
Vy
sS'block_loop.thisTrialN'
p1440
I0
sg39
F2.2997472885690513
sg34
g753
(S'\x07\xdf\x07\r\x101%\t\xdfX'
tRp1441
sa(dp1442
S'trial_loop.thisTrialN'
p1443
I35
sg895
S'13-mccoys_steak_crisps.png'
p1444
sS'block_loop.thisIndex'
p1445
g889
sg38
S'right'
p1446
sg59
g63
sS'trial_loop.thisN'
p1447
I35
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1448
g60
(g99
S'#\x00\x00\x00'
tRp1449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1450
I0
sg904
S'3-ellas_strawberries_apples.png'
p1451
sS'block_loop.thisRepN'
p1452
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1453
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1454
Nsg70
Vy
sS'block_loop.thisTrialN'
p1455
I0
sg39
F1.7166059691662667
sg34
g753
(S'\x07\xdf\x07\r\x101,\x0e\xf08'
tRp1456
sa(dp1457
S'trial_loop.thisTrialN'
p1458
I36
sg895
g1367
sS'block_loop.thisIndex'
p1459
g889
sg38
S'right'
p1460
sg59
g63
sS'trial_loop.thisN'
p1461
I36
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p1462
g60
(g99
S'$\x00\x00\x00'
tRp1463
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1464
I0
sg904
g1374
sS'block_loop.thisRepN'
p1465
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1466
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p1467
Nsg70
Vy
sS'block_loop.thisTrialN'
p1468
I0
sg39
F1.1498692252534966
sg34
g753
(S'\x07\xdf\x07\r\x1013\x0b30'
tRp1469
sa(dp1470
S'trial_loop.thisTrialN'
p1471
I37
sg895
g1132
sS'block_loop.thisIndex'
p1472
g889
sg38
S'right'
p1473
sg59
g63
sS'trial_loop.thisN'
p1474
I37
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1475
g60
(g99
S'%\x00\x00\x00'
tRp1476
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1477
I0
sg904
g1139
sS'block_loop.thisRepN'
p1478
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1479
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1480
Nsg70
Vy
sS'block_loop.thisTrialN'
p1481
I0
sg39
F1.7332845244491182
sg34
g753
(S'\x07\xdf\x07\r\x1019\r\xea\x80'
tRp1482
sa(dp1483
S'trial_loop.thisTrialN'
p1484
I38
sg895
S'42-mrkipling_lemon_slices.png'
p1485
sS'block_loop.thisIndex'
p1486
g889
sg38
S'left'
p1487
sg59
g63
sS'trial_loop.thisN'
p1488
I38
sg33
g1205
sg64
g65
sS'trial_loop.thisIndex'
p1489
g60
(g99
S'&\x00\x00\x00'
tRp1490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1491
I0
sg904
S'16-skips_prawn.png'
p1492
sS'block_loop.thisRepN'
p1493
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1494
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p1495
Nsg70
Vy
sS'block_loop.thisTrialN'
p1496
I0
sg39
F1.3669390499053407
sg34
g753
(S'\x07\xdf\x07\r\x102\x04\nh\x10'
tRp1497
sa(dp1498
S'trial_loop.thisTrialN'
p1499
I39
sg895
g1256
sS'block_loop.thisIndex'
p1500
g889
sg38
S'right'
p1501
sg59
g63
sS'trial_loop.thisN'
p1502
I39
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1503
g60
(g99
S"'\x00\x00\x00"
tRp1504
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1505
I0
sg904
g1264
sS'block_loop.thisRepN'
p1506
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1507
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p1508
Nsg70
Vy
sS'block_loop.thisTrialN'
p1509
I0
sg39
F0.9664769620358129
sg34
g753
(S'\x07\xdf\x07\r\x102\x0b\x010\xb0'
tRp1510
sa(dp1511
S'trial_loop.thisTrialN'
p1512
I40
sg895
g1303
sS'block_loop.thisIndex'
p1513
g889
sg38
S'right'
p1514
sg59
g63
sS'trial_loop.thisN'
p1515
I40
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p1516
g60
(g99
S'(\x00\x00\x00'
tRp1517
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1518
I0
sg904
g1311
sS'block_loop.thisRepN'
p1519
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1520
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p1521
Nsg70
Vy
sS'block_loop.thisTrialN'
p1522
I0
sg39
F1.4332926212482562
sg34
g753
(S'\x07\xdf\x07\r\x102\x11\x01H '
tRp1523
sa(dp1524
S'trial_loop.thisTrialN'
p1525
I41
sg895
g1194
sS'block_loop.thisIndex'
p1526
g889
sg38
S'right'
p1527
sg59
g63
sS'trial_loop.thisN'
p1528
I41
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p1529
g60
(g99
S')\x00\x00\x00'
tRp1530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1531
I0
sg904
g1202
sS'block_loop.thisRepN'
p1532
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1533
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p1534
Nsg70
Vy
sS'block_loop.thisTrialN'
p1535
I0
sg39
F2.3498354125586047
sg34
g753
(S'\x07\xdf\x07\r\x102\x17\x08E0'
tRp1536
sa(dp1537
S'trial_loop.thisTrialN'
p1538
I42
sg895
S'44-crunch.png'
p1539
sS'block_loop.thisIndex'
p1540
g889
sg38
S'left'
p1541
sg59
g63
sS'trial_loop.thisN'
p1542
I42
sg33
g1337
sg64
g65
sS'trial_loop.thisIndex'
p1543
g60
(g99
S'*\x00\x00\x00'
tRp1544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1545
I0
sg904
S'26-walkers_smoky_bacon.png'
p1546
sS'block_loop.thisRepN'
p1547
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1548
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p1549
Nsg70
Vy
sS'block_loop.thisTrialN'
p1550
I0
sg39
F1.2165529408193834
sg34
g753
(S'\x07\xdf\x07\r\x102\x1e\x0eL('
tRp1551
sa(dp1552
S'trial_loop.thisTrialN'
p1553
I43
sg895
g1132
sS'block_loop.thisIndex'
p1554
g889
sg38
S'right'
p1555
sg59
g63
sS'trial_loop.thisN'
p1556
I43
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1557
g60
(g99
S'+\x00\x00\x00'
tRp1558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1559
I0
sg904
g1139
sS'block_loop.thisRepN'
p1560
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1561
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1562
Nsg70
Vy
sS'block_loop.thisTrialN'
p1563
I0
sg39
F1.3666419771252549
sg34
g753
(S'\x07\xdf\x07\r\x102%\x02\xb3h'
tRp1564
sa(dp1565
S'trial_loop.thisTrialN'
p1566
I44
sg895
g1399
sS'block_loop.thisIndex'
p1567
g889
sg38
S'right'
p1568
sg59
g63
sS'trial_loop.thisN'
p1569
I44
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p1570
g60
(g99
S',\x00\x00\x00'
tRp1571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1572
I0
sg904
g1407
sS'block_loop.thisRepN'
p1573
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1574
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p1575
Nsg70
Vy
sS'block_loop.thisTrialN'
p1576
I0
sg39
F1.1332265924065723
sg34
g753
(S'\x07\xdf\x07\r\x102+\x08\xbeH'
tRp1577
sa(dp1578
S'trial_loop.thisTrialN'
p1579
I45
sg895
S'30-spaghetti_hoops.png'
p1580
sS'block_loop.thisIndex'
p1581
g889
sg38
S'right'
p1582
sg59
g63
sS'trial_loop.thisN'
p1583
I45
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p1584
g60
(g99
S'-\x00\x00\x00'
tRp1585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1586
I0
sg904
S'19-caramello_redo.png'
p1587
sS'block_loop.thisRepN'
p1588
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1589
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p1590
Nsg70
Vy
sS'block_loop.thisTrialN'
p1591
I0
sg39
F1.1166027760627912
sg34
g753
(S'\x07\xdf\x07\r\x1021\x0bu\x98'
tRp1592
sa(dp1593
S'trial_loop.thisTrialN'
p1594
I46
sg895
g1132
sS'block_loop.thisIndex'
p1595
g889
sg38
S'left'
p1596
sg59
g63
sS'trial_loop.thisN'
p1597
I46
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1598
g60
(g99
S'.\x00\x00\x00'
tRp1599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1600
I0
sg904
g1139
sS'block_loop.thisRepN'
p1601
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1602
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1603
Nsg70
Vy
sS'block_loop.thisTrialN'
p1604
I0
sg39
F1.0499846331840672
sg34
g753
(S'\x07\xdf\x07\r\x1027\r\xaf\xe8'
tRp1605
sa(dp1606
S'trial_loop.thisTrialN'
p1607
I47
sg895
S'36-fig_rolls.png'
p1608
sS'block_loop.thisIndex'
p1609
g889
sg38
S'left'
p1610
sg59
g63
sS'trial_loop.thisN'
p1611
I47
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p1612
g60
(g99
S'/\x00\x00\x00'
tRp1613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1614
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1615
sS'block_loop.thisRepN'
p1616
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1617
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p1618
Nsg70
Vy
sS'block_loop.thisTrialN'
p1619
I0
sg39
F0.89998625824591727
sg34
g753
(S'\x07\xdf\x07\r\x103\x01\x0e\xf8\x08'
tRp1620
sa(dp1621
S'trial_loop.thisTrialN'
p1622
I48
sg895
g1333
sS'block_loop.thisIndex'
p1623
g889
sg38
S'right'
p1624
sg59
g63
sS'trial_loop.thisN'
p1625
I48
sg33
g1337
sg64
g65
sS'trial_loop.thisIndex'
p1626
g60
(g99
S'0\x00\x00\x00'
tRp1627
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1628
I0
sg904
g1341
sS'block_loop.thisRepN'
p1629
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1630
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p1631
Nsg70
Vy
sS'block_loop.thisTrialN'
p1632
I0
sg39
F1.083679585626669
sg34
g753
(S'\x07\xdf\x07\r\x103\x07\r\xde\xc8'
tRp1633
sa(dp1634
S'trial_loop.thisTrialN'
p1635
I49
sg895
S'25-kitkat.png'
p1636
sS'block_loop.thisIndex'
p1637
g889
sg38
S'right'
p1638
sg59
g63
sS'trial_loop.thisN'
p1639
I49
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p1640
g60
(g99
S'1\x00\x00\x00'
tRp1641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1642
I0
sg904
S'31-hobnobs.png'
p1643
sS'block_loop.thisRepN'
p1644
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1645
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p1646
Nsg70
Vy
sS'block_loop.thisTrialN'
p1647
I0
sg39
F1.466488936177484
sg34
g753
(S'\x07\xdf\x07\r\x103\x0e\x00]\xc0'
tRp1648
sa(dp1649
S'trial_loop.thisTrialN'
p1650
I50
sg895
g1147
sS'block_loop.thisIndex'
p1651
g889
sg38
S'right'
p1652
sg59
g63
sS'trial_loop.thisN'
p1653
I50
sg33
g1151
sg64
g65
sS'trial_loop.thisIndex'
p1654
g60
(g99
S'2\x00\x00\x00'
tRp1655
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1656
I0
sg904
g1155
sS'block_loop.thisRepN'
p1657
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1658
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p1659
Nsg70
Vy
sS'block_loop.thisTrialN'
p1660
I0
sg39
F1.6163276558800135
sg34
g753
(S'\x07\xdf\x07\r\x103\x14\x08\x12h'
tRp1661
sa(dp1662
S'trial_loop.thisTrialN'
p1663
I51
sg895
g1416
sS'block_loop.thisIndex'
p1664
g889
sg38
S'right'
p1665
sg59
g63
sS'trial_loop.thisN'
p1666
I51
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p1667
g60
(g99
S'3\x00\x00\x00'
tRp1668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1669
I0
sg904
g1423
sS'block_loop.thisRepN'
p1670
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1671
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p1672
Nsg70
Vy
sS'block_loop.thisTrialN'
p1673
I0
sg39
F0.91654592739723739
sg34
g753
(S'\x07\xdf\x07\r\x103\x1b\x02\xab\x98'
tRp1674
sa(dp1675
S'trial_loop.thisTrialN'
p1676
I52
sg895
g980
sS'block_loop.thisIndex'
p1677
g889
sg38
S'right'
p1678
sg59
g63
sS'trial_loop.thisN'
p1679
I52
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p1680
g60
(g99
S'4\x00\x00\x00'
tRp1681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1682
I0
sg904
g988
sS'block_loop.thisRepN'
p1683
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1684
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p1685
Nsg70
Vy
sS'block_loop.thisTrialN'
p1686
I0
sg39
F1.9832108264490671
sg34
g753
(S'\x07\xdf\x07\r\x103!\x02\x0bp'
tRp1687
sa(dp1688
S'trial_loop.thisTrialN'
p1689
I53
sg895
g1286
sS'block_loop.thisIndex'
p1690
g889
sg38
S'right'
p1691
sg59
g63
sS'trial_loop.thisN'
p1692
I53
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p1693
g60
(g99
S'5\x00\x00\x00'
tRp1694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1695
I0
sg904
g1294
sS'block_loop.thisRepN'
p1696
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1697
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg70
Vy
sS'block_loop.thisTrialN'
p1699
I0
sg39
F4.4498799449647777
sg34
g753
(S'\x07\xdf\x07\r\x103(\x02\x1e\xf8'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I54
sg895
g1057
sS'block_loop.thisIndex'
p1703
g889
sg38
S'right'
p1704
sg59
g63
sS'trial_loop.thisN'
p1705
I54
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p1706
g60
(g99
S'6\x00\x00\x00'
tRp1707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1708
I0
sg904
g1065
sS'block_loop.thisRepN'
p1709
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1710
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p1711
Nsg70
Vy
sS'block_loop.thisTrialN'
p1712
I0
sg39
F1.3833156857253925
sg34
g753
(S'\x07\xdf\x07\r\x1031\t\x81\x98'
tRp1713
sa(dp1714
S'trial_loop.thisTrialN'
p1715
I55
sg895
S'18-mms.png'
p1716
sS'block_loop.thisIndex'
p1717
g889
sg38
S'left'
p1718
sg59
g63
sS'trial_loop.thisN'
p1719
I55
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p1720
g60
(g99
S'7\x00\x00\x00'
tRp1721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1722
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1723
sS'block_loop.thisRepN'
p1724
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1725
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p1726
Nsg70
Vy
sS'block_loop.thisTrialN'
p1727
I0
sg39
F1.2666102741568466
sg34
g753
(S'\x07\xdf\x07\r\x1038\x00\xc78'
tRp1728
sa(dp1729
S'trial_loop.thisTrialN'
p1730
I56
sg895
g896
sS'block_loop.thisIndex'
p1731
g889
sg38
S'left'
p1732
sg59
g63
sS'trial_loop.thisN'
p1733
I56
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1734
g60
(g99
S'8\x00\x00\x00'
tRp1735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1736
I0
sg904
g905
sS'block_loop.thisRepN'
p1737
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1738
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1739
Nsg70
Vy
sS'block_loop.thisTrialN'
p1740
I0
sg39
F3.1831724521725846
sg34
g753
(S'\x07\xdf\x07\r\x104\x02\x05b\xe8'
tRp1741
sa(dp1742
S'trial_loop.thisTrialN'
p1743
I57
sg895
g1608
sS'block_loop.thisIndex'
p1744
g889
sg38
S'right'
p1745
sg59
g63
sS'trial_loop.thisN'
p1746
I57
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p1747
g60
(g99
S'9\x00\x00\x00'
tRp1748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1749
I0
sg904
g1615
sS'block_loop.thisRepN'
p1750
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1751
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p1752
Nsg70
Vy
sS'block_loop.thisTrialN'
p1753
I0
sg39
F2.8998382920544827
sg34
g753
(S'\x07\xdf\x07\r\x104\n\x08\x87\x98'
tRp1754
sa(dp1755
S'trial_loop.thisTrialN'
p1756
I58
sg895
g1399
sS'block_loop.thisIndex'
p1757
g889
sg38
S'right'
p1758
sg59
g63
sS'trial_loop.thisN'
p1759
I58
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p1760
g60
(g99
S':\x00\x00\x00'
tRp1761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1762
I0
sg904
g1407
sS'block_loop.thisRepN'
p1763
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1764
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p1765
Nsg70
Vy
sS'block_loop.thisTrialN'
p1766
I0
sg39
F1.2502858113803086
sg34
g753
(S'\x07\xdf\x07\r\x104\x12\x07\x9d8'
tRp1767
sa(dp1768
S'trial_loop.thisTrialN'
p1769
I59
sg895
S'21-nakd_banana_crunch.png'
p1770
sS'block_loop.thisIndex'
p1771
g889
sg38
S'right'
p1772
sg59
g63
sS'trial_loop.thisN'
p1773
I59
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p1774
g60
(g99
S';\x00\x00\x00'
tRp1775
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1776
I0
sg904
S'1-treacle_cookies.png'
p1777
sS'block_loop.thisRepN'
p1778
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1779
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p1780
Nsg70
Vy
sS'block_loop.thisTrialN'
p1781
I0
sg39
F1.149929095969128
sg34
g753
(S'\x07\xdf\x07\r\x104\x18\x0b\xfeP'
tRp1782
sa(dp1783
S'trial_loop.thisTrialN'
p1784
I60
sg895
S'10-bounty_redo.png'
p1785
sS'block_loop.thisIndex'
p1786
g889
sg38
S'right'
p1787
sg59
g63
sS'trial_loop.thisN'
p1788
I60
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p1789
g60
(g99
S'<\x00\x00\x00'
tRp1790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1791
I0
sg904
S'4-corn.png'
p1792
sS'block_loop.thisRepN'
p1793
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1794
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p1795
Nsg70
Vy
sS'block_loop.thisTrialN'
p1796
I0
sg39
F2.9665214374217612
sg34
g753
(S'\x07\xdf\x07\r\x104\x1e\x0e\xb5\xa0'
tRp1797
sa(dp1798
S'trial_loop.thisTrialN'
p1799
I61
sg895
S'38-maltesers.png'
p1800
sS'block_loop.thisIndex'
p1801
g889
sg38
S'left'
p1802
sg59
g63
sS'trial_loop.thisN'
p1803
I61
sg33
g1151
sg64
g65
sS'trial_loop.thisIndex'
p1804
g60
(g99
S'=\x00\x00\x00'
tRp1805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1806
I0
sg904
S'6-sour_patch_kids.png'
p1807
sS'block_loop.thisRepN'
p1808
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1809
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p1810
Nsg70
Vy
sS'block_loop.thisTrialN'
p1811
I0
sg39
F1.5163201862924325
sg34
g753
(S'\x07\xdf\x07\r\x104&\x0e\xbdp'
tRp1812
sa(dp1813
S'trial_loop.thisTrialN'
p1814
I62
sg895
g1770
sS'block_loop.thisIndex'
p1815
g889
sg38
S'right'
p1816
sg59
g63
sS'trial_loop.thisN'
p1817
I62
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p1818
g60
(g99
S'>\x00\x00\x00'
tRp1819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1820
I0
sg904
g1777
sS'block_loop.thisRepN'
p1821
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1822
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p1823
Nsg70
Vy
sS'block_loop.thisTrialN'
p1824
I0
sg39
F1.2665692199516343
sg34
g753
(S'\x07\xdf\x07\r\x104-\x07\xe7p'
tRp1825
sa(dp1826
S'trial_loop.thisTrialN'
p1827
I63
sg895
g1211
sS'block_loop.thisIndex'
p1828
g889
sg38
S'left'
p1829
sg59
g63
sS'trial_loop.thisN'
p1830
I63
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1831
g60
(g99
S'?\x00\x00\x00'
tRp1832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1833
I0
sg904
g1218
sS'block_loop.thisRepN'
p1834
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1835
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1836
Nsg70
Vy
sS'block_loop.thisTrialN'
p1837
I0
sg39
F0.98331488745316165
sg34
g753
(S'\x07\xdf\x07\r\x1043\x0cH\x88'
tRp1838
sa(dp1839
S'trial_loop.thisTrialN'
p1840
I64
sg895
S'8-liquorice_catherine_wheels.png'
p1841
sS'block_loop.thisIndex'
p1842
g889
sg38
S'right'
p1843
sg59
g63
sS'trial_loop.thisN'
p1844
I64
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p1845
g60
(g99
S'@\x00\x00\x00'
tRp1846
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1847
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1848
sS'block_loop.thisRepN'
p1849
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1850
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p1851
Nsg70
Vy
sS'block_loop.thisTrialN'
p1852
I0
sg39
F1.4998873860386084
sg34
g753
(S'\x07\xdf\x07\r\x1049\x0c\x9ex'
tRp1853
sa(dp1854
S'trial_loop.thisTrialN'
p1855
I65
sg895
g1087
sS'block_loop.thisIndex'
p1856
g889
sg38
S'left'
p1857
sg59
g63
sS'trial_loop.thisN'
p1858
I65
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1859
g60
(g99
S'A\x00\x00\x00'
tRp1860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1861
I0
sg904
g1094
sS'block_loop.thisRepN'
p1862
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1863
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg70
Vy
sS'block_loop.thisTrialN'
p1865
I0
sg39
F1.0999131019380002
sg34
g753
(S'\x07\xdf\x07\r\x105\x04\x05\x89\xf8'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I66
sg895
S'46-pistachios.png'
p1869
sS'block_loop.thisIndex'
p1870
g889
sg38
S'left'
p1871
sg59
g63
sS'trial_loop.thisN'
p1872
I66
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1873
g60
(g99
S'B\x00\x00\x00'
tRp1874
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1875
I0
sg904
S'29-beans.png'
p1876
sS'block_loop.thisRepN'
p1877
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1878
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p1879
Nsg70
Vy
sS'block_loop.thisTrialN'
p1880
I0
sg39
F1.1666549776236934
sg34
g753
(S'\x07\xdf\x07\r\x105\n\x07\x89\xb0'
tRp1881
sa(dp1882
S'trial_loop.thisTrialN'
p1883
I67
sg895
g1608
sS'block_loop.thisIndex'
p1884
g889
sg38
S'right'
p1885
sg59
g63
sS'trial_loop.thisN'
p1886
I67
sg33
g1307
sg64
g65
sS'trial_loop.thisIndex'
p1887
g60
(g99
S'C\x00\x00\x00'
tRp1888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1889
I0
sg904
g1615
sS'block_loop.thisRepN'
p1890
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1891
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p1892
Nsg70
Vy
sS'block_loop.thisTrialN'
p1893
I0
sg39
F2.8999437785496411
sg34
g753
(S'\x07\xdf\x07\r\x105\x10\n\xba\x18'
tRp1894
sa(dp1895
S'trial_loop.thisTrialN'
p1896
I68
sg895
g1087
sS'block_loop.thisIndex'
p1897
g889
sg38
S'left'
p1898
sg59
g63
sS'trial_loop.thisN'
p1899
I68
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1900
g60
(g99
S'D\x00\x00\x00'
tRp1901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1902
I0
sg904
g1094
sS'block_loop.thisRepN'
p1903
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1904
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1905
Nsg70
Vy
sS'block_loop.thisTrialN'
p1906
I0
sg39
F1.2170062476507155
sg34
g753
(S'\x07\xdf\x07\r\x105\x18\t\x95 '
tRp1907
sa(dp1908
S'trial_loop.thisTrialN'
p1909
I69
sg895
g1869
sS'block_loop.thisIndex'
p1910
g889
sg38
S'left'
p1911
sg59
g63
sS'trial_loop.thisN'
p1912
I69
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1913
g60
(g99
S'E\x00\x00\x00'
tRp1914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1915
I0
sg904
g1876
sS'block_loop.thisRepN'
p1916
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1917
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p1918
Nsg70
Vy
sS'block_loop.thisTrialN'
p1919
I0
sg39
F0.66638955079542939
sg34
g753
(S'\x07\xdf\x07\r\x105\x1e\ry8'
tRp1920
sa(dp1921
S'trial_loop.thisTrialN'
p1922
I70
sg895
g1716
sS'block_loop.thisIndex'
p1923
g889
sg38
S'left'
p1924
sg59
g63
sS'trial_loop.thisN'
p1925
I70
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p1926
g60
(g99
S'F\x00\x00\x00'
tRp1927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1928
I0
sg904
g1723
sS'block_loop.thisRepN'
p1929
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1930
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p1931
Nsg70
Vy
sS'block_loop.thisTrialN'
p1932
I0
sg39
F1.149895454331272
sg34
g753
(S'\x07\xdf\x07\r\x105$\x08\xcd\xe8'
tRp1933
sa(dp1934
S'trial_loop.thisTrialN'
p1935
I71
sg895
S'5-pineapple.png'
p1936
sS'block_loop.thisIndex'
p1937
g889
sg38
S'right'
p1938
sg59
g63
sS'trial_loop.thisN'
p1939
I71
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1940
g60
(g99
S'G\x00\x00\x00'
tRp1941
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1942
I0
sg904
S'40-sardines.png'
p1943
sS'block_loop.thisRepN'
p1944
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1945
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1946
Nsg70
Vy
sS'block_loop.thisTrialN'
p1947
I0
sg39
F1.5000014254947018
sg34
g753
(S'\x07\xdf\x07\r\x105*\x0b\x858'
tRp1948
sa(dp1949
S'trial_loop.thisTrialN'
p1950
I72
sg895
S'49-yorkie.png'
p1951
sS'block_loop.thisIndex'
p1952
g889
sg38
S'left'
p1953
sg59
g63
sS'trial_loop.thisN'
p1954
I72
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p1955
g60
(g99
S'H\x00\x00\x00'
tRp1956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1957
I0
sg904
S'35-raisins.png'
p1958
sS'block_loop.thisRepN'
p1959
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1960
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p1961
Nsg70
Vy
sS'block_loop.thisTrialN'
p1962
I0
sg39
F1.0332955292542465
sg34
g753
(S'\x07\xdf\x07\r\x1051\x04p\xb8'
tRp1963
sa(dp1964
S'trial_loop.thisTrialN'
p1965
I73
sg895
g1102
sS'block_loop.thisIndex'
p1966
g889
sg38
S'left'
p1967
sg59
g63
sS'trial_loop.thisN'
p1968
I73
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p1969
g60
(g99
S'I\x00\x00\x00'
tRp1970
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1971
I0
sg904
g1110
sS'block_loop.thisRepN'
p1972
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1973
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p1974
Nsg70
Vy
sS'block_loop.thisTrialN'
p1975
I0
sg39
F0.75039699985063635
sg34
g753
(S'\x07\xdf\x07\r\x1057\x05~@'
tRp1976
sa(dp1977
S'trial_loop.thisTrialN'
p1978
I74
sg895
g1951
sS'block_loop.thisIndex'
p1979
g889
sg38
S'right'
p1980
sg59
g63
sS'trial_loop.thisN'
p1981
I74
sg33
g1237
sg64
g65
sS'trial_loop.thisIndex'
p1982
g60
(g99
S'J\x00\x00\x00'
tRp1983
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1984
I0
sg904
g1958
sS'block_loop.thisRepN'
p1985
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1986
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p1987
Nsg70
Vy
sS'block_loop.thisTrialN'
p1988
I0
sg39
F1.1163918030724744
sg34
g753
(S'\x07\xdf\x07\r\x106\x01\x02>8'
tRp1989
sa(dp1990
S'trial_loop.thisTrialN'
p1991
I75
sg895
g1177
sS'block_loop.thisIndex'
p1992
g889
sg38
S'left'
p1993
sg59
g63
sS'trial_loop.thisN'
p1994
I75
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p1995
g60
(g99
S'K\x00\x00\x00'
tRp1996
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1997
I0
sg904
g1185
sS'block_loop.thisRepN'
p1998
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1999
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2000
Nsg70
Vy
sS'block_loop.thisTrialN'
p2001
I0
sg39
F1.7166082499570621
sg34
g753
(S'\x07\xdf\x07\r\x106\x07\x04|p'
tRp2002
sa(dp2003
S'trial_loop.thisTrialN'
p2004
I76
sg895
g1382
sS'block_loop.thisIndex'
p2005
g889
sg38
S'left'
p2006
sg59
g63
sS'trial_loop.thisN'
p2007
I76
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2008
g60
(g99
S'L\x00\x00\x00'
tRp2009
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2010
I0
sg904
g1390
sS'block_loop.thisRepN'
p2011
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2012
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p2013
Nsg70
Vy
sS'block_loop.thisTrialN'
p2014
I0
sg39
F0.9833562267558591
sg34
g753
(S'\x07\xdf\x07\r\x106\x0e\x00\xbb\x80'
tRp2015
sa(dp2016
S'trial_loop.thisTrialN'
p2017
I77
sg895
g963
sS'block_loop.thisIndex'
p2018
g889
sg38
S'right'
p2019
sg59
g63
sS'trial_loop.thisN'
p2020
I77
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p2021
g60
(g99
S'M\x00\x00\x00'
tRp2022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2023
I0
sg904
g971
sS'block_loop.thisRepN'
p2024
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2025
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2026
Nsg70
Vy
sS'block_loop.thisTrialN'
p2027
I0
sg39
F1.8499064021198137
sg34
g753
(S'\x07\xdf\x07\r\x106\x14\x00\xd6\xd8'
tRp2028
sa(dp2029
S'trial_loop.thisTrialN'
p2030
I78
sg895
S'45-chewy_nougat_redo.png'
p2031
sS'block_loop.thisIndex'
p2032
g889
sg38
S'left'
p2033
sg59
g63
sS'trial_loop.thisN'
p2034
I78
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p2035
g60
(g99
S'N\x00\x00\x00'
tRp2036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2037
I0
sg904
S'41-peanuts_redo.png'
p2038
sS'block_loop.thisRepN'
p2039
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2040
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p2041
Nsg70
Vy
sS'block_loop.thisTrialN'
p2042
I0
sg39
F2.0499509915462113
sg34
g753
(S'\x07\xdf\x07\r\x106\x1a\x0e~\xf0'
tRp2043
sa(dp2044
S'trial_loop.thisTrialN'
p2045
I79
sg895
g1367
sS'block_loop.thisIndex'
p2046
g889
sg38
S'right'
p2047
sg59
g63
sS'trial_loop.thisN'
p2048
I79
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p2049
g60
(g99
S'O\x00\x00\x00'
tRp2050
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2051
I0
sg904
g1374
sS'block_loop.thisRepN'
p2052
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2053
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p2054
Nsg70
Vy
sS'block_loop.thisTrialN'
p2055
I0
sg39
F1.5832918514824996
sg34
g753
(S'\x07\xdf\x07\r\x106"\x00}\x00'
tRp2056
sa(dp2057
S'trial_loop.thisTrialN'
p2058
I80
sg895
g1286
sS'block_loop.thisIndex'
p2059
g889
sg38
S'left'
p2060
sg59
g63
sS'trial_loop.thisN'
p2061
I80
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p2062
g60
(g99
S'P\x00\x00\x00'
tRp2063
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2064
I0
sg904
g1294
sS'block_loop.thisRepN'
p2065
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2066
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p2067
Nsg70
Vy
sS'block_loop.thisTrialN'
p2068
I0
sg39
F1.1166358475056768
sg34
g753
(S'\x07\xdf\x07\r\x106(\t\xdfX'
tRp2069
sa(dp2070
S'trial_loop.thisTrialN'
p2071
I81
sg895
g1102
sS'block_loop.thisIndex'
p2072
g889
sg38
S'left'
p2073
sg59
g63
sS'trial_loop.thisN'
p2074
I81
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p2075
g60
(g99
S'Q\x00\x00\x00'
tRp2076
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2077
I0
sg904
g1110
sS'block_loop.thisRepN'
p2078
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2079
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p2080
Nsg70
Vy
sS'block_loop.thisTrialN'
p2081
I0
sg39
F0.73321923685944057
sg34
g753
(S'\x07\xdf\x07\r\x106.\x0c\x19\xa8'
tRp2082
sa(dp2083
S'trial_loop.thisTrialN'
p2084
I82
sg895
g1057
sS'block_loop.thisIndex'
p2085
g889
sg38
S'right'
p2086
sg59
g63
sS'trial_loop.thisN'
p2087
I82
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p2088
g60
(g99
S'R\x00\x00\x00'
tRp2089
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2090
I0
sg904
g1065
sS'block_loop.thisRepN'
p2091
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2092
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p2093
Nsg70
Vy
sS'block_loop.thisTrialN'
p2094
I0
sg39
F1.6499664438888431
sg34
g753
(S'\x07\xdf\x07\r\x1064\x08\x9f\x08'
tRp2095
sa(dp2096
S'trial_loop.thisTrialN'
p2097
I83
sg895
g1770
sS'block_loop.thisIndex'
p2098
g889
sg38
S'left'
p2099
sg59
g63
sS'trial_loop.thisN'
p2100
I83
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2101
g60
(g99
S'S\x00\x00\x00'
tRp2102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2103
I0
sg904
g1777
sS'block_loop.thisRepN'
p2104
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2105
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p2106
Nsg70
Vy
sS'block_loop.thisTrialN'
p2107
I0
sg39
F2.467019789834012
sg34
g753
(S'\x07\xdf\x07\r\x106;\x03\xb1P'
tRp2108
sa(dp2109
S'trial_loop.thisTrialN'
p2110
I84
sg895
g1333
sS'block_loop.thisIndex'
p2111
g889
sg38
S'right'
p2112
sg59
g63
sS'trial_loop.thisN'
p2113
I84
sg33
g1337
sg64
g65
sS'trial_loop.thisIndex'
p2114
g60
(g99
S'T\x00\x00\x00'
tRp2115
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2116
I0
sg904
g1341
sS'block_loop.thisRepN'
p2117
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2118
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p2119
Nsg70
Vy
sS'block_loop.thisTrialN'
p2120
I0
sg39
F1.2666863954946166
sg34
g753
(S'\x07\xdf\x07\r\x107\x06\x0b^('
tRp2121
sa(dp2122
S'trial_loop.thisTrialN'
p2123
I85
sg895
g1485
sS'block_loop.thisIndex'
p2124
g889
sg38
S'right'
p2125
sg59
g63
sS'trial_loop.thisN'
p2126
I85
sg33
g1205
sg64
g65
sS'trial_loop.thisIndex'
p2127
g60
(g99
S'U\x00\x00\x00'
tRp2128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2129
I0
sg904
g1492
sS'block_loop.thisRepN'
p2130
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2131
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p2132
Nsg70
Vy
sS'block_loop.thisTrialN'
p2133
I0
sg39
F2.5995823875200585
sg34
g753
(S'\x07\xdf\x07\r\x107\r\x00\xbb\x80'
tRp2134
sa(dp2135
S'trial_loop.thisTrialN'
p2136
I86
sg895
g1951
sS'block_loop.thisIndex'
p2137
g889
sg38
S'right'
p2138
sg59
g63
sS'trial_loop.thisN'
p2139
I86
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p2140
g60
(g99
S'V\x00\x00\x00'
tRp2141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2142
I0
sg904
g1958
sS'block_loop.thisRepN'
p2143
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2144
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p2145
Nsg70
Vy
sS'block_loop.thisTrialN'
p2146
I0
sg39
F2.4498380354671099
sg34
g753
(S'\x07\xdf\x07\r\x107\x14\nP\xa0'
tRp2147
sa(dp2148
S'trial_loop.thisTrialN'
p2149
I87
sg895
g1382
sS'block_loop.thisIndex'
p2150
g889
sg38
S'right'
p2151
sg59
g63
sS'trial_loop.thisN'
p2152
I87
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2153
g60
(g99
S'W\x00\x00\x00'
tRp2154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2155
I0
sg904
g1390
sS'block_loop.thisRepN'
p2156
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2157
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p2158
Nsg70
Vy
sS'block_loop.thisTrialN'
p2159
I0
sg39
F1.2831844833381183
sg34
g753
(S'\x07\xdf\x07\r\x107\x1c\x02\x80\xa0'
tRp2160
sa(dp2161
S'trial_loop.thisTrialN'
p2162
I88
sg895
g1416
sS'block_loop.thisIndex'
p2163
g889
sg38
S'right'
p2164
sg59
g63
sS'trial_loop.thisN'
p2165
I88
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p2166
g60
(g99
S'X\x00\x00\x00'
tRp2167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2168
I0
sg904
g1423
sS'block_loop.thisRepN'
p2169
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2170
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p2171
Nsg70
Vy
sS'block_loop.thisTrialN'
p2172
I0
sg39
F0.76704504957524478
sg34
g753
(S'\x07\xdf\x07\r\x107"\x07Z\xd0'
tRp2173
sa(dp2174
S'trial_loop.thisTrialN'
p2175
I89
sg895
g1608
sS'block_loop.thisIndex'
p2176
g889
sg38
S'right'
p2177
sg59
g63
sS'trial_loop.thisN'
p2178
I89
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p2179
g60
(g99
S'Y\x00\x00\x00'
tRp2180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2181
I0
sg904
g1615
sS'block_loop.thisRepN'
p2182
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2183
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p2184
Nsg70
Vy
sS'block_loop.thisTrialN'
p2185
I0
sg39
F1.6832391652533261
sg34
g753
(S'\x07\xdf\x07\r\x107(\x04\x1e\xb0'
tRp2186
sa(dp2187
S'trial_loop.thisTrialN'
p2188
I90
sg895
g1416
sS'block_loop.thisIndex'
p2189
g889
sg38
S'right'
p2190
sg59
g63
sS'trial_loop.thisN'
p2191
I90
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p2192
g60
(g99
S'Z\x00\x00\x00'
tRp2193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2194
I0
sg904
g1423
sS'block_loop.thisRepN'
p2195
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2196
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p2197
Nsg70
Vy
sS'block_loop.thisTrialN'
p2198
I0
sg39
F0.78320558063205681
sg34
g753
(S'\x07\xdf\x07\r\x107.\x0f&\xe8'
tRp2199
sa(dp2200
S'trial_loop.thisTrialN'
p2201
I91
sg895
g1785
sS'block_loop.thisIndex'
p2202
g889
sg38
S'right'
p2203
sg59
g63
sS'trial_loop.thisN'
p2204
I91
sg33
g1297
sg64
g65
sS'trial_loop.thisIndex'
p2205
g60
(g99
S'[\x00\x00\x00'
tRp2206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2207
I0
sg904
g1792
sS'block_loop.thisRepN'
p2208
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2209
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p2210
Nsg70
Vy
sS'block_loop.thisTrialN'
p2211
I0
sg39
F1.4831763295151177
sg34
g753
(S'\x07\xdf\x07\r\x1074\x0cc\xe0'
tRp2212
sa(dp2213
S'trial_loop.thisTrialN'
p2214
I92
sg895
g1194
sS'block_loop.thisIndex'
p2215
g889
sg38
S'left'
p2216
sg59
g63
sS'trial_loop.thisN'
p2217
I92
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p2218
g60
(g99
S'\\\x00\x00\x00'
tRp2219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2220
I0
sg904
g1202
sS'block_loop.thisRepN'
p2221
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2222
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p2223
Nsg70
Vy
sS'block_loop.thisTrialN'
p2224
I0
sg39
F1.0331119257352839
sg34
g753
(S'\x07\xdf\x07\r\x107;\x05\x14\xc8'
tRp2225
sa(dp2226
S'trial_loop.thisTrialN'
p2227
I93
sg895
g1841
sS'block_loop.thisIndex'
p2228
g889
sg38
S'right'
p2229
sg59
g63
sS'trial_loop.thisN'
p2230
I93
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p2231
g60
(g99
S']\x00\x00\x00'
tRp2232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2233
I0
sg904
g1848
sS'block_loop.thisRepN'
p2234
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2235
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2236
Nsg70
Vy
sS'block_loop.thisTrialN'
p2237
I0
sg39
F0.90044583724375116
sg34
g753
(S'\x07\xdf\x07\r\x108\x05\x05\xe3\xd0'
tRp2238
sa(dp2239
S'trial_loop.thisTrialN'
p2240
I94
sg895
g2031
sS'block_loop.thisIndex'
p2241
g889
sg38
S'right'
p2242
sg59
g63
sS'trial_loop.thisN'
p2243
I94
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p2244
g60
(g99
S'^\x00\x00\x00'
tRp2245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2246
I0
sg904
g2038
sS'block_loop.thisRepN'
p2247
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2248
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vy
sS'block_loop.thisTrialN'
p2250
I0
sg39
F2.2165572172998509
sg34
g753
(S'\x07\xdf\x07\r\x108\x0b\x05\x05('
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g1936
sS'block_loop.thisIndex'
p2254
g889
sg38
S'left'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g1943
sS'block_loop.thisRepN'
p2260
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2261
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vy
sS'block_loop.thisTrialN'
p2263
I0
sg39
F1.3499619963513396
sg34
g753
(S'\x07\xdf\x07\r\x108\x12\x08\xe9@'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1226
sS'block_loop.thisIndex'
p2267
g889
sg38
S'left'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1234
sS'block_loop.thisRepN'
p2273
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2274
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vy
sS'block_loop.thisTrialN'
p2276
I0
sg39
F0.95001935819527716
sg34
g753
(S'\x07\xdf\x07\r\x108\x18\x0e\xb5\xa0'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g1399
sS'block_loop.thisIndex'
p2280
g889
sg38
S'right'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g1407
sS'block_loop.thisRepN'
p2286
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2287
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vy
sS'block_loop.thisTrialN'
p2289
I0
sg39
F1.2497275882524264
sg34
g753
(S'\x07\xdf\x07\r\x108\x1e\x0eS\xf8'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g916
sS'block_loop.thisIndex'
p2293
g889
sg38
S'right'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g924
sS'block_loop.thisRepN'
p2299
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2300
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vy
sS'block_loop.thisTrialN'
p2302
I0
sg39
F1.316978935203224
sg34
g753
(S'\x07\xdf\x07\r\x108%\x03r\xd0'
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g1211
sS'block_loop.thisIndex'
p2306
g889
sg38
S'left'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g1218
sS'block_loop.thisRepN'
p2312
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2313
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vy
sS'block_loop.thisTrialN'
p2315
I0
sg39
F0.89992040046126931
sg34
g753
(S'\x07\xdf\x07\r\x108+\x08\xc6\x18'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1785
sS'block_loop.thisIndex'
p2319
g889
sg38
S'right'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1792
sS'block_loop.thisRepN'
p2325
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2326
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vy
sS'block_loop.thisTrialN'
p2328
I0
sg39
F1.6499253896872688
sg34
g753
(S'\x07\xdf\x07\r\x1081\x07\xac\xd8'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g1087
sS'block_loop.thisIndex'
p2332
g889
sg38
S'left'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g1094
sS'block_loop.thisRepN'
p2338
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2339
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vy
sS'block_loop.thisTrialN'
p2341
I0
sg39
F3.5332028721968527
sg34
g753
(S'\x07\xdf\x07\r\x1088\x02\xf9\xb8'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1444
sS'block_loop.thisIndex'
p2345
g889
sg38
S'right'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1451
sS'block_loop.thisRepN'
p2351
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2352
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vy
sS'block_loop.thisTrialN'
p2354
I0
sg39
F1.59996527498879
sg34
g753
(S'\x07\xdf\x07\r\x109\x04\x0b\x98\xc0'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g1303
sS'block_loop.thisIndex'
p2358
g889
sg38
S'left'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1311
sS'block_loop.thisRepN'
p2364
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2365
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vy
sS'block_loop.thisTrialN'
p2367
I0
sg39
F1.2832606046686124
sg34
g753
(S'\x07\xdf\x07\r\x109\x0b\x05\xf3p'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g1014
sS'block_loop.thisIndex'
p2371
g889
sg38
S'right'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g1022
sS'block_loop.thisRepN'
p2377
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2378
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vy
sS'block_loop.thisTrialN'
p2380
I0
sg39
F2.2665070684488455
sg34
g753
(S'\x07\xdf\x07\r\x109\x11\n\xcd\xa0'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g1580
sS'block_loop.thisIndex'
p2384
g889
sg38
S'right'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g1587
sS'block_loop.thisRepN'
p2390
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2391
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vy
sS'block_loop.thisTrialN'
p2393
I0
sg39
F1.1166016356655746
sg34
g753
(S'\x07\xdf\x07\r\x109\x19\x00\x1f@'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g1936
sS'block_loop.thisIndex'
p2397
g889
sg38
S'left'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g1943
sS'block_loop.thisRepN'
p2403
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2404
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vy
sS'block_loop.thisTrialN'
p2406
I0
sg39
F1.1332257371068408
sg34
g753
(S'\x07\xdf\x07\r\x109\x1f\x02]x'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g997
sS'block_loop.thisIndex'
p2410
g889
sg38
S'right'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g1008
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g1005
sS'block_loop.thisRepN'
p2416
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2417
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vy
sS'block_loop.thisTrialN'
p2419
I0
sg39
F0.84996883872008766
sg34
g753
(S'\x07\xdf\x07\r\x109%\x05\x10\xe0'
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g1539
sS'block_loop.thisIndex'
p2423
g889
sg38
S'left'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g1344
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g1546
sS'block_loop.thisRepN'
p2429
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2430
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vy
sS'block_loop.thisTrialN'
p2432
I0
sg39
F0.93339639715122757
sg34
g753
(S'\x07\xdf\x07\r\x109+\x03C\xf0'
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g916
sS'block_loop.thisIndex'
p2436
g889
sg38
S'right'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g924
sS'block_loop.thisRepN'
p2442
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vy
sS'block_loop.thisTrialN'
p2445
I0
sg39
F1.0165471248110407
sg34
g753
(S'\x07\xdf\x07\r\x1091\x02\xa3\xc8'
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g1716
sS'block_loop.thisIndex'
p2449
g889
sg38
S'left'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g1723
sS'block_loop.thisRepN'
p2455
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vy
sS'block_loop.thisTrialN'
p2458
I0
sg39
F0.71662193469092017
sg34
g753
(S'\x07\xdf\x07\r\x1097\x03r\xd0'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1580
sS'block_loop.thisIndex'
p2462
g889
sg38
S'right'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1587
sS'block_loop.thisRepN'
p2468
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vy
sS'block_loop.thisTrialN'
p2471
I0
sg39
F0.96655422376352362
sg34
g753
(S'\x07\xdf\x07\r\x10:\x00\x0e\xfb\xf0'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1608
sS'block_loop.thisIndex'
p2475
g889
sg38
S'right'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1615
sS'block_loop.thisRepN'
p2481
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vy
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.0499381621048087
sg34
g753
(S'\x07\xdf\x07\r\x10:\x06\x0e\xd8\xc8'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1444
sS'block_loop.thisIndex'
p2488
g889
sg38
S'right'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1451
sS'block_loop.thisRepN'
p2494
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vy
sS'block_loop.thisTrialN'
p2497
I0
sg39
F1.0499159244136536
sg34
g753
(S'\x07\xdf\x07\r\x10:\r\x00\xde\xa8'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g933
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g941
sS'block_loop.thisRepN'
p2507
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vy
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.2832742894061084
sg34
g753
(S'\x07\xdf\x07\r\x10:\x13\x02&\xc8'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1485
sS'block_loop.thisIndex'
p2514
g889
sg38
S'right'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1492
sS'block_loop.thisRepN'
p2520
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vy
sS'block_loop.thisTrialN'
p2523
I0
sg39
F2.5830976993092918
sg34
g753
(S'\x07\xdf\x07\r\x10:\x19\x07\x00\xf8'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1539
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1344
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1546
sS'block_loop.thisRepN'
p2533
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vy
sS'block_loop.thisTrialN'
p2536
I0
sg39
F0.73329307740641525
sg34
g753
(S'\x07\xdf\x07\r\x10:!\x01\x15X'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1177
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1188
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1185
sS'block_loop.thisRepN'
p2546
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vy
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.9832390512128768
sg34
g753
(S'\x07\xdf\x07\r\x10:&\x0c\xdc\xf8'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g916
sS'block_loop.thisIndex'
p2553
g889
sg38
S'right'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g924
sS'block_loop.thisRepN'
p2559
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vy
sS'block_loop.thisTrialN'
p2562
I0
sg39
F0.94992955212728702
sg34
g753
(S'\x07\xdf\x07\r\x10:,\r2\xe8'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1936
sS'block_loop.thisIndex'
p2566
g889
sg38
S'left'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1943
sS'block_loop.thisRepN'
p2572
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vy
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.1666124979237793
sg34
g753
(S'\x07\xdf\x07\r\x10:2\x0c\xd1@'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g1800
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1151
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g1807
sS'block_loop.thisRepN'
p2585
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vy
sS'block_loop.thisTrialN'
p2588
I0
sg39
F0.9996034277974104
sg34
g753
(S'\x07\xdf\x07\r\x10:9\x00\xbfh'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g933
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g941
sS'block_loop.thisRepN'
p2598
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vy
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.0330486338352785
sg34
g753
(S'\x07\xdf\x07\r\x10;\x03\x01\x11p'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1785
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1792
sS'block_loop.thisRepN'
p2611
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vy
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.2332377682687365
sg34
g753
(S'\x07\xdf\x07\r\x10;\t\x02\x1e\xf8'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1194
sS'block_loop.thisIndex'
p2618
g889
sg38
S'left'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1202
sS'block_loop.thisRepN'
p2624
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vy
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.9831555173113884
sg34
g753
(S'\x07\xdf\x07\r\x10;\x0f\x06A\x90'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1350
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1358
sS'block_loop.thisRepN'
p2637
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vy
sS'block_loop.thisTrialN'
p2640
I0
sg39
F1.2499730581803306
sg34
g753
(S'\x07\xdf\x07\r\x10;\x16\x06\x8f\xb0'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1226
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1234
sS'block_loop.thisRepN'
p2650
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vy
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.9831635000773531
sg34
g753
(S'\x07\xdf\x07\r\x10;\x1c\n\xb2H'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1416
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1423
sS'block_loop.thisRepN'
p2663
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vy
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.1165611516626086
sg34
g753
(S'\x07\xdf\x07\r\x10;#\x0b\x00h'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1350
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1361
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1358
sS'block_loop.thisRepN'
p2676
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vy
sS'block_loop.thisTrialN'
p2679
I0
sg39
F1.283212708101928
sg34
g753
(S'\x07\xdf\x07\r\x10;)\r:\xb8'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g2031
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g2038
sS'block_loop.thisRepN'
p2689
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vy
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.6499672991849366
sg34
g753
(S'\x07\xdf\x07\r\x10;0\x02\xd2\xa8'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1951
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1958
sS'block_loop.thisRepN'
p2702
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vy
sS'block_loop.thisTrialN'
p2705
I0
sg39
F0.89986851250796462
sg34
g753
(S'\x07\xdf\x07\r\x10;6\re\xb0'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1177
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1185
sS'block_loop.thisRepN'
p2715
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F0.90000650024740025
sg34
g753
(S'\x07\xdf\x07\r\x11\x00\x00\x0cLp'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1636
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g974
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1643
sS'block_loop.thisRepN'
p2728
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.6832722366962116
sg34
g753
(S'\x07\xdf\x07\r\x11\x00\x06\x0b30'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1286
sS'block_loop.thisIndex'
p2735
g889
sg38
S'left'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1294
sS'block_loop.thisRepN'
p2741
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.73320840311134816
sg34
g753
(S'\x07\xdf\x07\r\x11\x00\r\x06\xfd\x10'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1716
sS'block_loop.thisIndex'
p2748
g889
sg38
S'left'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1723
sS'block_loop.thisRepN'
p2754
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.6004023311943456
sg34
g753
(S'\x07\xdf\x07\r\x11\x00\x13\x03\x82p'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1211
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1218
sS'block_loop.thisRepN'
p2767
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.98321054135158192
sg34
g753
(S'\x07\xdf\x07\r\x11\x00\x19\r\x1f`'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g896
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g905
sS'block_loop.thisRepN'
p2780
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.9832980666324147
sg34
g753
(S'\x07\xdf\x07\r\x11\x00\x1f\rqh'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1350
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1358
sS'block_loop.thisRepN'
p2793
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F0.86665708735381486
sg34
g753
(S'\x07\xdf\x07\r\x11\x00%\r\x88\xd8'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1485
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1492
sS'block_loop.thisRepN'
p2806
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.5998173087973555
sg34
g753
(S'\x07\xdf\x07\r\x11\x00+\x0b\xf6\x80'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1580
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1587
sS'block_loop.thisRepN'
p2819
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.1499678693835449
sg34
g753
(S'\x07\xdf\x07\r\x11\x002\x06\x8f\xb0'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1147
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1155
sS'block_loop.thisRepN'
p2832
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.89972510789448279
sg34
g753
(S'\x07\xdf\x07\r\x11\x008\tC\x18'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1286
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1297
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1294
sS'block_loop.thisRepN'
p2845
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F0.81658749477355741
sg34
g753
(S'\x07\xdf\x07\r\x11\x01\x02\x08)\xd8'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1869
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1876
sS'block_loop.thisRepN'
p2858
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.91656645449620555
sg34
g753
(S'\x07\xdf\x07\r\x11\x01\x08\x05\xdf\xe8'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1382
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1390
sS'block_loop.thisRepN'
p2871
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.4833231553129735
sg34
g753
(S'\x07\xdf\x07\r\x11\x01\x0e\x05?\xc0'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1800
sS'block_loop.thisIndex'
p2878
g889
sg38
S'left'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1151
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1807
sS'block_loop.thisRepN'
p2884
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.64967279229313135
sg34
g753
(S'\x07\xdf\x07\r\x11\x01\x14\r2\xe8'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1303
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1311
sS'block_loop.thisRepN'
p2897
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F2.166674649430206
sg34
g753
(S'\x07\xdf\x07\r\x11\x01\x1a\x08M\x00'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1147
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1155
sS'block_loop.thisRepN'
p2910
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.2164274974238651
sg34
g753
(S'\x07\xdf\x07\r\x11\x01!\x0b7\x18'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1102
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1110
sS'block_loop.thisRepN'
p2923
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.7832255375396926
sg34
g753
(S"\x07\xdf\x07\r\x11\x01'\x0f\x1f\x18"
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1382
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1390
sS'block_loop.thisRepN'
p2936
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.91662746560177766
sg34
g753
(S'\x07\xdf\x07\r\x11\x01-\x0c\\\x10'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g916
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g924
sS'block_loop.thisRepN'
p2949
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F2.5002799668618536
sg34
g753
(S'\x07\xdf\x07\r\x11\x013\x0b}h'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1303
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1313
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1311
sS'block_loop.thisRepN'
p2962
I0
sg907
g1313
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1307
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F2.2332788224739488
sg34
g753
(S'\x07\xdf\x07\r\x11\x01;\x04e\x00'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1256
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1260
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1264
sS'block_loop.thisRepN'
p2975
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F2.7165689063476748
sg34
g753
(S'\x07\xdf\x07\r\x11\x02\x06\x08\x83\xb0'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1936
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1943
sS'block_loop.thisRepN'
p2988
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.616571985407063
sg34
g753
(S'\x07\xdf\x07\r\x11\x02\x0e\x04\xbe\xd8'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1485
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1492
sS'block_loop.thisRepN'
p3001
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.5997280729206977
sg34
g753
(S'\x07\xdf\x07\r\x11\x02\x14\x0e\x9aH'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1636
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1643
sS'block_loop.thisRepN'
p3014
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F2.0998572226017131
sg34
g753
(S'\x07\xdf\x07\r\x11\x02\x1b\x08\xf4\xf8'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1800
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1151
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1807
sS'block_loop.thisRepN'
p3027
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F2.1829381010975339
sg34
g753
(S'\x07\xdf\x07\r\x11\x02"\x0b\'x'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g997
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1005
sS'block_loop.thisRepN'
p3040
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.94992955212728702
sg34
g753
(S'\x07\xdf\x07\r\x11\x02)\x0eS\xf8'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1770
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1777
sS'block_loop.thisRepN'
p3053
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.91664457152364776
sg34
g753
(S'\x07\xdf\x07\r\x11\x02/\x0e,\xe8'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1580
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1587
sS'block_loop.thisRepN'
p3066
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.81655955511087086
sg34
g753
(S'\x07\xdf\x07\r\x11\x025\rR('
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1800
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1807
sS'block_loop.thisRepN'
p3079
I0
sg907
g1151
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.91633723519407795
sg34
g753
(S'\x07\xdf\x07\r\x11\x02;\x0b\x088'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1367
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1374
sS'block_loop.thisRepN'
p3092
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F2.2332178113683767
sg34
g753
(S'\x07\xdf\x07\r\x11\x03\x05\n)\x90'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1256
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1264
sS'block_loop.thisRepN'
p3105
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.76656408817871124
sg34
g753
(S'\x07\xdf\x07\r\x11\x03\x0c\x0eH@'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1226
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1234
sS'block_loop.thisRepN'
p3118
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.98323648532823427
sg34
g753
(S'\x07\xdf\x07\r\x11\x03\x12\x0bF\xb8'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1399
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1407
sS'block_loop.thisRepN'
p3131
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.0666261256410507
sg34
g753
(S'\x07\xdf\x07\r\x11\x03\x18\x0b\x9c\xa8'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g963
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g971
sS'block_loop.thisRepN'
p3144
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.3833159708265157
sg34
g753
(S'\x07\xdf\x07\r\x11\x03\x1e\r\x1f`'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1770
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1777
sS'block_loop.thisRepN'
p3157
I0
sg907
g1392
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1386
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.8999631652586686
sg34
g753
(S'\x07\xdf\x07\r\x11\x03%\x04&\x80'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1057
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1065
sS'block_loop.thisRepN'
p3170
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.2333030558584142
sg34
g753
(S'\x07\xdf\x07\r\x11\x03+\x03\r@'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1194
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1202
sS'block_loop.thisRepN'
p3183
I0
sg907
g1198
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1205
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F1.8831144060895895
sg34
g753
(S'\x07\xdf\x07\r\x11\x031\x07/\xd8'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1444
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1451
sS'block_loop.thisRepN'
p3196
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.1000020527098968
sg34
g753
(S'\x07\xdf\x07\r\x11\x038\x05\xd40'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1333
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1337
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1341
sS'block_loop.thisRepN'
p3209
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.74998902370134601
sg34
g753
(S'\x07\xdf\x07\r\x11\x04\x02\x08\x0e\x80'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g997
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1005
sS'block_loop.thisRepN'
p3222
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.76666615348949563
sg34
g753
(S'\x07\xdf\x07\r\x11\x04\x08\x04\x93\xe0'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1102
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1106
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1110
sS'block_loop.thisRepN'
p3235
I0
sg907
g1106
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1113
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.73326770362837124
sg34
g753
(S'\x07\xdf\x07\r\x11\x04\x0e\x01\x96@'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1333
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1337
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1341
sS'block_loop.thisRepN'
p3248
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.76660542747777072
sg34
g753
(S'\x07\xdf\x07\r\x11\x04\x13\r]\xe0'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g933
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g941
sS'block_loop.thisRepN'
p3261
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.3166698882814671
sg34
g753
(S'\x07\xdf\x07\r\x11\x04\x19\n\\X'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1014
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1022
sS'block_loop.thisRepN'
p3274
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.650324812875624
sg34
g753
(S'\x07\xdf\x07\r\x11\x04 \x00m`'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1869
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1876
sS'block_loop.thisRepN'
p3287
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.69990289540510275
sg34
g753
(S'\x07\xdf\x07\r\x11\x04&\n\xc1\xe8'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g933
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g941
sS'block_loop.thisRepN'
p3300
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.0166660109389341
sg34
g753
(S'\x07\xdf\x07\r\x11\x04,\x06\xce0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1841
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1848
sS'block_loop.thisRepN'
p3313
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.4331777264960692
sg34
g753
(S'\x07\xdf\x07\r\x11\x042\x07^\xb8'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1951
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1958
sS'block_loop.thisRepN'
p3326
I0
sg907
g1230
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1237
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.93331086756006698
sg34
g753
(S'\x07\xdf\x07\r\x11\x048\x0e\x9aH'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1869
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1876
sS'block_loop.thisRepN'
p3339
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.66658484335857793
sg34
g753
(S'\x07\xdf\x07\r\x11\x05\x02\r\xfa '
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1444
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1451
sS'block_loop.thisRepN'
p3352
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.79999161809973884
sg34
g753
(S'\x07\xdf\x07\r\x11\x05\x08\t\x8dP'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1785
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1297
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1792
sS'block_loop.thisRepN'
p3365
I0
sg907
g1290
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1297
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.216528707434918
sg34
g753
(S'\x07\xdf\x07\r\x11\x05\x0e\x07\x04\xe0'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g980
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g988
sS'block_loop.thisRepN'
p3378
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.99983122160847415
sg34
g753
(S'\x07\xdf\x07\r\x11\x05\x14\n\xae`'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1177
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1188
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1185
sS'block_loop.thisRepN'
p3391
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F1.0665842161433829
sg34
g753
(S'\x07\xdf\x07\r\x11\x05\x1a\x0b>\xe8'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1211
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1218
sS'block_loop.thisRepN'
p3404
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.71656605535827111
sg34
g753
(S'\x07\xdf\x07\r\x11\x05 \x0c\xc5\x88'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1539
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1344
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1546
sS'block_loop.thisRepN'
p3417
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.2166914987574273
sg34
g753
(S'\x07\xdf\x07\r\x11\x05&\t\x0ch'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1367
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1068
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1374
sS'block_loop.thisRepN'
p3430
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.3163614115583187
sg34
g753
(S'\x07\xdf\x07\r\x11\x05,\x0c\xb5\xe8'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g2031
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g2038
sS'block_loop.thisRepN'
p3443
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.8832159012054035
sg34
g753
(S'\x07\xdf\x07\r\x11\x053\x02\xca\xd8'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1256
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1264
sS'block_loop.thisRepN'
p3456
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.86666564031111193
sg34
g753
(S'\x07\xdf\x07\r\x11\x059\x01\xb1\x98'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1636
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1643
sS'block_loop.thisRepN'
p3469
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F1.2999345983735111
sg34
g753
(S'\x07\xdf\x07\r\x11\x06\x03\x00\x1bX'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1350
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1358
sS'block_loop.thisRepN'
p3482
I0
sg907
g1354
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1361
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.83328344107212615
sg34
g753
(S'\x07\xdf\x07\r\x11\x06\t\x054\x08'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1716
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1403
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1723
sS'block_loop.thisRepN'
p3495
I0
sg907
g1403
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1410
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.99987370130475028
sg34
g753
(S'\x07\xdf\x07\r\x11\x06\x0f\x03(\x98'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1539
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1337
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1546
sS'block_loop.thisRepN'
p3508
I0
sg907
g1337
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1344
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.81656611237849575
sg34
g753
(S'\x07\xdf\x07\r\x11\x06\x15\x0428'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1841
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1848
sS'block_loop.thisRepN'
p3521
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.96664517022873042
sg34
g753
(S'\x07\xdf\x07\r\x11\x06\x1b\x01\xe8H'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1057
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1065
sS'block_loop.thisRepN'
p3534
I0
sg907
g1061
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1068
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.2500255163286056
sg34
g753
(S'\x07\xdf\x07\r\x11\x06!\x01\xc18'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1132
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1139
sS'block_loop.thisRepN'
p3547
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.0832368274459441
sg34
g753
(S'\x07\xdf\x07\r\x11\x06\'\x06"P'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g963
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g971
sS'block_loop.thisRepN'
p3560
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.1166004952756339
sg34
g753
(S'\x07\xdf\x07\r\x11\x06-\x07\xe3\x88'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1841
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1181
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1848
sS'block_loop.thisRepN'
p3573
I0
sg907
g1181
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1188
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.76654584186690045
sg34
g753
(S'\x07\xdf\x07\r\x11\x063\n!\xc0'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g2031
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g990
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g2038
sS'block_loop.thisRepN'
p3586
I0
sg907
g990
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g984
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.85006121067635831
sg34
g753
(S'\x07\xdf\x07\r\x11\x069\x07 8'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1636
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1643
sS'block_loop.thisRepN'
p3599
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.1333012882460025
sg34
g753
(S'\x07\xdf\x07\r\x11\x07\x03\x05O`'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g896
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g905
sS'block_loop.thisRepN'
p3612
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.78333130913233617
sg34
g753
(S'\x07\xdf\x07\r\x11\x07\t\x08\x06\xb0'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F34.73273713506569
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'16-skips_prawn.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'42-mrkipling_lemon_slices.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'42-mrkipling_lemon_slices.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'16-skips_prawn.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.3330168738502834
sg34
g753
(S'\x07\xdf\x07\r\x11\x08#\x0e\x05\xd8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'7-olives.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'22-daim.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'22-daim.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'7-olives.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.0166859678429319
sg34
g753
(S'\x07\xdf\x07\r\x11\x08*\x04U`'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'41-peanuts_redo.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'41-peanuts_redo.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'45-chewy_nougat_redo.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'45-chewy_nougat_redo.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.0666033177476493
sg34
g753
(S'\x07\xdf\x07\r\x11\x080\x05 \x80'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'27-hartleys_raspberries_jelly.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'51-mars.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'51-mars.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vy
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.94991301640402526
sg34
g753
(S'\x07\xdf\x07\r\x11\x086\x06\xa7 '
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'19-caramello_redo.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'left'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'30-spaghetti_hoops.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'30-spaghetti_hoops.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
S'19-caramello_redo.png'
p3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3716
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vy
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.63328304193419171
sg34
g753
(S'\x07\xdf\x07\r\x11\t\x00\x06\x80\x10'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'18-mms.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'left'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'18-mms.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3732
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vy
sS'block_loop.thisTrialN'
p3735
I0
sg39
F0.75001781866376405
sg34
g753
(S'\x07\xdf\x07\r\x11\t\x06\x01[\xa8'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'46-pistachios.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'left'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
S'29-beans.png'
p3743
sg64
g65
sS'trial_loop.thisIndex'
p3744
g60
(g99
S'\x06\x00\x00\x00'
tRp3745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3746
I0
sg3642
S'29-beans.png'
p3747
sS'block_loop.thisRepN'
p3748
I1
sg3645
S'46-pistachios.png'
p3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3750
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p3751
Nsg70
Vy
sS'block_loop.thisTrialN'
p3752
I0
sg39
F0.83318793302896665
sg34
g753
(S'\x07\xdf\x07\r\x11\t\x0b\ra\xc8'
tRp3753
sa(dp3754
S'trial_loop.thisTrialN'
p3755
I7
sg3633
S'3-ellas_strawberries_apples.png'
p3756
sS'block_loop.thisIndex'
p3757
g3627
sg38
S'left'
p3758
sg59
g63
sS'trial_loop.thisN'
p3759
I7
sg33
S'3-ellas_strawberries_apples.png'
p3760
sg64
g65
sS'trial_loop.thisIndex'
p3761
g60
(g99
S'\x07\x00\x00\x00'
tRp3762
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3763
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3764
sS'block_loop.thisRepN'
p3765
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3766
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3767
sg55
g11
sS'block_loop.thisTrial'
p3768
Nsg70
Vy
sS'block_loop.thisTrialN'
p3769
I0
sg39
F0.68331443129500258
sg34
g753
(S'\x07\xdf\x07\r\x11\t\x11\x0bRp'
tRp3770
sa(dp3771
S'trial_loop.thisTrialN'
p3772
I8
sg3633
S'10-bounty_redo.png'
p3773
sS'block_loop.thisIndex'
p3774
g3627
sg38
S'right'
p3775
sg59
g63
sS'trial_loop.thisN'
p3776
I8
sg33
S'4-corn.png'
p3777
sg64
g65
sS'trial_loop.thisIndex'
p3778
g60
(g99
S'\x08\x00\x00\x00'
tRp3779
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3780
I0
sg3642
S'4-corn.png'
p3781
sS'block_loop.thisRepN'
p3782
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3783
I1
sg3647
S'10-bounty_redo.png'
p3784
sg55
g11
sS'block_loop.thisTrial'
p3785
Nsg70
Vy
sS'block_loop.thisTrialN'
p3786
I0
sg39
F1.0664778743484931
sg34
g753
(S'\x07\xdf\x07\r\x11\t\x17\x06\xe5\xa0'
tRp3787
sa(dp3788
S'trial_loop.thisTrialN'
p3789
I9
sg3633
S'44-crunch.png'
p3790
sS'block_loop.thisIndex'
p3791
g3627
sg38
S'left'
p3792
sg59
g63
sS'trial_loop.thisN'
p3793
I9
sg33
S'44-crunch.png'
p3794
sg64
g65
sS'trial_loop.thisIndex'
p3795
g60
(g99
S'\t\x00\x00\x00'
tRp3796
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3797
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3798
sS'block_loop.thisRepN'
p3799
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3800
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3801
sg55
g11
sS'block_loop.thisTrial'
p3802
Nsg70
Vy
sS'block_loop.thisTrialN'
p3803
I0
sg39
F0.76662082280381583
sg34
g753
(S'\x07\xdf\x07\r\x11\t\x1d\x08l@'
tRp3804
sa(dp3805
S'trial_loop.thisTrialN'
p3806
I10
sg3633
S'30-spaghetti_hoops.png'
p3807
sS'block_loop.thisIndex'
p3808
g3627
sg38
S'right'
p3809
sg59
g63
sS'trial_loop.thisN'
p3810
I10
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p3811
g60
(g99
S'\n\x00\x00\x00'
tRp3812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3813
I0
sg3642
S'19-caramello_redo.png'
p3814
sS'block_loop.thisRepN'
p3815
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3816
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p3817
Nsg70
Vy
sS'block_loop.thisTrialN'
p3818
I0
sg39
F1.100026000993239
sg34
g753
(S'\x07\xdf\x07\r\x11\t#\x05j\xb8'
tRp3819
sa(dp3820
S'trial_loop.thisTrialN'
p3821
I11
sg3633
S'13-mccoys_steak_crisps.png'
p3822
sS'block_loop.thisIndex'
p3823
g3627
sg38
S'right'
p3824
sg59
g63
sS'trial_loop.thisN'
p3825
I11
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p3826
g60
(g99
S'\x0b\x00\x00\x00'
tRp3827
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3828
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3829
sS'block_loop.thisRepN'
p3830
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3831
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p3832
Nsg70
Vy
sS'block_loop.thisTrialN'
p3833
I0
sg39
F0.80014129488336039
sg34
g753
(S'\x07\xdf\x07\r\x11\t)\x07jp'
tRp3834
sa(dp3835
S'trial_loop.thisTrialN'
p3836
I12
sg3633
g3634
sS'block_loop.thisIndex'
p3837
g3627
sg38
S'right'
p3838
sg59
g63
sS'trial_loop.thisN'
p3839
I12
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3840
g60
(g99
S'\x0c\x00\x00\x00'
tRp3841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3842
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3843
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3844
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vy
sS'block_loop.thisTrialN'
p3846
I0
sg39
F0.96655821514286799
sg34
g753
(S'\x07\xdf\x07\r\x11\t/\x04\xe2\x00'
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
g3773
sS'block_loop.thisIndex'
p3850
g3627
sg38
S'right'
p3851
sg59
g63
sS'trial_loop.thisN'
p3852
I13
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p3853
g60
(g99
S'\r\x00\x00\x00'
tRp3854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3855
I0
sg3642
g3781
sS'block_loop.thisRepN'
p3856
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3857
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p3858
Nsg70
Vy
sS'block_loop.thisTrialN'
p3859
I0
sg39
F0.96658358892454999
sg34
g753
(S'\x07\xdf\x07\r\x11\t5\x04\xf9p'
tRp3860
sa(dp3861
S'trial_loop.thisTrialN'
p3862
I14
sg3633
S'49-yorkie.png'
p3863
sS'block_loop.thisIndex'
p3864
g3627
sg38
S'right'
p3865
sg59
g63
sS'trial_loop.thisN'
p3866
I14
sg33
S'35-raisins.png'
p3867
sg64
g65
sS'trial_loop.thisIndex'
p3868
g60
(g99
S'\x0e\x00\x00\x00'
tRp3869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3870
I0
sg3642
S'35-raisins.png'
p3871
sS'block_loop.thisRepN'
p3872
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3873
I1
sg3647
S'49-yorkie.png'
p3874
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vy
sS'block_loop.thisTrialN'
p3876
I0
sg39
F0.89985283208443434
sg34
g753
(S'\x07\xdf\x07\r\x11\t;\x04\xd6H'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
g3756
sS'block_loop.thisIndex'
p3880
g3627
sg38
S'left'
p3881
sg59
g63
sS'trial_loop.thisN'
p3882
I15
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p3883
g60
(g99
S'\x0f\x00\x00\x00'
tRp3884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3885
I0
sg3642
g3764
sS'block_loop.thisRepN'
p3886
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3887
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p3888
Nsg70
Vy
sS'block_loop.thisTrialN'
p3889
I0
sg39
F0.59996014320859103
sg34
g753
(S'\x07\xdf\x07\r\x11\n\x05\x03\xf7\xa0'
tRp3890
sa(dp3891
S'trial_loop.thisTrialN'
p3892
I16
sg3633
S'42-mrkipling_lemon_slices.png'
p3893
sS'block_loop.thisIndex'
p3894
g3627
sg38
S'left'
p3895
sg59
g63
sS'trial_loop.thisN'
p3896
I16
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3897
g60
(g99
S'\x10\x00\x00\x00'
tRp3898
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3899
I0
sg3642
S'16-skips_prawn.png'
p3900
sS'block_loop.thisRepN'
p3901
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3902
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3903
Nsg70
Vy
sS'block_loop.thisTrialN'
p3904
I0
sg39
F0.89992667263140902
sg34
g753
(S'\x07\xdf\x07\r\x11\n\n\r\x9c`'
tRp3905
sa(dp3906
S'trial_loop.thisTrialN'
p3907
I17
sg3633
S'51-mars.png'
p3908
sS'block_loop.thisIndex'
p3909
g3627
sg38
S'left'
p3910
sg59
g63
sS'trial_loop.thisN'
p3911
I17
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p3912
g60
(g99
S'\x11\x00\x00\x00'
tRp3913
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3914
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3915
sS'block_loop.thisRepN'
p3916
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3917
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p3918
Nsg70
Vy
sS'block_loop.thisTrialN'
p3919
I0
sg39
F0.78330992673363653
sg34
g753
(S'\x07\xdf\x07\r\x11\n\x10\x0c\x83 '
tRp3920
sa(dp3921
S'trial_loop.thisTrialN'
p3922
I18
sg3633
S'33-ambrosia_rice.png'
p3923
sS'block_loop.thisIndex'
p3924
g3627
sg38
S'left'
p3925
sg59
g63
sS'trial_loop.thisN'
p3926
I18
sg33
S'33-ambrosia_rice.png'
p3927
sg64
g65
sS'trial_loop.thisIndex'
p3928
g60
(g99
S'\x12\x00\x00\x00'
tRp3929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3930
I0
sg3642
S'23-crunchie_redo.png'
p3931
sS'block_loop.thisRepN'
p3932
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3933
I1
sg3647
S'23-crunchie_redo.png'
p3934
sg55
g11
sS'block_loop.thisTrial'
p3935
Nsg70
Vy
sS'block_loop.thisTrialN'
p3936
I0
sg39
F0.84993177589785773
sg34
g753
(S'\x07\xdf\x07\r\x11\n\x16\t\xc0\x18'
tRp3937
sa(dp3938
S'trial_loop.thisTrialN'
p3939
I19
sg3633
S'50-polo.png'
p3940
sS'block_loop.thisIndex'
p3941
g3627
sg38
S'right'
p3942
sg59
g63
sS'trial_loop.thisN'
p3943
I19
sg33
S'50-polo.png'
p3944
sg64
g65
sS'trial_loop.thisIndex'
p3945
g60
(g99
S'\x13\x00\x00\x00'
tRp3946
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3947
I0
sg3642
S'48-twix.png'
p3948
sS'block_loop.thisRepN'
p3949
I1
sg3645
S'48-twix.png'
p3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3951
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p3952
Nsg70
Vy
sS'block_loop.thisTrialN'
p3953
I0
sg39
F1.9332874894716952
sg34
g753
(S'\x07\xdf\x07\r\x11\n\x1c\x07\xef@'
tRp3954
sa(dp3955
S'trial_loop.thisTrialN'
p3956
I20
sg3633
S'43-mrporky_pork_crackles_redo.png'
p3957
sS'block_loop.thisIndex'
p3958
g3627
sg38
S'right'
p3959
sg59
g63
sS'trial_loop.thisN'
p3960
I20
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p3961
g60
(g99
S'\x14\x00\x00\x00'
tRp3962
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3963
I0
sg3642
S'18-mms.png'
p3964
sS'block_loop.thisRepN'
p3965
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3966
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vy
sS'block_loop.thisTrialN'
p3968
I0
sg39
F1.1499182622210355
sg34
g753
(S'\x07\xdf\x07\r\x11\n#\x07\x85\xc8'
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
S'5-pineapple.png'
p3972
sS'block_loop.thisIndex'
p3973
g3627
sg38
S'left'
p3974
sg59
g63
sS'trial_loop.thisN'
p3975
I21
sg33
S'5-pineapple.png'
p3976
sg64
g65
sS'trial_loop.thisIndex'
p3977
g60
(g99
S'\x15\x00\x00\x00'
tRp3978
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3979
I0
sg3642
S'40-sardines.png'
p3980
sS'block_loop.thisRepN'
p3981
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3982
I1
sg3647
S'40-sardines.png'
p3983
sg55
g11
sS'block_loop.thisTrial'
p3984
Nsg70
Vy
sS'block_loop.thisTrialN'
p3985
I0
sg39
F1.5166218206504709
sg34
g753
(S'\x07\xdf\x07\r\x11\n)\n=\x18'
tRp3986
sa(dp3987
S'trial_loop.thisTrialN'
p3988
I22
sg3633
S'29-beans.png'
p3989
sS'block_loop.thisIndex'
p3990
g3627
sg38
S'right'
p3991
sg59
g63
sS'trial_loop.thisN'
p3992
I22
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p3993
g60
(g99
S'\x16\x00\x00\x00'
tRp3994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3995
I0
sg3642
S'46-pistachios.png'
p3996
sS'block_loop.thisRepN'
p3997
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3998
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p3999
Nsg70
Vy
sS'block_loop.thisTrialN'
p4000
I0
sg39
F0.83336184319705353
sg34
g753
(S'\x07\xdf\x07\r\x11\n0\x03g\x18'
tRp4001
sa(dp4002
S'trial_loop.thisTrialN'
p4003
I23
sg3633
S'31-hobnobs.png'
p4004
sS'block_loop.thisIndex'
p4005
g3627
sg38
S'right'
p4006
sg59
g63
sS'trial_loop.thisN'
p4007
I23
sg33
S'25-kitkat.png'
p4008
sg64
g65
sS'trial_loop.thisIndex'
p4009
g60
(g99
S'\x17\x00\x00\x00'
tRp4010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4011
I0
sg3642
S'25-kitkat.png'
p4012
sS'block_loop.thisRepN'
p4013
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4014
I1
sg3647
S'31-hobnobs.png'
p4015
sg55
g11
sS'block_loop.thisTrial'
p4016
Nsg70
Vy
sS'block_loop.thisTrialN'
p4017
I0
sg39
F0.85001473960073781
sg34
g753
(S'\x07\xdf\x07\r\x11\n6\x01W\xc0'
tRp4018
sa(dp4019
S'trial_loop.thisTrialN'
p4020
I24
sg3633
S'38-maltesers.png'
p4021
sS'block_loop.thisIndex'
p4022
g3627
sg38
S'left'
p4023
sg59
g63
sS'trial_loop.thisN'
p4024
I24
sg33
S'38-maltesers.png'
p4025
sg64
g65
sS'trial_loop.thisIndex'
p4026
g60
(g99
S'\x18\x00\x00\x00'
tRp4027
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4028
I0
sg3642
S'6-sour_patch_kids.png'
p4029
sS'block_loop.thisRepN'
p4030
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4031
I1
sg3647
S'6-sour_patch_kids.png'
p4032
sg55
g11
sS'block_loop.thisTrial'
p4033
Nsg70
Vy
sS'block_loop.thisTrialN'
p4034
I0
sg39
F0.89962275748621323
sg34
g753
(S'\x07\xdf\x07\r\x11\n;\x0e\xc9('
tRp4035
sa(dp4036
S'trial_loop.thisTrialN'
p4037
I25
sg3633
g3822
sS'block_loop.thisIndex'
p4038
g3627
sg38
S'right'
p4039
sg59
g63
sS'trial_loop.thisN'
p4040
I25
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4041
g60
(g99
S'\x19\x00\x00\x00'
tRp4042
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4043
I0
sg3642
g3829
sS'block_loop.thisRepN'
p4044
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4045
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4046
Nsg70
Vy
sS'block_loop.thisTrialN'
p4047
I0
sg39
F0.74992744239716558
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b\x05\r\xaf\xe8'
tRp4048
sa(dp4049
S'trial_loop.thisTrialN'
p4050
I26
sg3633
S'48-twix.png'
p4051
sS'block_loop.thisIndex'
p4052
g3627
sg38
S'left'
p4053
sg59
g63
sS'trial_loop.thisN'
p4054
I26
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p4055
g60
(g99
S'\x1a\x00\x00\x00'
tRp4056
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4057
I0
sg3642
S'50-polo.png'
p4058
sS'block_loop.thisRepN'
p4059
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4060
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p4061
Nsg70
Vy
sS'block_loop.thisTrialN'
p4062
I0
sg39
F1.4665907163907832
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b\x0b\ns\xc8'
tRp4063
sa(dp4064
S'trial_loop.thisTrialN'
p4065
I27
sg3633
g3807
sS'block_loop.thisIndex'
p4066
g3627
sg38
S'right'
p4067
sg59
g63
sS'trial_loop.thisN'
p4068
I27
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4069
g60
(g99
S'\x1b\x00\x00\x00'
tRp4070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4071
I0
sg3642
g3814
sS'block_loop.thisRepN'
p4072
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4073
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4074
Nsg70
Vy
sS'block_loop.thisTrialN'
p4075
I0
sg39
F0.66659026023262413
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b\x12\x02\xe60'
tRp4076
sa(dp4077
S'trial_loop.thisTrialN'
p4078
I28
sg3633
g3671
sS'block_loop.thisIndex'
p4079
g3627
sg38
S'left'
p4080
sg59
g63
sS'trial_loop.thisN'
p4081
I28
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4082
g60
(g99
S'\x1c\x00\x00\x00'
tRp4083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4084
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4085
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4086
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4087
Nsg70
Vy
sS'block_loop.thisTrialN'
p4088
I0
sg39
F0.78365917256451212
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b\x17\r} '
tRp4089
sa(dp4090
S'trial_loop.thisTrialN'
p4091
I29
sg3633
S'21-nakd_banana_crunch.png'
p4092
sS'block_loop.thisIndex'
p4093
g3627
sg38
S'left'
p4094
sg59
g63
sS'trial_loop.thisN'
p4095
I29
sg33
S'21-nakd_banana_crunch.png'
p4096
sg64
g65
sS'trial_loop.thisIndex'
p4097
g60
(g99
S'\x1d\x00\x00\x00'
tRp4098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4099
I0
sg3642
S'1-treacle_cookies.png'
p4100
sS'block_loop.thisRepN'
p4101
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4102
I1
sg3647
S'1-treacle_cookies.png'
p4103
sg55
g11
sS'block_loop.thisTrial'
p4104
Nsg70
Vy
sS'block_loop.thisTrialN'
p4105
I0
sg39
F0.91655391015592613
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b\x1d\n\xba\x18'
tRp4106
sa(dp4107
S'trial_loop.thisTrialN'
p4108
I30
sg3633
g3705
sS'block_loop.thisIndex'
p4109
g3627
sg38
S'left'
p4110
sg59
g63
sS'trial_loop.thisN'
p4111
I30
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4112
g60
(g99
S'\x1e\x00\x00\x00'
tRp4113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4114
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4115
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4116
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4117
Nsg70
Vy
sS'block_loop.thisTrialN'
p4118
I0
sg39
F0.73334924183654948
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b#\t\xdfX'
tRp4119
sa(dp4120
S'trial_loop.thisTrialN'
p4121
I31
sg3633
g3908
sS'block_loop.thisIndex'
p4122
g3627
sg38
S'left'
p4123
sg59
g63
sS'trial_loop.thisN'
p4124
I31
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4125
g60
(g99
S'\x1f\x00\x00\x00'
tRp4126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4127
I0
sg3642
g3915
sS'block_loop.thisRepN'
p4128
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4129
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4130
Nsg70
Vy
sS'block_loop.thisTrialN'
p4131
I0
sg39
F0.73329991977516329
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b)\x06d\xb8'
tRp4132
sa(dp4133
S'trial_loop.thisTrialN'
p4134
I32
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4135
sS'block_loop.thisIndex'
p4136
g3627
sg38
S'left'
p4137
sg59
g63
sS'trial_loop.thisN'
p4138
I32
sg33
S'36-fig_rolls.png'
p4139
sg64
g65
sS'trial_loop.thisIndex'
p4140
g60
(g99
S' \x00\x00\x00'
tRp4141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4142
I0
sg3642
S'36-fig_rolls.png'
p4143
sS'block_loop.thisRepN'
p4144
I1
sg3645
S'34-hula_hoops_bbq_beef_redo.png'
p4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4146
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p4147
Nsg70
Vy
sS'block_loop.thisTrialN'
p4148
I0
sg39
F2.8331836565521371
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b/\x02\xea\x18'
tRp4149
sa(dp4150
S'trial_loop.thisTrialN'
p4151
I33
sg3633
g3671
sS'block_loop.thisIndex'
p4152
g3627
sg38
S'left'
p4153
sg59
g63
sS'trial_loop.thisN'
p4154
I33
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4155
g60
(g99
S'!\x00\x00\x00'
tRp4156
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4157
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4158
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4159
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4160
Nsg70
Vy
sS'block_loop.thisTrialN'
p4161
I0
sg39
F0.66699880657688482
sg34
g753
(S'\x07\xdf\x07\r\x11\x0b7\x00\xcf\x08'
tRp4162
sa(dp4163
S'trial_loop.thisTrialN'
p4164
I34
sg3633
g3972
sS'block_loop.thisIndex'
p4165
g3627
sg38
S'left'
p4166
sg59
g63
sS'trial_loop.thisN'
p4167
I34
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4168
g60
(g99
S'"\x00\x00\x00'
tRp4169
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4170
I0
sg3642
g3980
sS'block_loop.thisRepN'
p4171
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4172
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4173
Nsg70
Vy
sS'block_loop.thisTrialN'
p4174
I0
sg39
F0.79992176893210853
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c\x00\x0be\xf8'
tRp4175
sa(dp4176
S'trial_loop.thisTrialN'
p4177
I35
sg3633
S'45-chewy_nougat_redo.png'
p4178
sS'block_loop.thisIndex'
p4179
g3627
sg38
S'right'
p4180
sg59
g63
sS'trial_loop.thisN'
p4181
I35
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4182
g60
(g99
S'#\x00\x00\x00'
tRp4183
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4184
I0
sg3642
S'41-peanuts_redo.png'
p4185
sS'block_loop.thisRepN'
p4186
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4187
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4188
Nsg70
Vy
sS'block_loop.thisTrialN'
p4189
I0
sg39
F0.88329088214595686
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c\x06\x08\xe1p'
tRp4190
sa(dp4191
S'trial_loop.thisTrialN'
p4192
I36
sg3633
g4051
sS'block_loop.thisIndex'
p4193
g3627
sg38
S'left'
p4194
sg59
g63
sS'trial_loop.thisN'
p4195
I36
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4196
g60
(g99
S'$\x00\x00\x00'
tRp4197
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4198
I0
sg3642
g4058
sS'block_loop.thisRepN'
p4199
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4200
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p4201
Nsg70
Vy
sS'block_loop.thisTrialN'
p4202
I0
sg39
F1.1499356532367528
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c\x0c\x07\x89\xb0'
tRp4203
sa(dp4204
S'trial_loop.thisTrialN'
p4205
I37
sg3633
g3972
sS'block_loop.thisIndex'
p4206
g3627
sg38
S'left'
p4207
sg59
g63
sS'trial_loop.thisN'
p4208
I37
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4209
g60
(g99
S'%\x00\x00\x00'
tRp4210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4211
I0
sg3642
g3980
sS'block_loop.thisRepN'
p4212
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4213
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4214
Nsg70
Vy
sS'block_loop.thisTrialN'
p4215
I0
sg39
F1.3332076048354793
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c\x12\n{\x98'
tRp4216
sa(dp4217
S'trial_loop.thisTrialN'
p4218
I38
sg3633
g3863
sS'block_loop.thisIndex'
p4219
g3627
sg38
S'right'
p4220
sg59
g63
sS'trial_loop.thisN'
p4221
I38
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4222
g60
(g99
S'&\x00\x00\x00'
tRp4223
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4224
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4225
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4226
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p4227
Nsg70
Vy
sS'block_loop.thisTrialN'
p4228
I0
sg39
F1.1999972630510456
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c\x19\x00\xcb '
tRp4229
sa(dp4230
S'trial_loop.thisTrialN'
p4231
I39
sg3633
S'36-fig_rolls.png'
p4232
sS'block_loop.thisIndex'
p4233
g3627
sg38
S'right'
p4234
sg59
g63
sS'trial_loop.thisN'
p4235
I39
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p4236
g60
(g99
S"'\x00\x00\x00"
tRp4237
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4238
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4239
sS'block_loop.thisRepN'
p4240
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4241
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p4242
Nsg70
Vy
sS'block_loop.thisTrialN'
p4243
I0
sg39
F1.2999819247488631
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c\x1f\x04t\xa0'
tRp4244
sa(dp4245
S'trial_loop.thisTrialN'
p4246
I40
sg3633
S'22-daim.png'
p4247
sS'block_loop.thisIndex'
p4248
g3627
sg38
S'left'
p4249
sg59
g63
sS'trial_loop.thisN'
p4250
I40
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4251
g60
(g99
S'(\x00\x00\x00'
tRp4252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4253
I0
sg3642
S'7-olives.png'
p4254
sS'block_loop.thisRepN'
p4255
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4256
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4257
Nsg70
Vy
sS'block_loop.thisTrialN'
p4258
I0
sg39
F0.83318878832506016
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c%\t\x8dP'
tRp4259
sa(dp4260
S'trial_loop.thisTrialN'
p4261
I41
sg3633
g3989
sS'block_loop.thisIndex'
p4262
g3627
sg38
S'right'
p4263
sg59
g63
sS'trial_loop.thisN'
p4264
I41
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p4265
g60
(g99
S')\x00\x00\x00'
tRp4266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4267
I0
sg3642
g3996
sS'block_loop.thisRepN'
p4268
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4269
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vy
sS'block_loop.thisTrialN'
p4271
I0
sg39
F0.98323848101790645
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c+\x07}\xf8'
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
g3756
sS'block_loop.thisIndex'
p4275
g3627
sg38
S'left'
p4276
sg59
g63
sS'trial_loop.thisN'
p4277
I42
sg33
g3767
sg64
g65
sS'trial_loop.thisIndex'
p4278
g60
(g99
S'*\x00\x00\x00'
tRp4279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4280
I0
sg3642
g3764
sS'block_loop.thisRepN'
p4281
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4282
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4283
Nsg70
Vy
sS'block_loop.thisTrialN'
p4284
I0
sg39
F0.78334812995308312
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c1\x07\x95h'
tRp4285
sa(dp4286
S'trial_loop.thisTrialN'
p4287
I43
sg3633
g4135
sS'block_loop.thisIndex'
p4288
g3627
sg38
S'left'
p4289
sg59
g63
sS'trial_loop.thisN'
p4290
I43
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p4291
g60
(g99
S'+\x00\x00\x00'
tRp4292
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4293
I0
sg3642
g4143
sS'block_loop.thisRepN'
p4294
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4295
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p4296
Nsg70
Vy
sS'block_loop.thisTrialN'
p4297
I0
sg39
F1.9498936296986358
sg34
g753
(S'\x07\xdf\x07\r\x11\x0c7\x04\xd2`'
tRp4298
sa(dp4299
S'trial_loop.thisTrialN'
p4300
I44
sg3633
S'25-kitkat.png'
p4301
sS'block_loop.thisIndex'
p4302
g3627
sg38
S'left'
p4303
sg59
g63
sS'trial_loop.thisN'
p4304
I44
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4305
g60
(g99
S',\x00\x00\x00'
tRp4306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4307
I0
sg3642
S'31-hobnobs.png'
p4308
sS'block_loop.thisRepN'
p4309
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4310
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4311
Nsg70
Vy
sS'block_loop.thisTrialN'
p4312
I0
sg39
F0.78330222907243297
sg34
g753
(S'\x07\xdf\x07\r\x11\r\x02\x04\xa7h'
tRp4313
sa(dp4314
S'trial_loop.thisTrialN'
p4315
I45
sg3633
g3688
sS'block_loop.thisIndex'
p4316
g3627
sg38
S'right'
p4317
sg59
g63
sS'trial_loop.thisN'
p4318
I45
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4319
g60
(g99
S'-\x00\x00\x00'
tRp4320
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4321
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4322
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4323
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4324
Nsg70
Vy
sS'block_loop.thisTrialN'
p4325
I0
sg39
F1.0666064538345381
sg34
g753
(S'\x07\xdf\x07\r\x11\r\x08\x01\xe4`'
tRp4326
sa(dp4327
S'trial_loop.thisTrialN'
p4328
I46
sg3633
g4092
sS'block_loop.thisIndex'
p4329
g3627
sg38
S'left'
p4330
sg59
g63
sS'trial_loop.thisN'
p4331
I46
sg33
g4096
sg64
g65
sS'trial_loop.thisIndex'
p4332
g60
(g99
S'.\x00\x00\x00'
tRp4333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4334
I0
sg3642
g4100
sS'block_loop.thisRepN'
p4335
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4336
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p4337
Nsg70
Vy
sS'block_loop.thisTrialN'
p4338
I0
sg39
F1.0665291921068274
sg34
g753
(S'\x07\xdf\x07\r\x11\r\x0e\x03g\x18'
tRp4339
sa(dp4340
S'trial_loop.thisTrialN'
p4341
I47
sg3633
S'2-steamed_puddings.png'
p4342
sS'block_loop.thisIndex'
p4343
g3627
sg38
S'left'
p4344
sg59
g63
sS'trial_loop.thisN'
p4345
I47
sg33
S'2-steamed_puddings.png'
p4346
sg64
g65
sS'trial_loop.thisIndex'
p4347
g60
(g99
S'/\x00\x00\x00'
tRp4348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4349
I0
sg3642
S'20-fruit_pastilles.png'
p4350
sS'block_loop.thisRepN'
p4351
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4352
I1
sg3647
S'20-fruit_pastilles.png'
p4353
sg55
g11
sS'block_loop.thisTrial'
p4354
Nsg70
Vy
sS'block_loop.thisTrialN'
p4355
I0
sg39
F0.86657982562246616
sg34
g753
(S'\x07\xdf\x07\r\x11\r\x14\x04\xed\xb8'
tRp4356
sa(dp4357
S'trial_loop.thisTrialN'
p4358
I48
sg3633
g3923
sS'block_loop.thisIndex'
p4359
g3627
sg38
S'left'
p4360
sg59
g63
sS'trial_loop.thisN'
p4361
I48
sg33
g3934
sg64
g65
sS'trial_loop.thisIndex'
p4362
g60
(g99
S'0\x00\x00\x00'
tRp4363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4364
I0
sg3642
g3931
sS'block_loop.thisRepN'
p4365
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4366
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p4367
Nsg70
Vy
sS'block_loop.thisTrialN'
p4368
I0
sg39
F0.7332754012895748
sg34
g753
(S'\x07\xdf\x07\r\x11\r\x1a\x03[`'
tRp4369
sa(dp4370
S'trial_loop.thisTrialN'
p4371
I49
sg3633
g3739
sS'block_loop.thisIndex'
p4372
g3627
sg38
S'left'
p4373
sg59
g63
sS'trial_loop.thisN'
p4374
I49
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p4375
g60
(g99
S'1\x00\x00\x00'
tRp4376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4377
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4378
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4379
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p4380
Nsg70
Vy
sS'block_loop.thisTrialN'
p4381
I0
sg39
F1.0166588834727008
sg34
g753
(S'\x07\xdf\x07\r\x11\r\x1f\x0f#\x00'
tRp4382
sa(dp4383
S'trial_loop.thisTrialN'
p4384
I50
sg3633
g4021
sS'block_loop.thisIndex'
p4385
g3627
sg38
S'left'
p4386
sg59
g63
sS'trial_loop.thisN'
p4387
I50
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p4388
g60
(g99
S'2\x00\x00\x00'
tRp4389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4390
I0
sg3642
g4029
sS'block_loop.thisRepN'
p4391
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4392
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4393
Nsg70
Vy
sS'block_loop.thisTrialN'
p4394
I0
sg39
F0.78287144503337913
sg34
g753
(S'\x07\xdf\x07\r\x11\r&\x00qH'
tRp4395
sa(dp4396
S'trial_loop.thisTrialN'
p4397
I51
sg3633
g3989
sS'block_loop.thisIndex'
p4398
g3627
sg38
S'right'
p4399
sg59
g63
sS'trial_loop.thisN'
p4400
I51
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p4401
g60
(g99
S'3\x00\x00\x00'
tRp4402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4403
I0
sg3642
g3996
sS'block_loop.thisRepN'
p4404
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4405
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p4406
Nsg70
Vy
sS'block_loop.thisTrialN'
p4407
I0
sg39
F0.84989015149403713
sg34
g753
(S'\x07\xdf\x07\r\x11\r+\x0c\xf0\x80'
tRp4408
sa(dp4409
S'trial_loop.thisTrialN'
p4410
I52
sg3633
g3893
sS'block_loop.thisIndex'
p4411
g3627
sg38
S'left'
p4412
sg59
g63
sS'trial_loop.thisN'
p4413
I52
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4414
g60
(g99
S'4\x00\x00\x00'
tRp4415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4416
I0
sg3642
g3900
sS'block_loop.thisRepN'
p4417
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4418
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4419
Nsg70
Vy
sS'block_loop.thisTrialN'
p4420
I0
sg39
F1.899706861582672
sg34
g753
(S'\x07\xdf\x07\r\x11\r1\x0b\x1f\xa8'
tRp4421
sa(dp4422
S'trial_loop.thisTrialN'
p4423
I53
sg3633
g4004
sS'block_loop.thisIndex'
p4424
g3627
sg38
S'right'
p4425
sg59
g63
sS'trial_loop.thisN'
p4426
I53
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4427
g60
(g99
S'5\x00\x00\x00'
tRp4428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4429
I0
sg3642
g4012
sS'block_loop.thisRepN'
p4430
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4431
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4432
Nsg70
Vy
sS'block_loop.thisTrialN'
p4433
I0
sg39
F0.98327696933120023
sg34
g753
(S'\x07\xdf\x07\r\x11\r8\n=\x18'
tRp4434
sa(dp4435
S'trial_loop.thisTrialN'
p4436
I54
sg3633
g3634
sS'block_loop.thisIndex'
p4437
g3627
sg38
S'right'
p4438
sg59
g63
sS'trial_loop.thisN'
p4439
I54
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4440
g60
(g99
S'6\x00\x00\x00'
tRp4441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4442
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4443
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4444
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4445
Nsg70
Vy
sS'block_loop.thisTrialN'
p4446
I0
sg39
F1.9168062224489404
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e\x02\nT\x88'
tRp4447
sa(dp4448
S'trial_loop.thisTrialN'
p4449
I55
sg3633
g3790
sS'block_loop.thisIndex'
p4450
g3627
sg38
S'left'
p4451
sg59
g63
sS'trial_loop.thisN'
p4452
I55
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p4453
g60
(g99
S'7\x00\x00\x00'
tRp4454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4455
I0
sg3642
g3798
sS'block_loop.thisRepN'
p4456
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4457
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p4458
Nsg70
Vy
sS'block_loop.thisTrialN'
p4459
I0
sg39
F0.71665557632877608
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e\t\t\xb0x'
tRp4460
sa(dp4461
S'trial_loop.thisTrialN'
p4462
I56
sg3633
g4301
sS'block_loop.thisIndex'
p4463
g3627
sg38
S'left'
p4464
sg59
g63
sS'trial_loop.thisN'
p4465
I56
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4466
g60
(g99
S'8\x00\x00\x00'
tRp4467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4468
I0
sg3642
g4308
sS'block_loop.thisRepN'
p4469
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4470
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p4471
Nsg70
Vy
sS'block_loop.thisTrialN'
p4472
I0
sg39
F1.0665816502551024
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e\x0f\x05\xf7X'
tRp4473
sa(dp4474
S'trial_loop.thisTrialN'
p4475
I57
sg3633
g3654
sS'block_loop.thisIndex'
p4476
g3627
sg38
S'right'
p4477
sg59
g63
sS'trial_loop.thisN'
p4478
I57
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4479
g60
(g99
S'9\x00\x00\x00'
tRp4480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4481
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4482
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4483
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4484
Nsg70
Vy
sS'block_loop.thisTrialN'
p4485
I0
sg39
F1.2832269630343944
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e\x15\x07}\xf8'
tRp4486
sa(dp4487
S'trial_loop.thisTrialN'
p4488
I58
sg3633
g3989
sS'block_loop.thisIndex'
p4489
g3627
sg38
S'right'
p4490
sg59
g63
sS'trial_loop.thisN'
p4491
I58
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p4492
g60
(g99
S':\x00\x00\x00'
tRp4493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4494
I0
sg3642
g3996
sS'block_loop.thisRepN'
p4495
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4496
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p4497
Nsg70
Vy
sS'block_loop.thisTrialN'
p4498
I0
sg39
F0.99992844024382066
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e\x1b\x0c\x19\xa8'
tRp4499
sa(dp4500
S'trial_loop.thisTrialN'
p4501
I59
sg3633
g4092
sS'block_loop.thisIndex'
p4502
g3627
sg38
S'left'
p4503
sg59
g63
sS'trial_loop.thisN'
p4504
I59
sg33
g4096
sg64
g65
sS'trial_loop.thisIndex'
p4505
g60
(g99
S';\x00\x00\x00'
tRp4506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4507
I0
sg3642
g4100
sS'block_loop.thisRepN'
p4508
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4509
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p4510
Nsg70
Vy
sS'block_loop.thisTrialN'
p4511
I0
sg39
F0.8836178902820393
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e!\x0c\xaa0'
tRp4512
sa(dp4513
S'trial_loop.thisTrialN'
p4514
I60
sg3633
g3822
sS'block_loop.thisIndex'
p4515
g3627
sg38
S'right'
p4516
sg59
g63
sS'trial_loop.thisN'
p4517
I60
sg33
g3767
sg64
g65
sS'trial_loop.thisIndex'
p4518
g60
(g99
S'<\x00\x00\x00'
tRp4519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4520
I0
sg3642
g3829
sS'block_loop.thisRepN'
p4521
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4522
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4523
Nsg70
Vy
sS'block_loop.thisTrialN'
p4524
I0
sg39
F0.73324090435562539
sg34
g753
(S"\x07\xdf\x07\r\x11\x0e'\x0b\x90\xf0"
tRp4525
sa(dp4526
S'trial_loop.thisTrialN'
p4527
I61
sg3633
S'26-walkers_smoky_bacon.png'
p4528
sS'block_loop.thisIndex'
p4529
g3627
sg38
S'right'
p4530
sg59
g63
sS'trial_loop.thisN'
p4531
I61
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p4532
g60
(g99
S'=\x00\x00\x00'
tRp4533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4534
I0
sg3642
S'44-crunch.png'
p4535
sS'block_loop.thisRepN'
p4536
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4537
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p4538
Nsg70
Vy
sS'block_loop.thisTrialN'
p4539
I0
sg39
F2.0163866142793267
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e-\x07\xdb\xb8'
tRp4540
sa(dp4541
S'trial_loop.thisTrialN'
p4542
I62
sg3633
g4247
sS'block_loop.thisIndex'
p4543
g3627
sg38
S'left'
p4544
sg59
g63
sS'trial_loop.thisN'
p4545
I62
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4546
g60
(g99
S'>\x00\x00\x00'
tRp4547
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4548
I0
sg3642
g4254
sS'block_loop.thisRepN'
p4549
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4550
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4551
Nsg70
Vy
sS'block_loop.thisTrialN'
p4552
I0
sg39
F0.83340916956876754
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e4\x08\xa2\xf0'
tRp4553
sa(dp4554
S'trial_loop.thisTrialN'
p4555
I63
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4556
sS'block_loop.thisIndex'
p4557
g3627
sg38
S'left'
p4558
sg59
g63
sS'trial_loop.thisN'
p4559
I63
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4560
sg64
g65
sS'trial_loop.thisIndex'
p4561
g60
(g99
S'?\x00\x00\x00'
tRp4562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4563
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4564
sS'block_loop.thisRepN'
p4565
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4566
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p4567
sg55
g11
sS'block_loop.thisTrial'
p4568
Nsg70
Vy
sS'block_loop.thisTrialN'
p4569
I0
sg39
F0.96661609016882721
sg34
g753
(S'\x07\xdf\x07\r\x11\x0e:\x06\x93\x98'
tRp4570
sa(dp4571
S'trial_loop.thisTrialN'
p4572
I64
sg3633
S'35-raisins.png'
p4573
sS'block_loop.thisIndex'
p4574
g3627
sg38
S'left'
p4575
sg59
g63
sS'trial_loop.thisN'
p4576
I64
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4577
g60
(g99
S'@\x00\x00\x00'
tRp4578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4579
I0
sg3642
S'49-yorkie.png'
p4580
sS'block_loop.thisRepN'
p4581
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4582
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p4583
Nsg70
Vy
sS'block_loop.thisTrialN'
p4584
I0
sg39
F0.95043218102000537
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f\x04\x06\xab\x08'
tRp4585
sa(dp4586
S'trial_loop.thisTrialN'
p4587
I65
sg3633
g3957
sS'block_loop.thisIndex'
p4588
g3627
sg38
S'right'
p4589
sg59
g63
sS'trial_loop.thisN'
p4590
I65
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4591
g60
(g99
S'A\x00\x00\x00'
tRp4592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4593
I0
sg3642
g3964
sS'block_loop.thisRepN'
p4594
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4595
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4596
Nsg70
Vy
sS'block_loop.thisTrialN'
p4597
I0
sg39
F0.74988781368665514
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f\n\x06I`'
tRp4598
sa(dp4599
S'trial_loop.thisTrialN'
p4600
I66
sg3633
g3773
sS'block_loop.thisIndex'
p4601
g3627
sg38
S'right'
p4602
sg59
g63
sS'trial_loop.thisN'
p4603
I66
sg33
g3784
sg64
g65
sS'trial_loop.thisIndex'
p4604
g60
(g99
S'B\x00\x00\x00'
tRp4605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4606
I0
sg3642
g3781
sS'block_loop.thisRepN'
p4607
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4608
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p4609
Nsg70
Vy
sS'block_loop.thisTrialN'
p4610
I0
sg39
F1.1664747952854668
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f\x10\x03\r@'
tRp4611
sa(dp4612
S'trial_loop.thisTrialN'
p4613
I67
sg3633
g4178
sS'block_loop.thisIndex'
p4614
g3627
sg38
S'right'
p4615
sg59
g63
sS'trial_loop.thisN'
p4616
I67
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4617
g60
(g99
S'C\x00\x00\x00'
tRp4618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4619
I0
sg3642
g4185
sS'block_loop.thisRepN'
p4620
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4621
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4622
Nsg70
Vy
sS'block_loop.thisTrialN'
p4623
I0
sg39
F0.94990845482971054
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f\x16\x05\xff('
tRp4624
sa(dp4625
S'trial_loop.thisTrialN'
p4626
I68
sg3633
S'1-treacle_cookies.png'
p4627
sS'block_loop.thisIndex'
p4628
g3627
sg38
S'right'
p4629
sg59
g63
sS'trial_loop.thisN'
p4630
I68
sg33
g4096
sg64
g65
sS'trial_loop.thisIndex'
p4631
g60
(g99
S'D\x00\x00\x00'
tRp4632
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4633
I0
sg3642
S'21-nakd_banana_crunch.png'
p4634
sS'block_loop.thisRepN'
p4635
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vy
sS'block_loop.thisTrialN'
p4638
I0
sg39
F0.86659693154069828
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f\x1c\x05\xdc\x00'
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
S'40-sardines.png'
p4642
sS'block_loop.thisIndex'
p4643
g3627
sg38
S'right'
p4644
sg59
g63
sS'trial_loop.thisN'
p4645
I69
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4646
g60
(g99
S'E\x00\x00\x00'
tRp4647
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4648
I0
sg3642
S'5-pineapple.png'
p4649
sS'block_loop.thisRepN'
p4650
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4651
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4652
Nsg70
Vy
sS'block_loop.thisTrialN'
p4653
I0
sg39
F1.1667060102772666
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f"\x04E\xc0'
tRp4654
sa(dp4655
S'trial_loop.thisTrialN'
p4656
I70
sg3633
g3940
sS'block_loop.thisIndex'
p4657
g3627
sg38
S'right'
p4658
sg59
g63
sS'trial_loop.thisN'
p4659
I70
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p4660
g60
(g99
S'F\x00\x00\x00'
tRp4661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4662
I0
sg3642
g3948
sS'block_loop.thisRepN'
p4663
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4664
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p4665
Nsg70
Vy
sS'block_loop.thisTrialN'
p4666
I0
sg39
F3.1332696423014568
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f(\x07v('
tRp4667
sa(dp4668
S'trial_loop.thisTrialN'
p4669
I71
sg3633
g3722
sS'block_loop.thisIndex'
p4670
g3627
sg38
S'left'
p4671
sg59
g63
sS'trial_loop.thisN'
p4672
I71
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4673
g60
(g99
S'G\x00\x00\x00'
tRp4674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4675
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4676
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4677
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4678
Nsg70
Vy
sS'block_loop.thisTrialN'
p4679
I0
sg39
F0.73326827382334159
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f0\t\xe3@'
tRp4680
sa(dp4681
S'trial_loop.thisTrialN'
p4682
I72
sg3633
S'6-sour_patch_kids.png'
p4683
sS'block_loop.thisIndex'
p4684
g3627
sg38
S'right'
p4685
sg59
g63
sS'trial_loop.thisN'
p4686
I72
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p4687
g60
(g99
S'H\x00\x00\x00'
tRp4688
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4689
I0
sg3642
S'38-maltesers.png'
p4690
sS'block_loop.thisRepN'
p4691
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4692
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4693
Nsg70
Vy
sS'block_loop.thisTrialN'
p4694
I0
sg39
F0.76638048465611064
sg34
g753
(S'\x07\xdf\x07\r\x11\x0f6\x06h\xa0'
tRp4695
sa(dp4696
S'trial_loop.thisTrialN'
p4697
I73
sg3633
g4135
sS'block_loop.thisIndex'
p4698
g3627
sg38
S'left'
p4699
sg59
g63
sS'trial_loop.thisN'
p4700
I73
sg33
g4139
sg64
g65
sS'trial_loop.thisIndex'
p4701
g60
(g99
S'I\x00\x00\x00'
tRp4702
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4703
I0
sg3642
g4143
sS'block_loop.thisRepN'
p4704
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4705
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p4706
Nsg70
Vy
sS'block_loop.thisTrialN'
p4707
I0
sg39
F1.8332167279913847
sg34
g753
(S'\x07\xdf\x07\r\x11\x10\x00\x03g\x18'
tRp4708
sa(dp4709
S'trial_loop.thisTrialN'
p4710
I74
sg3633
g3972
sS'block_loop.thisIndex'
p4711
g3627
sg38
S'left'
p4712
sg59
g63
sS'trial_loop.thisN'
p4713
I74
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4714
g60
(g99
S'J\x00\x00\x00'
tRp4715
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4716
I0
sg3642
g3980
sS'block_loop.thisRepN'
p4717
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4718
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4719
Nsg70
Vy
sS'block_loop.thisTrialN'
p4720
I0
sg39
F0.86666763600078411
sg34
g753
(S'\x07\xdf\x07\r\x11\x10\x07\x01S\xd8'
tRp4721
sa(dp4722
S'trial_loop.thisTrialN'
p4723
I75
sg3633
g3790
sS'block_loop.thisIndex'
p4724
g3627
sg38
S'right'
p4725
sg59
g63
sS'trial_loop.thisN'
p4726
I75
sg33
g3794
sg64
g65
sS'trial_loop.thisIndex'
p4727
g60
(g99
S'K\x00\x00\x00'
tRp4728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4729
I0
sg3642
g3798
sS'block_loop.thisRepN'
p4730
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4731
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p4732
Nsg70
Vy
sS'block_loop.thisTrialN'
p4733
I0
sg39
F1.6499028668949904
sg34
g753
(S'\x07\xdf\x07\r\x11\x10\x0c\x0f\x03\xc0'
tRp4734
sa(dp4735
S'trial_loop.thisTrialN'
p4736
I76
sg3633
g3654
sS'block_loop.thisIndex'
p4737
g3627
sg38
S'right'
p4738
sg59
g63
sS'trial_loop.thisN'
p4739
I76
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4740
g60
(g99
S'L\x00\x00\x00'
tRp4741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4742
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4743
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4744
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4745
Nsg70
Vy
sS'block_loop.thisTrialN'
p4746
I0
sg39
F0.94990674423388555
sg34
g753
(S'\x07\xdf\x07\r\x11\x10\x13\n\x16\x08'
tRp4747
sa(dp4748
S'trial_loop.thisTrialN'
p4749
I77
sg3633
g3722
sS'block_loop.thisIndex'
p4750
g3627
sg38
S'left'
p4751
sg59
g63
sS'trial_loop.thisN'
p4752
I77
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4753
g60
(g99
S'M\x00\x00\x00'
tRp4754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4755
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4756
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4757
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4758
Nsg70
Vy
sS'block_loop.thisTrialN'
p4759
I0
sg39
F0.70003033449756913
sg34
g753
(S'\x07\xdf\x07\r\x11\x10\x19\t\xee\xf8'
tRp4760
sa(dp4761
S'trial_loop.thisTrialN'
p4762
I78
sg3633
g3705
sS'block_loop.thisIndex'
p4763
g3627
sg38
S'left'
p4764
sg59
g63
sS'trial_loop.thisN'
p4765
I78
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p4766
g60
(g99
S'N\x00\x00\x00'
tRp4767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4768
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4769
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4770
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4771
Nsg70
Vy
sS'block_loop.thisTrialN'
p4772
I0
sg39
F0.76658974705787841
sg34
g753
(S'\x07\xdf\x07\r\x11\x10\x1f\x05\xbc\xc0'
tRp4773
sa(dp4774
S'trial_loop.thisTrialN'
p4775
I79
sg3633
S'8-liquorice_catherine_wheels.png'
p4776
sS'block_loop.thisIndex'
p4777
g3627
sg38
S'right'
p4778
sg59
g63
sS'trial_loop.thisN'
p4779
I79
sg33
g4567
sg64
g65
sS'trial_loop.thisIndex'
p4780
g60
(g99
S'O\x00\x00\x00'
tRp4781
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4782
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4783
sS'block_loop.thisRepN'
p4784
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4785
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p4786
Nsg70
Vy
sS'block_loop.thisTrialN'
p4787
I0
sg39
F0.86665908303984907
sg34
g753
(S'\x07\xdf\x07\r\x11\x10%\x02\xbf '
tRp4788
sa(dp4789
S'trial_loop.thisTrialN'
p4790
I80
sg3633
g4528
sS'block_loop.thisIndex'
p4791
g3627
sg38
S'right'
p4792
sg59
g63
sS'trial_loop.thisN'
p4793
I80
sg33
g3794
sg64
g65
sS'trial_loop.thisIndex'
p4794
g60
(g99
S'P\x00\x00\x00'
tRp4795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4796
I0
sg3642
g4535
sS'block_loop.thisRepN'
p4797
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4798
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p4799
Nsg70
Vy
sS'block_loop.thisTrialN'
p4800
I0
sg39
F1.9665587853451143
sg34
g753
(S'\x07\xdf\x07\r\x11\x10+\x01(\xe0'
tRp4801
sa(dp4802
S'trial_loop.thisTrialN'
p4803
I81
sg3633
g4683
sS'block_loop.thisIndex'
p4804
g3627
sg38
S'right'
p4805
sg59
g63
sS'trial_loop.thisN'
p4806
I81
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p4807
g60
(g99
S'Q\x00\x00\x00'
tRp4808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4809
I0
sg3642
g4690
sS'block_loop.thisRepN'
p4810
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4811
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vy
sS'block_loop.thisTrialN'
p4813
I0
sg39
F1.1164297211907979
sg34
g753
(S'\x07\xdf\x07\r\x11\x102\x01<h'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
g4051
sS'block_loop.thisIndex'
p4817
g3627
sg38
S'left'
p4818
sg59
g63
sS'trial_loop.thisN'
p4819
I82
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4820
g60
(g99
S'R\x00\x00\x00'
tRp4821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4822
I0
sg3642
g4058
sS'block_loop.thisRepN'
p4823
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4824
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p4825
Nsg70
Vy
sS'block_loop.thisTrialN'
p4826
I0
sg39
F1.0165804813477735
sg34
g753
(S'\x07\xdf\x07\r\x11\x108\x03v\xb8'
tRp4827
sa(dp4828
S'trial_loop.thisTrialN'
p4829
I83
sg3633
g3756
sS'block_loop.thisIndex'
p4830
g3627
sg38
S'left'
p4831
sg59
g63
sS'trial_loop.thisN'
p4832
I83
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4833
g60
(g99
S'S\x00\x00\x00'
tRp4834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4835
I0
sg3642
g3764
sS'block_loop.thisRepN'
p4836
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4837
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4838
Nsg70
Vy
sS'block_loop.thisTrialN'
p4839
I0
sg39
F1.4333236969978316
sg34
g753
(S'\x07\xdf\x07\r\x11\x11\x02\x04E\xc0'
tRp4840
sa(dp4841
S'trial_loop.thisTrialN'
p4842
I84
sg3633
g4021
sS'block_loop.thisIndex'
p4843
g3627
sg38
S'left'
p4844
sg59
g63
sS'trial_loop.thisN'
p4845
I84
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p4846
g60
(g99
S'T\x00\x00\x00'
tRp4847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4848
I0
sg3642
g4029
sS'block_loop.thisRepN'
p4849
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4850
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4851
Nsg70
Vy
sS'block_loop.thisTrialN'
p4852
I0
sg39
F0.8166946918645408
sg34
g753
(S'\x07\xdf\x07\r\x11\x11\x08\x0b\x81P'
tRp4853
sa(dp4854
S'trial_loop.thisTrialN'
p4855
I85
sg3633
g4232
sS'block_loop.thisIndex'
p4856
g3627
sg38
S'left'
p4857
sg59
g63
sS'trial_loop.thisN'
p4858
I85
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p4859
g60
(g99
S'U\x00\x00\x00'
tRp4860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4861
I0
sg3642
g4239
sS'block_loop.thisRepN'
p4862
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4863
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p4864
Nsg70
Vy
sS'block_loop.thisTrialN'
p4865
I0
sg39
F1.1831792945413326
sg34
g753
(S'\x07\xdf\x07\r\x11\x11\x0e\t7`'
tRp4866
sa(dp4867
S'trial_loop.thisTrialN'
p4868
I86
sg3633
S'23-crunchie_redo.png'
p4869
sS'block_loop.thisIndex'
p4870
g3627
sg38
S'right'
p4871
sg59
g63
sS'trial_loop.thisN'
p4872
I86
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p4873
g60
(g99
S'V\x00\x00\x00'
tRp4874
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4875
I0
sg3642
S'33-ambrosia_rice.png'
p4876
sS'block_loop.thisRepN'
p4877
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4878
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p4879
Nsg70
Vy
sS'block_loop.thisTrialN'
p4880
I0
sg39
F0.8000067283246608
sg34
g753
(S'\x07\xdf\x07\r\x11\x11\x14\x0cg\xc8'
tRp4881
sa(dp4882
S'trial_loop.thisTrialN'
p4883
I87
sg3633
g3989
sS'block_loop.thisIndex'
p4884
g3627
sg38
S'right'
p4885
sg59
g63
sS'trial_loop.thisN'
p4886
I87
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4887
g60
(g99
S'W\x00\x00\x00'
tRp4888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4889
I0
sg3642
g3996
sS'block_loop.thisRepN'
p4890
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4891
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p4892
Nsg70
Vy
sS'block_loop.thisTrialN'
p4893
I0
sg39
F0.7999374493592768
sg34
g753
(S'\x07\xdf\x07\r\x11\x11\x1a\t\xdfX'
tRp4894
sa(dp4895
S'trial_loop.thisTrialN'
p4896
I88
sg3633
g3671
sS'block_loop.thisIndex'
p4897
g3627
sg38
S'left'
p4898
sg59
g63
sS'trial_loop.thisN'
p4899
I88
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4900
g60
(g99
S'X\x00\x00\x00'
tRp4901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4902
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4903
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4904
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4905
Nsg70
Vy
sS'block_loop.thisTrialN'
p4906
I0
sg39
F1.0999233654874843
sg34
g753
(S'\x07\xdf\x07\r\x11\x11 \x07Z\xd0'
tRp4907
sa(dp4908
S'trial_loop.thisTrialN'
p4909
I89
sg3633
g4627
sS'block_loop.thisIndex'
p4910
g3627
sg38
S'right'
p4911
sg59
g63
sS'trial_loop.thisN'
p4912
I89
sg33
g4096
sg64
g65
sS'trial_loop.thisIndex'
p4913
g60
(g99
S'Y\x00\x00\x00'
tRp4914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4915
I0
sg3642
g4634
sS'block_loop.thisRepN'
p4916
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4917
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p4918
Nsg70
Vy
sS'block_loop.thisTrialN'
p4919
I0
sg39
F0.8998950266832253
sg34
g753
(S'\x07\xdf\x07\r\x11\x11&\tZ\x88'
tRp4920
sa(dp4921
S'trial_loop.thisTrialN'
p4922
I90
sg3633
g4642
sS'block_loop.thisIndex'
p4923
g3627
sg38
S'right'
p4924
sg59
g63
sS'trial_loop.thisN'
p4925
I90
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4926
g60
(g99
S'Z\x00\x00\x00'
tRp4927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4928
I0
sg3642
g4649
sS'block_loop.thisRepN'
p4929
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4930
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4931
Nsg70
Vy
sS'block_loop.thisTrialN'
p4932
I0
sg39
F0.81653817271217122
sg34
g753
(S'\x07\xdf\x07\r\x11\x11,\x08{\xe0'
tRp4933
sa(dp4934
S'trial_loop.thisTrialN'
p4935
I91
sg3633
g4683
sS'block_loop.thisIndex'
p4936
g3627
sg38
S'right'
p4937
sg59
g63
sS'trial_loop.thisN'
p4938
I91
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p4939
g60
(g99
S'[\x00\x00\x00'
tRp4940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4941
I0
sg3642
g4690
sS'block_loop.thisRepN'
p4942
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4943
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4944
Nsg70
Vy
sS'block_loop.thisTrialN'
p4945
I0
sg39
F0.74962837392740767
sg34
g753
(S'\x07\xdf\x07\r\x11\x112\x061\xf0'
tRp4946
sa(dp4947
S'trial_loop.thisTrialN'
p4948
I92
sg3633
g3790
sS'block_loop.thisIndex'
p4949
g3627
sg38
S'left'
p4950
sg59
g63
sS'trial_loop.thisN'
p4951
I92
sg33
g3794
sg64
g65
sS'trial_loop.thisIndex'
p4952
g60
(g99
S'\\\x00\x00\x00'
tRp4953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4954
I0
sg3642
g3798
sS'block_loop.thisRepN'
p4955
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4956
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p4957
Nsg70
Vy
sS'block_loop.thisTrialN'
p4958
I0
sg39
F1.7332215176465979
sg34
g753
(S'\x07\xdf\x07\r\x11\x118\x02\xb7P'
tRp4959
sa(dp4960
S'trial_loop.thisTrialN'
p4961
I93
sg3633
g3863
sS'block_loop.thisIndex'
p4962
g3627
sg38
S'right'
p4963
sg59
g63
sS'trial_loop.thisN'
p4964
I93
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4965
g60
(g99
S']\x00\x00\x00'
tRp4966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4967
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4968
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4969
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p4970
Nsg70
Vy
sS'block_loop.thisTrialN'
p4971
I0
sg39
F0.94986683042952791
sg34
g753
(S'\x07\xdf\x07\r\x11\x12\x02\x0e{\x08'
tRp4972
sa(dp4973
S'trial_loop.thisTrialN'
p4974
I94
sg3633
g4342
sS'block_loop.thisIndex'
p4975
g3627
sg38
S'left'
p4976
sg59
g63
sS'trial_loop.thisN'
p4977
I94
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p4978
g60
(g99
S'^\x00\x00\x00'
tRp4979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4980
I0
sg3642
g4350
sS'block_loop.thisRepN'
p4981
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4982
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vy
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.83328173047993914
sg34
g753
(S'\x07\xdf\x07\r\x11\x12\x08\x0eS\xf8'
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g4869
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'right'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g4876
sS'block_loop.thisRepN'
p4994
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vy
sS'block_loop.thisTrialN'
p4997
I0
sg39
F0.6999125887559785
sg34
g753
(S'\x07\xdf\x07\r\x11\x12\x0e\x0cH\x88'
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g4556
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'left'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g4560
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g4564
sS'block_loop.thisRepN'
p5007
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5008
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vy
sS'block_loop.thisTrialN'
p5010
I0
sg39
F1.649941070110799
sg34
g753
(S'\x07\xdf\x07\r\x11\x12\x14\x08\x16P'
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
g3807
sS'block_loop.thisIndex'
p5014
g3627
sg38
S'right'
p5015
sg59
g63
sS'trial_loop.thisN'
p5016
I97
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5017
g60
(g99
S'a\x00\x00\x00'
tRp5018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5019
I0
sg3642
g3814
sS'block_loop.thisRepN'
p5020
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5021
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p5022
Nsg70
Vy
sS'block_loop.thisTrialN'
p5023
I0
sg39
F0.99985859107619035
sg34
g753
(S'\x07\xdf\x07\r\x11\x12\x1b\x03c0'
tRp5024
sa(dp5025
S'trial_loop.thisTrialN'
p5026
I98
sg3633
g4232
sS'block_loop.thisIndex'
p5027
g3627
sg38
S'right'
p5028
sg59
g63
sS'trial_loop.thisN'
p5029
I98
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5030
g60
(g99
S'b\x00\x00\x00'
tRp5031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5032
I0
sg3642
g4239
sS'block_loop.thisRepN'
p5033
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5034
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vy
sS'block_loop.thisTrialN'
p5036
I0
sg39
F2.3499140997810173
sg34
g753
(S'\x07\xdf\x07\r\x11\x12!\x03\xb9 '
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
g3688
sS'block_loop.thisIndex'
p5040
g3627
sg38
S'right'
p5041
sg59
g63
sS'trial_loop.thisN'
p5042
I99
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5043
g60
(g99
S'c\x00\x00\x00'
tRp5044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5045
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5046
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5047
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5048
Nsg70
Vy
sS'block_loop.thisTrialN'
p5049
I0
sg39
F1.017010695188219
sg34
g753
(S'\x07\xdf\x07\r\x11\x12(\t\xbc0'
tRp5050
sa(dp5051
S'trial_loop.thisTrialN'
p5052
I100
sg3633
g3923
sS'block_loop.thisIndex'
p5053
g3627
sg38
S'left'
p5054
sg59
g63
sS'trial_loop.thisN'
p5055
I100
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p5056
g60
(g99
S'd\x00\x00\x00'
tRp5057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5058
I0
sg3642
g3931
sS'block_loop.thisRepN'
p5059
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5060
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p5061
Nsg70
Vy
sS'block_loop.thisTrialN'
p5062
I0
sg39
F0.66663245482777711
sg34
g753
(S'\x07\xdf\x07\r\x11\x12.\nL\xb8'
tRp5063
sa(dp5064
S'trial_loop.thisTrialN'
p5065
I101
sg3633
g4627
sS'block_loop.thisIndex'
p5066
g3627
sg38
S'right'
p5067
sg59
g63
sS'trial_loop.thisN'
p5068
I101
sg33
g4096
sg64
g65
sS'trial_loop.thisIndex'
p5069
g60
(g99
S'e\x00\x00\x00'
tRp5070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5071
I0
sg3642
g4634
sS'block_loop.thisRepN'
p5072
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5073
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p5074
Nsg70
Vy
sS'block_loop.thisTrialN'
p5075
I0
sg39
F0.88317940857814392
sg34
g753
(S'\x07\xdf\x07\r\x11\x124\x05\xdf\xe8'
tRp5076
sa(dp5077
S'trial_loop.thisTrialN'
p5078
I102
sg3633
g3822
sS'block_loop.thisIndex'
p5079
g3627
sg38
S'right'
p5080
sg59
g63
sS'trial_loop.thisN'
p5081
I102
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5082
g60
(g99
S'f\x00\x00\x00'
tRp5083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5084
I0
sg3642
g3829
sS'block_loop.thisRepN'
p5085
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5086
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5087
Nsg70
Vy
sS'block_loop.thisTrialN'
p5088
I0
sg39
F0.71659256953353179
sg34
g753
(S'\x07\xdf\x07\r\x11\x12:\x04\x88('
tRp5089
sa(dp5090
S'trial_loop.thisTrialN'
p5091
I103
sg3633
g4135
sS'block_loop.thisIndex'
p5092
g3627
sg38
S'left'
p5093
sg59
g63
sS'trial_loop.thisN'
p5094
I103
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5095
g60
(g99
S'g\x00\x00\x00'
tRp5096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5097
I0
sg3642
g4143
sS'block_loop.thisRepN'
p5098
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5099
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p5100
Nsg70
Vy
sS'block_loop.thisTrialN'
p5101
I0
sg39
F1.6665363765896473
sg34
g753
(S'\x07\xdf\x07\r\x11\x13\x04\x00\xd2\xf0'
tRp5102
sa(dp5103
S'trial_loop.thisTrialN'
p5104
I104
sg3633
g3923
sS'block_loop.thisIndex'
p5105
g3627
sg38
S'left'
p5106
sg59
g63
sS'trial_loop.thisN'
p5107
I104
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p5108
g60
(g99
S'h\x00\x00\x00'
tRp5109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5110
I0
sg3642
g3931
sS'block_loop.thisRepN'
p5111
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5112
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p5113
Nsg70
Vy
sS'block_loop.thisTrialN'
p5114
I0
sg39
F0.69989519774389919
sg34
g753
(S'\x07\xdf\x07\r\x11\x13\n\x0bb\x10'
tRp5115
sa(dp5116
S'trial_loop.thisTrialN'
p5117
I105
sg3633
g3807
sS'block_loop.thisIndex'
p5118
g3627
sg38
S'right'
p5119
sg59
g63
sS'trial_loop.thisN'
p5120
I105
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5121
g60
(g99
S'i\x00\x00\x00'
tRp5122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5123
I0
sg3642
g3814
sS'block_loop.thisRepN'
p5124
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5125
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p5126
Nsg70
Vy
sS'block_loop.thisTrialN'
p5127
I0
sg39
F0.7333563693027827
sg34
g753
(S'\x07\xdf\x07\r\x11\x13\x10\x07nX'
tRp5128
sa(dp5129
S'trial_loop.thisTrialN'
p5130
I106
sg3633
g4869
sS'block_loop.thisIndex'
p5131
g3627
sg38
S'right'
p5132
sg59
g63
sS'trial_loop.thisN'
p5133
I106
sg33
g3934
sg64
g65
sS'trial_loop.thisIndex'
p5134
g60
(g99
S'j\x00\x00\x00'
tRp5135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5136
I0
sg3642
g4876
sS'block_loop.thisRepN'
p5137
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5138
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p5139
Nsg70
Vy
sS'block_loop.thisTrialN'
p5140
I0
sg39
F0.59999264445650624
sg34
g753
(S'\x07\xdf\x07\r\x11\x13\x16\x03\xb9 '
tRp5141
sa(dp5142
S'trial_loop.thisTrialN'
p5143
I107
sg3633
g3972
sS'block_loop.thisIndex'
p5144
g3627
sg38
S'left'
p5145
sg59
g63
sS'trial_loop.thisN'
p5146
I107
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5147
g60
(g99
S'k\x00\x00\x00'
tRp5148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5149
I0
sg3642
g3980
sS'block_loop.thisRepN'
p5150
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5151
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5152
Nsg70
Vy
sS'block_loop.thisTrialN'
p5153
I0
sg39
F0.96664602552482393
sg34
g753
(S'\x07\xdf\x07\r\x11\x13\x1b\rY\xf8'
tRp5154
sa(dp5155
S'trial_loop.thisTrialN'
p5156
I108
sg3633
g3654
sS'block_loop.thisIndex'
p5157
g3627
sg38
S'right'
p5158
sg59
g63
sS'trial_loop.thisN'
p5159
I108
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5160
g60
(g99
S'l\x00\x00\x00'
tRp5161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5162
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5163
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5164
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5165
Nsg70
Vy
sS'block_loop.thisTrialN'
p5166
I0
sg39
F0.83308501242208877
sg34
g753
(S'\x07\xdf\x07\r\x11\x13!\rqh'
tRp5167
sa(dp5168
S'trial_loop.thisTrialN'
p5169
I109
sg3633
S'20-fruit_pastilles.png'
p5170
sS'block_loop.thisIndex'
p5171
g3627
sg38
S'right'
p5172
sg59
g63
sS'trial_loop.thisN'
p5173
I109
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5174
g60
(g99
S'm\x00\x00\x00'
tRp5175
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5176
I0
sg3642
S'2-steamed_puddings.png'
p5177
sS'block_loop.thisRepN'
p5178
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vy
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.86658894877837156
sg34
g753
(S"\x07\xdf\x07\r\x11\x13'\x0be\xf8"
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4301
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'left'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4015
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4308
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vy
sS'block_loop.thisTrialN'
p5194
I0
sg39
F1.5666557758959243
sg34
g753
(S'\x07\xdf\x07\r\x11\x13-\t\xd3\xa0'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g3722
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'left'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vy
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.73331702569339541
sg34
g753
(S'\x07\xdf\x07\r\x11\x134\x03\xb1P'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g3908
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'left'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g3915
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vy
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.79992889639834175
sg34
g753
(S'\x07\xdf\x07\r\x11\x13:\x006\xb0'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4642
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'right'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4649
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vy
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.73331417470399174
sg34
g753
(S'\x07\xdf\x07\r\x11\x14\x03\x0c\xf4h'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g3940
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'right'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g3948
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vy
sS'block_loop.thisTrialN'
p5246
I0
sg39
F1.0332812743254181
sg34
g753
(S'\x07\xdf\x07\r\x11\x14\t\ty\xc8'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3634
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vy
sS'block_loop.thisTrialN'
p5259
I0
sg39
F1.849808898386982
sg34
g753
(S'\x07\xdf\x07\r\x11\x14\x0f\n\x83h'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g3940
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g3948
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vy
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.89991726437801844
sg34
g753
(S'\x07\xdf\x07\r\x11\x14\x16\x08\xae\xa8'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g3863
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'right'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g3871
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vy
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.84992293783943751
sg34
g753
(S'\x07\xdf\x07\r\x11\x14\x1c\x07\x95h'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g4247
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'left'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g4254
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vy
sS'block_loop.thisTrialN'
p5298
I0
sg39
F0.86657811503027915
sg34
g753
(S'\x07\xdf\x07\r\x11\x14"\x05\xc4\x90'
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g4178
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'right'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g4185
sS'block_loop.thisRepN'
p5308
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vy
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.78329282081904239
sg34
g753
(S'\x07\xdf\x07\r\x11\x14(\x0428'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g4232
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'right'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g4239
sS'block_loop.thisRepN'
p5321
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vy
sS'block_loop.thisTrialN'
p5324
I0
sg39
F0.96660668191543664
sg34
g753
(S'\x07\xdf\x07\r\x11\x14.\x01o0'
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g4342
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'left'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g4350
sS'block_loop.thisRepN'
p5334
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vy
sS'block_loop.thisTrialN'
p5337
I0
sg39
F0.76665703033359023
sg34
g753
(S'\x07\xdf\x07\r\x11\x144\x01\x86\xa0'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
g4051
sS'block_loop.thisIndex'
p5341
g3627
sg38
S'left'
p5342
sg59
g63
sS'trial_loop.thisN'
p5343
I122
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5344
g60
(g99
S'z\x00\x00\x00'
tRp5345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5346
I0
sg3642
g4058
sS'block_loop.thisRepN'
p5347
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5348
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p5349
Nsg70
Vy
sS'block_loop.thisTrialN'
p5350
I0
sg39
F0.91665084369378746
sg34
g753
(S'\x07\xdf\x07\r\x11\x149\r\xc7X'
tRp5351
sa(dp5352
S'trial_loop.thisTrialN'
p5353
I123
sg3633
g3654
sS'block_loop.thisIndex'
p5354
g3627
sg38
S'right'
p5355
sg59
g63
sS'trial_loop.thisN'
p5356
I123
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5357
g60
(g99
S'{\x00\x00\x00'
tRp5358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5359
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5360
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5361
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5362
Nsg70
Vy
sS'block_loop.thisTrialN'
p5363
I0
sg39
F0.78320957201503916
sg34
g753
(S'\x07\xdf\x07\r\x11\x15\x03\x0c\xec\x98'
tRp5364
sa(dp5365
S'trial_loop.thisTrialN'
p5366
I124
sg3633
g4573
sS'block_loop.thisIndex'
p5367
g3627
sg38
S'left'
p5368
sg59
g63
sS'trial_loop.thisN'
p5369
I124
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5370
g60
(g99
S'|\x00\x00\x00'
tRp5371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5372
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5373
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5374
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5375
Nsg70
Vy
sS'block_loop.thisTrialN'
p5376
I0
sg39
F0.88327349113023956
sg34
g753
(S'\x07\xdf\x07\r\x11\x15\t\n%\xa8'
tRp5377
sa(dp5378
S'trial_loop.thisTrialN'
p5379
I125
sg3633
g4776
sS'block_loop.thisIndex'
p5380
g3627
sg38
S'right'
p5381
sg59
g63
sS'trial_loop.thisN'
p5382
I125
sg33
g4560
sg64
g65
sS'trial_loop.thisIndex'
p5383
g60
(g99
S'}\x00\x00\x00'
tRp5384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5385
I0
sg3642
g4783
sS'block_loop.thisRepN'
p5386
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5387
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p5388
Nsg70
Vy
sS'block_loop.thisTrialN'
p5389
I0
sg39
F0.79992205403323169
sg34
g753
(S'\x07\xdf\x07\r\x11\x15\x0f\x08\xd1\xd0'
tRp5390
sa(dp5391
S'trial_loop.thisTrialN'
p5392
I126
sg3633
g3722
sS'block_loop.thisIndex'
p5393
g3627
sg38
S'left'
p5394
sg59
g63
sS'trial_loop.thisN'
p5395
I126
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5396
g60
(g99
S'~\x00\x00\x00'
tRp5397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5398
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5399
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5400
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5401
Nsg70
Vy
sS'block_loop.thisTrialN'
p5402
I0
sg39
F0.86660177821613615
sg34
g753
(S'\x07\xdf\x07\r\x11\x15\x15\x06I`'
tRp5403
sa(dp5404
S'trial_loop.thisTrialN'
p5405
I127
sg3633
g4642
sS'block_loop.thisIndex'
p5406
g3627
sg38
S'right'
p5407
sg59
g63
sS'trial_loop.thisN'
p5408
I127
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5409
g60
(g99
S'\x7f\x00\x00\x00'
tRp5410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5411
I0
sg3642
g4649
sS'block_loop.thisRepN'
p5412
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5413
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5414
Nsg70
Vy
sS'block_loop.thisTrialN'
p5415
I0
sg39
F1.4170585347419546
sg34
g753
(S'\x07\xdf\x07\r\x11\x15\x1b\x04\xb7\x08'
tRp5416
sa(dp5417
S'trial_loop.thisTrialN'
p5418
I128
sg3633
g4528
sS'block_loop.thisIndex'
p5419
g3627
sg38
S'right'
p5420
sg59
g63
sS'trial_loop.thisN'
p5421
I128
sg33
g3794
sg64
g65
sS'trial_loop.thisIndex'
p5422
g60
(g99
S'\x80\x00\x00\x00'
tRp5423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5424
I0
sg3642
g4535
sS'block_loop.thisRepN'
p5425
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5426
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p5427
Nsg70
Vy
sS'block_loop.thisTrialN'
p5428
I0
sg39
F1.9499606278768624
sg34
g753
(S'\x07\xdf\x07\r\x11\x15!\x0b\xb4\x18'
tRp5429
sa(dp5430
S'trial_loop.thisTrialN'
p5431
I129
sg3633
g5170
sS'block_loop.thisIndex'
p5432
g3627
sg38
S'right'
p5433
sg59
g63
sS'trial_loop.thisN'
p5434
I129
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5435
g60
(g99
S'\x81\x00\x00\x00'
tRp5436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5437
I0
sg3642
g5177
sS'block_loop.thisRepN'
p5438
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5439
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5440
Nsg70
Vy
sS'block_loop.thisTrialN'
p5441
I0
sg39
F0.74997533896748791
sg34
g753
(S'\x07\xdf\x07\r\x11\x15(\x0bN\x88'
tRp5442
sa(dp5443
S'trial_loop.thisTrialN'
p5444
I130
sg3633
g4556
sS'block_loop.thisIndex'
p5445
g3627
sg38
S'left'
p5446
sg59
g63
sS'trial_loop.thisN'
p5447
I130
sg33
g4560
sg64
g65
sS'trial_loop.thisIndex'
p5448
g60
(g99
S'\x82\x00\x00\x00'
tRp5449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5450
I0
sg3642
g4564
sS'block_loop.thisRepN'
p5451
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5452
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p5453
Nsg70
Vy
sS'block_loop.thisTrialN'
p5454
I0
sg39
F1.633251395986008
sg34
g753
(S'\x07\xdf\x07\r\x11\x15.\x08\x0e\x80'
tRp5455
sa(dp5456
S'trial_loop.thisTrialN'
p5457
I131
sg3633
g4178
sS'block_loop.thisIndex'
p5458
g3627
sg38
S'right'
p5459
sg59
g63
sS'trial_loop.thisN'
p5460
I131
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5461
g60
(g99
S'\x83\x00\x00\x00'
tRp5462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5463
I0
sg3642
g4185
sS'block_loop.thisRepN'
p5464
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5465
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5466
Nsg70
Vy
sS'block_loop.thisTrialN'
p5467
I0
sg39
F0.79995170429174323
sg34
g753
(S'\x07\xdf\x07\r\x11\x155\x02\xe2H'
tRp5468
sa(dp5469
S'trial_loop.thisTrialN'
p5470
I132
sg3633
g4051
sS'block_loop.thisIndex'
p5471
g3627
sg38
S'left'
p5472
sg59
g63
sS'trial_loop.thisN'
p5473
I132
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5474
g60
(g99
S'\x84\x00\x00\x00'
tRp5475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5476
I0
sg3642
g4058
sS'block_loop.thisRepN'
p5477
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5478
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p5479
Nsg70
Vy
sS'block_loop.thisTrialN'
p5480
I0
sg39
F0.90032524052003282
sg34
g753
(S'\x07\xdf\x07\r\x11\x15;\x00]\xc0'
tRp5481
sa(dp5482
S'trial_loop.thisTrialN'
p5483
I133
sg3633
g4642
sS'block_loop.thisIndex'
p5484
g3627
sg38
S'right'
p5485
sg59
g63
sS'trial_loop.thisN'
p5486
I133
sg33
g3983
sg64
g65
sS'trial_loop.thisIndex'
p5487
g60
(g99
S'\x85\x00\x00\x00'
tRp5488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5489
I0
sg3642
g4649
sS'block_loop.thisRepN'
p5490
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5491
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5492
Nsg70
Vy
sS'block_loop.thisTrialN'
p5493
I0
sg39
F0.66656060997411259
sg34
g753
(S'\x07\xdf\x07\r\x11\x16\x04\x0e\xc1X'
tRp5494
sa(dp5495
S'trial_loop.thisTrialN'
p5496
I134
sg3633
g4232
sS'block_loop.thisIndex'
p5497
g3627
sg38
S'right'
p5498
sg59
g63
sS'trial_loop.thisN'
p5499
I134
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5500
g60
(g99
S'\x86\x00\x00\x00'
tRp5501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5502
I0
sg3642
g4239
sS'block_loop.thisRepN'
p5503
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5504
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p5505
Nsg70
Vy
sS'block_loop.thisTrialN'
p5506
I0
sg39
F1.1165662834391696
sg34
g753
(S'\x07\xdf\x07\r\x11\x16\n\n\x16\x08'
tRp5507
sa(dp5508
S'trial_loop.thisTrialN'
p5509
I135
sg3633
g4683
sS'block_loop.thisIndex'
p5510
g3627
sg38
S'right'
p5511
sg59
g63
sS'trial_loop.thisN'
p5512
I135
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p5513
g60
(g99
S'\x87\x00\x00\x00'
tRp5514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5515
I0
sg3642
g4690
sS'block_loop.thisRepN'
p5516
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5517
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p5518
Nsg70
Vy
sS'block_loop.thisTrialN'
p5519
I0
sg39
F0.7329406954922888
sg34
g753
(S'\x07\xdf\x07\r\x11\x16\x10\x0cT@'
tRp5520
sa(dp5521
S'trial_loop.thisTrialN'
p5522
I136
sg3633
g3705
sS'block_loop.thisIndex'
p5523
g3627
sg38
S'left'
p5524
sg59
g63
sS'trial_loop.thisN'
p5525
I136
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5526
g60
(g99
S'\x88\x00\x00\x00'
tRp5527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5528
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5529
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5530
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p5531
Nsg70
Vy
sS'block_loop.thisTrialN'
p5532
I0
sg39
F0.66671940991363954
sg34
g753
(S'\x07\xdf\x07\r\x11\x16\x16\x08\xd9\xa0'
tRp5533
sa(dp5534
S'trial_loop.thisTrialN'
p5535
I137
sg3633
g3893
sS'block_loop.thisIndex'
p5536
g3627
sg38
S'left'
p5537
sg59
g63
sS'trial_loop.thisN'
p5538
I137
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5539
g60
(g99
S'\x89\x00\x00\x00'
tRp5540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5541
I0
sg3642
g3900
sS'block_loop.thisRepN'
p5542
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5543
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5544
Nsg70
Vy
sS'block_loop.thisTrialN'
p5545
I0
sg39
F2.0832068920899474
sg34
g753
(S'\x07\xdf\x07\r\x11\x16\x1c\x04.P'
tRp5546
sa(dp5547
S'trial_loop.thisTrialN'
p5548
I138
sg3633
g3822
sS'block_loop.thisIndex'
p5549
g3627
sg38
S'right'
p5550
sg59
g63
sS'trial_loop.thisN'
p5551
I138
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5552
g60
(g99
S'\x8a\x00\x00\x00'
tRp5553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5554
I0
sg3642
g3829
sS'block_loop.thisRepN'
p5555
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5556
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5557
Nsg70
Vy
sS'block_loop.thisTrialN'
p5558
I0
sg39
F0.93321165323868627
sg34
g753
(S'\x07\xdf\x07\r\x11\x16#\x06&8'
tRp5559
sa(dp5560
S'trial_loop.thisTrialN'
p5561
I139
sg3633
g4528
sS'block_loop.thisIndex'
p5562
g3627
sg38
S'right'
p5563
sg59
g63
sS'trial_loop.thisN'
p5564
I139
sg33
g3794
sg64
g65
sS'trial_loop.thisIndex'
p5565
g60
(g99
S'\x8b\x00\x00\x00'
tRp5566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5567
I0
sg3642
g4535
sS'block_loop.thisRepN'
p5568
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5569
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p5570
Nsg70
Vy
sS'block_loop.thisTrialN'
p5571
I0
sg39
F0.71656947654264513
sg34
g753
(S'\x07\xdf\x07\r\x11\x16)\x05\x86\x10'
tRp5572
sa(dp5573
S'trial_loop.thisTrialN'
p5574
I140
sg3633
g4135
sS'block_loop.thisIndex'
p5575
g3627
sg38
S'left'
p5576
sg59
g63
sS'trial_loop.thisN'
p5577
I140
sg33
g4145
sg64
g65
sS'trial_loop.thisIndex'
p5578
g60
(g99
S'\x8c\x00\x00\x00'
tRp5579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5580
I0
sg3642
g4143
sS'block_loop.thisRepN'
p5581
I1
sg3645
g4145
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5582
I1
sg3647
g4139
sg55
g11
sS'block_loop.thisTrial'
p5583
Nsg70
Vy
sS'block_loop.thisTrialN'
p5584
I0
sg39
F1.049911647933186
sg34
g753
(S'\x07\xdf\x07\r\x11\x16/\x01\xd0\xd8'
tRp5585
sa(dp5586
S'trial_loop.thisTrialN'
p5587
I141
sg3633
g3893
sS'block_loop.thisIndex'
p5588
g3627
sg38
S'left'
p5589
sg59
g63
sS'trial_loop.thisN'
p5590
I141
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5591
g60
(g99
S'\x8d\x00\x00\x00'
tRp5592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5593
I0
sg3642
g3900
sS'block_loop.thisRepN'
p5594
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5595
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5596
Nsg70
Vy
sS'block_loop.thisTrialN'
p5597
I0
sg39
F1.1496947448904393
sg34
g753
(S'\x07\xdf\x07\r\x11\x165\x03\x18\xf8'
tRp5598
sa(dp5599
S'trial_loop.thisTrialN'
p5600
I142
sg3633
S'4-corn.png'
p5601
sS'block_loop.thisIndex'
p5602
g3627
sg38
S'left'
p5603
sg59
g63
sS'trial_loop.thisN'
p5604
I142
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p5605
g60
(g99
S'\x8e\x00\x00\x00'
tRp5606
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5607
I0
sg3642
S'10-bounty_redo.png'
p5608
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F1.2000157944639795
sg34
g753
(S'\x07\xdf\x07\r\x11\x16;\x05\xcc`'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4776
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g4560
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4783
sS'block_loop.thisRepN'
p5622
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.79996738471891149
sg34
g753
(S'\x07\xdf\x07\r\x11\x17\x05\tu\xe0'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3671
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.75002409083390376
sg34
g753
(S'\x07\xdf\x07\r\x11\x17\x0b\x06\xb2\xd8'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4869
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3934
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4876
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.76662937576475088
sg34
g753
(S'\x07\xdf\x07\r\x11\x17\x11\x03v\xb8'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3688
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.84991837626148481
sg34
g753
(S'\x07\xdf\x07\r\x11\x17\x17\x00u0'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4528
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3794
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4535
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.78323808187633404
sg34
g753
(S'\x07\xdf\x07\r\x11\x17\x1c\r\xe6\x98'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4776
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4567
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4783
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.85033604576165089
sg34
g753
(S'\x07\xdf\x07\r\x11\x17"\x0b#\x90'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g3634
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F1.2997749431378907
sg34
g753
(S'\x07\xdf\x07\r\x11\x17(\tR\xb8'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4301
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4308
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F1.0165280231994984
sg34
g753
(S'\x07\xdf\x07\r\x11\x17.\x0ekh'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4178
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4185
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.78319959356304025
sg34
g753
(S'\x07\xdf\x07\r\x11\x174\x0f:p'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4092
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4100
sS'block_loop.thisRepN'
p5739
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.83332535057343193
sg34
g753
(S'\x07\xdf\x07\r\x11\x17:\x0cs\x80'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g5170
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g5177
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.86668844820087543
sg34
g753
(S'\x07\xdf\x07\r\x11\x18\x04\nh\x10'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g3790
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3794
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g3798
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3794
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3801
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.84992151234473567
sg34
g753
(S'\x07\xdf\x07\r\x11\x18\n\x08\xd5\xb8'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g5170
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g5177
sS'block_loop.thisRepN'
p5778
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.61667690170725109
sg34
g753
(S'\x07\xdf\x07\r\x11\x18\x10\x07\x04\xe0'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4573
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3874
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F2.2831468503136421
sg34
g753
(S'\x07\xdf\x07\r\x11\x18\x16\x01\xa1\xf8'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g5601
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g5608
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.86654589888712508
sg34
g753
(S'\x07\xdf\x07\r\x11\x18\x1d\x06x@'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g3739
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.69999840344826225
sg34
g753
(S'\x07\xdf\x07\r\x11\x18#\x05 \x80'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4342
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4346
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4350
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.69992598839598941
sg34
g753
(S'\x07\xdf\x07\r\x11\x18)\x00\xeeH'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3773
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3781
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.0498885549422994
sg34
g753
(S'\x07\xdf\x07\r\x11\x18.\x0c<\xd0'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g3957
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g3964
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.0665816502514645
sg34
g753
(S'\x07\xdf\x07\r\x11\x184\r\x84\xf0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4627
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g4096
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4634
sS'block_loop.thisRepN'
p5869
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F1.5499424385852762
sg34
g753
(S'\x07\xdf\x07\r\x11\x18:\x0f\x0b\x90'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4869
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3934
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4876
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.76666529819340212
sg34
g753
(S'\x07\xdf\x07\r\x11\x19\x05\x08\xae\xa8'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4021
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4029
sS'block_loop.thisRepN'
p5895
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.86637198871540022
sg34
g753
(S'\x07\xdf\x07\r\x11\x19\x0b\x05r\x88'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4247
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4254
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.9335007432528073
sg34
g753
(S'\x07\xdf\x07\r\x11\x19\x11\x04\x1a\xc8'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g5601
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g5608
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.9666006948427821
sg34
g753
(S'\x07\xdf\x07\r\x11\x19\x17\x03z\xa0'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3739
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.7165862973597541
sg34
g753
(S'\x07\xdf\x07\r\x11\x19\x1d\x03\x92\x10'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g3940
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g3948
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3944
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F1.183255986074073
sg34
g753
(S'\x07\xdf\x07\r\x11\x19"\x0e\xe0\x98'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g5601
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g5608
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.64990828376903664
sg34
g753
(S'\x07\xdf\x07\r\x11\x19)\x03\tX'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4004
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4012
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.81666219062026357
sg34
g753
(S'\x07\xdf\x07\r\x11\x19.\re\xb0'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4573
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.88325552991591394
sg34
g753
(S'\x07\xdf\x07\r\x11\x194\x0b\x1b\xc0'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g3908
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g3915
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F2.0331384399069066
sg34
g753
(S'\x07\xdf\x07\r\x11\x19:\t\xc4\x00'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3957
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3964
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F1.0333180520465248
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a\x05\n\xc9\xb8'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4556
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4560
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4564
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F1.2665866109709896
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a\x0b\x0b\xd3X'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4021
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4029
sS'block_loop.thisRepN'
p6038
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.66643744736575172
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a\x12\x010\xb0'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3756
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3764
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.91654592739359941
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a\x17\x0b\xc7\xa0'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4004
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4012
sS'block_loop.thisRepN'
p6064
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.8166083069772867
sg34
g753
(S"\x07\xdf\x07\r\x11\x1a\x1d\x0b'x"
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3957
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3964
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.84998423404613277
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a#\x08\xdd\x88'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g3893
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g3900
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F1.0832006199198077
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a)\x07\x0c\xb0'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3739
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3749
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3747
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3743
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.71656491496105446
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a/\x08\xd1\xd0'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g3773
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g3781
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.94990816972858738
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a5\x05\x18\xb0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4004
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4012
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F1.0335247485600121
sg34
g753
(S'\x07\xdf\x07\r\x11\x1a;\x04\xb7\x08'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4776
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g4560
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4783
sS'block_loop.thisRepN'
p6142
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.74999615116757923
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b\x05\x05\xc0\xa8'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4573
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4580
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.76663165655554621
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b\x0b\x02\x84\x88'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3688
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.94998315066914074
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b\x10\x0e\xc5@'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3705
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.68329960616392782
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b\x16\x0ec\x98'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4627
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g4096
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4634
sS'block_loop.thisRepN'
p6194
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.83318337145101395
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b\x1c\n1`'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g3923
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3927
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g3931
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3927
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3934
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.66658170727168908
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b"\x08%\xf0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g5170
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g4353
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g5177
sS'block_loop.thisRepN'
p6220
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.71657289772338117
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b(\x03z\xa0'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3863
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3871
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.94994808354022098
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b-\x0f\x03\xc0'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4556
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g4560
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4564
sS'block_loop.thisRepN'
p6246
I1
sg3645
g4560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g4567
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.7504041273168696
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b3\x0e\xa2\x18'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4683
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4690
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.71643120370208635
sg34
g753
(S'\x07\xdf\x07\r\x11\x1b:\x0b^('
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4247
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4254
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.86657811503027915
sg34
g753
(S'\x07\xdf\x07\r\x11\x1c\x04\x07jp'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4301
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4308
sS'block_loop.thisRepN'
p6285
I1
sg3645
g4008
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g4015
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F1.1165725556093093
sg34
g753
(S'\x07\xdf\x07\r\x11\x1c\n\x06\x12\xb0'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g5601
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g5608
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3777
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3784
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.74992516161000822
sg34
g753
(S'\x07\xdf\x07\r\x11\x1c\x10\x08M\x00'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3908
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3915
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.91667222608884913
sg34
g753
(S'\x07\xdf\x07\r\x11\x1c\x16\x05\x10\xe0'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4092
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4100
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4096
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4103
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.78364947920999839
sg34
g753
(S'\x07\xdf\x07\r\x11\x1c\x1c\x046 '
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3807
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3814
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F1.0166010084503796
sg34
g753
(S'\x07\xdf\x07\r\x11\x1c"\x01s\x18'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4342
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4353
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4350
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4346
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g4353
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.66669688712136121
sg34
g753
(S'\x07\xdf\x07\r\x11\x1c(\x02>8'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F192.36216051167139
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'20-fruit_pastilles.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'2-steamed_puddings.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'2-steamed_puddings.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'20-fruit_pastilles.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.86651368274033302
sg34
g753
(S'\x07\xdf\x07\r\x11 ,\x07\xb8\x90'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'50-polo.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'48-twix.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'48-twix.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'50-polo.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.1664870545282611
sg34
g753
(S'\x07\xdf\x07\r\x11 2\x05\xe7\xb8'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'19-caramello_redo.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'19-caramello_redo.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'30-spaghetti_hoops.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'30-spaghetti_hoops.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vy
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.99991874688930693
sg34
g753
(S'\x07\xdf\x07\r\x11 8\t\x18 '
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'2-steamed_puddings.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6430
g60
(g99
S'\x03\x00\x00\x00'
tRp6431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6432
I0
sg6380
S'20-fruit_pastilles.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6435
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6436
Nsg70
Vy
sS'block_loop.thisTrialN'
p6437
I0
sg39
F0.7333153151012084
sg34
g753
(S'\x07\xdf\x07\r\x11!\x02\tn\x10'
tRp6438
sa(dp6439
S'trial_loop.thisTrialN'
p6440
I4
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6441
sS'block_loop.thisIndex'
p6442
g6365
sg38
S'left'
p6443
sg59
g63
sS'trial_loop.thisN'
p6444
I4
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6445
sg64
g65
sS'trial_loop.thisIndex'
p6446
g60
(g99
S'\x04\x00\x00\x00'
tRp6447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6448
I0
sg6380
S'36-fig_rolls.png'
p6449
sS'block_loop.thisRepN'
p6450
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6451
I2
sg6385
S'36-fig_rolls.png'
p6452
sg55
g11
sS'block_loop.thisTrial'
p6453
Nsg70
Vy
sS'block_loop.thisTrialN'
p6454
I0
sg39
F1.5499512766436965
sg34
g753
(S'\x07\xdf\x07\r\x11!\x08\x05\xf3p'
tRp6455
sa(dp6456
S'trial_loop.thisTrialN'
p6457
I5
sg6371
S'16-skips_prawn.png'
p6458
sS'block_loop.thisIndex'
p6459
g6365
sg38
S'right'
p6460
sg59
g63
sS'trial_loop.thisN'
p6461
I5
sg33
S'42-mrkipling_lemon_slices.png'
p6462
sg64
g65
sS'trial_loop.thisIndex'
p6463
g60
(g99
S'\x05\x00\x00\x00'
tRp6464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6465
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6466
sS'block_loop.thisRepN'
p6467
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6468
I2
sg6385
S'16-skips_prawn.png'
p6469
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vy
sS'block_loop.thisTrialN'
p6471
I0
sg39
F1.016517189451406
sg34
g753
(S'\x07\xdf\x07\r\x11!\x0e\x0e\xd8\xc8'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'45-chewy_nougat_redo.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'right'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
S'45-chewy_nougat_redo.png'
p6479
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
S'41-peanuts_redo.png'
p6483
sS'block_loop.thisRepN'
p6484
I2
sg6383
S'41-peanuts_redo.png'
p6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6486
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p6487
Nsg70
Vy
sS'block_loop.thisTrialN'
p6488
I0
sg39
F1.0499883394659264
sg34
g753
(S'\x07\xdf\x07\r\x11!\x15\x00e\x90'
tRp6489
sa(dp6490
S'trial_loop.thisTrialN'
p6491
I7
sg6371
g6426
sS'block_loop.thisIndex'
p6492
g6365
sg38
S'left'
p6493
sg59
g63
sS'trial_loop.thisN'
p6494
I7
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6495
g60
(g99
S'\x07\x00\x00\x00'
tRp6496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6497
I0
sg6380
g6433
sS'block_loop.thisRepN'
p6498
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6499
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6500
Nsg70
Vy
sS'block_loop.thisTrialN'
p6501
I0
sg39
F0.61654233515218948
sg34
g753
(S'\x07\xdf\x07\r\x11!\x1b\x01\xad\xb0'
tRp6502
sa(dp6503
S'trial_loop.thisTrialN'
p6504
I8
sg6371
S'41-peanuts_redo.png'
p6505
sS'block_loop.thisIndex'
p6506
g6365
sg38
S'left'
p6507
sg59
g63
sS'trial_loop.thisN'
p6508
I8
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p6509
g60
(g99
S'\x08\x00\x00\x00'
tRp6510
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6511
I0
sg6380
S'45-chewy_nougat_redo.png'
p6512
sS'block_loop.thisRepN'
p6513
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6514
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p6515
Nsg70
Vy
sS'block_loop.thisTrialN'
p6516
I0
sg39
F0.71659570561314467
sg34
g753
(S'\x07\xdf\x07\r\x11! \x0b\x8d\x08'
tRp6517
sa(dp6518
S'trial_loop.thisTrialN'
p6519
I9
sg6371
S'25-kitkat.png'
p6520
sS'block_loop.thisIndex'
p6521
g6365
sg38
S'left'
p6522
sg59
g63
sS'trial_loop.thisN'
p6523
I9
sg33
S'25-kitkat.png'
p6524
sg64
g65
sS'trial_loop.thisIndex'
p6525
g60
(g99
S'\t\x00\x00\x00'
tRp6526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6527
I0
sg6380
S'31-hobnobs.png'
p6528
sS'block_loop.thisRepN'
p6529
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6530
I2
sg6385
S'31-hobnobs.png'
p6531
sg55
g11
sS'block_loop.thisTrial'
p6532
Nsg70
Vy
sS'block_loop.thisTrialN'
p6533
I0
sg39
F1.4998828244606557
sg34
g753
(S'\x07\xdf\x07\r\x11!&\x07\xd3\xe8'
tRp6534
sa(dp6535
S'trial_loop.thisTrialN'
p6536
I10
sg6371
S'51-mars.png'
p6537
sS'block_loop.thisIndex'
p6538
g6365
sg38
S'left'
p6539
sg59
g63
sS'trial_loop.thisN'
p6540
I10
sg33
S'51-mars.png'
p6541
sg64
g65
sS'trial_loop.thisIndex'
p6542
g60
(g99
S'\n\x00\x00\x00'
tRp6543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6544
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6545
sS'block_loop.thisRepN'
p6546
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6547
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6548
sg55
g11
sS'block_loop.thisTrial'
p6549
Nsg70
Vy
sS'block_loop.thisTrialN'
p6550
I0
sg39
F1.3999836923576368
sg34
g753
(S'\x07\xdf\x07\r\x11!-\x00\x84\xd0'
tRp6551
sa(dp6552
S'trial_loop.thisTrialN'
p6553
I11
sg6371
g6409
sS'block_loop.thisIndex'
p6554
g6365
sg38
S'left'
p6555
sg59
g63
sS'trial_loop.thisN'
p6556
I11
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6557
g60
(g99
S'\x0b\x00\x00\x00'
tRp6558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6559
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6560
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6561
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6562
Nsg70
Vy
sS'block_loop.thisTrialN'
p6563
I0
sg39
F0.81662313210472348
sg34
g753
(S'\x07\xdf\x07\r\x11!3\x07GH'
tRp6564
sa(dp6565
S'trial_loop.thisTrialN'
p6566
I12
sg6371
S'42-mrkipling_lemon_slices.png'
p6567
sS'block_loop.thisIndex'
p6568
g6365
sg38
S'left'
p6569
sg59
g63
sS'trial_loop.thisN'
p6570
I12
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p6571
g60
(g99
S'\x0c\x00\x00\x00'
tRp6572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6573
I0
sg6380
S'16-skips_prawn.png'
p6574
sS'block_loop.thisRepN'
p6575
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6576
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6577
Nsg70
Vy
sS'block_loop.thisTrialN'
p6578
I0
sg39
F1.3664295786402363
sg34
g753
(S'\x07\xdf\x07\r\x11!9\x04\xfdX'
tRp6579
sa(dp6580
S'trial_loop.thisTrialN'
p6581
I13
sg6371
S'22-daim.png'
p6582
sS'block_loop.thisIndex'
p6583
g6365
sg38
S'left'
p6584
sg59
g63
sS'trial_loop.thisN'
p6585
I13
sg33
S'22-daim.png'
p6586
sg64
g65
sS'trial_loop.thisIndex'
p6587
g60
(g99
S'\r\x00\x00\x00'
tRp6588
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6589
I0
sg6380
S'7-olives.png'
p6590
sS'block_loop.thisRepN'
p6591
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6592
I2
sg6385
S'7-olives.png'
p6593
sg55
g11
sS'block_loop.thisTrial'
p6594
Nsg70
Vy
sS'block_loop.thisTrialN'
p6595
I0
sg39
F0.81659177125766291
sg34
g753
(S'\x07\xdf\x07\r\x11"\x03\x0b\x088'
tRp6596
sa(dp6597
S'trial_loop.thisTrialN'
p6598
I14
sg6371
S'4-corn.png'
p6599
sS'block_loop.thisIndex'
p6600
g6365
sg38
S'left'
p6601
sg59
g63
sS'trial_loop.thisN'
p6602
I14
sg33
S'4-corn.png'
p6603
sg64
g65
sS'trial_loop.thisIndex'
p6604
g60
(g99
S'\x0e\x00\x00\x00'
tRp6605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6606
I0
sg6380
S'10-bounty_redo.png'
p6607
sS'block_loop.thisRepN'
p6608
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6609
I2
sg6385
S'10-bounty_redo.png'
p6610
sg55
g11
sS'block_loop.thisTrial'
p6611
Nsg70
Vy
sS'block_loop.thisTrialN'
p6612
I0
sg39
F1.1665660268481588
sg34
g753
(S'\x07\xdf\x07\r\x11"\t\x08\xbeH'
tRp6613
sa(dp6614
S'trial_loop.thisTrialN'
p6615
I15
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6616
sS'block_loop.thisIndex'
p6617
g6365
sg38
S'right'
p6618
sg59
g63
sS'trial_loop.thisN'
p6619
I15
sg33
S'18-mms.png'
p6620
sg64
g65
sS'trial_loop.thisIndex'
p6621
g60
(g99
S'\x0f\x00\x00\x00'
tRp6622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6623
I0
sg6380
S'18-mms.png'
p6624
sS'block_loop.thisRepN'
p6625
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6626
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6627
sg55
g11
sS'block_loop.thisTrial'
p6628
Nsg70
Vy
sS'block_loop.thisTrialN'
p6629
I0
sg39
F0.95007780341620673
sg34
g753
(S'\x07\xdf\x07\r\x11"\x0f\x0b\xb00'
tRp6630
sa(dp6631
S'trial_loop.thisTrialN'
p6632
I16
sg6371
S'8-liquorice_catherine_wheels.png'
p6633
sS'block_loop.thisIndex'
p6634
g6365
sg38
S'right'
p6635
sg59
g63
sS'trial_loop.thisN'
p6636
I16
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6637
sg64
g65
sS'trial_loop.thisIndex'
p6638
g60
(g99
S'\x10\x00\x00\x00'
tRp6639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6640
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6641
sS'block_loop.thisRepN'
p6642
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6643
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6644
sg55
g11
sS'block_loop.thisTrial'
p6645
Nsg70
Vy
sS'block_loop.thisTrialN'
p6646
I0
sg39
F1.0832966981615755
sg34
g753
(S'\x07\xdf\x07\r\x11"\x15\x0b\x8d\x08'
tRp6647
sa(dp6648
S'trial_loop.thisTrialN'
p6649
I17
sg6371
S'46-pistachios.png'
p6650
sS'block_loop.thisIndex'
p6651
g6365
sg38
S'left'
p6652
sg59
g63
sS'trial_loop.thisN'
p6653
I17
sg33
S'46-pistachios.png'
p6654
sg64
g65
sS'trial_loop.thisIndex'
p6655
g60
(g99
S'\x11\x00\x00\x00'
tRp6656
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6657
I0
sg6380
S'29-beans.png'
p6658
sS'block_loop.thisRepN'
p6659
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6660
I2
sg6385
S'29-beans.png'
p6661
sg55
g11
sS'block_loop.thisTrial'
p6662
Nsg70
Vy
sS'block_loop.thisTrialN'
p6663
I0
sg39
F0.66662646775876055
sg34
g753
(S'\x07\xdf\x07\r\x11"\x1b\rN@'
tRp6664
sa(dp6665
S'trial_loop.thisTrialN'
p6666
I18
sg6371
S'35-raisins.png'
p6667
sS'block_loop.thisIndex'
p6668
g6365
sg38
S'left'
p6669
sg59
g63
sS'trial_loop.thisN'
p6670
I18
sg33
S'35-raisins.png'
p6671
sg64
g65
sS'trial_loop.thisIndex'
p6672
g60
(g99
S'\x12\x00\x00\x00'
tRp6673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6674
I0
sg6380
S'49-yorkie.png'
p6675
sS'block_loop.thisRepN'
p6676
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6677
I2
sg6385
S'49-yorkie.png'
p6678
sg55
g11
sS'block_loop.thisTrial'
p6679
Nsg70
Vy
sS'block_loop.thisTrialN'
p6680
I0
sg39
F1.8998659466233221
sg34
g753
(S'\x07\xdf\x07\r\x11"!\x08\xa2\xf0'
tRp6681
sa(dp6682
S'trial_loop.thisTrialN'
p6683
I19
sg6371
g6633
sS'block_loop.thisIndex'
p6684
g6365
sg38
S'right'
p6685
sg59
g63
sS'trial_loop.thisN'
p6686
I19
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p6687
g60
(g99
S'\x13\x00\x00\x00'
tRp6688
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6689
I0
sg6380
g6641
sS'block_loop.thisRepN'
p6690
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6691
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p6692
Nsg70
Vy
sS'block_loop.thisTrialN'
p6693
I0
sg39
F0.74995053538805223
sg34
g753
(S'\x07\xdf\x07\r\x11"(\x07\xc0`'
tRp6694
sa(dp6695
S'trial_loop.thisTrialN'
p6696
I20
sg6371
S'33-ambrosia_rice.png'
p6697
sS'block_loop.thisIndex'
p6698
g6365
sg38
S'left'
p6699
sg59
g63
sS'trial_loop.thisN'
p6700
I20
sg33
S'33-ambrosia_rice.png'
p6701
sg64
g65
sS'trial_loop.thisIndex'
p6702
g60
(g99
S'\x14\x00\x00\x00'
tRp6703
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6704
I0
sg6380
S'23-crunchie_redo.png'
p6705
sS'block_loop.thisRepN'
p6706
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6707
I2
sg6385
S'23-crunchie_redo.png'
p6708
sg55
g11
sS'block_loop.thisTrial'
p6709
Nsg70
Vy
sS'block_loop.thisTrialN'
p6710
I0
sg39
F0.56672676546077128
sg34
g753
(S'\x07\xdf\x07\r\x11".\x04\x84@'
tRp6711
sa(dp6712
S'trial_loop.thisTrialN'
p6713
I21
sg6371
S'29-beans.png'
p6714
sS'block_loop.thisIndex'
p6715
g6365
sg38
S'right'
p6716
sg59
g63
sS'trial_loop.thisN'
p6717
I21
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p6718
g60
(g99
S'\x15\x00\x00\x00'
tRp6719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6720
I0
sg6380
S'46-pistachios.png'
p6721
sS'block_loop.thisRepN'
p6722
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6723
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p6724
Nsg70
Vy
sS'block_loop.thisTrialN'
p6725
I0
sg39
F0.76663792872568592
sg34
g753
(S'\x07\xdf\x07\r\x11"3\r\xac\x00'
tRp6726
sa(dp6727
S'trial_loop.thisTrialN'
p6728
I22
sg6371
S'18-mms.png'
p6729
sS'block_loop.thisIndex'
p6730
g6365
sg38
S'left'
p6731
sg59
g63
sS'trial_loop.thisN'
p6732
I22
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p6733
g60
(g99
S'\x16\x00\x00\x00'
tRp6734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6735
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6736
sS'block_loop.thisRepN'
p6737
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6738
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p6739
Nsg70
Vy
sS'block_loop.thisTrialN'
p6740
I0
sg39
F0.73330362605338451
sg34
g753
(S'\x07\xdf\x07\r\x11"9\no\xe0'
tRp6741
sa(dp6742
S'trial_loop.thisTrialN'
p6743
I23
sg6371
S'7-olives.png'
p6744
sS'block_loop.thisIndex'
p6745
g6365
sg38
S'right'
p6746
sg59
g63
sS'trial_loop.thisN'
p6747
I23
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p6748
g60
(g99
S'\x17\x00\x00\x00'
tRp6749
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6750
I0
sg6380
S'22-daim.png'
p6751
sS'block_loop.thisRepN'
p6752
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6753
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p6754
Nsg70
Vy
sS'block_loop.thisTrialN'
p6755
I0
sg39
F1.466588720697473
sg34
g753
(S'\x07\xdf\x07\r\x11#\x03\x06\xf5@'
tRp6756
sa(dp6757
S'trial_loop.thisTrialN'
p6758
I24
sg6371
S'49-yorkie.png'
p6759
sS'block_loop.thisIndex'
p6760
g6365
sg38
S'right'
p6761
sg59
g63
sS'trial_loop.thisN'
p6762
I24
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p6763
g60
(g99
S'\x18\x00\x00\x00'
tRp6764
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6765
I0
sg6380
S'35-raisins.png'
p6766
sS'block_loop.thisRepN'
p6767
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6768
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p6769
Nsg70
Vy
sS'block_loop.thisTrialN'
p6770
I0
sg39
F0.76657406663071015
sg34
g753
(S'\x07\xdf\x07\r\x11#\t\x0e\xa9\xe8'
tRp6771
sa(dp6772
S'trial_loop.thisTrialN'
p6773
I25
sg6371
g6392
sS'block_loop.thisIndex'
p6774
g6365
sg38
S'right'
p6775
sg59
g63
sS'trial_loop.thisN'
p6776
I25
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6777
g60
(g99
S'\x19\x00\x00\x00'
tRp6778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6779
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6780
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6781
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6782
Nsg70
Vy
sS'block_loop.thisTrialN'
p6783
I0
sg39
F1.6669663053326076
sg34
g753
(S'\x07\xdf\x07\r\x11#\x0f\x0b\xa8`'
tRp6784
sa(dp6785
S'trial_loop.thisTrialN'
p6786
I26
sg6371
g6441
sS'block_loop.thisIndex'
p6787
g6365
sg38
S'left'
p6788
sg59
g63
sS'trial_loop.thisN'
p6789
I26
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6790
g60
(g99
S'\x1a\x00\x00\x00'
tRp6791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6792
I0
sg6380
g6449
sS'block_loop.thisRepN'
p6793
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6794
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6795
Nsg70
Vy
sS'block_loop.thisTrialN'
p6796
I0
sg39
F1.1165537390952522
sg34
g753
(S'\x07\xdf\x07\r\x11#\x16\x06\xf5@'
tRp6797
sa(dp6798
S'trial_loop.thisTrialN'
p6799
I27
sg6371
g6372
sS'block_loop.thisIndex'
p6800
g6365
sg38
S'right'
p6801
sg59
g63
sS'trial_loop.thisN'
p6802
I27
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p6803
g60
(g99
S'\x1b\x00\x00\x00'
tRp6804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6805
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6806
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6807
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6808
Nsg70
Vy
sS'block_loop.thisTrialN'
p6809
I0
sg39
F0.78320329984489945
sg34
g753
(S'\x07\xdf\x07\r\x11#\x1c\t3x'
tRp6810
sa(dp6811
S'trial_loop.thisTrialN'
p6812
I28
sg6371
g6567
sS'block_loop.thisIndex'
p6813
g6365
sg38
S'left'
p6814
sg59
g63
sS'trial_loop.thisN'
p6815
I28
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p6816
g60
(g99
S'\x1c\x00\x00\x00'
tRp6817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6818
I0
sg6380
g6574
sS'block_loop.thisRepN'
p6819
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6820
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6821
Nsg70
Vy
sS'block_loop.thisTrialN'
p6822
I0
sg39
F3.5997628549557703
sg34
g753
(S'\x07\xdf\x07\r\x11#"\x06pp'
tRp6823
sa(dp6824
S'trial_loop.thisTrialN'
p6825
I29
sg6371
g6582
sS'block_loop.thisIndex'
p6826
g6365
sg38
S'left'
p6827
sg59
g63
sS'trial_loop.thisN'
p6828
I29
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p6829
g60
(g99
S'\x1d\x00\x00\x00'
tRp6830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6831
I0
sg6380
g6590
sS'block_loop.thisRepN'
p6832
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6833
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p6834
Nsg70
Vy
sS'block_loop.thisTrialN'
p6835
I0
sg39
F0.81660403049681918
sg34
g753
(S'\x07\xdf\x07\r\x11#+\x00\xbb\x80'
tRp6836
sa(dp6837
S'trial_loop.thisTrialN'
p6838
I30
sg6371
S'40-sardines.png'
p6839
sS'block_loop.thisIndex'
p6840
g6365
sg38
S'right'
p6841
sg59
g63
sS'trial_loop.thisN'
p6842
I30
sg33
S'5-pineapple.png'
p6843
sg64
g65
sS'trial_loop.thisIndex'
p6844
g60
(g99
S'\x1e\x00\x00\x00'
tRp6845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6846
I0
sg6380
S'5-pineapple.png'
p6847
sS'block_loop.thisRepN'
p6848
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6849
I2
sg6385
S'40-sardines.png'
p6850
sg55
g11
sS'block_loop.thisTrial'
p6851
Nsg70
Vy
sS'block_loop.thisTrialN'
p6852
I0
sg39
F0.68362632919888711
sg34
g753
(S'\x07\xdf\x07\r\x11#0\r\xb3\xd0'
tRp6853
sa(dp6854
S'trial_loop.thisTrialN'
p6855
I31
sg6371
g6729
sS'block_loop.thisIndex'
p6856
g6365
sg38
S'left'
p6857
sg59
g63
sS'trial_loop.thisN'
p6858
I31
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p6859
g60
(g99
S'\x1f\x00\x00\x00'
tRp6860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6861
I0
sg6380
g6736
sS'block_loop.thisRepN'
p6862
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6863
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p6864
Nsg70
Vy
sS'block_loop.thisTrialN'
p6865
I0
sg39
F1.2665561054163845
sg34
g753
(S'\x07\xdf\x07\r\x11#6\t\x85\x80'
tRp6866
sa(dp6867
S'trial_loop.thisTrialN'
p6868
I32
sg6371
S'36-fig_rolls.png'
p6869
sS'block_loop.thisIndex'
p6870
g6365
sg38
S'right'
p6871
sg59
g63
sS'trial_loop.thisN'
p6872
I32
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6873
g60
(g99
S' \x00\x00\x00'
tRp6874
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6875
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6876
sS'block_loop.thisRepN'
p6877
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6878
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6879
Nsg70
Vy
sS'block_loop.thisTrialN'
p6880
I0
sg39
F0.91658812199239037
sg34
g753
(S'\x07\xdf\x07\r\x11$\x00\x0e!0'
tRp6881
sa(dp6882
S'trial_loop.thisTrialN'
p6883
I33
sg6371
S'48-twix.png'
p6884
sS'block_loop.thisIndex'
p6885
g6365
sg38
S'left'
p6886
sg59
g63
sS'trial_loop.thisN'
p6887
I33
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6888
g60
(g99
S'!\x00\x00\x00'
tRp6889
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6890
I0
sg6380
S'50-polo.png'
p6891
sS'block_loop.thisRepN'
p6892
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6893
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6894
Nsg70
Vy
sS'block_loop.thisTrialN'
p6895
I0
sg39
F1.0330437871598406
sg34
g753
(S'\x07\xdf\x07\r\x11$\x06\rFp'
tRp6896
sa(dp6897
S'trial_loop.thisTrialN'
p6898
I34
sg6371
g6372
sS'block_loop.thisIndex'
p6899
g6365
sg38
S'right'
p6900
sg59
g63
sS'trial_loop.thisN'
p6901
I34
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6902
g60
(g99
S'"\x00\x00\x00'
tRp6903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6904
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6905
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6906
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6907
Nsg70
Vy
sS'block_loop.thisTrialN'
p6908
I0
sg39
F0.74988695839056163
sg34
g753
(S'\x07\xdf\x07\r\x11$\x0c\x0eP\x10'
tRp6909
sa(dp6910
S'trial_loop.thisTrialN'
p6911
I35
sg6371
g6505
sS'block_loop.thisIndex'
p6912
g6365
sg38
S'left'
p6913
sg59
g63
sS'trial_loop.thisN'
p6914
I35
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p6915
g60
(g99
S'#\x00\x00\x00'
tRp6916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6917
I0
sg6380
g6512
sS'block_loop.thisRepN'
p6918
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6919
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p6920
Nsg70
Vy
sS'block_loop.thisTrialN'
p6921
I0
sg39
F0.63326023404442822
sg34
g753
(S'\x07\xdf\x07\r\x11$\x12\x0b\x13\xf0'
tRp6922
sa(dp6923
S'trial_loop.thisTrialN'
p6924
I36
sg6371
g6697
sS'block_loop.thisIndex'
p6925
g6365
sg38
S'left'
p6926
sg59
g63
sS'trial_loop.thisN'
p6927
I36
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p6928
g60
(g99
S'$\x00\x00\x00'
tRp6929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6930
I0
sg6380
g6705
sS'block_loop.thisRepN'
p6931
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6932
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p6933
Nsg70
Vy
sS'block_loop.thisTrialN'
p6934
I0
sg39
F0.733184454824368
sg34
g753
(S'\x07\xdf\x07\r\x11$\x18\x05\xef\x88'
tRp6935
sa(dp6936
S'trial_loop.thisTrialN'
p6937
I37
sg6371
S'5-pineapple.png'
p6938
sS'block_loop.thisIndex'
p6939
g6365
sg38
S'left'
p6940
sg59
g63
sS'trial_loop.thisN'
p6941
I37
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p6942
g60
(g99
S'%\x00\x00\x00'
tRp6943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6944
I0
sg6380
S'40-sardines.png'
p6945
sS'block_loop.thisRepN'
p6946
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6947
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p6948
Nsg70
Vy
sS'block_loop.thisTrialN'
p6949
I0
sg39
F0.89992154085484799
sg34
g753
(S'\x07\xdf\x07\r\x11$\x1e\x02t\xe8'
tRp6950
sa(dp6951
S'trial_loop.thisTrialN'
p6952
I38
sg6371
g6599
sS'block_loop.thisIndex'
p6953
g6365
sg38
S'left'
p6954
sg59
g63
sS'trial_loop.thisN'
p6955
I38
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p6956
g60
(g99
S'&\x00\x00\x00'
tRp6957
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6958
I0
sg6380
g6607
sS'block_loop.thisRepN'
p6959
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6960
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p6961
Nsg70
Vy
sS'block_loop.thisTrialN'
p6962
I0
sg39
F1.0666486484333291
sg34
g753
(S'\x07\xdf\x07\r\x11$$\x01[\xa8'
tRp6963
sa(dp6964
S'trial_loop.thisTrialN'
p6965
I39
sg6371
S'27-hartleys_raspberries_jelly.png'
p6966
sS'block_loop.thisIndex'
p6967
g6365
sg38
S'right'
p6968
sg59
g63
sS'trial_loop.thisN'
p6969
I39
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p6970
g60
(g99
S"'\x00\x00\x00"
tRp6971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6972
I0
sg6380
S'51-mars.png'
p6973
sS'block_loop.thisRepN'
p6974
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6975
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p6976
Nsg70
Vy
sS'block_loop.thisTrialN'
p6977
I0
sg39
F0.81659775832667947
sg34
g753
(S'\x07\xdf\x07\r\x11$*\x02\xde`'
tRp6978
sa(dp6979
S'trial_loop.thisTrialN'
p6980
I40
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6981
sS'block_loop.thisIndex'
p6982
g6365
sg38
S'left'
p6983
sg59
g63
sS'trial_loop.thisN'
p6984
I40
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p6985
g60
(g99
S'(\x00\x00\x00'
tRp6986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6987
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6988
sS'block_loop.thisRepN'
p6989
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6990
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p6991
Nsg70
Vy
sS'block_loop.thisTrialN'
p6992
I0
sg39
F0.8999768499925267
sg34
g753
(S'\x07\xdf\x07\r\x11$0\x00\x94p'
tRp6993
sa(dp6994
S'trial_loop.thisTrialN'
p6995
I41
sg6371
g6650
sS'block_loop.thisIndex'
p6996
g6365
sg38
S'left'
p6997
sg59
g63
sS'trial_loop.thisN'
p6998
I41
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p6999
g60
(g99
S')\x00\x00\x00'
tRp7000
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7001
I0
sg6380
g6658
sS'block_loop.thisRepN'
p7002
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7003
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p7004
Nsg70
Vy
sS'block_loop.thisTrialN'
p7005
I0
sg39
F0.66672340129298391
sg34
g753
(S'\x07\xdf\x07\r\x11$5\x0e\xbdp'
tRp7006
sa(dp7007
S'trial_loop.thisTrialN'
p7008
I42
sg6371
g6729
sS'block_loop.thisIndex'
p7009
g6365
sg38
S'left'
p7010
sg59
g63
sS'trial_loop.thisN'
p7011
I42
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7012
g60
(g99
S'*\x00\x00\x00'
tRp7013
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7014
I0
sg6380
g6736
sS'block_loop.thisRepN'
p7015
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7016
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7017
Nsg70
Vy
sS'block_loop.thisTrialN'
p7018
I0
sg39
F0.96656477241413086
sg34
g753
(S'\x07\xdf\x07\r\x11$;\nP\xa0'
tRp7019
sa(dp7020
S'trial_loop.thisTrialN'
p7021
I43
sg6371
g6537
sS'block_loop.thisIndex'
p7022
g6365
sg38
S'left'
p7023
sg59
g63
sS'trial_loop.thisN'
p7024
I43
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7025
g60
(g99
S'+\x00\x00\x00'
tRp7026
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7027
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7028
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7029
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7030
Nsg70
Vy
sS'block_loop.thisTrialN'
p7031
I0
sg39
F0.98300498523531132
sg34
g753
(S'\x07\xdf\x07\r\x11%\x05\n)\x90'
tRp7032
sa(dp7033
S'trial_loop.thisTrialN'
p7034
I44
sg6371
S'38-maltesers.png'
p7035
sS'block_loop.thisIndex'
p7036
g6365
sg38
S'left'
p7037
sg59
g63
sS'trial_loop.thisN'
p7038
I44
sg33
S'38-maltesers.png'
p7039
sg64
g65
sS'trial_loop.thisIndex'
p7040
g60
(g99
S',\x00\x00\x00'
tRp7041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7042
I0
sg6380
S'6-sour_patch_kids.png'
p7043
sS'block_loop.thisRepN'
p7044
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7045
I2
sg6385
S'6-sour_patch_kids.png'
p7046
sg55
g11
sS'block_loop.thisTrial'
p7047
Nsg70
Vy
sS'block_loop.thisTrialN'
p7048
I0
sg39
F0.66630402120426879
sg34
g753
(S'\x07\xdf\x07\r\x11%\x0b\n\x7f\x80'
tRp7049
sa(dp7050
S'trial_loop.thisTrialN'
p7051
I45
sg6371
S'26-walkers_smoky_bacon.png'
p7052
sS'block_loop.thisIndex'
p7053
g6365
sg38
S'right'
p7054
sg59
g63
sS'trial_loop.thisN'
p7055
I45
sg33
S'44-crunch.png'
p7056
sg64
g65
sS'trial_loop.thisIndex'
p7057
g60
(g99
S'-\x00\x00\x00'
tRp7058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7059
I0
sg6380
S'44-crunch.png'
p7060
sS'block_loop.thisRepN'
p7061
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7062
I2
sg6385
S'26-walkers_smoky_bacon.png'
p7063
sg55
g11
sS'block_loop.thisTrial'
p7064
Nsg70
Vy
sS'block_loop.thisTrialN'
p7065
I0
sg39
F1.9831991374048812
sg34
g753
(S'\x07\xdf\x07\r\x11%\x11\x05\xd40'
tRp7066
sa(dp7067
S'trial_loop.thisTrialN'
p7068
I46
sg6371
g6567
sS'block_loop.thisIndex'
p7069
g6365
sg38
S'left'
p7070
sg59
g63
sS'trial_loop.thisN'
p7071
I46
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7072
g60
(g99
S'.\x00\x00\x00'
tRp7073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7074
I0
sg6380
g6574
sS'block_loop.thisRepN'
p7075
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7076
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7077
Nsg70
Vy
sS'block_loop.thisTrialN'
p7078
I0
sg39
F1.6998612710049201
sg34
g753
(S'\x07\xdf\x07\r\x11%\x18\x06"P'
tRp7079
sa(dp7080
S'trial_loop.thisTrialN'
p7081
I47
sg6371
g6981
sS'block_loop.thisIndex'
p7082
g6365
sg38
S'left'
p7083
sg59
g63
sS'trial_loop.thisN'
p7084
I47
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p7085
g60
(g99
S'/\x00\x00\x00'
tRp7086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7087
I0
sg6380
g6988
sS'block_loop.thisRepN'
p7088
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7089
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p7090
Nsg70
Vy
sS'block_loop.thisTrialN'
p7091
I0
sg39
F1.2999719462932262
sg34
g753
(S'\x07\xdf\x07\r\x11%\x1f\x02&\xc8'
tRp7092
sa(dp7093
S'trial_loop.thisTrialN'
p7094
I48
sg6371
S'23-crunchie_redo.png'
p7095
sS'block_loop.thisIndex'
p7096
g6365
sg38
S'right'
p7097
sg59
g63
sS'trial_loop.thisN'
p7098
I48
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p7099
g60
(g99
S'0\x00\x00\x00'
tRp7100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7101
I0
sg6380
S'33-ambrosia_rice.png'
p7102
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vy
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.68321436167389038
sg34
g753
(S'\x07\xdf\x07\r\x11%%\x07?x'
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g6869
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'right'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g6876
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vy
sS'block_loop.thisTrialN'
p7119
I0
sg39
F2.8165321856395167
sg34
g753
(S'\x07\xdf\x07\r\x11%+\x02\xce\xc0'
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
S'1-treacle_cookies.png'
p7123
sS'block_loop.thisIndex'
p7124
g6365
sg38
S'right'
p7125
sg59
g63
sS'trial_loop.thisN'
p7126
I50
sg33
S'21-nakd_banana_crunch.png'
p7127
sg64
g65
sS'trial_loop.thisIndex'
p7128
g60
(g99
S'2\x00\x00\x00'
tRp7129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7130
I0
sg6380
S'21-nakd_banana_crunch.png'
p7131
sS'block_loop.thisRepN'
p7132
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7133
I2
sg6385
S'1-treacle_cookies.png'
p7134
sg55
g11
sS'block_loop.thisTrial'
p7135
Nsg70
Vy
sS'block_loop.thisTrialN'
p7136
I0
sg39
F1.083253648263053
sg34
g753
(S'\x07\xdf\x07\r\x11%3\x00y\x18'
tRp7137
sa(dp7138
S'trial_loop.thisTrialN'
p7139
I51
sg6371
g6616
sS'block_loop.thisIndex'
p7140
g6365
sg38
S'right'
p7141
sg59
g63
sS'trial_loop.thisN'
p7142
I51
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7143
g60
(g99
S'3\x00\x00\x00'
tRp7144
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7145
I0
sg6380
g6624
sS'block_loop.thisRepN'
p7146
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7147
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7148
Nsg70
Vy
sS'block_loop.thisTrialN'
p7149
I0
sg39
F0.89999509630069952
sg34
g753
(S'\x07\xdf\x07\r\x11%9\x02x\xd0'
tRp7150
sa(dp7151
S'trial_loop.thisTrialN'
p7152
I52
sg6371
g6650
sS'block_loop.thisIndex'
p7153
g6365
sg38
S'left'
p7154
sg59
g63
sS'trial_loop.thisN'
p7155
I52
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p7156
g60
(g99
S'4\x00\x00\x00'
tRp7157
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7158
I0
sg6380
g6658
sS'block_loop.thisRepN'
p7159
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7160
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p7161
Nsg70
Vy
sS'block_loop.thisTrialN'
p7162
I0
sg39
F0.68323374837927986
sg34
g753
(S'\x07\xdf\x07\r\x11&\x03\x01_\x90'
tRp7163
sa(dp7164
S'trial_loop.thisTrialN'
p7165
I53
sg6371
g6616
sS'block_loop.thisIndex'
p7166
g6365
sg38
S'right'
p7167
sg59
g63
sS'trial_loop.thisN'
p7168
I53
sg33
g6627
sg64
g65
sS'trial_loop.thisIndex'
p7169
g60
(g99
S'5\x00\x00\x00'
tRp7170
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7171
I0
sg6380
g6624
sS'block_loop.thisRepN'
p7172
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7173
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7174
Nsg70
Vy
sS'block_loop.thisTrialN'
p7175
I0
sg39
F1.2165629192750202
sg34
g753
(S'\x07\xdf\x07\r\x11&\x08\x0c5\x00'
tRp7176
sa(dp7177
S'trial_loop.thisTrialN'
p7178
I54
sg6371
g6426
sS'block_loop.thisIndex'
p7179
g6365
sg38
S'left'
p7180
sg59
g63
sS'trial_loop.thisN'
p7181
I54
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7182
g60
(g99
S'6\x00\x00\x00'
tRp7183
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7184
I0
sg6380
g6433
sS'block_loop.thisRepN'
p7185
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7186
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7187
Nsg70
Vy
sS'block_loop.thisTrialN'
p7188
I0
sg39
F0.69992541819738108
sg34
g753
(S'\x07\xdf\x07\r\x11&\x0f\x00\xd6\xd8'
tRp7189
sa(dp7190
S'trial_loop.thisTrialN'
p7191
I55
sg6371
g6884
sS'block_loop.thisIndex'
p7192
g6365
sg38
S'left'
p7193
sg59
g63
sS'trial_loop.thisN'
p7194
I55
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7195
g60
(g99
S'7\x00\x00\x00'
tRp7196
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7197
I0
sg6380
g6891
sS'block_loop.thisRepN'
p7198
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7199
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7200
Nsg70
Vy
sS'block_loop.thisTrialN'
p7201
I0
sg39
F1.0832177258344018
sg34
g753
(S'\x07\xdf\x07\r\x11&\x14\x0c%`'
tRp7202
sa(dp7203
S'trial_loop.thisTrialN'
p7204
I56
sg6371
S'13-mccoys_steak_crisps.png'
p7205
sS'block_loop.thisIndex'
p7206
g6365
sg38
S'right'
p7207
sg59
g63
sS'trial_loop.thisN'
p7208
I56
sg33
S'3-ellas_strawberries_apples.png'
p7209
sg64
g65
sS'trial_loop.thisIndex'
p7210
g60
(g99
S'8\x00\x00\x00'
tRp7211
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7212
I0
sg6380
S'3-ellas_strawberries_apples.png'
p7213
sS'block_loop.thisRepN'
p7214
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7215
I2
sg6385
S'13-mccoys_steak_crisps.png'
p7216
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vy
sS'block_loop.thisTrialN'
p7218
I0
sg39
F0.81663368075533072
sg34
g753
(S'\x07\xdf\x07\r\x11&\x1a\r\xe6\x98'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g6567
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'left'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g6574
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7229
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vy
sS'block_loop.thisTrialN'
p7231
I0
sg39
F0.89986366583252675
sg34
g753
(S'\x07\xdf\x07\r\x11& \x0b\x9c\xa8'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
S'21-nakd_banana_crunch.png'
p7235
sS'block_loop.thisIndex'
p7236
g6365
sg38
S'left'
p7237
sg59
g63
sS'trial_loop.thisN'
p7238
I58
sg33
g7127
sg64
g65
sS'trial_loop.thisIndex'
p7239
g60
(g99
S':\x00\x00\x00'
tRp7240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7241
I0
sg6380
S'1-treacle_cookies.png'
p7242
sS'block_loop.thisRepN'
p7243
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7244
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p7245
Nsg70
Vy
sS'block_loop.thisTrialN'
p7246
I0
sg39
F0.91662946129508782
sg34
g753
(S'\x07\xdf\x07\r\x11&&\n\x83h'
tRp7247
sa(dp7248
S'trial_loop.thisTrialN'
p7249
I59
sg6371
S'44-crunch.png'
p7250
sS'block_loop.thisIndex'
p7251
g6365
sg38
S'left'
p7252
sg59
g63
sS'trial_loop.thisN'
p7253
I59
sg33
g7063
sg64
g65
sS'trial_loop.thisIndex'
p7254
g60
(g99
S';\x00\x00\x00'
tRp7255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7256
I0
sg6380
S'26-walkers_smoky_bacon.png'
p7257
sS'block_loop.thisRepN'
p7258
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vy
sS'block_loop.thisTrialN'
p7261
I0
sg39
F0.81655641902762
sg34
g753
(S'\x07\xdf\x07\r\x11&,\t\xa8\xa8'
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
g7035
sS'block_loop.thisIndex'
p7265
g6365
sg38
S'left'
p7266
sg59
g63
sS'trial_loop.thisN'
p7267
I60
sg33
g7039
sg64
g65
sS'trial_loop.thisIndex'
p7268
g60
(g99
S'<\x00\x00\x00'
tRp7269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7270
I0
sg6380
g7043
sS'block_loop.thisRepN'
p7271
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vy
sS'block_loop.thisTrialN'
p7274
I0
sg39
F0.99958233049983392
sg34
g753
(S'\x07\xdf\x07\r\x11&2\x07^\xb8'
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
g7052
sS'block_loop.thisIndex'
p7278
g6365
sg38
S'right'
p7279
sg59
g63
sS'trial_loop.thisN'
p7280
I61
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p7281
g60
(g99
S'=\x00\x00\x00'
tRp7282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7283
I0
sg6380
g7060
sS'block_loop.thisRepN'
p7284
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vy
sS'block_loop.thisTrialN'
p7287
I0
sg39
F0.8164209971728269
sg34
g753
(S'\x07\xdf\x07\r\x11&8\x07\xef@'
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6392
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'right'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vy
sS'block_loop.thisTrialN'
p7300
I0
sg39
F0.88330998375749914
sg34
g753
(S"\x07\xdf\x07\r\x11'\x02\x05\xa5P"
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
S'30-spaghetti_hoops.png'
p7304
sS'block_loop.thisIndex'
p7305
g6365
sg38
S'right'
p7306
sg59
g63
sS'trial_loop.thisN'
p7307
I63
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7308
g60
(g99
S'?\x00\x00\x00'
tRp7309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7310
I0
sg6380
S'19-caramello_redo.png'
p7311
sS'block_loop.thisRepN'
p7312
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7313
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7314
Nsg70
Vy
sS'block_loop.thisTrialN'
p7315
I0
sg39
F0.73314568140995107
sg34
g753
(S"\x07\xdf\x07\r\x11'\x08\x04M\x90"
tRp7316
sa(dp7317
S'trial_loop.thisTrialN'
p7318
I64
sg6371
g7123
sS'block_loop.thisIndex'
p7319
g6365
sg38
S'right'
p7320
sg59
g63
sS'trial_loop.thisN'
p7321
I64
sg33
g7134
sg64
g65
sS'trial_loop.thisIndex'
p7322
g60
(g99
S'@\x00\x00\x00'
tRp7323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7324
I0
sg6380
g7131
sS'block_loop.thisRepN'
p7325
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7326
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p7327
Nsg70
Vy
sS'block_loop.thisTrialN'
p7328
I0
sg39
F0.81669298127235379
sg34
g753
(S"\x07\xdf\x07\r\x11'\x0e\x00\xd2\xf0"
tRp7329
sa(dp7330
S'trial_loop.thisTrialN'
p7331
I65
sg6371
S'6-sour_patch_kids.png'
p7332
sS'block_loop.thisIndex'
p7333
g6365
sg38
S'right'
p7334
sg59
g63
sS'trial_loop.thisN'
p7335
I65
sg33
g7046
sg64
g65
sS'trial_loop.thisIndex'
p7336
g60
(g99
S'A\x00\x00\x00'
tRp7337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7338
I0
sg6380
S'38-maltesers.png'
p7339
sS'block_loop.thisRepN'
p7340
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7341
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p7342
Nsg70
Vy
sS'block_loop.thisTrialN'
p7343
I0
sg39
F0.86628702932284796
sg34
g753
(S"\x07\xdf\x07\r\x11'\x13\r\xcb@"
tRp7344
sa(dp7345
S'trial_loop.thisTrialN'
p7346
I66
sg6371
g6884
sS'block_loop.thisIndex'
p7347
g6365
sg38
S'left'
p7348
sg59
g63
sS'trial_loop.thisN'
p7349
I66
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7350
g60
(g99
S'B\x00\x00\x00'
tRp7351
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7352
I0
sg6380
g6891
sS'block_loop.thisRepN'
p7353
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7354
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7355
Nsg70
Vy
sS'block_loop.thisTrialN'
p7356
I0
sg39
F0.71662877705966821
sg34
g753
(S"\x07\xdf\x07\r\x11'\x19\x0c8\xe8"
tRp7357
sa(dp7358
S'trial_loop.thisTrialN'
p7359
I67
sg6371
g6520
sS'block_loop.thisIndex'
p7360
g6365
sg38
S'left'
p7361
sg59
g63
sS'trial_loop.thisN'
p7362
I67
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7363
g60
(g99
S'C\x00\x00\x00'
tRp7364
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7365
I0
sg6380
g6528
sS'block_loop.thisRepN'
p7366
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7367
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7368
Nsg70
Vy
sS'block_loop.thisTrialN'
p7369
I0
sg39
F1.6498720762429002
sg34
g753
(S"\x07\xdf\x07\r\x11'\x1f\x08\x83\xb0"
tRp7370
sa(dp7371
S'trial_loop.thisTrialN'
p7372
I68
sg6371
g6599
sS'block_loop.thisIndex'
p7373
g6365
sg38
S'left'
p7374
sg59
g63
sS'trial_loop.thisN'
p7375
I68
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p7376
g60
(g99
S'D\x00\x00\x00'
tRp7377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7378
I0
sg6380
g6607
sS'block_loop.thisRepN'
p7379
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7380
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p7381
Nsg70
Vy
sS'block_loop.thisTrialN'
p7382
I0
sg39
F0.6999242778038024
sg34
g753
(S"\x07\xdf\x07\r\x11'&\x03\x92\x10"
tRp7383
sa(dp7384
S'trial_loop.thisTrialN'
p7385
I69
sg6371
g7235
sS'block_loop.thisIndex'
p7386
g6365
sg38
S'left'
p7387
sg59
g63
sS'trial_loop.thisN'
p7388
I69
sg33
g7127
sg64
g65
sS'trial_loop.thisIndex'
p7389
g60
(g99
S'E\x00\x00\x00'
tRp7390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7391
I0
sg6380
g7242
sS'block_loop.thisRepN'
p7392
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7393
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p7394
Nsg70
Vy
sS'block_loop.thisTrialN'
p7395
I0
sg39
F1.8498992746535805
sg34
g753
(S"\x07\xdf\x07\r\x11'+\x0e\xe0\x98"
tRp7396
sa(dp7397
S'trial_loop.thisTrialN'
p7398
I70
sg6371
g6409
sS'block_loop.thisIndex'
p7399
g6365
sg38
S'left'
p7400
sg59
g63
sS'trial_loop.thisN'
p7401
I70
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7402
g60
(g99
S'F\x00\x00\x00'
tRp7403
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7404
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7405
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7406
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7407
Nsg70
Vy
sS'block_loop.thisTrialN'
p7408
I0
sg39
F0.71658059538822272
sg34
g753
(S"\x07\xdf\x07\r\x11'2\r\x0b\xd8"
tRp7409
sa(dp7410
S'trial_loop.thisTrialN'
p7411
I71
sg6371
g7250
sS'block_loop.thisIndex'
p7412
g6365
sg38
S'left'
p7413
sg59
g63
sS'trial_loop.thisN'
p7414
I71
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p7415
g60
(g99
S'G\x00\x00\x00'
tRp7416
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7417
I0
sg6380
g7257
sS'block_loop.thisRepN'
p7418
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7419
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7420
Nsg70
Vy
sS'block_loop.thisTrialN'
p7421
I0
sg39
F0.7831853386342118
sg34
g753
(S"\x07\xdf\x07\r\x11'8\tR\xb8"
tRp7422
sa(dp7423
S'trial_loop.thisTrialN'
p7424
I72
sg6371
g6744
sS'block_loop.thisIndex'
p7425
g6365
sg38
S'right'
p7426
sg59
g63
sS'trial_loop.thisN'
p7427
I72
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p7428
g60
(g99
S'H\x00\x00\x00'
tRp7429
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7430
I0
sg6380
g6751
sS'block_loop.thisRepN'
p7431
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7432
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p7433
Nsg70
Vy
sS'block_loop.thisTrialN'
p7434
I0
sg39
F0.76659117254894227
sg34
g753
(S'\x07\xdf\x07\r\x11(\x02\x06U\x18'
tRp7435
sa(dp7436
S'trial_loop.thisTrialN'
p7437
I73
sg6371
S'10-bounty_redo.png'
p7438
sS'block_loop.thisIndex'
p7439
g6365
sg38
S'right'
p7440
sg59
g63
sS'trial_loop.thisN'
p7441
I73
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p7442
g60
(g99
S'I\x00\x00\x00'
tRp7443
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7444
I0
sg6380
S'4-corn.png'
p7445
sS'block_loop.thisRepN'
p7446
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7447
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p7448
Nsg70
Vy
sS'block_loop.thisTrialN'
p7449
I0
sg39
F0.9836672693672881
sg34
g753
(S'\x07\xdf\x07\r\x11(\x08\x03S\x90'
tRp7450
sa(dp7451
S'trial_loop.thisTrialN'
p7452
I74
sg6371
g6372
sS'block_loop.thisIndex'
p7453
g6365
sg38
S'right'
p7454
sg59
g63
sS'trial_loop.thisN'
p7455
I74
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7456
g60
(g99
S'J\x00\x00\x00'
tRp7457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7458
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7459
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7460
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7461
Nsg70
Vy
sS'block_loop.thisTrialN'
p7462
I0
sg39
F0.64996330780559219
sg34
g753
(S'\x07\xdf\x07\r\x11(\x0e\x03\xa5\x98'
tRp7463
sa(dp7464
S'trial_loop.thisTrialN'
p7465
I75
sg6371
g6938
sS'block_loop.thisIndex'
p7466
g6365
sg38
S'left'
p7467
sg59
g63
sS'trial_loop.thisN'
p7468
I75
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p7469
g60
(g99
S'K\x00\x00\x00'
tRp7470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7471
I0
sg6380
g6945
sS'block_loop.thisRepN'
p7472
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7473
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p7474
Nsg70
Vy
sS'block_loop.thisTrialN'
p7475
I0
sg39
F2.3832683593536785
sg34
g753
(S'\x07\xdf\x07\r\x11(\x13\x0e\x01\xf0'
tRp7476
sa(dp7477
S'trial_loop.thisTrialN'
p7478
I76
sg6371
S'3-ellas_strawberries_apples.png'
p7479
sS'block_loop.thisIndex'
p7480
g6365
sg38
S'left'
p7481
sg59
g63
sS'trial_loop.thisN'
p7482
I76
sg33
g7209
sg64
g65
sS'trial_loop.thisIndex'
p7483
g60
(g99
S'L\x00\x00\x00'
tRp7484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7485
I0
sg6380
S'13-mccoys_steak_crisps.png'
p7486
sS'block_loop.thisRepN'
p7487
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7488
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p7489
Nsg70
Vy
sS'block_loop.thisTrialN'
p7490
I0
sg39
F0.89996972252629348
sg34
g753
(S'\x07\xdf\x07\r\x11(\x1b\x05;\xd8'
tRp7491
sa(dp7492
S'trial_loop.thisTrialN'
p7493
I77
sg6371
g6744
sS'block_loop.thisIndex'
p7494
g6365
sg38
S'right'
p7495
sg59
g63
sS'trial_loop.thisN'
p7496
I77
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p7497
g60
(g99
S'M\x00\x00\x00'
tRp7498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7499
I0
sg6380
g6751
sS'block_loop.thisRepN'
p7500
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7501
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p7502
Nsg70
Vy
sS'block_loop.thisTrialN'
p7503
I0
sg39
F0.63322887319372967
sg34
g753
(S'\x07\xdf\x07\r\x11(!\x04"\x98'
tRp7504
sa(dp7505
S'trial_loop.thisTrialN'
p7506
I78
sg6371
g7304
sS'block_loop.thisIndex'
p7507
g6365
sg38
S'right'
p7508
sg59
g63
sS'trial_loop.thisN'
p7509
I78
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7510
g60
(g99
S'N\x00\x00\x00'
tRp7511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7512
I0
sg6380
g7311
sS'block_loop.thisRepN'
p7513
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7514
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7515
Nsg70
Vy
sS'block_loop.thisTrialN'
p7516
I0
sg39
F0.6667042996850796
sg34
g753
(S'\x07\xdf\x07\r\x11(&\x0e@p'
tRp7517
sa(dp7518
S'trial_loop.thisTrialN'
p7519
I79
sg6371
g6520
sS'block_loop.thisIndex'
p7520
g6365
sg38
S'left'
p7521
sg59
g63
sS'trial_loop.thisN'
p7522
I79
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7523
g60
(g99
S'O\x00\x00\x00'
tRp7524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7525
I0
sg6380
g6528
sS'block_loop.thisRepN'
p7526
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7527
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7528
Nsg70
Vy
sS'block_loop.thisTrialN'
p7529
I0
sg39
F0.79985847703937907
sg34
g753
(S'\x07\xdf\x07\r\x11(,\t\xd3\xa0'
tRp7530
sa(dp7531
S'trial_loop.thisTrialN'
p7532
I80
sg6371
g6505
sS'block_loop.thisIndex'
p7533
g6365
sg38
S'left'
p7534
sg59
g63
sS'trial_loop.thisN'
p7535
I80
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p7536
g60
(g99
S'P\x00\x00\x00'
tRp7537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7538
I0
sg6380
g6512
sS'block_loop.thisRepN'
p7539
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7540
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p7541
Nsg70
Vy
sS'block_loop.thisTrialN'
p7542
I0
sg39
F1.066543732133141
sg34
g753
(S'\x07\xdf\x07\r\x11(2\x07\x10\x98'
tRp7543
sa(dp7544
S'trial_loop.thisTrialN'
p7545
I81
sg6371
g6537
sS'block_loop.thisIndex'
p7546
g6365
sg38
S'left'
p7547
sg59
g63
sS'trial_loop.thisN'
p7548
I81
sg33
g6548
sg64
g65
sS'trial_loop.thisIndex'
p7549
g60
(g99
S'Q\x00\x00\x00'
tRp7550
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7551
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7552
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7553
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7554
Nsg70
Vy
sS'block_loop.thisTrialN'
p7555
I0
sg39
F1.199700475372083
sg34
g753
(S'\x07\xdf\x07\r\x11(8\x08\xd1\xd0'
tRp7556
sa(dp7557
S'trial_loop.thisTrialN'
p7558
I82
sg6371
g6458
sS'block_loop.thisIndex'
p7559
g6365
sg38
S'right'
p7560
sg59
g63
sS'trial_loop.thisN'
p7561
I82
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7562
g60
(g99
S'R\x00\x00\x00'
tRp7563
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7564
I0
sg6380
g6466
sS'block_loop.thisRepN'
p7565
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7566
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7567
Nsg70
Vy
sS'block_loop.thisTrialN'
p7568
I0
sg39
F1.050021410908812
sg34
g753
(S'\x07\xdf\x07\r\x11)\x02\x0c<\xd0'
tRp7569
sa(dp7570
S'trial_loop.thisTrialN'
p7571
I83
sg6371
g6667
sS'block_loop.thisIndex'
p7572
g6365
sg38
S'left'
p7573
sg59
g63
sS'trial_loop.thisN'
p7574
I83
sg33
g6678
sg64
g65
sS'trial_loop.thisIndex'
p7575
g60
(g99
S'S\x00\x00\x00'
tRp7576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7577
I0
sg6380
g6675
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7579
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vy
sS'block_loop.thisTrialN'
p7581
I0
sg39
F1.1333283726198715
sg34
g753
(S'\x07\xdf\x07\r\x11)\x08\r\x84\xf0'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g6633
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'right'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6644
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g6641
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7592
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vy
sS'block_loop.thisTrialN'
p7594
I0
sg39
F1.4332304697454674
sg34
g753
(S'\x07\xdf\x07\r\x11)\x0f\x00\xbb\x80'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
g6884
sS'block_loop.thisIndex'
p7598
g6365
sg38
S'left'
p7599
sg59
g63
sS'trial_loop.thisN'
p7600
I85
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7601
g60
(g99
S'U\x00\x00\x00'
tRp7602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7603
I0
sg6380
g6891
sS'block_loop.thisRepN'
p7604
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7605
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7606
Nsg70
Vy
sS'block_loop.thisTrialN'
p7607
I0
sg39
F1.0999647047901817
sg34
g753
(S'\x07\xdf\x07\r\x11)\x15\x07\xf7\x10'
tRp7608
sa(dp7609
S'trial_loop.thisTrialN'
p7610
I86
sg6371
g6475
sS'block_loop.thisIndex'
p7611
g6365
sg38
S'right'
p7612
sg59
g63
sS'trial_loop.thisN'
p7613
I86
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p7614
g60
(g99
S'V\x00\x00\x00'
tRp7615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7616
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7617
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7618
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p7619
Nsg70
Vy
sS'block_loop.thisTrialN'
p7620
I0
sg39
F0.7999146414695133
sg34
g753
(S'\x07\xdf\x07\r\x11)\x1b\t\xf6\xc8'
tRp7621
sa(dp7622
S'trial_loop.thisTrialN'
p7623
I87
sg6371
g7095
sS'block_loop.thisIndex'
p7624
g6365
sg38
S'right'
p7625
sg59
g63
sS'trial_loop.thisN'
p7626
I87
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p7627
g60
(g99
S'W\x00\x00\x00'
tRp7628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7629
I0
sg6380
g7102
sS'block_loop.thisRepN'
p7630
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7631
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vy
sS'block_loop.thisTrialN'
p7633
I0
sg39
F0.63322146063001128
sg34
g753
(S'\x07\xdf\x07\r\x11)!\x07nX'
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6938
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'left'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6850
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6945
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7644
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vy
sS'block_loop.thisTrialN'
p7646
I0
sg39
F1.7003713124613569
sg34
g753
(S"\x07\xdf\x07\r\x11)'\x02I\xf0"
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g6759
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'right'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g6766
sS'block_loop.thisRepN'
p7656
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7657
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vy
sS'block_loop.thisTrialN'
p7659
I0
sg39
F0.883238709095167
sg34
g753
(S'\x07\xdf\x07\r\x11)-\r\x94\x90'
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
g7052
sS'block_loop.thisIndex'
p7663
g6365
sg38
S'right'
p7664
sg59
g63
sS'trial_loop.thisN'
p7665
I90
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p7666
g60
(g99
S'Z\x00\x00\x00'
tRp7667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7668
I0
sg6380
g7060
sS'block_loop.thisRepN'
p7669
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7670
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7671
Nsg70
Vy
sS'block_loop.thisTrialN'
p7672
I0
sg39
F0.64989545433127205
sg34
g753
(S'\x07\xdf\x07\r\x11)3\x0c<\xd0'
tRp7673
sa(dp7674
S'trial_loop.thisTrialN'
p7675
I91
sg6371
g6839
sS'block_loop.thisIndex'
p7676
g6365
sg38
S'right'
p7677
sg59
g63
sS'trial_loop.thisN'
p7678
I91
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p7679
g60
(g99
S'[\x00\x00\x00'
tRp7680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7681
I0
sg6380
g6847
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7683
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vy
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.66662675285624573
sg34
g753
(S'\x07\xdf\x07\r\x11)9\x07S\x00'
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g6869
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'right'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g6876
sS'block_loop.thisRepN'
p7695
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vy
sS'block_loop.thisTrialN'
p7698
I0
sg39
F0.79985220486560138
sg34
g753
(S'\x07\xdf\x07\r\x11*\x03\x02\xe60'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g7250
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'left'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g7257
sS'block_loop.thisRepN'
p7708
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7709
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vy
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.6999935567691864
sg34
g753
(S'\x07\xdf\x07\r\x11*\t\x00]\xc0'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
g6441
sS'block_loop.thisIndex'
p7715
g6365
sg38
S'left'
p7716
sg59
g63
sS'trial_loop.thisN'
p7717
I94
sg33
g6452
sg64
g65
sS'trial_loop.thisIndex'
p7718
g60
(g99
S'^\x00\x00\x00'
tRp7719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7720
I0
sg6380
g6449
sS'block_loop.thisRepN'
p7721
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7722
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vy
sS'block_loop.thisTrialN'
p7724
I0
sg39
F1.1332608042393986
sg34
g753
(S'\x07\xdf\x07\r\x11*\x0e\x0bq\xb0'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g6372
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'right'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7734
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7735
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vy
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.66659567710667034
sg34
g753
(S'\x07\xdf\x07\r\x11*\x14\x0e%\x18'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g7438
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'right'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g6610
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g7445
sS'block_loop.thisRepN'
p7747
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7748
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vy
sS'block_loop.thisTrialN'
p7750
I0
sg39
F1.4999626520802849
sg34
g753
(S'\x07\xdf\x07\r\x11*\x1a\ty\xc8'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g7205
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'right'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g7209
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g7213
sS'block_loop.thisRepN'
p7760
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7761
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vy
sS'block_loop.thisTrialN'
p7763
I0
sg39
F0.89987449958061916
sg34
g753
(S'\x07\xdf\x07\r\x11*!\x02i0'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g6567
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'left'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g6574
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vy
sS'block_loop.thisTrialN'
p7776
I0
sg39
F0.88318425525721977
sg34
g753
(S"\x07\xdf\x07\r\x11*'\x01O\xf0"
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6475
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'right'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vy
sS'block_loop.thisTrialN'
p7789
I0
sg39
F1.133300432949909
sg34
g753
(S'\x07\xdf\x07\r\x11*,\x0f:p'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g6729
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'left'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g6736
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vy
sS'block_loop.thisTrialN'
p7802
I0
sg39
F0.83325122492897208
sg34
g753
(S'\x07\xdf\x07\r\x11*3\x02\xaf\x80'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g7205
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'right'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g7209
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g7213
sS'block_loop.thisRepN'
p7812
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vy
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.73316962969329325
sg34
g753
(S'\x07\xdf\x07\r\x11*9\x00\xa0('
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6633
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'right'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6641
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vy
sS'block_loop.thisTrialN'
p7828
I0
sg39
F0.93322077639095369
sg34
g753
(S'\x07\xdf\x07\r\x11+\x02\x0c-0'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6667
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'left'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6675
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vy
sS'block_loop.thisTrialN'
p7841
I0
sg39
F0.99987199071256327
sg34
g753
(S'\x07\xdf\x07\r\x11+\x08\x0b\xc7\xa0'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g7479
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'left'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g7209
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g7486
sS'block_loop.thisRepN'
p7851
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vy
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.99996008619200438
sg34
g753
(S'\x07\xdf\x07\r\x11+\x0e\x0c\\\x10'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g6392
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vy
sS'block_loop.thisTrialN'
p7867
I0
sg39
F1.3503254971110437
sg34
g753
(S'\x07\xdf\x07\r\x11+\x14\x0c\xae\x18'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g7304
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g7311
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vy
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.66666438587708399
sg34
g753
(S'\x07\xdf\x07\r\x11+\x1b\x03< '
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g6966
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g6973
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vy
sS'block_loop.thisTrialN'
p7893
I0
sg39
F1.066655205700954
sg34
g753
(S'\x07\xdf\x07\r\x11+ \x0e\r\xa8'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6697
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'left'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6705
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vy
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.63331497298349859
sg34
g753
(S"\x07\xdf\x07\r\x11+'\x00R\x08"
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6839
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6847
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vy
sS'block_loop.thisTrialN'
p7919
I0
sg39
F1.4999786176013004
sg34
g753
(S'\x07\xdf\x07\r\x11+,\no\xe0'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g7250
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'left'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g7063
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g7257
sS'block_loop.thisRepN'
p7929
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vy
sS'block_loop.thisTrialN'
p7932
I0
sg39
F1.6003293459434644
sg34
g753
(S'\x07\xdf\x07\r\x11+3\x03[`'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g6426
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'left'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g6433
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vy
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.73327768208037014
sg34
g753
(S'\x07\xdf\x07\r\x11+9\x0c\xf8P'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g6409
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'left'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7955
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vy
sS'block_loop.thisTrialN'
p7958
I0
sg39
F0.66658398806248442
sg34
g753
(S'\x07\xdf\x07\r\x11,\x03\t}\xb0'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g7332
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'right'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g7046
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g7339
sS'block_loop.thisRepN'
p7968
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vy
sS'block_loop.thisTrialN'
p7971
I0
sg39
F1.7163126026716782
sg34
g753
(S'\x07\xdf\x07\r\x11,\t\x04\xd2`'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g6839
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'right'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g6847
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vy
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.68333153720959672
sg34
g753
(S'\x07\xdf\x07\r\x11,\x10\x01\x15X'
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g6441
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'left'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6452
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g6449
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vy
sS'block_loop.thisTrialN'
p7997
I0
sg39
F1.1169751148809155
sg34
g753
(S'\x07\xdf\x07\r\x11,\x15\x0b\xea\xc8'
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g7250
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'left'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8007
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vy
sS'block_loop.thisTrialN'
p8010
I0
sg39
F1.2499265871010721
sg34
g753
(S'\x07\xdf\x07\r\x11,\x1b\x0ec\x98'
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g6650
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'left'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g6658
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vy
sS'block_loop.thisTrialN'
p8023
I0
sg39
F0.7333289998350665
sg34
g753
(S'\x07\xdf\x07\r\x11,"\x03C\xf0'
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g6441
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'left'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g6449
sS'block_loop.thisRepN'
p8033
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vy
sS'block_loop.thisTrialN'
p8036
I0
sg39
F1.1499216834054096
sg34
g753
(S"\x07\xdf\x07\r\x11,'\x0f\x0b\x90"
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g6426
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'left'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g6433
sS'block_loop.thisRepN'
p8046
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vy
sS'block_loop.thisTrialN'
p8049
I0
sg39
F0.68321379147528205
sg34
g753
(S'\x07\xdf\x07\r\x11,.\x02|\xb8'
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6938
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'left'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6945
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vy
sS'block_loop.thisTrialN'
p8062
I0
sg39
F0.84989813426000183
sg34
g753
(S'\x07\xdf\x07\r\x11,3\r\x90\xa8'
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
g7035
sS'block_loop.thisIndex'
p8066
g6365
sg38
S'left'
p8067
sg59
g63
sS'trial_loop.thisN'
p8068
I121
sg33
g7039
sg64
g65
sS'trial_loop.thisIndex'
p8069
g60
(g99
S'y\x00\x00\x00'
tRp8070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8071
I0
sg6380
g7043
sS'block_loop.thisRepN'
p8072
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8073
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p8074
Nsg70
Vy
sS'block_loop.thisTrialN'
p8075
I0
sg39
F0.7162533021546551
sg34
g753
(S'\x07\xdf\x07\r\x11,9\x0b\xbf\xd0'
tRp8076
sa(dp8077
S'trial_loop.thisTrialN'
p8078
I122
sg6371
g7479
sS'block_loop.thisIndex'
p8079
g6365
sg38
S'left'
p8080
sg59
g63
sS'trial_loop.thisN'
p8081
I122
sg33
g7209
sg64
g65
sS'trial_loop.thisIndex'
p8082
g60
(g99
S'z\x00\x00\x00'
tRp8083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8084
I0
sg6380
g7486
sS'block_loop.thisRepN'
p8085
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8086
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p8087
Nsg70
Vy
sS'block_loop.thisTrialN'
p8088
I0
sg39
F0.68315648665156914
sg34
g753
(S'\x07\xdf\x07\r\x11-\x03\x07\xcc\x18'
tRp8089
sa(dp8090
S'trial_loop.thisTrialN'
p8091
I123
sg6371
g6505
sS'block_loop.thisIndex'
p8092
g6365
sg38
S'left'
p8093
sg59
g63
sS'trial_loop.thisN'
p8094
I123
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p8095
g60
(g99
S'{\x00\x00\x00'
tRp8096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8097
I0
sg6380
g6512
sS'block_loop.thisRepN'
p8098
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8099
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p8100
Nsg70
Vy
sS'block_loop.thisTrialN'
p8101
I0
sg39
F0.71663020255073206
sg34
g753
(S'\x07\xdf\x07\r\x11-\t\x03\x99\xe0'
tRp8102
sa(dp8103
S'trial_loop.thisTrialN'
p8104
I124
sg6371
g6714
sS'block_loop.thisIndex'
p8105
g6365
sg38
S'right'
p8106
sg59
g63
sS'trial_loop.thisN'
p8107
I124
sg33
g6661
sg64
g65
sS'trial_loop.thisIndex'
p8108
g60
(g99
S'|\x00\x00\x00'
tRp8109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8110
I0
sg6380
g6721
sS'block_loop.thisRepN'
p8111
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8112
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p8113
Nsg70
Vy
sS'block_loop.thisTrialN'
p8114
I0
sg39
F0.94985713707501418
sg34
g753
(S'\x07\xdf\x07\r\x11-\x0e\x0e\xe8h'
tRp8115
sa(dp8116
S'trial_loop.thisTrialN'
p8117
I125
sg6371
g6759
sS'block_loop.thisIndex'
p8118
g6365
sg38
S'right'
p8119
sg59
g63
sS'trial_loop.thisN'
p8120
I125
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8121
g60
(g99
S'}\x00\x00\x00'
tRp8122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8123
I0
sg6380
g6766
sS'block_loop.thisRepN'
p8124
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8125
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8126
Nsg70
Vy
sS'block_loop.thisTrialN'
p8127
I0
sg39
F1.0999644196926965
sg34
g753
(S'\x07\xdf\x07\r\x11-\x14\x0e\xc1X'
tRp8128
sa(dp8129
S'trial_loop.thisTrialN'
p8130
I126
sg6371
g6582
sS'block_loop.thisIndex'
p8131
g6365
sg38
S'left'
p8132
sg59
g63
sS'trial_loop.thisN'
p8133
I126
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8134
g60
(g99
S'~\x00\x00\x00'
tRp8135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8136
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8137
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8138
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8139
Nsg70
Vy
sS'block_loop.thisTrialN'
p8140
I0
sg39
F1.0170617278454301
sg34
g753
(S'\x07\xdf\x07\r\x11-\x1b\x01~\xd0'
tRp8141
sa(dp8142
S'trial_loop.thisTrialN'
p8143
I127
sg6371
g6475
sS'block_loop.thisIndex'
p8144
g6365
sg38
S'right'
p8145
sg59
g63
sS'trial_loop.thisN'
p8146
I127
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p8147
g60
(g99
S'\x7f\x00\x00\x00'
tRp8148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8149
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8150
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8151
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p8152
Nsg70
Vy
sS'block_loop.thisTrialN'
p8153
I0
sg39
F0.73337090933637228
sg34
g753
(S'\x07\xdf\x07\r\x11-!\x02M\xd8'
tRp8154
sa(dp8155
S'trial_loop.thisTrialN'
p8156
I128
sg6371
g7205
sS'block_loop.thisIndex'
p8157
g6365
sg38
S'right'
p8158
sg59
g63
sS'trial_loop.thisN'
p8159
I128
sg33
g7216
sg64
g65
sS'trial_loop.thisIndex'
p8160
g60
(g99
S'\x80\x00\x00\x00'
tRp8161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8162
I0
sg6380
g7213
sS'block_loop.thisRepN'
p8163
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8164
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p8165
Nsg70
Vy
sS'block_loop.thisTrialN'
p8166
I0
sg39
F0.93317943708825624
sg34
g753
(S'\x07\xdf\x07\r\x11-&\x0e\x15x'
tRp8167
sa(dp8168
S'trial_loop.thisTrialN'
p8169
I129
sg6371
g7095
sS'block_loop.thisIndex'
p8170
g6365
sg38
S'right'
p8171
sg59
g63
sS'trial_loop.thisN'
p8172
I129
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p8173
g60
(g99
S'\x81\x00\x00\x00'
tRp8174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8175
I0
sg6380
g7102
sS'block_loop.thisRepN'
p8176
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8177
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p8178
Nsg70
Vy
sS'block_loop.thisTrialN'
p8179
I0
sg39
F0.74995538206349011
sg34
g753
(S'\x07\xdf\x07\r\x11-,\ruP'
tRp8180
sa(dp8181
S'trial_loop.thisTrialN'
p8182
I130
sg6371
g6392
sS'block_loop.thisIndex'
p8183
g6365
sg38
S'right'
p8184
sg59
g63
sS'trial_loop.thisN'
p8185
I130
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8186
g60
(g99
S'\x82\x00\x00\x00'
tRp8187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8188
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8189
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8190
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8191
Nsg70
Vy
sS'block_loop.thisTrialN'
p8192
I0
sg39
F3.3832224584730284
sg34
g753
(S'\x07\xdf\x07\r\x11-2\n90'
tRp8193
sa(dp8194
S'trial_loop.thisTrialN'
p8195
I131
sg6371
g6744
sS'block_loop.thisIndex'
p8196
g6365
sg38
S'right'
p8197
sg59
g63
sS'trial_loop.thisN'
p8198
I131
sg33
g6593
sg64
g65
sS'trial_loop.thisIndex'
p8199
g60
(g99
S'\x83\x00\x00\x00'
tRp8200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8201
I0
sg6380
g6751
sS'block_loop.thisRepN'
p8202
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8203
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8204
Nsg70
Vy
sS'block_loop.thisTrialN'
p8205
I0
sg39
F0.70027637462044368
sg34
g753
(S'\x07\xdf\x07\r\x11-;\x010\xb0'
tRp8206
sa(dp8207
S'trial_loop.thisTrialN'
p8208
I132
sg6371
g7332
sS'block_loop.thisIndex'
p8209
g6365
sg38
S'right'
p8210
sg59
g63
sS'trial_loop.thisN'
p8211
I132
sg33
g7046
sg64
g65
sS'trial_loop.thisIndex'
p8212
g60
(g99
S'\x84\x00\x00\x00'
tRp8213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8214
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8215
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8216
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p8217
Nsg70
Vy
sS'block_loop.thisTrialN'
p8218
I0
sg39
F3.4495421030806028
sg34
g753
(S'\x07\xdf\x07\r\x11.\x04\x0c\x7f8'
tRp8219
sa(dp8220
S'trial_loop.thisTrialN'
p8221
I133
sg6371
g6616
sS'block_loop.thisIndex'
p8222
g6365
sg38
S'right'
p8223
sg59
g63
sS'trial_loop.thisN'
p8224
I133
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8225
g60
(g99
S'\x85\x00\x00\x00'
tRp8226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8227
I0
sg6380
g6624
sS'block_loop.thisRepN'
p8228
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8229
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8230
Nsg70
Vy
sS'block_loop.thisTrialN'
p8231
I0
sg39
F0.80000672832829878
sg34
g753
(S'\x07\xdf\x07\r\x11.\r\x04\xa7h'
tRp8232
sa(dp8233
S'trial_loop.thisTrialN'
p8234
I134
sg6371
g6599
sS'block_loop.thisIndex'
p8235
g6365
sg38
S'left'
p8236
sg59
g63
sS'trial_loop.thisN'
p8237
I134
sg33
g6610
sg64
g65
sS'trial_loop.thisIndex'
p8238
g60
(g99
S'\x86\x00\x00\x00'
tRp8239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8240
I0
sg6380
g6607
sS'block_loop.thisRepN'
p8241
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8242
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p8243
Nsg70
Vy
sS'block_loop.thisTrialN'
p8244
I0
sg39
F0.79999047770616016
sg34
g753
(S'\x07\xdf\x07\r\x11.\x13\x02"\xe0'
tRp8245
sa(dp8246
S'trial_loop.thisTrialN'
p8247
I135
sg6371
S'31-hobnobs.png'
p8248
sS'block_loop.thisIndex'
p8249
g6365
sg38
S'right'
p8250
sg59
g63
sS'trial_loop.thisN'
p8251
I135
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8252
g60
(g99
S'\x87\x00\x00\x00'
tRp8253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8254
I0
sg6380
S'25-kitkat.png'
p8255
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F1.4665687637971132
sg34
g753
(S'\x07\xdf\x07\r\x11.\x18\x0e\xdc\xb0'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6667
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6675
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.8833450508864189
sg34
g753
(S'\x07\xdf\x07\r\x11.\x1f\x07\x14\x80'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6981
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6988
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.83333703961761785
sg34
g753
(S'\x07\xdf\x07\r\x11.%\x05\xbc\xc0'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7235
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g7127
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8295
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.86663513475650689
sg34
g753
(S'\x07\xdf\x07\r\x11.+\x03\xeb\xe8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6981
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6988
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.94992156936496031
sg34
g753
(S'\x07\xdf\x07\r\x11.1\x02Y\x90'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6616
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6624
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.86659179976413725
sg34
g753
(S'\x07\xdf\x07\r\x11.7\x01\xf7\xe8'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6744
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6751
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.81658777987468056
sg34
g753
(S'\x07\xdf\x07\r\x11/\x01\x00\xa0('
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6966
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6973
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.4666671228224004
sg34
g753
(S'\x07\xdf\x07\r\x11/\x06\r]\xe0'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6582
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6593
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.83323041272524279
sg34
g753
(S'\x07\xdf\x07\r\x11/\r\x05\xd0H'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6966
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6973
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.79993117718913709
sg34
g753
(S'\x07\xdf\x07\r\x11/\x13\x03\xc0\xf0'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6458
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'right'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6466
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.1664394430554239
sg34
g753
(S'\x07\xdf\x07\r\x11/\x19\x01<h'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7332
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g7039
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8399
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.74966429635969689
sg34
g753
(S'\x07\xdf\x07\r\x11/\x1f\x04l\xd0'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7479
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g7216
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7486
sS'block_loop.thisRepN'
p8412
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.83329227913054638
sg34
g753
(S'\x07\xdf\x07\r\x11/%\x00\xf20'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6650
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6658
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.96666712282603839
sg34
g753
(S'\x07\xdf\x07\r\x11/*\x0e%\x18'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g7123
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g7134
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g7131
sS'block_loop.thisRepN'
p8438
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.76665018796484219
sg34
g753
(S'\x07\xdf\x07\r\x11/0\x0e<\x88'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6697
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6705
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.61659764428986819
sg34
g753
(S'\x07\xdf\x07\r\x11/6\x0b>\xe8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7235
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g7127
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8464
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F2.7165868675583624
sg34
g753
(S'\x07\xdf\x07\r\x110\x00\x05\xdc\x00'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6981
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6988
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.88326436797433416
sg34
g753
(S'\x07\xdf\x07\r\x110\x08\x02\x17('
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6714
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6721
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.63330385413428303
sg34
g753
(S'\x07\xdf\x07\r\x110\x0e\x00\xbfh'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6938
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6945
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.81657466533579282
sg34
g753
(S'\x07\xdf\x07\r\x110\x13\n\xdd@'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6869
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6876
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F2.4669832972103904
sg34
g753
(S'\x07\xdf\x07\r\x110\x19\x08\x93P'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6505
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6512
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.91654450189889758
sg34
g753
(S'\x07\xdf\x07\r\x110!\x01\x01\xd0'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6599
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6607
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.68327423238588381
sg34
g753
(S"\x07\xdf\x07\r\x110'\x00#("
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6409
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.76665417934418656
sg34
g753
(S'\x07\xdf\x07\r\x110,\x0b7\x18'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g7332
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g7039
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8568
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F1.0330486338352785
sg34
g753
(S'\x07\xdf\x07\r\x1102\x085\x90'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6458
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6466
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.5998098962299991
sg34
g753
(S'\x07\xdf\x07\r\x1108\t?0'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6759
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6766
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F3.5998951407200366
sg34
g753
(S'\x07\xdf\x07\r\x111\x03\x03\x99\xe0'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6520
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.7833364409088972
sg34
g753
(S'\x07\xdf\x07\r\x111\x0b\r+\x18'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7479
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g7216
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7486
sS'block_loop.thisRepN'
p8620
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.65036814786799368
sg34
g753
(S'\x07\xdf\x07\r\x111\x11\nh\x10'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g8248
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g8255
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.79981998872244731
sg34
g753
(S'\x07\xdf\x07\r\x111\x17\x05~@'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6729
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6736
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.73321239449433051
sg34
g753
(S'\x07\xdf\x07\r\x111\x1d\x02\xf9\xb8'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g7035
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g7039
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g7043
sS'block_loop.thisRepN'
p8659
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.0329539810882125
sg34
g753
(S'\x07\xdf\x07\r\x111"\x0e\xc1X'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6633
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6641
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6637
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6644
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.79989981633843854
sg34
g753
(S'\x07\xdf\x07\r\x111)\x00\x88\xb8'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7438
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7445
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.89972197181123192
sg34
g753
(S'\x07\xdf\x07\r\x111.\rFp'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6839
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6850
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6847
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6850
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.78365432588543626
sg34
g753
(S'\x07\xdf\x07\r\x1114\x0c-0'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6537
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6545
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.0165317294813576
sg34
g753
(S'\x07\xdf\x07\r\x111:\tf@'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6520
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.76659887021378381
sg34
g753
(S'\x07\xdf\x07\r\x112\x04\n5H'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7438
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7445
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.88324697695861687
sg34
g753
(S'\x07\xdf\x07\r\x112\n\x073\xc0'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6667
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6675
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.78329225062043406
sg34
g753
(S'\x07\xdf\x07\r\x112\x10\x05\xdf\xe8'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6697
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6705
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.68331471639248775
sg34
g753
(S'\x07\xdf\x07\r\x112\x16\x03\x1c\xe0'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g8248
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g8255
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F1.5002913708049164
sg34
g753
(S'\x07\xdf\x07\r\x112\x1b\r\xeeh'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g7035
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g7039
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g7043
sS'block_loop.thisRepN'
p8789
I2
sg6383
g7039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g7046
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.83286120999400737
sg34
g753
(S'\x07\xdf\x07\r\x112"\x06\xdd\xd0'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6582
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6586
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6590
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6586
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6593
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.3832070631506213
sg34
g753
(S'\x07\xdf\x07\r\x112(\x04\xcex'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g7095
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g7102
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.76667042996996315
sg34
g753
(S'\x07\xdf\x07\r\x112.\x0b\x17\xd8'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7123
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g7127
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7131
sS'block_loop.thisRepN'
p8828
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F1.049889695339516
sg34
g753
(S'\x07\xdf\x07\r\x1124\x08\x16P'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6759
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6766
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F2.1665871241493733
sg34
g753
(S'\x07\xdf\x07\r\x112:\t^p'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g7052
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g7060
sS'block_loop.thisRepN'
p8854
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F1.2499123321686056
sg34
g753
(S'\x07\xdf\x07\r\x113\x05\x0c\x87\x08'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6869
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6876
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.5166092763101915
sg34
g753
(S'\x07\xdf\x07\r\x113\x0c\x01g`'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g7052
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g7063
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g7060
sS'block_loop.thisRepN'
p8880
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.66659111552871764
sg34
g753
(S'\x07\xdf\x07\r\x113\x12\t\xd7\x88'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7095
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6701
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7102
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6701
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6708
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.68336831493434147
sg34
g753
(S'\x07\xdf\x07\r\x113\x18\x05f\xd0'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6714
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6661
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6721
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.80004208055834169
sg34
g753
(S'\x07\xdf\x07\r\x113\x1e\x00\xfa\x00'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g7123
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g7127
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g7131
sS'block_loop.thisRepN'
p8919
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F1.2166136668311083
sg34
g753
(S'\x07\xdf\x07\r\x113#\r\xb3\xd0'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7205
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g7209
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7213
sS'block_loop.thisRepN'
p8932
I2
sg6383
g7209
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g7216
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.68308749278003233
sg34
g753
(S'\x07\xdf\x07\r\x113*\x02Y\x90'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g7304
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g7311
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.66663473561857245
sg34
g753
(S'\x07\xdf\x07\r\x113/\r+\x18'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g8248
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6531
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g8255
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F2.2165620639789267
sg34
g753
(S'\x07\xdf\x07\r\x1135\x08\x7f\xc8'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7304
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7311
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.66669660202387604
sg34
g753
(S'\x07\xdf\x07\r\x114\x00\x0c_\xf8'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7235
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g7127
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8984
I2
sg6383
g7127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g7134
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.83325322061500628
sg34
g753
(S'\x07\xdf\x07\r\x114\x06\x07\xf3('
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6537
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6545
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.99999572351953248
sg34
g753
(S'\x07\xdf\x07\r\x114\x0c\x05\xe7\xb8'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7438
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6603
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7445
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6603
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6610
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.1332696422978188
sg34
g753
(S'\x07\xdf\x07\r\x114\x12\x069\xc0'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g8248
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6531
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g8255
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.71659028874273645
sg34
g753
(S'\x07\xdf\x07\r\x114\x18\x08\xf1\x10'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6714
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6721
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6654
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6661
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.7331924375903327
sg34
g753
(S'\x07\xdf\x07\r\x114\x1e\x04\xfdX'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6475
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6483
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6479
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.8837017092773749
sg34
g753
(S'\x07\xdf\x07\r\x114$\x01\x82\xb8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6966
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6973
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F2.4665545088610088
sg34
g753
(S'\x07\xdf\x07\r\x114*\x00*\xf8'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6884
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6891
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.88324555146391504
sg34
g753
(S'\x07\xdf\x07\r\x1141\x07\xdb\xb8'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6458
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6466
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.016425957888714
sg34
g753
(S'\x07\xdf\x07\r\x1147\x06\x83\xf8'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I34
sg56
g57
sg58
Vn
sg42
I566
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I34
sg55
g11
sg56
g57
sg45
F1.9199999999999999
sg42
I566
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g535
sg51
F30.66
sg46
F0.21999999999999892
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I84795728
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xb8\x1e\x05@\x9a\x99\x99>\xecQ\xb8>fff?\n\xd7#=\x85\xebQ?\xc3\xf5\xa8?\x8f\xc2u>\x8f\xc2u=\n\xd7#=\x8f\xc2u=\x9a\x99\x99>\n\xd7\xe3?R\xb8\x1e?\x8f\xc2u=\xecQ8>\n\xd7#?{\x14.?\x9a\x99\x19?\n\xd7#=\x9a\x99\x99?\x00\x00\x00\x00\x8f\xc2u=\x9a\x99\xd9?\xf6(\x9c?\x8f\xc2u=\n\xd7#?\xcd\xccL>\n\xd7\xa3?\xaeGa>\x1f\x85\x0b@q=\n?{\x14\xee?\xe1z\xd4?\x1f\x85\xeb>\x14\xae\x07@R\xb8\x1e?\x14\xaeG?\xcd\xcc\xcc=)\\\x0f?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'!\xb0\xb2@w\xbeGA!\xb0\x8a@\xee|\xcf@1\x08\xb0@\xb6\xf3\xfd?\xe5\xd0,A\xdd$\xb2@T\xe3M@D\x8b\x98@b\x10p@\xbaI\x94@o\x12-AT\xe3M@\x96CS@\x0e-"@T\xe3\xcd@\xfc\xa9Y@D\x8b0A\xdb\xf9\x1e@!\xb0\xba@!\xb0:@u\x93X@\x08\xacZA\xfe\xd4\x8c@L7\x03A\x19\x04\\A\xee|\xbf@\xe5\xd0\x04Ad;\xfb@\xcd\xccPAL7\x0fAj\xbc\xe3A\x19\x04\x08A\x08\xac\x02A\xd1"\x86A\xbaI\x04@\xbaId@\xfe\xd4\xf4@B`U@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xf0A\x00\x00\x00@\x00\x00\xc0A\x00\x00\xd0A\x00\x00\xb8A\x00\x00\x00B\x00\x00\x88A\x00\x00\x80@\x00\x00PA\x00\x00@@\x00\x00\xe0@\x00\x00\x14B\x00\x00\xe8A\x00\x00\xa0A\x00\x00\x1cB\x00\x00\x08B\x00\x00\x90A\x00\x00\xe0A\x00\x00\xa0@\x00\x00pA\x00\x00\x98A\x00\x00`A\x00\x00\x10B\x00\x00@A\x00\x00\xf8A\x00\x000A\x00\x00\x80?\x00\x00\xa8A\x00\x00\x00A\x00\x00\xd8A\x00\x00\xb0A\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x80A\x00\x00\x04B\x00\x00\xc0@\x00\x00\xc8A\x00\x00\x0cB\x00\x00\x18B\x00\x00 A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x9a\x99\x99?\xcd\xcc\x8c?\xcd\xcc\xcc?\xcd\xcc\xcc?\x00\x00\xc0?33\xb3?ff\xa6?\xcd\xcc\xcc?33\xf3?ff\xa6?33\xb3?33\xf3?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\xd9?ff\xa6?33\xf3?\x00\x00\xc0?\x9a\x99\x99?\x9a\x99\x99?\xcd\xcc\x8c?\x00\x00\xc0?33\xf3?33\xb3?\xcd\xcc\x8c?33\xb3?33\xf3?\x00\x00\x00@\x00\x00\xc0?33\xb3?\xcd\xcc\xcc?33\xb3?\xcd\xcc\xcc?\x9a\x99\xd9?\x00\x00\xc0?ff\xe6?33\xb3?33\xf3?\xcd\xcc\xcc?\x9a\x99\x99?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S' \x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x07\x00\x00\x00\x12\x00\x00\x00#\x00\x00\x00\n\x00\x00\x00\x1c\x00\x00\x00\x1f\x00\x00\x00\'\x00\x00\x00\x19\x00\x00\x00\x17\x00\x00\x00\x08\x00\x00\x00\x15\x00\x00\x00\x13\x00\x00\x00!\x00\x00\x00\x06\x00\x00\x00\x10\x00\x00\x00\x14\x00\x00\x00\r\x00\x00\x00\x1b\x00\x00\x00\x1e\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00$\x00\x00\x00\x03\x00\x00\x00\x1d\x00\x00\x00\x11\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x05\x00\x00\x00"\x00\x00\x00\x0f\x00\x00\x00%\x00\x00\x00\x16\x00\x00\x00\x0b\x00\x00\x00&\x00\x00\x00\x0e\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g313
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g117
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g271
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g285
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g264
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g327
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g222
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g131
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g194
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g124
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g152
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g362
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g306
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g243
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g376
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g341
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g229
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g299
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g138
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g208
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g236
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g201
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g355
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g187
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g320
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g180
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g110
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g250
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g159
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g292
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g257
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g166
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g103
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g215
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g334
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g145
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g278
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g348
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g369
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g173
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I84795728
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x9a\x999@33\xb3@\xcd\xcc\x8c@\x00\x00\x00@ff&@\x00\x00`@33\x83@\x00\x00\xb0@\x00\x00\xb0@\xcd\xcc,@\x00\x00\xb0@\xcd\xcc\xbc@33\x83@\x00\x00\xc0@fff@\xcd\xcc\xac@\x00\x00\x00@ff\xa6@\x00\x00\xb0@\x00\x00\xa0@33\x93@\x9a\x99\xb9@\x9a\x99y@ff\x86@\x9a\x99\x99@33\xf3?33\x13@\x00\x00\xb0@\xcd\xcc\x9c@33\xa3@33\xa3@\xcd\xcc\x9c@\x9a\x99\xb9@ff\xa6@\xcd\xcc\x9c@33\x93@ff\xb6@ff&@\x00\x00\xa0@ff\xa6@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xc0\xff+A\xb5\xff\x9f?\t33@XWU@r\xbb\xdb@\xf9\xff\xb7@\xf2\xff\x1fA\xb0\xb1\xca?\x104\xd3?\xef\xcc\x1c@\x98y\xd7?\xc0\xae\xea?cg&@/\xed\x8e?\xf8\xba\x0b@$\xf3\xae?{\xaa\xe6A\xfbx\'@m\xdf\x9d?y"\xe2?V\xc9\x0c@\xdeE\x84?Mf\x16@\xeb\xbb\x0b@z{\xb7?\xb0\x88\xb8@$\xf0.@c\xe0\xdd?\x06y\x8f@\x97R\x05@Hx\xbf@\x83\x8b\xc8?\xd0\x03\x80?\x1c\x03\x80?\xb7WE@\xe9#\xa2?x6s?>\xbc\x0b@c3\xab@\xcd\xef\xd6@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80@ff\x86@ff\x86@\x00\x00\x80@\xcd\xccL@\x9a\x99Y@33\x83@33\x83@33\x83@fff@\x9a\x99y@\x00\x00@@\x9a\x999@\x9a\x99Y@\x9a\x99y@33s@33\x83@\x9a\x99y@\x00\x00@@\xcd\xccl@33\x83@ffF@\x00\x00@@\xcd\xccL@33S@fff@33S@\x00\x00@@\x00\x00`@fff@\x00\x00\x80@\xcd\xcc,@ff\x86@\x9a\x99Y@ff\x86@fff@\x9a\x99y@ffF@\xcd\xccL@\xcd\xccl@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x00\xf5\x1f\r\xe0\x9b\xa7\x0c\xe0\x97\xa7\x0c\xa0\xc9\xa5\x0c\xa0\xca\xa5\x0c@03\x03 03\x03`03\x03`13\x03\x8013\x03\xc003\x03\x00\x9b\xa7\x0c`\x96\xa7\x0c\x0013\x03\x80\x96\xa7\x0c`\x9d\xa7\x0c\x00\x9c\xa7\x0c\xe0\x95\xa7\x0c@53\x03\xc0\x96\xa7\x0c\x80\x97\xa7\x0c@\x94\xa7\x0c\x00\xcb\xa5\x0c\x00\x9d\xa7\x0c`\xcb\xa5\x0c@\x9c\xa7\x0c\xe0\xc9\xa5\x0c\x00\xc8\xa5\x0c\xe0\xc5\xa5\x0c\xa0\x95\xa7\x0c\x80\xf4\x1f\r\xa0\xf7\x1f\r\x80\xf5\x1f\r\x00\xf7\x1f\r\xa0\xf8\x1f\r\xa0\xf5\x1f\r@\xfc\x1f\r@\xf7\x1f\r\x00\xf9\x1f\r\x80\xf7\x1f\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\xd5x/A\xdd$\xba@b\x10 @\xfc\xa9\x19@B`\x15@\xcb\xa1\xc1@\xa8\xc6;@\xcb\xa1\x91@\x83\xc0\x8a?\xc9v&@\xcb\xa1\x89@\xc9v\x16@;\xdf1A\x96Cs@\x83\xc0\xea?\xee|\x07@\x87\x16\xa9@\x83\xc0\x8a?\xee|\x17@\xf8S\xd3?\xdb\xf9.@d;\xa3@\xfe\xd4\x94@\x0e-\xe2?\x96C\x13@P\x8d\xb7?\x91\xed\x8c?\xc9v\x16@\xc5 \xe0?\xfe\xd4\xec@+\x87\xc6?\xc5 \xc0?+\x87\xc6?\xf8S\x93?1\x08\x80@+\x87\xc6?\x87\x16A@\x87\x161@+\x87\xe6?+\x87\x86?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I84795728
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\x80F9\r\xb0F9\r \x15R\rX\x14R\r\x80F9\r\x80\x14R\rH\x15R\r\xa8\x14R\rp\x15R\r\x10G9\r\xe0F9\r\xa8\x14R\r \x15R\r\xd0\x14R\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xf8S\xe1\x04\xc8Y\xe1\x04\xd8[\xe1\x04H^\xe1\x04\xc8\\\xe1\x04\x88Q\xe1\x04\xd8X\xe1\x040\xfe\x11\x05\x00\xfb\x11\x05h\xf3\x11\x05\xf8\xf3\x11\x05\x00\xf2\x11\x05h\xf0\x11\x058\xfc\x11\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g744
sg83
g789
sg84
g749
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g778
sg83
g809
sg84
g783
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g818
sg83
g819
sg84
g823
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g829
sg83
g830
sg84
g834
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g798
sg83
g840
sg84
g803
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g756
sg83
g849
sg84
g761
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g818
sg83
g858
sg84
g823
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g767
sg83
g867
sg84
g772
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g829
sg83
g876
sg84
g834
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I84795728
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I84795728
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xc8\xbeS\r\x00\x12\xa8\x0c \x10\xa8\x0c\x10\x17T\rh3T\r@\x17T\rP\x16T\r\xb83T\r\x903T\r\xb83T\r \x11\xa8\x0ch3T\r \x10\xa8\x0c\x80\x16T\r\x903T\r\xa8\xbfS\r\xe03T\r \x10\xa8\x0c\x00\xbfS\r8\xbfS\rP\x16T\r\x084T\rP\x16T\rp5T\r\xe03T\r\xa0\x11\xa8\x0c\xc05T\r\x084T\rX4T\r\xb0\x16T\r\x80\xc0\xa5\x0c`\x18T\r`\xca\xa5\x0c\x80\x16T\r\xb83T\r\x10\x17T\r \x11\xa8\x0c\x00\x12\xa8\x0c 5T\r04T\rp\xbfS\r8\xbfS\rX4T\r\x00\x12\xa8\x0cX@T\r\xb0\x16T\r\x00\x12\xa8\x0cp\xbfS\rX4T\rh3T\r\xe03T\r\x80\x16T\r\x903T\r\xa0\x11\xa8\x0c \x11\xa8\x0c`\xca\xa5\x0c\xc8\xbeS\rp\xbfS\r`\xca\xa5\x0c\xe0\x16T\r\xa0\x11\xa8\x0c\xe03T\r\xe0\x16T\rP\x16T\r\x00\xbfS\r \x10\xa8\x0c04T\r\xc05T\r \x10\xa8\x0c04T\r`\xca\xa5\x0c\xb83T\r\x084T\r\x80\x16T\rH5T\r\x00\xbfS\r\xe0\x16T\rh3T\r\x903T\r \x11\xa8\x0c\xa0\x11\xa8\x0c\x80\x16T\r \x11\xa8\x0c\xe0\x16T\rX4T\r 5T\r\x084T\r\xe0\x16T\r\x80\x16T\rp\xbfS\r\x80\x16T\r\x985T\r8\xbfS\r\x00\xbfS\r\x903T\r\xb83T\r\x084T\r`\xca\xa5\x0c\x00\x12\xa8\x0cP\x16T\r\xa0\x11\xa8\x0c \x10\xa8\x0c\xc8\xbeS\rp\xbfS\r\xb83T\r\xb0\x16T\r\xb83T\rp\x17T\r\x00\x18T\r\xa8\xbfS\r`\xca\xa5\x0c\xb0\x16T\rp\xbfS\r\xc8\xbeS\r \x10\xa8\x0c8\xbfS\r\x00\x18T\r @T\r\x00\x12\xa8\x0c\xb83T\r\xe03T\r\xa84T\r\xa0\x11\xa8\x0c8\xbfS\r\xb0\x16T\r\x084T\r\x80\x16T\r0\x18T\r@\x17T\r\x084T\r\x00\xbfS\r\xd04T\r\xa0\x11\xa8\x0c`\xca\xa5\x0cP\x16T\r\xc8\xbeS\r\xb0\x16T\r8\xbfS\r\xb0\x16T\r\xd0\x17T\r\x985T\r04T\r\xe0\x16T\r\xe03T\rp\xbfS\r\xd0\x17T\r\x80\x16T\r\xe0\x16T\r\x00\x12\xa8\x0cp\xbfS\rp5T\r\xb83T\r8\xbfS\rh3T\r\xe03T\rP\x16T\r\xe0\x16T\r\xb0\x16T\r\xd0\x17T\r \x11\xa8\x0c04T\r\x084T\r`\xca\xa5\x0ch3T\r\xe0\x16T\r \x11\xa8\x0c8\xbfS\r\x10\x17T\rX4T\rP\x16T\r\x80\x16T\rX4T\r\xa84T\r\xb83T\r04T\r \x10\xa8\x0c\x00\xbfS\r\x084T\r04T\r\xc8\xbeS\r\x985T\r\x903T\r @T\rP\x16T\r\x00\x18T\r\x80\xc0\xa5\x0c@\x17T\r04T\rh3T\r\xb0\x16T\r`\xca\xa5\x0cX4T\r\x00\xbfS\r \x11\xa8\x0c\x00\x12\xa8\x0ch3T\r\x00\xbfS\r\x903T\rh3T\r\xc8\xbeS\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'@k9\r\xa0i9\r\xe0i9\r\x00h9\r j9\r\x80j9\r\xc0a9\r `9\r\xa0h9\r`h9\r k9\r\x80l9\r@l9\r i9\r`j9\r\xe0k9\r@h9\r\x00j9\r@e9\r l9\r\xe0g9\r@j9\r\xc0k9\r\xa0k9\r h9\r@\x8c \r@\x8d \r\x80\x8c \r@\x8e \r\x00\x8c \r\x00\x86 \r\x80\x8a \r\x00\x8a \r`\x87 \r`\x85 \r\xc0\x8b \r@\x8f \r \x87 \r\xe0\x86 \r\xc0\x8a \r@\x8a \r\xc0\x8c \r@\x88 \r\x80\x8e \r\xc0\x87 \r\x00\x8f \r\xc0\x8e \r@\x89 \r\xc0\x88 \r\x00\x8b \r\xc0\x85 \r`\x80 \r@\x86 \r@\x80 \r\xc0\x8d \r\x80\x8b \r\x00\x88 \r\x00\x81 \r\x00\x89 \r\x00\x8d \r\x00\x8e \r \x80 \r\xc0\x89 \r\x80\x89 \r\xe0\x80 \r\xc0\x80 \r\x80\x86 \r\x80\x8d \r\xa0\x80 \r\x80\x88 \r`\xd1\x1e\r@\xf2\x1f\r\xc0\xfe\x1f\r@\xfe\x1f\r\xa0\xe1 \r\xc0\xf2\x1f\r \xfe\x1f\r\x00\xf2\x1f\r \xf2\x1f\r\xa0\xff\x1f\r \xfb\x1f\r\x00\xff\x1f\r@\xff\x1f\r\x80\xff\x1f\r`\xff\x1f\r\x80\x80 \r\x80\xfb\x1f\r\x80\xf2\x1f\r@\xf1\x1f\r`\xf3\x1f\r \xf1\x1f\r\xa0\xf2\x1f\r\xa0\xf1\x1f\r\xe0\xf2\x1f\r\x00\xf3\x1f\r\xe0\xf3\x1f\r\xe0\xff\x1f\r\xc0\xff\x1f\r`\xfe\x1f\r\xc0\xf1\x1f\r\xa0\xf3\x1f\r\x00\xf4\x1f\r`\xf2\x1f\r\x80\xf1\x1f\r \xf4\x1f\r\xe0\xf1\x1f\r@\xf3\x1f\r`\xf0\x1f\r \xf3\x1f\r\x80\xfc\x1f\r\x00\xf1\x1f\r`\xf1\x1f\r@\xf4\x1f\r@\xb0\x1d\r\xa0\xfe\x1f\r\x80\xf3\x1f\r \xff\x1f\r\xe0\xfe\x1f\r\xa0\x86 \r@\x8b \r`;4\x03\x00\xbc\x1d\r\xc0/\x1f\r\x80%\x1f\r\xe0.\x1f\r\xc0\xf3\x1f\r`-\x1f\r`\xb0\x1d\r`%\x1f\r`l9\r\xc0j9\r e9\r\x80n9\r`i9\r\xe0e9\r\x80m9\r\x00l9\r o9\r\xa0m9\r\x00o9\r\xa0j9\r\x00m9\r\xa0f9\r m9\r`m9\r n9\r\xa0l9\r\xe0n9\r\xc0l9\r\x00n9\r\xa0n9\r`n9\r@o9\r@n9\r\xc0n9\r`k9\r\xc0i9\r\xc0o9\r\xe0j9\r`o9\r\xe0h9\r@m9\r\xe0l9\r\xa0o9\r\x00e9\r\xc0m9\r\x80\xfe\x1f\r\xa0/\x1f\r\xc0g9\r\x00k9\r \xf0\xbb\x1f@\xf2\xbb\x1f\x80\xf0\xbb\x1f\x80\xf1\xbb\x1f \xf1\xbb\x1f@\xf0\xbb\x1f\xe0\xf1\xbb\x1f@\xf1\xbb\x1f\xc0\xf1\xbb\x1f`\xf2\xbb\x1f\xc0\xf2\xbb\x1f\x80\xf2\xbb\x1f\x00\xf3\xbb\x1f \xf3\xbb\x1f \xf2\xbb\x1f`\xf3\xbb\x1f@\xf3\xbb\x1f\xa0\xf3\xbb\x1f\x80\xf3\xbb\x1f`\xf0\xbb\x1f\xc0\xf3\xbb\x1f\xa0\x18;\x05\xc0\x18;\x05\x80\x18;\x05\x80\x17;\x05\xe0\x1f;\x05 \x19;\x05\xe0\x18;\x05@\x19;\x05\xe0\x1c;\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xca\xeb.@I\xdc=@%1\xf3?\x0f\xb5\xbb?\\!\xe2?b0\xd3?\xf4AD@\x8fd\x06@z/\xd3?:1\xf3?\x9b\x97\x19@\x1a\x96\xd9?y\xa8\n@\xeas\xd7?\x01\xe9\xbd?\xb2\xd9\xbd?\xd0\xe2\xee?\x1b\xca\xac?$T\x05@\xcc\x9c\x19@{\xa9\xaa?~\xc8\xec?\xff\xca\xac?\xdab\xc6?\xa4>D@\x1c\xba\xa3@\x94\x0e1@\x1c\xbb\x9b?|\xff?@\x93\xfe\x9f?\xf7\xb6\xfb?D/\xb3?x\xb9;@Wg\xa6?\x0f/\x13@\xbf\xb9\xdb?\xea.\x93?D\xdc\xdd?\xdc\xf7\xae?\tkw?"v\xb7?\xb4c\x16@\x02\xb8\x9b? \xee\xae?\x92\r\x91?\xd7\xec\x8e?\xe5e\x86?\x80ef?\x03\xb6\x8a?\xe9\xb5\xbb?\xd3\xe3\xce?\xc1\xa2j?\xda\xd9\xfd?ke\x8e@}\x10\xb1?I \xa2?\x19\xb9K@\xf3\x969@^\t\xa0?\xe00\x93?}\xdb=@\xc8\x16\xc2?\xf1\x1e\xa2?\x86\xba{?O\xfc\xbf?\xf4\xc9\x8c?\xf3T\x95?\xae\x989@\xdc\xc6\x9b?\x81\x98*?\xc6/\x93?\x0c\x00\xc0?\x07C\x84?\x05\x1a@?\xed\xe5\x8e?\xd2\xb9\xdb?<\xbd{?\xbc\xc9\xec?f2\x03@O\xa9\xca?\xec\xed\x8e?B\xb4;?\x1a2\xd3?\xa7\xe3\x1d@\xc8"\xa2?\x8f_&@%\xca\x1c@d?\xa4?\x10]D?bt\xd7?)\x80H?\xb9\xd8\xbd?\x03=\x84?\x9e\x83f?\x13\xdc\r@\x8e\xcb\xac?x4s?\x13\xf7\x9f?\xc4\x92\xa8?/af?\xc10\xd3?\xff\x1fb@\xaa\xcb\xcc?\xe2A\xa4?t\x0e\x11@\xcd\xec\x8e?\x8a\r\x91?\x8f\x97Y?\x11\xf3n?7\x1e\x82?\x89t7?\x19pw?`d\x86?\xa5c\x86?UB\xa4?yQ%@\x18\xb9;?\x8e\xb5{?\x95.s?\x8fS\x95?\x03\xe6\x7f?\xf0:\x84?\xbc\xda\x9d?\n\xd8\xfd?\x1e\xff\x9f?M\xd8\xfd?z\xeb\x8e?P@\xa4?!2\xd3?\xc8]f?\xd3ff?wu\xd7?\x8c\xb3;?\xfc\xd9\xcc?\xb0\xb3{?l\xb9{?=\xdd]?\xd0\xc6\xcc?&2\x93?bTf?\xe1\x0bQ?\x19\xa4j?\x88\xdd\xbd?\xf5P&?\xcc\xaa\n@\xe5\xb3\x9b?x\x81H?\x19\xa8j?\x96\x04 @\n\xee\x0e@D\xdc-@\xd5\xeb\xce?\xe4\xc3\xcc?\x10d\x06@B\xb5\x0b@\x95.s?8\xa9j?\x0c\nQ?\x14\x95j?\n\xed\x0e@\x8b=D?c\xb5{?4\x87\x88?\x7f\x10\xb1?\xfccf?\xe0\xdc\x9d?\xe5\t\xf1?\xde\xcc\x8c?H\xff??<DD?o\xb7;?A@D?\xa4\x88\xa8?\xd8=\xd3?\xd6,3?\x1d"\x82?^r\xb7?v\xedn?N\xa5*?@\xccL?6\xb7\x9b?\xf0\xf4\x7f?\xd5\x85\x88?\xdfp7?\x8c\xbc\x9b?\x88~\xa8?p\x1ab?\xcd\xdd]?Bd\xa6?\x10RU?\xb9\xf7\x7f?z\nQ?\x0fvw?\xd6\x00\xa0?\x81\xa7\x8a?\xc4\xec\x8e?Y<D?\x9d\x9dY?\x04\x10\x91?g\x88H?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'8\xf3\x11\x05P\xfc\x11\x05(!\xc1\x04\xc8)\xc1\x04 ,\xc1\x04H+\xc1\x04\xb8$\xc1\x048 \xc1\x04@!\xc1\x04\x18%\xc1\x04\x80,\xc1\x04\xd8+\xc1\x04@*\xc1\x04\xc8&\xc1\x04\xa0-\xc1\x04(\'\xc1\x04\xa8"\xc1\x04\xd8(\xc1\x04\xa8%\xc1\x04\xd0*\xc1\x04\x08/\xc1\x04\xb8*\xc1\x04\xb8\'\xc1\x040%\xc1\x04\xb0,\xc1\x04(\x9a\xc2\x04H\x98\xc2\x04\xa0\x97\xc2\x04\xe0\x96\xc2\x04p\x9d\xc2\x04h\x99\xc2\x04\xf0\x92\xc2\x04H\x9b\xc2\x04 \x9f\xc2\x04\xa0\x9a\xc2\x04\xd0\x9d\xc2\x04\x08\x9c\xc2\x04\x10\x9a\xc2\x04\xe0\x93\xc2\x04\xc8\x99\xc2\x04x\x98\xc2\x04\xd0\x9a\xc2\x04X\x94\xc2\x04\x08\x99\xc2\x04\x80\x96\xc2\x04\x00\x98\xc2\x04(\x91\xc2\x04\xc0\x95\xc2\x04\xd0\x91\xc2\x04\xd0\x94\xc2\x04\x98\x90\xc2\x04\xd8\x92\xc2\x04(\x9d\xc2\x04\xd8\x9e\xc2\x04\x80\x9f\xc2\x04 \x99\xc2\x04h\x9f\xc2\x04@\x91\xc2\x04\x00\x95\xc2\x04X\x9d\xc2\x04\xe8\x9a\xc2\x04\xe8\x9d\xc2\x04\x98\x9f\xc2\x04H\x9e\xc2\x04\xc8\x93\xc2\x04P\x90\xc2\x04p\x94\xc2\x04P\x93\xc2\x04\xf8\x90\xc2\x040\x95\xc2\x04\xe0\x90\xc2\x04\x90\x9b\xc2\x04 \x90\xc2\x04\x10\x94\xc2\x04\x08\x93\xc2\x04\xb8\x9a\xc2\x04\xb0\x93\xc2\x04`\x95\xc2\x04x\x92\xc2\x04\x88\x91\xc2\x04\x98\x99\xc2\x04@\x94\xc2\x04\x80\x93\xc2\x04x\x95\xc2\x04\x18\x95\xc2\x04\xb8\x94\xc2\x04\xa0\x94\xc2\x04\xf8\x96\xc2\x04\xc0\x92\xc2\x04\xd8\x98\xc2\x04\x88\x9a\xc2\x04@\x9a\xc2\x04\xe8\x94\xc2\x04\xf8\x9c\xc2\x04(\x94\xc2\x04\xf0\x9b\xc2\x04\xc8\x96\xc2\x04\x80\x99\xc2\x04\xf8\x93\xc2\x04\x18\x98\xc2\x04\xe8\x91\xc2\x04`\x92\xc2\x04\xd0\x97\xc2\x04\x00\x92\xc2\x048\x90\xc2\x04\xa8\x92\xc2\x04\x90\x95\xc2\x04`\x9e\xc2\x04@\x97\xc2\x04`\x98\xc2\x048\x93\xc2\x04\xa0\x9d\xc2\x04\x90\x98\xc2\x04\x18\x92\xc2\x040\x9b\xc2\x04\xb0\x96\xc2\x04\xe0\x99\xc2\x04\xa8\x95\xc2\x04x\x9b\xc2\x04\x80\x90\xc2\x04(\x97\xc2\x04\x08\x96\xc2\x04x\x9e\xc2\x04\x90\x92\xc2\x04\xf0\x98\xc2\x04\x88\x97\xc2\x04\xb0\x9f\xc2\x04\xa8\x9b\xc2\x04\xc0\x9b\xc2\x040\x98\xc2\x04\xa0\x91\xc2\x048\x96\xc2\x04 \x9c\xc2\x04X\x91\xc2\x04P\x9f\xc2\x04P\x96\xc2\x04\xc0\x98\xc2\x04\x18\x9e\xc2\x048\x9f\xc2\x04X\x97\xc2\x04\xa8\x98\xc2\x040\x9e\xc2\x04 \x93\xc2\x04@\x9d\xc2\x04X\x9a\xc2\x04h\x90\xc2\x048\x99\xc2\x04\x00\x9e\xc2\x04\x88\x9d\xc2\x048\x9c\xc2\x04P\x99\xc2\x04\x80\x9c\xc2\x04\x10\x9d\xc2\x04\x98\x96\xc2\x04H\x92\xc2\x04\x10\x97\xc2\x04\xe0\x9c\xc2\x04p\x91\xc2\x04\xf8\x99\xc2\x04\xb0\x99\xc2\x04P\x9c\xc2\x04 \x96\xc2\x04\x08\x9f\xc2\x04\xa8\x9e\xc2\x04\x00\x9b\xc2\x04h\x9c\xc2\x04p\x9a\xc2\x04\xc0\x9e\xc2\x04\xe0\x9f\xc2\x040\x92\xc2\x04\x10\x91\xc2\x04\xc8\x90\xc2\x04\x98\x9c\xc2\x04\xb0\x90\xc2\x04`\x9b\xc2\x04\x18\x9b\xc2\x04\xb0\x9c\xc2\x04\x88\x94\xc2\x04\xf0\x9e\xc2\x04\xe8\x97\xc2\x04h\x93\xc2\x04\xc8\x9f\xc2\x04\xb8\x9d\xc2\x04\xb8gU\x02\xb8\x91\xc2\x04\xd8\x9b\xc2\x04\xc8\x9c\xc2\x04\xd8\x95\xc2\x04H\xfe7\x02\xe0\xf07\x02\xc8p\xc2\x04\xf0~\xc2\x04\xd0}\xc2\x04\xb0\x7f\xc2\x04X}\xc2\x04@}\xc2\x040{\xc2\x04 s\xc2\x04\x98\x7f\xc2\x04\xe8}\xc2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1061
sg895
g1057
sg909
g1068
sg904
g1065
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g937
sg895
g1087
sg909
g944
sg904
g1094
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1106
sg895
g1102
sg909
g1113
sg904
g1110
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g920
sg895
g1132
sg909
g927
sg904
g1139
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1151
sg895
g1147
sg909
g1158
sg904
g1155
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g937
sg895
g1087
sg909
g944
sg904
g1094
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1181
sg895
g1177
sg909
g1188
sg904
g1185
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1198
sg895
g1194
sg909
g1205
sg904
g1202
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1001
sg895
g1211
sg909
g1008
sg904
g1218
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1230
sg895
g1226
sg909
g1237
sg904
g1234
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1266
sg895
g1256
sg909
g1260
sg904
g1264
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1151
sg895
g1147
sg909
g1158
sg904
g1155
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1290
sg895
g1286
sg909
g1297
sg904
g1294
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1313
sg895
g1303
sg909
g1307
sg904
g1311
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1230
sg895
g1226
sg909
g1237
sg904
g1234
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1337
sg895
g1333
sg909
g1344
sg904
g1341
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1061
sg895
g1367
sg909
g1068
sg904
g1374
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1392
sg895
g1382
sg909
g1386
sg904
g1390
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1403
sg895
g1399
sg909
g1410
sg904
g1407
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1106
sg895
g1416
sg909
g1113
sg904
g1423
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g900
sg895
g1444
sg909
g910
sg904
g1451
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1061
sg895
g1367
sg909
g1068
sg904
g1374
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g920
sg895
g1132
sg909
g927
sg904
g1139
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1198
sg895
g1485
sg909
g1205
sg904
g1492
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1266
sg895
g1256
sg909
g1260
sg904
g1264
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1313
sg895
g1303
sg909
g1307
sg904
g1311
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1198
sg895
g1194
sg909
g1205
sg904
g1202
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1337
sg895
g1539
sg909
g1344
sg904
g1546
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g920
sg895
g1132
sg909
g927
sg904
g1139
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1403
sg895
g1399
sg909
g1410
sg904
g1407
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1354
sg895
g1580
sg909
g1361
sg904
g1587
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g920
sg895
g1132
sg909
g927
sg904
g1139
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1313
sg895
g1608
sg909
g1307
sg904
g1615
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1337
sg895
g1333
sg909
g1344
sg904
g1341
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g967
sg895
g1636
sg909
g974
sg904
g1643
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1151
sg895
g1147
sg909
g1158
sg904
g1155
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1106
sg895
g1416
sg909
g1113
sg904
g1423
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1290
sg895
g1286
sg909
g1297
sg904
g1294
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1061
sg895
g1057
sg909
g1068
sg904
g1065
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1403
sg895
g1716
sg909
g1410
sg904
g1723
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1313
sg895
g1608
sg909
g1307
sg904
g1615
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1403
sg895
g1399
sg909
g1410
sg904
g1407
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1392
sg895
g1770
sg909
g1386
sg904
g1777
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1290
sg895
g1785
sg909
g1297
sg904
g1792
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1151
sg895
g1800
sg909
g1158
sg904
g1807
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1392
sg895
g1770
sg909
g1386
sg904
g1777
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1001
sg895
g1211
sg909
g1008
sg904
g1218
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1181
sg895
g1841
sg909
g1188
sg904
g1848
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g937
sg895
g1087
sg909
g944
sg904
g1094
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1266
sg895
g1869
sg909
g1260
sg904
g1876
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1313
sg895
g1608
sg909
g1307
sg904
g1615
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g937
sg895
g1087
sg909
g944
sg904
g1094
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1266
sg895
g1869
sg909
g1260
sg904
g1876
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1403
sg895
g1716
sg909
g1410
sg904
g1723
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1018
sg895
g1936
sg909
g1025
sg904
g1943
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1230
sg895
g1951
sg909
g1237
sg904
g1958
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1106
sg895
g1102
sg909
g1113
sg904
g1110
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1230
sg895
g1951
sg909
g1237
sg904
g1958
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1181
sg895
g1177
sg909
g1188
sg904
g1185
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1392
sg895
g1382
sg909
g1386
sg904
g1390
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g990
sg895
g2031
sg909
g984
sg904
g2038
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1061
sg895
g1367
sg909
g1068
sg904
g1374
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1290
sg895
g1286
sg909
g1297
sg904
g1294
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1106
sg895
g1102
sg909
g1113
sg904
g1110
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1061
sg895
g1057
sg909
g1068
sg904
g1065
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1392
sg895
g1770
sg909
g1386
sg904
g1777
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1337
sg895
g1333
sg909
g1344
sg904
g1341
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1198
sg895
g1485
sg909
g1205
sg904
g1492
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1230
sg895
g1951
sg909
g1237
sg904
g1958
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1392
sg895
g1382
sg909
g1386
sg904
g1390
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1106
sg895
g1416
sg909
g1113
sg904
g1423
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1313
sg895
g1608
sg909
g1307
sg904
g1615
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1106
sg895
g1416
sg909
g1113
sg904
g1423
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1290
sg895
g1785
sg909
g1297
sg904
g1792
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1198
sg895
g1194
sg909
g1205
sg904
g1202
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1181
sg895
g1841
sg909
g1188
sg904
g1848
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g990
sg895
g2031
sg909
g984
sg904
g2038
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1018
sg895
g1936
sg909
g1025
sg904
g1943
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1230
sg895
g1226
sg909
g1237
sg904
g1234
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1403
sg895
g1399
sg909
g1410
sg904
g1407
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1001
sg895
g1211
sg909
g1008
sg904
g1218
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1290
sg895
g1785
sg909
g1297
sg904
g1792
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g937
sg895
g1087
sg909
g944
sg904
g1094
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g900
sg895
g1444
sg909
g910
sg904
g1451
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1313
sg895
g1303
sg909
g1307
sg904
g1311
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1354
sg895
g1580
sg909
g1361
sg904
g1587
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1018
sg895
g1936
sg909
g1025
sg904
g1943
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1337
sg895
g1539
sg909
g1344
sg904
g1546
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1403
sg895
g1716
sg909
g1410
sg904
g1723
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1354
sg895
g1580
sg909
g1361
sg904
g1587
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1313
sg895
g1608
sg909
g1307
sg904
g1615
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g900
sg895
g1444
sg909
g910
sg904
g1451
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1198
sg895
g1485
sg909
g1205
sg904
g1492
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1337
sg895
g1539
sg909
g1344
sg904
g1546
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1181
sg895
g1177
sg909
g1188
sg904
g1185
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1018
sg895
g1936
sg909
g1025
sg904
g1943
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1151
sg895
g1800
sg909
g1158
sg904
g1807
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1290
sg895
g1785
sg909
g1297
sg904
g1792
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1198
sg895
g1194
sg909
g1205
sg904
g1202
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1230
sg895
g1226
sg909
g1237
sg904
g1234
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1106
sg895
g1416
sg909
g1113
sg904
g1423
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g990
sg895
g2031
sg909
g984
sg904
g2038
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1230
sg895
g1951
sg909
g1237
sg904
g1958
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1181
sg895
g1177
sg909
g1188
sg904
g1185
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g967
sg895
g1636
sg909
g974
sg904
g1643
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1290
sg895
g1286
sg909
g1297
sg904
g1294
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1403
sg895
g1716
sg909
g1410
sg904
g1723
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1001
sg895
g1211
sg909
g1008
sg904
g1218
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1198
sg895
g1485
sg909
g1205
sg904
g1492
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1354
sg895
g1580
sg909
g1361
sg904
g1587
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1151
sg895
g1147
sg909
g1158
sg904
g1155
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1290
sg895
g1286
sg909
g1297
sg904
g1294
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1266
sg895
g1869
sg909
g1260
sg904
g1876
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1392
sg895
g1382
sg909
g1386
sg904
g1390
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1151
sg895
g1800
sg909
g1158
sg904
g1807
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1313
sg895
g1303
sg909
g1307
sg904
g1311
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1151
sg895
g1147
sg909
g1158
sg904
g1155
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1106
sg895
g1102
sg909
g1113
sg904
g1110
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1392
sg895
g1382
sg909
g1386
sg904
g1390
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1313
sg895
g1303
sg909
g1307
sg904
g1311
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1266
sg895
g1256
sg909
g1260
sg904
g1264
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1018
sg895
g1936
sg909
g1025
sg904
g1943
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1198
sg895
g1485
sg909
g1205
sg904
g1492
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g967
sg895
g1636
sg909
g974
sg904
g1643
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1151
sg895
g1800
sg909
g1158
sg904
g1807
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1392
sg895
g1770
sg909
g1386
sg904
g1777
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1354
sg895
g1580
sg909
g1361
sg904
g1587
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1151
sg895
g1800
sg909
g1158
sg904
g1807
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1061
sg895
g1367
sg909
g1068
sg904
g1374
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1266
sg895
g1256
sg909
g1260
sg904
g1264
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1230
sg895
g1226
sg909
g1237
sg904
g1234
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1403
sg895
g1399
sg909
g1410
sg904
g1407
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1392
sg895
g1770
sg909
g1386
sg904
g1777
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1061
sg895
g1057
sg909
g1068
sg904
g1065
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1198
sg895
g1194
sg909
g1205
sg904
g1202
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g900
sg895
g1444
sg909
g910
sg904
g1451
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1337
sg895
g1333
sg909
g1344
sg904
g1341
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1106
sg895
g1102
sg909
g1113
sg904
g1110
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1337
sg895
g1333
sg909
g1344
sg904
g1341
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1266
sg895
g1869
sg909
g1260
sg904
g1876
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1181
sg895
g1841
sg909
g1188
sg904
g1848
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1230
sg895
g1951
sg909
g1237
sg904
g1958
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1266
sg895
g1869
sg909
g1260
sg904
g1876
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g900
sg895
g1444
sg909
g910
sg904
g1451
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1290
sg895
g1785
sg909
g1297
sg904
g1792
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g990
sg895
g980
sg909
g984
sg904
g988
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1181
sg895
g1177
sg909
g1188
sg904
g1185
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1001
sg895
g1211
sg909
g1008
sg904
g1218
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1337
sg895
g1539
sg909
g1344
sg904
g1546
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1061
sg895
g1367
sg909
g1068
sg904
g1374
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g990
sg895
g2031
sg909
g984
sg904
g2038
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1266
sg895
g1256
sg909
g1260
sg904
g1264
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g967
sg895
g1636
sg909
g974
sg904
g1643
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1354
sg895
g1350
sg909
g1361
sg904
g1358
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1403
sg895
g1716
sg909
g1410
sg904
g1723
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1337
sg895
g1539
sg909
g1344
sg904
g1546
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1181
sg895
g1841
sg909
g1188
sg904
g1848
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1061
sg895
g1057
sg909
g1068
sg904
g1065
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g920
sg895
g1132
sg909
g927
sg904
g1139
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1181
sg895
g1841
sg909
g1188
sg904
g1848
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g990
sg895
g2031
sg909
g984
sg904
g2038
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g967
sg895
g1636
sg909
g974
sg904
g1643
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I84795728
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'H\xdb\xa6\x0c@\xf5\x1f\rX\x89\xa6\x0c \xf5\x1f\r0U\xc3\x1f\x80\xf8\x1f\r\xf0\x87\xa6\x0c\x80\xdb\xa6\x0c`\xf8\x1f\r\xc0\x8f\xa6\x0c@T\xc3\x1f\x80\xdb\xa6\x0cH\xdb\xa6\x0c`\xf8\x1f\r \x8a\xa6\x0c\x80\xdb\xa6\x0cH\xdb\xa6\x0c \xf5\x1f\rpT\xc3\x1f\xe0\xf5\x1f\r\x80\xf8\x1f\rX\x8e\xa6\x0c\xc8\x87\xa6\x0cx\x87\xa6\x0c\x90\x88\xa6\x0c\x80\xdb\xa6\x0c\xc0\xf9\x1f\r0U\xc3\x1fX\x89\xa6\x0c\xa0T\xc3\x1f0U\xc3\x1f \xf5\x1f\r\xb8\x88\xa6\x0cX\x89\xa6\x0cX\x8e\xa6\x0c\x00U\xc3\x1f\xe0\xf5\x1f\rX\x8e\xa6\x0c \x8a\xa6\x0c\xb8\xdb\xa6\x0cP\x8c\xa6\x0c\xc8\x87\xa6\x0c`U\xc3\x1f\xb8\xdb\xa6\x0cx\x87\xa6\x0c \xf5\x1f\r\xa0T\xc3\x1f\xd0T\xc3\x1f\xc0U\xc3\x1f\xc8\x87\xa6\x0c\x90\x88\xa6\x0c\xc8\x87\xa6\x0cH\xdb\xa6\x0cx\x87\xa6\x0cH\xdb\xa6\x0c\x90U\xc3\x1fx\x87\xa6\x0c@\xf5\x1f\r\xc8\x87\xa6\x0c\xa0T\xc3\x1f`U\xc3\x1f\x90U\xc3\x1f@\xf5\x1f\r\xf0\xdb\xa6\x0c \x8a\xa6\x0c\x80\xf8\x1f\r\xb0\x86\xa6\x0cX\x89\xa6\x0c\xa0T\xc3\x1fX\x8e\xa6\x0c\xc0\xf9\x1f\r\x80\xf8\x1f\r\x90\x88\xa6\x0c\xb8\x88\xa6\x0cX\x8e\xa6\x0c\xc0\x8f\xa6\x0c@\xf5\x1f\r\x80\xf8\x1f\r@T\xc3\x1f\x98\xdc\xa6\x0c\xc0\x8f\xa6\x0c\x90\x88\xa6\x0c\xe0\xf5\x1f\r\x80\xdb\xa6\x0c\x90\x88\xa6\x0c\xb8\xdb\xa6\x0cpT\xc3\x1f\xf0\x87\xa6\x0c\x00U\xc3\x1f\xa0T\xc3\x1fX\x8e\xa6\x0c\x90\x88\xa6\x0c\xc0\x8f\xa6\x0c \x8a\xa6\x0c\xd0T\xc3\x1fpT\xc3\x1f\xf0\xdb\xa6\x0c@T\xc3\x1f\xb8\xdb\xa6\x0c \xf5\x1f\rpT\xc3\x1f\xa0T\xc3\x1f\x80\xdb\xa6\x0c\xb8\xdb\xa6\x0cpT\xc3\x1f@T\xc3\x1f\xc0U\xc3\x1fX\x8e\xa6\x0c@\xf5\x1f\r\xd0T\xc3\x1f\xa0\x87\xa6\x0c\x80\xf8\x1f\r \xf5\x1f\rX\x8e\xa6\x0c\xc0\xf9\x1f\rH\xdb\xa6\x0c\xc0\xf9\x1f\r \x8a\xa6\x0c@\xf5\x1f\rX\x89\xa6\x0c\xb8\xdb\xa6\x0c\xd0T\xc3\x1f\xc0\xf9\x1f\r@\xf5\x1f\r \x8a\xa6\x0c\xf0\xdb\xa6\x0c\x80\xf8\x1f\rX\x8e\xa6\x0c\xc0\x8f\xa6\x0c\xd0T\xc3\x1f\xf0\xdb\xa6\x0cX\x89\xa6\x0c\xc0\xf9\x1f\r8\x8b\xa6\x0c\xb8\xdb\xa6\x0c\x90\x88\xa6\x0c@T\xc3\x1fH\xdb\xa6\x0c\x80\xdb\xa6\x0c\xc0\x8f\xa6\x0c\xb8\xdb\xa6\x0cH\xdb\xa6\x0c`\xf8\x1f\r\xf0\xdb\xa6\x0cX\x89\xa6\x0c\xc0U\xc3\x1f \xf5\x1f\r\xc0\x8f\xa6\x0c\x98\xdc\xa6\x0c@\x88\xa6\x0cx\x87\xa6\x0cX\x89\xa6\x0c V\xc3\x1f\xd0T\xc3\x1f\xc0\x8f\xa6\x0c\xd0T\xc3\x1fP\x87\xa6\x0c`\xf8\x1f\r\xc8\x87\xa6\x0c\xd0T\xc3\x1f`\xf8\x1f\r\x80\xf8\x1f\r\xa0T\xc3\x1f\xc0U\xc3\x1f\x90\x88\xa6\x0c@\xf5\x1f\r`\xf8\x1f\r\xc8\x87\xa6\x0c\xc0\xf9\x1f\r`\xf8\x1f\rx\x87\xa6\x0c \x8a\xa6\x0c \xf5\x1f\r\x80\xf8\x1f\r\xf0\xdb\xa6\x0c\x90\x88\xa6\x0c\x80\xdb\xa6\x0cx\x87\xa6\x0c\x80\xf8\x1f\rH\xdb\xa6\x0c\xc8\x87\xa6\x0c`\xf8\x1f\rx\x87\xa6\x0c\xf0\xdb\xa6\x0c \x8a\xa6\x0c \xf5\x1f\r@T\xc3\x1f\xa0T\xc3\x1fpT\xc3\x1fPV\xc3\x1f \x8a\xa6\x0c\xf0\xdb\xa6\x0c\x90\x88\xa6\x0c@\xf5\x1f\rx\x87\xa6\x0c`\xf8\x1f\r(\xdc\xa6\x0c V\xc3\x1f@T\xc3\x1fPV\xc3\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\xc0\xf5\xbb\x1f \xf7\xbb\x1f\xa0\xf5\xbb\x1f@\xf7\xbb\x1f`\xf6\xbb\x1f \xf8\xbb\x1f\x80\xf5\xbb\x1f\xe0\xf6\xbb\x1f\xc0\xf6\xbb\x1f\xe0\xf5\xbb\x1f \xf6\xbb\x1f \xf9\xbb\x1f@\xf8\xbb\x1f`\xf8\xbb\x1f\xc0\xf7\xbb\x1f@\xf9\xbb\x1f\xe0\xf7\xbb\x1f\x00\xf7\xbb\x1f\x00\xf9\xbb\x1f\x00\xf8\xbb\x1f\x80\xf8\xbb\x1f\xe0\xf8\xbb\x1f \xfa\xbb\x1f\xc0\xf8\xbb\x1f\x80\xf6\xbb\x1f\xc0\xf9\xbb\x1f\xa0\xfa\xbb\x1f\x00\xf6\xbb\x1f\xa0\xf6\xbb\x1f@\xf6\xbb\x1f\xa0\xf7\xbb\x1f`\xf7\xbb\x1f@\xfa\xbb\x1f`\xf9\xbb\x1f@\xfb\xbb\x1f\x80\xf9\xbb\x1f\x00\xfb\xbb\x1f\xa0\xf9\xbb\x1f`\xfa\xbb\x1f\xc0\xfa\xbb\x1f\x80\xfb\xbb\x1f`\xfc\xbb\x1f\x80\xfc\xbb\x1f`\xfb\xbb\x1f\x80\xfa\xbb\x1f\x00\xfd\xbb\x1f\xa0\xfb\xbb\x1f\xa0\xfc\xbb\x1f\xe0\xfa\xbb\x1f\xa0\xf8\xbb\x1f@\xfc\xbb\x1f \xfd\xbb\x1f`\xf5\xbb\x1f \xfb\xbb\x1f\x80\xfd\xbb\x1f@\xfe\xbb\x1f\xe0\xfc\xbb\x1f\x80\xf7\xbb\x1f\x00\xfc\xbb\x1f`\xfe\xbb\x1f\xe0\xfd\xbb\x1f \xff\xbb\x1f\x80\xfe\xbb\x1f\x00\xfa\xbb\x1f\x00\xfe\xbb\x1f\xa0\xfd\xbb\x1f\xe0\xfb\xbb\x1f@\xff\xbb\x1f \xfe\xbb\x1f\xc0\xfe\xbb\x1f\xa0\xff\xbb\x1f\xc0\xff\xbb\x1f`\xff\xbb\x1f\xa0\xfe\xbb\x1f\xe0\xff\xbb\x1f\xe0\xf9\xbb\x1f\xc0\xfc\xbb\x1f\xc0\xfb\xbb\x1f\xe0\xfe\xbb\x1f\x00\xff\xbb\x1f \xfc\xbb\x1f`\xfd\xbb\x1f`\x1d;\x05\xc0\x1d;\x05 r\xe1\x1f\xa0p\xe1\x1f`q\xe1\x1f\x00q\xe1\x1f@p\xe1\x1f\xc0q\xe1\x1f q\xe1\x1f\xa0r\xe1\x1f`r\xe1\x1f\x80r\xe1\x1f\xc0r\xe1\x1f\xe0q\xe1\x1f\x80p\xe1\x1f\xe0r\xe1\x1f\x00s\xe1\x1f`s\xe1\x1f@s\xe1\x1f\xa0s\xe1\x1f\x80s\xe1\x1f\xe0s\xe1\x1f\x00t\xe1\x1f@q\xe1\x1f@t\xe1\x1f t\xe1\x1f@\xfd\xbb\x1f`t\xe1\x1f\x80t\xe1\x1f\xe0t\xe1\x1f u\xe1\x1f s\xe1\x1f\xa0u\xe1\x1f`u\xe1\x1f\xa0t\xe1\x1f\x80u\xe1\x1f v\xe1\x1f\x00u\xe1\x1f\xe0u\xe1\x1f\x00v\xe1\x1f@v\xe1\x1f\x00r\xe1\x1f@u\xe1\x1f\x80q\xe1\x1f p\xe1\x1f\xc0v\xe1\x1f\xa0q\xe1\x1f\x00w\xe1\x1f`w\xe1\x1f@r\xe1\x1f`v\xe1\x1f\xa0v\xe1\x1f x\xe1\x1f w\xe1\x1f\x00x\xe1\x1f\xc0u\xe1\x1f@x\xe1\x1f\xe0x\xe1\x1f\xe0v\xe1\x1f\xe0p\xe1\x1f\xc0x\xe1\x1f\xc0t\xe1\x1f\xc0s\xe1\x1f@w\xe1\x1f`p\xe1\x1f\x80y\xe1\x1f\xa0w\xe1\x1f`x\xe1\x1f\xe0y\xe1\x1f\xa0y\xe1\x1f y\xe1\x1f\xc0p\xe1\x1f\xa0z\xe1\x1f`y\xe1\x1f\x00z\xe1\x1f\x80x\xe1\x1f\xe0w\xe1\x1f\xa0x\xe1\x1f\x80{\xe1\x1f {\xe1\x1f\x80v\xe1\x1f@z\xe1\x1f\x80w\xe1\x1f\xc0{\xe1\x1f |\xe1\x1f z\xe1\x1f\xc0y\xe1\x1f\x80|\xe1\x1f\xc0z\xe1\x1f@|\xe1\x1f\xe0|\xe1\x1f\xe0z\xe1\x1f\xa0|\xe1\x1f`z\xe1\x1f\xe0{\xe1\x1f\x00}\xe1\x1f }\xe1\x1f@}\xe1\x1f`}\xe1\x1f\x80}\xe1\x1f\xa0}\xe1\x1f\xc0w\xe1\x1f\xe0}\xe1\x1f\xc0}\xe1\x1f`|\xe1\x1f\x00y\xe1\x1f`~\xe1\x1f@y\xe1\x1f\x80z\xe1\x1f@\x7f\xe1\x1f@~\xe1\x1f\xa0{\xe1\x1f\xc0~\xe1\x1f \x7f\xe1\x1f\xa0~\xe1\x1f\x00{\xe1\x1f\x00\x7f\xe1\x1f`{\xe1\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'L\xa0\xaa?\xc4"\x82?u\x86\x88?\x80-s?\xd6\x1e"?+\x01@?\xceKU?\xb2\xed.?Y\x82\x88?CAD?\xa7\xcd\x8c?\x0f\xd6L?\\pw?\x06rw?\xc1\\f?\xfd\x96\x19?\x98af?\x00\x87H?!\x95Y?\xf7u\xf7?\x860\x93?\xaa \xc2?4WU?\x91\x9aY?\xadMf??\xfb???\xb9\xbb?\xa9\xa5*?\xe3\x9dH?G\xa3j?\xc7\xbc;?\x8b\xb9;?\xe2R5@o\xc0*?\xac\xc7L?Z\x1fb?\x171\x93?\x8c\xa6\xaa?\x83\x99\x99?\xcfe\xa6?\xdcKU?\x84\xb5{?\x81\x89H?\x1d\x96\xf9?\x7f\x86H?\x8f\x86\x88?\x07\x84\x88?-\xd8]?\xf0\xb7;?\xe1!\x82?CjH?g\x92Y?\x98)\xf3?\n\xb8{?\xe8Y\xf5?\xbdv7?\xbf\x85\x88?\xc8@\xa4?O\xfb\x7f?\xc84b?\xad\xb5;?z\x0c\x01@NZU?\'tw?\x86Os?\xa6\xf8??\x0cO\x95?3-s?L\xd9]?\x9fV\x95?}\x87H@x\xb7;?\x831D?\xd9\xa6\xea?\xee\xdd]?\x040\xd3?\x17-s?053?:?D?_\xdd]?3\xb8\xfb?+\xe7\x8e?O\x1f\x82?\'w\xb7?\xe7\x12Q?kr\x97?>\xcdL?\xb3\xc8L?J\xca\x8c?\x85_f?\xa5\x08Q?\xa5\xe7??4\xda\xdd?y*s?\xf4QU?y-3?E1\xd3?\xbc\xf6\x7f?\xfed\x16@h-\x82?m\xa8*?\x0c\x18b?\x9cr7?\x10Q\xd5?U,3?>\xbd;?\x1e\x99\x19?\x1dvw?\x0fEU?\xc6\xd8]?-\x88\xc8?\xaa\xba;?$\xc8L?z\xba;?\x90B\x84?\x8a\xc6\xec?\xfa`f?\x8d\x94Y?\x10\xd8]?\xe1\x85H?\x89sw?\xa3CD?\xa1\xa9j?l\x80H?6\x1eb?\xb1\xc7L?\x9d\xd9]?-b\xb5?O\x98\xf9?b\xfe??b\x0e\xd1?\xa3\xc9L?\xb7{f?\xb7\xa3*?\xa5\xeb\x8e?\x00\xa2;? \xae*?CS\x05@\xf5\xe6n?\x19q7?\x81c\x86?3)\x93?\x1e\x9a\x99?\xaa\xcaL?\x94\x01@?\xd3AD?@\x94Y?J\x82H?\xa0\xafY?\x06_\xa6?\x97\x1d\x82?\xc5\x7fH?\xcfTU?K\xdf]?u\x94Y?\x8a\xde\x1d?\x14\x1f\x12@\xf4\xd5]?\x1833?Y.3?\xc0b\x86?\xbf\x85\x88?\x84d\xc6?-DD?\x8e\xca]?\xe8\xf9n?%sw?3r7?\xeft\x97?d`&?\xc6\x10Q?\t\x1db?\xf1\x1e\x02@\xc4C\x84?\x83\x1f\xa2?\xa5\x9b*?\xc1\xa2j?>\rQ?\x91\x98Y?Q\xa6\x8a?\xccp7?/-s?\x8aJ\x84?\xbf\xff??\xf9AD?\x192s?\xb9\xec.?\x81KU?\x19\xa5*?Rq7?\xcc/s?>\r\xe0?\th7?\x10\xd8]?\xd9\xeb\x8e?\x18\xfb??\x08\xabj?A\x9dH?\xfb\x1f\x82?\xa6\xac*?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S' |\xc2\x04\xa0t\xc2\x04\x08\xff\x11\x05\xc8\xff\x11\x05\xb0\xfc\x11\x05\x08\xf9\x11\x058\xff\x11\x05`\xf8\x11\x05x\xfb\x11\x05\xa8\xf8\x11\x05\xc0\xfb\x11\x05\xb0\xff\x11\x05\x10\xfd\x11\x05\x90\xf2\x11\x05\x88\xf7\x11\x05\xe0\xf6\x11\x05\x10\xf7\x11\x050\xfb\x11\x05X\xfa\x11\x05\x18\xfe\x11\x05\xd8\xf5\x11\x05H\xfe\x11\x05\xc0\xf5\x11\x05\xc0\xf2\x11\x05\xb8\xf1\x11\x05\xe8\xf7\x11\x05p\xf4\x11\x05\xa8\xfb\x11\x05\x18\xf5\x11\x05\x98\xff\x11\x05(\xf4\x11\x05\x90\xfe\x11\x05H\xf5\x11\x05H\xfb\x11\x05@\xfa\x11\x05\xb8\xfd\x11\x05\xc8\xfc\x11\x05\xb8\xfa\x11\x05 \xf6\x11\x05\xf8\xfc\x11\x05\x10\xfa\x11\x058\xf0\x11\x050\xf2\x11\x05`\xf5\x11\x05\xf0\xf5\x11\x05\xb0\xf9\x11\x050\xf8\x11\x05\xb8\xf7\x11\x05h\xfc\x11\x05\xa8\xfe\x11\x05h\xf9\x11\x05P\xf9\x11\x05 \xf9\x11\x05\x00\xf5\x11\x05\xb0\xf3\x11\x05\xd0\xf7\x11\x05\x98\xf6\x11\x05\x80\xf9\x11\x05\xe8\xf1\x11\x05\xd8\xf8\x11\x05\xe8\xf4\x11\x05P\xf3\x11\x05\xd8\xf2\x11\x05\x80\xf6\x11\x05\xe0\xf3\x11\x05x\xfe\x11\x05\x08\xf6\x11\x05\xc0\xf8\x11\x058\xf6\x11\x05H\xf8\x11\x05@\xf1\x11\x05p\xf1\x11\x05\xa8\xf2\x11\x05\xe8\xfd\x11\x05 \xfc\x11\x05\xd0\xfd\x11\x05\xe8\xfa\x11\x05\xf8\xf6\x11\x05\x88\xfa\x11\x05\x98\xf0\x11\x05\xf0%\xc1\x04\x80 \xc1\x04H%\xc1\x04\x08&\xc1\x04\x08,\xc1\x04x"\xc1\x04p!\xc1\x04\xf8#\xc1\x04\x90%\xc1\x04H(\xc1\x04\xa8(\xc1\x04\xe8$\xc1\x04\x00%\xc1\x04 )\xc1\x04P&\xc1\x04\x18"\xc1\x04p\'\xc1\x04\xc8#\xc1\x04h#\xc1\x04H"\xc1\x04\x80#\xc1\x04\xb0&\xc1\x04\x00"\xc1\x04\xa0$\xc1\x04x+\xc1\x04\xe8\'\xc1\x04\x88!\xc1\x04\x10*\xc1\x04\xf0.\xc1\x04\x80)\xc1\x040+\xc1\x04\x00+\xc1\x04\xe8*\xc1\x04\x10\'\xc1\x040.\xc1\x04\xe0 \xc1\x04@\'\xc1\x04\x88\'\xc1\x04 /\xc1\x04X*\xc1\x048&\xc1\x04\xd0!\xc1\x04\x00.\xc1\x04\xa0!\xc1\x04X$\xc1\x04p$\xc1\x04\x90.\xc1\x04\xf8&\xc1\x04\x88-\xc1\x04@-\xc1\x04\x90(\xc1\x04h \xc1\x04\xa8.\xc1\x040"\xc1\x04\x98/\xc1\x04\x80/\xc1\x04\xf8)\xc1\x04H.\xc1\x04\xb0#\xc1\x04P \xc1\x04\xa8+\xc1\x04\xa0\'\xc1\x04\x88$\xc1\x04\x18+\xc1\x04\xe0/\xc1\x04\xd0-\xc1\x04X-\xc1\x04($\xc1\x04\xa0*\xc1\x04\xc0%\xc1\x04P/\xc1\x04\xb0 \xc1\x04\x98)\xc1\x04\x80&\xc1\x04\xd8%\xc1\x04\xe0,\xc1\x04x%\xc1\x048/\xc1\x04\xf0+\xc1\x04\xf8\xf0\x11\x05`\xf2\x11\x05\x18\xfb\x11\x05\x10\xf4\x11\x05p\xf7\x11\x05X\xfd\x11\x05\xe0\xfc\x11\x05(\xf7\x11\x05\xa0\xf4\x11\x05 \xf3\x11\x05p\xfa\x11\x05\x88\xfd\x11\x05H\xf2\x11\x05\xf0\xfb\x11\x05\xd0\xf1\x11\x05P\xf6\x11\x05\x80\xfc\x11\x05X\xf1\x11\x05(\xf1\x11\x05(\xfa\x11\x05X\xf7\x11\x05\x90\xf5\x11\x05\xc8\xf6\x11\x05h\xff\x11\x05\x88\xf4\x11\x05\x90\xfb\x11\x05\xa0\xfd\x11\x05 \xff\x11\x05\xa0\xfa\x11\x05p\xfd\x11\x05\x18\xf8\x11\x05\xf8\xf9\x11\x05\xf0\xf8\x11\x05(\xfd\x11\x05\x90\xf8\x11\x05\xb0\xf0\x11\x05\x88\xf1\x11\x05\xd8\xfb\x11\x05\xd0\xf4\x11\x05P\xf0\x11\x05P\xff\x11\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3749
sg3633
g3739
sg3647
g3743
sg3642
g3747
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3777
sg3633
g3773
sg3647
g3784
sg3642
g3781
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3794
sg3633
g3790
sg3647
g3801
sg3642
g3798
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3715
sg3633
g3807
sg3647
g3709
sg3642
g3814
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3760
sg3633
g3822
sg3647
g3767
sg3642
g3829
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3777
sg3633
g3773
sg3647
g3784
sg3642
g3781
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3638
sg3633
g3893
sg3647
g3648
sg3642
g3900
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3692
sg3633
g3908
sg3647
g3699
sg3642
g3915
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3927
sg3633
g3923
sg3647
g3934
sg3642
g3931
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3950
sg3633
g3940
sg3647
g3944
sg3642
g3948
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3726
sg3633
g3957
sg3647
g3733
sg3642
g3964
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3749
sg3633
g3989
sg3647
g3743
sg3642
g3996
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3760
sg3633
g3822
sg3647
g3767
sg3642
g3829
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3950
sg3633
g4051
sg3647
g3944
sg3642
g4058
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3715
sg3633
g3807
sg3647
g3709
sg3642
g3814
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g4096
sg3633
g4092
sg3647
g4103
sg3642
g4100
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3692
sg3633
g3908
sg3647
g3699
sg3642
g3915
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4145
sg3633
g4135
sg3647
g4139
sg3642
g4143
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3675
sg3633
g4178
sg3647
g3682
sg3642
g4185
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3950
sg3633
g4051
sg3647
g3944
sg3642
g4058
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g4145
sg3633
g4232
sg3647
g4139
sg3642
g4239
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3658
sg3633
g4247
sg3647
g3665
sg3642
g4254
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3749
sg3633
g3989
sg3647
g3743
sg3642
g3996
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g4145
sg3633
g4135
sg3647
g4139
sg3642
g4143
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g4008
sg3633
g4301
sg3647
g4015
sg3642
g4308
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g4096
sg3633
g4092
sg3647
g4103
sg3642
g4100
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3927
sg3633
g3923
sg3647
g3934
sg3642
g3931
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3749
sg3633
g3739
sg3647
g3743
sg3642
g3747
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3749
sg3633
g3989
sg3647
g3743
sg3642
g3996
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3638
sg3633
g3893
sg3647
g3648
sg3642
g3900
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3794
sg3633
g3790
sg3647
g3801
sg3642
g3798
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4008
sg3633
g4301
sg3647
g4015
sg3642
g4308
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3749
sg3633
g3989
sg3647
g3743
sg3642
g3996
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g4096
sg3633
g4092
sg3647
g4103
sg3642
g4100
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3760
sg3633
g3822
sg3647
g3767
sg3642
g3829
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3794
sg3633
g4528
sg3647
g3801
sg3642
g4535
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3658
sg3633
g4247
sg3647
g3665
sg3642
g4254
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4560
sg3633
g4556
sg3647
g4567
sg3642
g4564
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3867
sg3633
g4573
sg3647
g3874
sg3642
g4580
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3726
sg3633
g3957
sg3647
g3733
sg3642
g3964
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3777
sg3633
g3773
sg3647
g3784
sg3642
g3781
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3675
sg3633
g4178
sg3647
g3682
sg3642
g4185
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g4096
sg3633
g4627
sg3647
g4103
sg3642
g4634
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3976
sg3633
g4642
sg3647
g3983
sg3642
g4649
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3950
sg3633
g3940
sg3647
g3944
sg3642
g3948
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g4025
sg3633
g4683
sg3647
g4032
sg3642
g4690
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g4145
sg3633
g4135
sg3647
g4139
sg3642
g4143
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3794
sg3633
g3790
sg3647
g3801
sg3642
g3798
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g4560
sg3633
g4776
sg3647
g4567
sg3642
g4783
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3794
sg3633
g4528
sg3647
g3801
sg3642
g4535
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4025
sg3633
g4683
sg3647
g4032
sg3642
g4690
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3950
sg3633
g4051
sg3647
g3944
sg3642
g4058
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4145
sg3633
g4232
sg3647
g4139
sg3642
g4239
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3927
sg3633
g4869
sg3647
g3934
sg3642
g4876
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3749
sg3633
g3989
sg3647
g3743
sg3642
g3996
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g4096
sg3633
g4627
sg3647
g4103
sg3642
g4634
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3976
sg3633
g4642
sg3647
g3983
sg3642
g4649
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g4025
sg3633
g4683
sg3647
g4032
sg3642
g4690
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3794
sg3633
g3790
sg3647
g3801
sg3642
g3798
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3927
sg3633
g4869
sg3647
g3934
sg3642
g4876
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g4560
sg3633
g4556
sg3647
g4567
sg3642
g4564
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3715
sg3633
g3807
sg3647
g3709
sg3642
g3814
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4145
sg3633
g4232
sg3647
g4139
sg3642
g4239
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3927
sg3633
g3923
sg3647
g3934
sg3642
g3931
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4096
sg3633
g4627
sg3647
g4103
sg3642
g4634
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3760
sg3633
g3822
sg3647
g3767
sg3642
g3829
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g4145
sg3633
g4135
sg3647
g4139
sg3642
g4143
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3927
sg3633
g3923
sg3647
g3934
sg3642
g3931
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3715
sg3633
g3807
sg3647
g3709
sg3642
g3814
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3927
sg3633
g4869
sg3647
g3934
sg3642
g4876
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4346
sg3633
g5170
sg3647
g4353
sg3642
g5177
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4008
sg3633
g4301
sg3647
g4015
sg3642
g4308
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3692
sg3633
g3908
sg3647
g3699
sg3642
g3915
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3976
sg3633
g4642
sg3647
g3983
sg3642
g4649
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3950
sg3633
g3940
sg3647
g3944
sg3642
g3948
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3950
sg3633
g3940
sg3647
g3944
sg3642
g3948
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3658
sg3633
g4247
sg3647
g3665
sg3642
g4254
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3675
sg3633
g4178
sg3647
g3682
sg3642
g4185
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4145
sg3633
g4232
sg3647
g4139
sg3642
g4239
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3950
sg3633
g4051
sg3647
g3944
sg3642
g4058
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3867
sg3633
g4573
sg3647
g3874
sg3642
g4580
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g4560
sg3633
g4776
sg3647
g4567
sg3642
g4783
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3976
sg3633
g4642
sg3647
g3983
sg3642
g4649
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3794
sg3633
g4528
sg3647
g3801
sg3642
g4535
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4346
sg3633
g5170
sg3647
g4353
sg3642
g5177
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g4560
sg3633
g4556
sg3647
g4567
sg3642
g4564
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3675
sg3633
g4178
sg3647
g3682
sg3642
g4185
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3950
sg3633
g4051
sg3647
g3944
sg3642
g4058
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3976
sg3633
g4642
sg3647
g3983
sg3642
g4649
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g4145
sg3633
g4232
sg3647
g4139
sg3642
g4239
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g4025
sg3633
g4683
sg3647
g4032
sg3642
g4690
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3638
sg3633
g3893
sg3647
g3648
sg3642
g3900
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3760
sg3633
g3822
sg3647
g3767
sg3642
g3829
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3794
sg3633
g4528
sg3647
g3801
sg3642
g4535
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g4145
sg3633
g4135
sg3647
g4139
sg3642
g4143
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3638
sg3633
g3893
sg3647
g3648
sg3642
g3900
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3777
sg3633
g5601
sg3647
g3784
sg3642
g5608
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g4560
sg3633
g4776
sg3647
g4567
sg3642
g4783
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3927
sg3633
g4869
sg3647
g3934
sg3642
g4876
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3794
sg3633
g4528
sg3647
g3801
sg3642
g4535
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4560
sg3633
g4776
sg3647
g4567
sg3642
g4783
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4008
sg3633
g4301
sg3647
g4015
sg3642
g4308
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3675
sg3633
g4178
sg3647
g3682
sg3642
g4185
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g4096
sg3633
g4092
sg3647
g4103
sg3642
g4100
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4346
sg3633
g5170
sg3647
g4353
sg3642
g5177
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3794
sg3633
g3790
sg3647
g3801
sg3642
g3798
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g4346
sg3633
g5170
sg3647
g4353
sg3642
g5177
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3867
sg3633
g4573
sg3647
g3874
sg3642
g4580
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3777
sg3633
g5601
sg3647
g3784
sg3642
g5608
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3749
sg3633
g3739
sg3647
g3743
sg3642
g3747
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3777
sg3633
g3773
sg3647
g3784
sg3642
g3781
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3726
sg3633
g3957
sg3647
g3733
sg3642
g3964
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g4096
sg3633
g4627
sg3647
g4103
sg3642
g4634
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3927
sg3633
g4869
sg3647
g3934
sg3642
g4876
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3658
sg3633
g4247
sg3647
g3665
sg3642
g4254
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3777
sg3633
g5601
sg3647
g3784
sg3642
g5608
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3749
sg3633
g3739
sg3647
g3743
sg3642
g3747
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3950
sg3633
g3940
sg3647
g3944
sg3642
g3948
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3777
sg3633
g5601
sg3647
g3784
sg3642
g5608
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3867
sg3633
g4573
sg3647
g3874
sg3642
g4580
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3692
sg3633
g3908
sg3647
g3699
sg3642
g3915
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3726
sg3633
g3957
sg3647
g3733
sg3642
g3964
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4560
sg3633
g4556
sg3647
g4567
sg3642
g4564
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3726
sg3633
g3957
sg3647
g3733
sg3642
g3964
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3638
sg3633
g3893
sg3647
g3648
sg3642
g3900
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3749
sg3633
g3739
sg3647
g3743
sg3642
g3747
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3777
sg3633
g3773
sg3647
g3784
sg3642
g3781
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4008
sg3633
g4004
sg3647
g4015
sg3642
g4012
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g4560
sg3633
g4776
sg3647
g4567
sg3642
g4783
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3867
sg3633
g4573
sg3647
g3874
sg3642
g4580
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g4096
sg3633
g4627
sg3647
g4103
sg3642
g4634
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3927
sg3633
g3923
sg3647
g3934
sg3642
g3931
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g4346
sg3633
g5170
sg3647
g4353
sg3642
g5177
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g4560
sg3633
g4556
sg3647
g4567
sg3642
g4564
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4025
sg3633
g4683
sg3647
g4032
sg3642
g4690
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3658
sg3633
g4247
sg3647
g3665
sg3642
g4254
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g4008
sg3633
g4301
sg3647
g4015
sg3642
g4308
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3777
sg3633
g5601
sg3647
g3784
sg3642
g5608
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3692
sg3633
g3908
sg3647
g3699
sg3642
g3915
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4096
sg3633
g4092
sg3647
g4103
sg3642
g4100
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3715
sg3633
g3807
sg3647
g3709
sg3642
g3814
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4346
sg3633
g4342
sg3647
g4353
sg3642
g4350
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I84795728
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\x90{\x01  \x91\x02 \xc0{\x01 \x90{\x01 \xa8\xa1\x02 \xe0\xa1\x02 \xb0|\x01 \x90{\x01 \xa8\x84\x02 \xd0\x84\x02 @\x91\x02 \xc0{\x01 \xe0\xa1\x02 `\x91\x02 \x80\x91\x02 \xa0\x91\x02 \x18\xa2\x02 \xf8\x84\x02  \x85\x02 \x18\xa2\x02 \xf0{\x01 \xf8\x84\x02 \xa0\x91\x02 `\x91\x02  \x85\x02  \x91\x02 \xa8\xa1\x02 P|\x01 \xe0\xa1\x02 `\x91\x02 H\x85\x02 \xa0\x91\x02 \xa8\xa1\x02 \xc0\x91\x02 \x90{\x01 \xa8\x84\x02 \xf0{\x01 H\x85\x02 \x80\x91\x02 @\x91\x02 \x18\xa2\x02 \xf8\x84\x02 \xa0\x91\x02 @\x91\x02 p\x85\x02 \x98\x85\x02 \xe0\xa1\x02 \x18\xa2\x02 \xf0{\x01 \xa8\xa1\x02  |\x01 \xa0\x91\x02 \xf8\x84\x02 \xc0\xa2\x02 P|\x01  \x91\x02 P\xa2\x02 \xe0\xa1\x02  |\x01 @}\x01 p\x85\x02 \x98\x85\x02  \x91\x02 \xc0{\x01 p}\x01 \x10}\x01  \x91\x02 \xd0\x84\x02 \x80\x91\x02  |\x01 \xc0{\x01 \x98\x85\x02 `\x91\x02 \x80\x91\x02 \x90{\x01 H\x85\x02 P\xa2\x02 `\x91\x02 \x80|\x01 \xd0\x84\x02 \xa8\x84\x02 \x88\xa2\x02 \xe0\xa1\x02 \xd8\x86\x02 \xf8\xa2\x02  \x91\x02 \xa8\x84\x02 \xf0{\x01 \x00\x87\x02  \x85\x02 \x98\x85\x02 H\x85\x02 \xa8\xa1\x02 \x98\x85\x02 \xe8\x85\x02 \x90{\x01 \x88\x86\x02 P\xa2\x02 \xe0\xa1\x02 \xa8\x84\x02 \xa0\x91\x02 P\xa2\x02 \x18\xa2\x02  \x85\x02 P\xa2\x02  \x91\x02 \xc0{\x01 @\x91\x02 \xf0{\x01 H\x85\x02 @}\x01 \x90{\x01 \xc0{\x01 \x10}\x01 H\x85\x02 \xe8\x85\x02 \x98\x85\x02 \xf8\x84\x02 \xa8\xa1\x02 \x90{\x01 H\x85\x02 p\x85\x02 P\xa2\x02 \xa8\x84\x02 \xb0\x86\x02  \x85\x02 `\x91\x02 \xa8\x84\x02 \xa0}\x01 \xf0{\x01  \x91\x02 `\x86\x02 \x10}\x01 \xa0\x91\x02 \x88\x86\x02 \xd0\x84\x02  \x85\x02 \x18\xa2\x02  |\x01 \x18\xa2\x02 \xa0\x91\x02 `\x91\x02 @\x91\x02 `\x86\x02 @\x91\x02 \xe0\xa1\x02 p\x85\x02 \xa0}\x01 \xf8\x84\x02 p}\x01 \xf0{\x01  |\x01 \x18\xa2\x02 \xf8\x84\x02 H\x85\x02 \xa8\xa1\x02 \xa8\x84\x02 \x80\x91\x02 \xc0{\x01 p\x85\x02 \xe0\xa1\x02  \x85\x02 \xd0\x84\x02 \xa0}\x01 \xd0\x84\x02 \xa0\x91\x02 p\x85\x02 \x18\xa2\x02 \x80\x91\x02 \x00\x87\x02 @\x91\x02 \xd0\x84\x02 \x80\x91\x02  \x85\x02 \xf0{\x01 \xd0\x84\x02 p\x85\x02 `\x91\x02 \xf0{\x01  |\x01  \x85\x02 \x98\x85\x02 \xa8\xa1\x02 @}\x01 \xf0{\x01 \xb0\x86\x02  |\x01 P\xa2\x02 \xc0{\x01 8\x86\x02 \xc0{\x01  |\x01 @\x91\x02 \x80\x91\x02 8\x86\x02 \xf8\x84\x02 \xa8\x84\x02 @\x91\x02  \x91\x02 \xe0\xa1\x02 '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\x94\x02 \xc0\x92\x02 @\x92\x02  \x93\x02 \x80\x94\x02  \x94\x02 `\x93\x02 \x00\x93\x02 \xe0\x94\x02 \x80\x92\x02 \xe0\x93\x02 `\x94\x02 \x00\x94\x02 \xc0\x93\x02 \xa0\x92\x02  \x95\x02 \xa0\x93\x02 \xc0\x94\x02 \x80\x95\x02 @\x95\x02 \xe0\x95\x02 \xc0\x95\x02  \x96\x02 \x00\x96\x02 `\x95\x02 \x80\x96\x02 \xa0\x96\x02 \xc0\x96\x02 \xe0\x96\x02 \xa0\x95\x02  \x97\x02 \x00\x97\x02 \xa0\x94\x02 \xa0\x19;\x05`\x97\x02 @\x97\x02 \xa0\x97\x02  \x98\x02 \xe0\x92\x02 @\x93\x02 `\x96\x02 \xa0\x98\x02 @\x96\x02 @\x1d;\x05\x00\x95\x02 \xc0\x97\x02 \x80\x97\x02 `\x98\x02 \xe0\x91\x02 \x00\x98\x02 \x80\x93\x02 \xc0\x98\x02 \x00\x99\x02 \xa0\x99\x02 @\x99\x02 \x00\x9a\x02 \xe0\x99\x02  \x9b\x02 @\x9a\x02 \xe0\x97\x02 \x00\x9b\x02 \x80\x98\x02  \x92\x02 \xe0\x9b\x02 \x80\x9a\x02  \x9c\x02 \xc0\x99\x02 \x80\x99\x02 \xc0\x9b\x02 \x80\x9c\x02 \xc0\x9c\x02 `\x92\x02 \xa0\x9c\x02 \x80\x9b\x02 `\x9b\x02 @\x9b\x02 @\x9c\x02 \x80\x9d\x02 \xa0\x9a\x02 @\x9d\x02  \x9a\x02 \xc0\x9a\x02 `\x9d\x02 `\x9e\x02  \x9e\x02 \x00\x9d\x02 @\x9e\x02 \x80\x9e\x02 \x00\x9f\x02 @\x98\x02  \x99\x02 \xa0\x9b\x02  \x9f\x02 @\x9f\x02 \xe0\x9c\x02 `\x99\x02 `\x9c\x02 \xc0\x9e\x02 \xe0\x98\x02 \x80\x9f\x02 `\x9a\x02 `\x9f\x02 \xe0\x9a\x02 \xa0\x9f\x02 \x00\x9c\x02 \xe0\x9e\x02 \xc0\x9f\x02 \xa0\x9d\x02 \xe0\x9d\x02  \x9d\x02 \xe0~\xe1\x1f\xc0\xfd\xbb\x1f\x80\xf0, @\xf2, `\xf0, \x80\xf1,  \xf1, @\xf0, \xe0\xf1, @\xf1, \xc0\xf1, `\xf2, \xc0\xf2, \x80\xf2, \xa0\xf2, \xe0\xf2, \x00\xf3,  \xf3, @\xf3, \xa0\xf3, \xc0\xf3, \xe0\xf3,  \xf0,  \xf4, @\xf4, `\xf4, \x00\xf1, `\xf1, \x80\xf4, \xa0\xf4, \x00\xf5, \xe0\xf4, \xa0\xf0,  \xf5, \x80\xf5, `\xf5,  \xf2, \xa0\xf5, \xc0\xf5, \xe0\xf5, \x00\xf6, `\xf6, @\xf6, \xa0\xf1, \x80\xf6, \xa0\xf6, \x00\xf7,  \xf7, \xe0\xf0, `\xf7, @\xf7, \xa0\xf7, \xc0\xf7, \xe0\xf7, @\xf5, \xc0\xf6, @\xf8, `\xf8, \xa0\x9e\x02 \xe0\xf6, \x80\xf8, \xc0\xf8, \x80\xf9, \xc0\xf4, \x80\xf7, `\xf9,  \xf8, \x00\xfa, \x00\xf4, \x00\xf2,  \xf9, \xa0\xfa, \xe0\xf9, \x80\xf3, \xa0\xf8, \xc0\xfa, `\xfa, \xe0\x9f\x02 @\xf9, \xc0\xfb, \x00\xf9, \xa0\xf9, \x00\xfc, @\xfb, \x00\xfb, \xa0\xfb, \x80\xfc, \xe0\xfa, \xa0\xfc, \x80\xfa, '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xd7\xd3]?sO\x95?\xad\xfa\x7f?\x8d\xba;?\xced\xc6?<\x1d\x82?\x05f\x86?\xb8\xd5\x1d?\xd1r7?)\xfc\xbf?\xaa2\xb3?7\x0eQ?*\xe7\xae?)\x0cQ?\tR\x95?M8s?w\xa9\x8a?\x08\xa8*?\xcf.\xf3?\xc2\xfc??\x01\x15\x11?bBD?\xc9\xb9;?.\xb9\xbb?3>D?\'_\xd5?<\xeb\x8e?\x03\x80H?\x84bf@\xf6\x0cQ?#\x02/?\x83\x1e\xa2?\x85\xa5j?\xc7:\x84?\x97\xf8??X\x1d"?\xfa\xb1;?Baf?\xf1\x87\x88?\x8d\x0cQ?\xe2df?c\xae*?\xcapw?7\xa6{?\xe6\x92*?x\xd9\xfd?\x0e\x95\xd9?{e\xa6?#\xe7.?\x10B4@\x0e\xa8\x8a?\x14ff?h\xe8.?U\xb8\x9b?P.3?\xe1\xa6\x8a?\xe8\x0eQ?w]f?:\xa8j?\xd7\tQ?\xa1\xe4\x7f?\xf7\x00Q?\x9a b?o\xaf;?\xcb\x12Q?\xfd\xc4]?\xfct7?\x02/\xd3?=.3?\x80\xc9\xec?\xd3q7?\xd6~H?R?D?\x9e\xd1{?\xffc&?x\x87\x18@jdf?J\x1b"?"\xad*?\x86\xc3L?\x81\x84\x88?\xc9\x8f\x99?\x1ag\x86?\xe7\x10\x91?\x19t\xb7?\xa5\xcb\x8c?5\xc7L?\xcd\x1a"?\xc4\xa5\xd9?\xef\x1bb?\x8c_&?\r\xa8*?\x1d\xc3L?\xc723?\xb1\x0e\x91?\x04\xa6*?\xc7\xfe\xbf?-^f?]\x18b?\xfd\x0f\x91?\xf4OU?\x01\xb1;?\x8f\xe7n?\x9c\xf7\x7f?b\xfd\x7f?w\xd7\xac?\x84\xaa*?(\x88\x88?\xee "?M\xff\xbf?\x98\xd7\xcc?\x16\xb8;?@\xa5*?"\xb0\xdb?\xd1\xee.?\n\xf9\x8e?\x98\xfd\x9f?s\xbb;?\xa20\x93?\x19\xe7.?\xed\x92Y?`\\7?X\xe3.?\x14u7?\xd6)s?\xa2\xcb\x8c?\x14/\x82?2\xbe;?\xd9\xe4n?\x13\xfd??\xb7\x86X@PE3?L\xc5\\@>\xcdL?-\xccL?\x86\xb8\xbb?\xe7"b?\x94UU?\xcd\xdb]?\x0f.s?\xf6\xd8]?\xe6\x0bQ?\xc0\xbb\xbb?\x97NU?J\xc8L?\xe3M\x95?\x00\xea??\xa5RU?\x7fww?0CD?X\xd9\x1d?\x8f\xdc-@\x9d\x1db?4 "?\n\x0bQ?\x0e\xe3\x1d@\xa9\xa2j?\x0f\xeb.?sCD?\xf0:\x84?\x92\xc6\xcc?\xafdf@\xbd\x88H?\x87~&?\x01\xc1L?\xcf\xb3;?\xd67\x84?<\xc6L?.Tf?\x92\x9dH?\xb6\x1d\x82?\xd3?D?y\x1cb?\xd7\x85H?\xb7\xed.?\x8c\t\xc0?d6U?\xee\x0c\xb1?\x83DD?\xc9b\x86?]\xa9\n@!\xfd\x9f?A \xc2?\xb7\xa5*?:\xf1.?\x8f\xcfL?\xff\xb9\x9b?\xd2\xde.?\x93\xa8*?\'\xdc\r@\xa1\xac*?\x15PU?\xb8\xff\x7f?\xfb\x0e\x91?vr7?\x80\xb2;?F:b?\x07\xdc\x1d@a\x1cb??\x1a\x82?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S"\xb0/\xc1\x04\xd0'\xc1\x04\xc0\xbb\xc9\x0c\xa0\xba\xc9\x0c`\xb8\xc9\x0c \xb9\xc9\x0c\xf8\xb6\xc9\x0c\xf8\xbc\xc9\x0c\xc8\xb3\xc9\x0c0\xb8\xc9\x0c\xd8\xb2\xc9\x0c\xf0\xbb\xc9\x0c\xe8\xb4\xc9\x0c\xa8\xbe\xc9\x0cx\xb5\xc9\x0c\xf0\xbe\xc9\x0cX\xb1\xc9\x0c\xa0\xb4\xc9\x0c8\xb3\xc9\x0cx\xbb\xc9\x0c\xc8\xbf\xc9\x0cP\xbc\xc9\x0c\xb0\xbf\xc9\x0c \xbf\xc9\x0cH\xb8\xc9\x0c\x98\xb6\xc9\x0c\xf0\xb2\xc9\x0c\xb8\xb7\xc9\x0c\x18\xbe\xc9\x0c\xd8\xb5\xc9\x0c\xa0\xb7\xc9\x0c\x10\xba\xc9\x0c(\xbd\xc9\x0c\x88\xbd\xc9\x0c \xb0\xc9\x0c8\xb6\xc9\x0ch\xb6\xc9\x0c\xa8\xb2\xc9\x0c\xb8\xba\xc9\x0c`\xb2\xc9\x0cX\xb4\xc9\x0c@\xb7\xc9\x0c\xc8\x7f\xc2\x04`r\xc2\x04\xa0z\xc2\x04\xf8y\xc2\x04hp\xc2\x04H~\xc2\x04\x98y\xc2\x04\xc8|\xc2\x04\xe0|\xc2\x04\x08y\xc2\x04hv\xc2\x04\xf0u\xc2\x04 v\xc2\x04\xa8r\xc2\x04 y\xc2\x04 S\xe1\x04\xe0Y\xe1\x04(W\xe1\x04\xf0R\xe1\x04\xc8V\xe1\x04\xd8U\xe1\x04\xc0[\xe1\x04\x00R\xe1\x04 V\xe1\x04(Z\xe1\x04@W\xe1\x04\xb8Q\xe1\x04xR\xe1\x04\x18~\xc2\x04\x18{\xc2\x04pw\xc2\x04\xc0{\xc2\x04Hx\xc2\x04\xb0\xb0\xc9\x0c\x90\xbe\xc9\x0ch\xb0\xc9\x0ch\xbc\xc9\x0cH\xbe\xc9\x0c\x98\xbf\xc9\x0c\xa0\xbd\xc9\x0c0\xb5\xc9\x0c\xc0\xb8\xc9\x0c\xd0\xba\xc9\x0ch\xbf\xc9\x0cp\xbd\xc9\x0c\xd8\xbe\xc9\x0c0\xbe\xc9\x0c\xb8\xbd\xc9\x0cP\xb9\xc9\x0c\x08\xbf\xc9\x0c\xc0\xb2\xc9\x0cp\xb7\xc9\x0c\x08\xb9\xc9\x0c\xe8\xba\xc9\x0c\x88\xb4\xc9\x0c\xd0\xbd\xc9\x0c`\xbb\xc9\x0cP\xb3\xc9\x0c\xd0\xb7\xc9\x0c\xc0\xbe\xc9\x0c \xbc\xc9\x0ch\xb3\xc9\x0c\xa8\xbb\xc9\x0c\x80\xbf\xc9\x0c0\xbb\xc9\x0c\xd0\xb1\xc9\x0c\x88\xba\xc9\x0c8\xbc\xc9\x0c\x80\xbc\xc9\x0c@\xba\xc9\x0c\xe0\xbc\xc9\x0c\xe8\xbd\xc9\x0c\x18\xb2\xc9\x0c\x10\xbd\xc9\x0c\xd8\xbb\xc9\x0c\xe0\xb9\xc9\x0c\xf8\xb9\xc9\x0c\xb8\xb4\xc9\x0c\xe0\xb3\xc9\x0c\xf0\xb5\xc9\x0c\x08\xb6\xc9\x0c\x10\xb7\xc9\x0c\xb0\xb3\xc9\x0c\x80\xb6\xc9\x0c\xf8\xb0\xc9\x0cP\xb0\xc9\x0c\x90\xbb\xc9\x0c\x98\xb0\xc9\x0c(\xb7\xc9\x0c`\xb5\xc9\x0c\x10\xb1\xc9\x0c\xa8\xb8\xc9\x0c@\xb1\xc9\x0c \xb3\xc9\x0c\x00\xbb\xc9\x0c\xe8\xb1\xc9\x0c\xe0\xb0\xc9\x0c\x80\xb0\xc9\x0cp\xb1\xc9\x0c@\xb4\xc9\x0c\xe8\xb7\xc9\x0cX\xba\xc9\x0c\xc8\xb6\xc9\x0c\xa8\xb5\xc9\x0c\xc8\xb0\xc9\x0c\x90\xb5\xc9\x0c(\xb4\xc9\x0c\x98\xbc\xc9\x0ch\xb9\xc9\x0c\xc0\xb5\xc9\x0cX\xb7\xc9\x0c\x00\xb8\xc9\x0c\x98\xb9\xc9\x0cp\xb4\xc9\x0c\x88\xb7\xc9\x0c8\xb9\xc9\x0c\xb8\xb1\xc9\x0cH\xb5\xc9\x0c\x00\xb2\xc9\x0cH\xbb\xc9\x0c(\xb1\xc9\x0cx\xb2\xc9\x0c0\xb2\xc9\x0c\x10\xb4\xc9\x0cP\xb6\xc9\x0c8\xb0\xc9\x0c \xb6\xc9\x0c\x18\xb8\xc9\x0c\xf0\xb8\xc9\x0c\x80\xb9\xc9\x0c\x98\xb3\xc9\x0cx\xbe\xc9\x0c\xd0\xb4\xc9\x0c\xc8\xbc\xc9\x0c(\xba\xc9\x0c\xc8\xb9\xc9\x0c\x18\xb5\xc9\x0cx\xb8\xc9\x0cp\xba\xc9\x0c\xb0\xb9\xc9\x0c`\xbe\xc9\x0c\x88\xb1\xc9\x0c\x80\xb3\xc9\x0c\xe0\xbf\xc9\x0cP\xbf\xc9\x0c\xf8\xb3\xc9\x0c\xe0\xb6\xc9\x0c\x00\xbe\xc9\x0c\x00\xb5\xc9\x0c\xd8\xb8\xc9\x0c\x90\xb2\xc9\x0c\xb0\xbc\xc9\x0c\x90\xb8\xc9\x0cH\xb2\xc9\x0c\x08\xb3\xc9\x0c\x08\xbc\xc9\x0c\xb0\xb6\xc9\x0c@\xbd\xc9\x0c"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6485
sg6371
g6475
sg6385
g6479
sg6380
g6483
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6485
sg6371
g6505
sg6385
g6479
sg6380
g6512
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6462
sg6371
g6567
sg6385
g6469
sg6380
g6574
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6637
sg6371
g6633
sg6385
g6644
sg6380
g6641
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6654
sg6371
g6650
sg6385
g6661
sg6380
g6658
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6637
sg6371
g6633
sg6385
g6644
sg6380
g6641
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6701
sg6371
g6697
sg6385
g6708
sg6380
g6705
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6654
sg6371
g6714
sg6385
g6661
sg6380
g6721
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6620
sg6371
g6729
sg6385
g6627
sg6380
g6736
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6586
sg6371
g6744
sg6385
g6593
sg6380
g6751
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6671
sg6371
g6759
sg6385
g6678
sg6380
g6766
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6462
sg6371
g6567
sg6385
g6469
sg6380
g6574
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6843
sg6371
g6839
sg6385
g6850
sg6380
g6847
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6620
sg6371
g6729
sg6385
g6627
sg6380
g6736
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6445
sg6371
g6869
sg6385
g6452
sg6380
g6876
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6396
sg6371
g6884
sg6385
g6403
sg6380
g6891
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6485
sg6371
g6505
sg6385
g6479
sg6380
g6512
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6701
sg6371
g6697
sg6385
g6708
sg6380
g6705
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6843
sg6371
g6938
sg6385
g6850
sg6380
g6945
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6541
sg6371
g6966
sg6385
g6548
sg6380
g6973
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6637
sg6371
g6981
sg6385
g6644
sg6380
g6988
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6654
sg6371
g6650
sg6385
g6661
sg6380
g6658
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6620
sg6371
g6729
sg6385
g6627
sg6380
g6736
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g7039
sg6371
g7035
sg6385
g7046
sg6380
g7043
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6462
sg6371
g6567
sg6385
g6469
sg6380
g6574
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6637
sg6371
g6981
sg6385
g6644
sg6380
g6988
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6701
sg6371
g7095
sg6385
g6708
sg6380
g7102
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6445
sg6371
g6869
sg6385
g6452
sg6380
g6876
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g7127
sg6371
g7123
sg6385
g7134
sg6380
g7131
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6654
sg6371
g6650
sg6385
g6661
sg6380
g6658
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6396
sg6371
g6884
sg6385
g6403
sg6380
g6891
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g7209
sg6371
g7205
sg6385
g7216
sg6380
g7213
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6462
sg6371
g6567
sg6385
g6469
sg6380
g6574
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g7127
sg6371
g7235
sg6385
g7134
sg6380
g7242
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g7056
sg6371
g7250
sg6385
g7063
sg6380
g7257
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g7039
sg6371
g7035
sg6385
g7046
sg6380
g7043
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6413
sg6371
g7304
sg6385
g6420
sg6380
g7311
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g7127
sg6371
g7123
sg6385
g7134
sg6380
g7131
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g7039
sg6371
g7332
sg6385
g7046
sg6380
g7339
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6396
sg6371
g6884
sg6385
g6403
sg6380
g6891
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g7127
sg6371
g7235
sg6385
g7134
sg6380
g7242
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g7056
sg6371
g7250
sg6385
g7063
sg6380
g7257
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6586
sg6371
g6744
sg6385
g6593
sg6380
g6751
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6603
sg6371
g7438
sg6385
g6610
sg6380
g7445
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6843
sg6371
g6938
sg6385
g6850
sg6380
g6945
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g7209
sg6371
g7479
sg6385
g7216
sg6380
g7486
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6586
sg6371
g6744
sg6385
g6593
sg6380
g6751
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6413
sg6371
g7304
sg6385
g6420
sg6380
g7311
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6485
sg6371
g6505
sg6385
g6479
sg6380
g6512
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6637
sg6371
g6633
sg6385
g6644
sg6380
g6641
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6396
sg6371
g6884
sg6385
g6403
sg6380
g6891
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6485
sg6371
g6475
sg6385
g6479
sg6380
g6483
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6701
sg6371
g7095
sg6385
g6708
sg6380
g7102
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6843
sg6371
g6938
sg6385
g6850
sg6380
g6945
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6671
sg6371
g6759
sg6385
g6678
sg6380
g6766
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6843
sg6371
g6839
sg6385
g6850
sg6380
g6847
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6445
sg6371
g6869
sg6385
g6452
sg6380
g6876
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g7056
sg6371
g7250
sg6385
g7063
sg6380
g7257
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6603
sg6371
g7438
sg6385
g6610
sg6380
g7445
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g7209
sg6371
g7205
sg6385
g7216
sg6380
g7213
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6462
sg6371
g6567
sg6385
g6469
sg6380
g6574
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6485
sg6371
g6475
sg6385
g6479
sg6380
g6483
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6620
sg6371
g6729
sg6385
g6627
sg6380
g6736
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g7209
sg6371
g7205
sg6385
g7216
sg6380
g7213
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6637
sg6371
g6633
sg6385
g6644
sg6380
g6641
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g7209
sg6371
g7479
sg6385
g7216
sg6380
g7486
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6413
sg6371
g7304
sg6385
g6420
sg6380
g7311
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6541
sg6371
g6966
sg6385
g6548
sg6380
g6973
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6701
sg6371
g6697
sg6385
g6708
sg6380
g6705
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6843
sg6371
g6839
sg6385
g6850
sg6380
g6847
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g7056
sg6371
g7250
sg6385
g7063
sg6380
g7257
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g7039
sg6371
g7332
sg6385
g7046
sg6380
g7339
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6843
sg6371
g6839
sg6385
g6850
sg6380
g6847
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g7056
sg6371
g7250
sg6385
g7063
sg6380
g7257
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6654
sg6371
g6650
sg6385
g6661
sg6380
g6658
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6843
sg6371
g6938
sg6385
g6850
sg6380
g6945
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g7039
sg6371
g7035
sg6385
g7046
sg6380
g7043
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g7209
sg6371
g7479
sg6385
g7216
sg6380
g7486
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6485
sg6371
g6505
sg6385
g6479
sg6380
g6512
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6654
sg6371
g6714
sg6385
g6661
sg6380
g6721
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6671
sg6371
g6759
sg6385
g6678
sg6380
g6766
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6485
sg6371
g6475
sg6385
g6479
sg6380
g6483
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g7209
sg6371
g7205
sg6385
g7216
sg6380
g7213
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6701
sg6371
g7095
sg6385
g6708
sg6380
g7102
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6586
sg6371
g6744
sg6385
g6593
sg6380
g6751
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g7039
sg6371
g7332
sg6385
g7046
sg6380
g7339
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6524
sg6371
g8248
sg6385
g6531
sg6380
g8255
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6637
sg6371
g6981
sg6385
g6644
sg6380
g6988
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g7127
sg6371
g7235
sg6385
g7134
sg6380
g7242
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6637
sg6371
g6981
sg6385
g6644
sg6380
g6988
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6586
sg6371
g6744
sg6385
g6593
sg6380
g6751
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6541
sg6371
g6966
sg6385
g6548
sg6380
g6973
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6541
sg6371
g6966
sg6385
g6548
sg6380
g6973
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g7039
sg6371
g7332
sg6385
g7046
sg6380
g7339
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g7209
sg6371
g7479
sg6385
g7216
sg6380
g7486
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6654
sg6371
g6650
sg6385
g6661
sg6380
g6658
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g7127
sg6371
g7123
sg6385
g7134
sg6380
g7131
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6701
sg6371
g6697
sg6385
g6708
sg6380
g6705
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g7127
sg6371
g7235
sg6385
g7134
sg6380
g7242
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6637
sg6371
g6981
sg6385
g6644
sg6380
g6988
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6654
sg6371
g6714
sg6385
g6661
sg6380
g6721
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6843
sg6371
g6938
sg6385
g6850
sg6380
g6945
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6445
sg6371
g6869
sg6385
g6452
sg6380
g6876
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6485
sg6371
g6505
sg6385
g6479
sg6380
g6512
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6603
sg6371
g6599
sg6385
g6610
sg6380
g6607
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g7039
sg6371
g7332
sg6385
g7046
sg6380
g7339
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6671
sg6371
g6759
sg6385
g6678
sg6380
g6766
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g7209
sg6371
g7479
sg6385
g7216
sg6380
g7486
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6524
sg6371
g8248
sg6385
g6531
sg6380
g8255
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6620
sg6371
g6729
sg6385
g6627
sg6380
g6736
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g7039
sg6371
g7035
sg6385
g7046
sg6380
g7043
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6637
sg6371
g6633
sg6385
g6644
sg6380
g6641
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6603
sg6371
g7438
sg6385
g6610
sg6380
g7445
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6843
sg6371
g6839
sg6385
g6850
sg6380
g6847
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6603
sg6371
g7438
sg6385
g6610
sg6380
g7445
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6701
sg6371
g6697
sg6385
g6708
sg6380
g6705
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6524
sg6371
g8248
sg6385
g6531
sg6380
g8255
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g7039
sg6371
g7035
sg6385
g7046
sg6380
g7043
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6586
sg6371
g6582
sg6385
g6593
sg6380
g6590
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6701
sg6371
g7095
sg6385
g6708
sg6380
g7102
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g7127
sg6371
g7123
sg6385
g7134
sg6380
g7131
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6671
sg6371
g6759
sg6385
g6678
sg6380
g6766
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6445
sg6371
g6869
sg6385
g6452
sg6380
g6876
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6701
sg6371
g7095
sg6385
g6708
sg6380
g7102
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6654
sg6371
g6714
sg6385
g6661
sg6380
g6721
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g7127
sg6371
g7123
sg6385
g7134
sg6380
g7131
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g7209
sg6371
g7205
sg6385
g7216
sg6380
g7213
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6413
sg6371
g7304
sg6385
g6420
sg6380
g7311
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6524
sg6371
g8248
sg6385
g6531
sg6380
g8255
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6413
sg6371
g7304
sg6385
g6420
sg6380
g7311
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g7127
sg6371
g7235
sg6385
g7134
sg6380
g7242
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6603
sg6371
g7438
sg6385
g6610
sg6380
g7445
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6524
sg6371
g8248
sg6385
g6531
sg6380
g8255
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6654
sg6371
g6714
sg6385
g6661
sg6380
g6721
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6485
sg6371
g6475
sg6385
g6479
sg6380
g6483
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6541
sg6371
g6966
sg6385
g6548
sg6380
g6973
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6396
sg6371
g6884
sg6385
g6403
sg6380
g6891
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.