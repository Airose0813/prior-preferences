ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E29_infer_design1_2015_Jul_14_1416
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'Z\xe6\xdc\xc0"\x00N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_14_1416
p67
sVparticipant
p68
VE29
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.66678773889907461
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F19.033226915212708
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P11'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F8.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F1.6800000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'"\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p103
sg21
F1.1000000000000001
sg70
Vn
sa(dp104
g64
g65
sg20
F7.2670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F1.4799999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x11\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p110
sg21
F1.8999999999999999
sg70
Vn
sa(dp111
g64
g65
sg20
F3.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F1.4399999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x19\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p117
sg21
F1.7
sg70
Vn
sa(dp118
g64
g65
sg20
F4.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.99999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x0e\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p124
sg21
F1.7
sg70
Vn
sa(dp125
g64
g65
sg20
F3.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F1.9800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S' \x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p131
sg21
F1.3999999999999999
sg70
Vn
sa(dp132
g64
g65
sg20
F4.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F1.6200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'$\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V48-twix.png
p138
sg21
F1.1000000000000001
sg70
Vn
sa(dp139
g64
g65
sg20
F9.8670000000000009
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.73999999999999888
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x15\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V29-beans.png
p145
sg21
F1.8999999999999999
sg70
Vn
sa(dp146
g64
g65
sg20
F4.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F2.0600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x08\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p152
sg21
F1.2
sg70
Vn
sa(dp153
g64
g65
sg20
F3.7010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F1.52
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x14\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p159
sg21
F1.6000000000000001
sg70
Vn
sa(dp160
g64
g65
sg20
F8.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F2.5000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1c\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p166
sg21
F1.8
sg70
Vn
sa(dp167
g64
g65
sg20
F2.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F1.7400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x13\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p173
sg21
F1.6000000000000001
sg70
Vn
sa(dp174
g64
g65
sg20
F3.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.93999999999999972
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x03\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V4-corn.png
p180
sg21
F1.3
sg70
Vn
sa(dp181
g64
g65
sg20
F3.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.7400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x07\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p187
sg21
F1.5
sg70
Vn
sa(dp188
g64
g65
sg20
F3.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.69999999999999885
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x16\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p194
sg21
F1.8999999999999999
sg70
Vn
sa(dp195
g64
g65
sg20
F2.5680000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F1.7400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x1e\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p201
sg21
F1.6000000000000001
sg70
Vn
sa(dp202
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.7200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x04\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p208
sg21
F1.3999999999999999
sg70
Vn
sa(dp209
g64
g65
sg20
F3.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.8600000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x06\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V7-olives.png
p215
sg21
F1.1000000000000001
sg70
Vn
sa(dp216
g64
g65
sg20
F5.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F1.1599999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x0f\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p222
sg21
F2
sg70
Vn
sa(dp223
g64
g65
sg20
F2.7669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F1.8600000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x10\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V22-daim.png
p229
sg21
F1.5
sg70
Vn
sa(dp230
g64
g65
sg20
F2.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F1.9400000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S"'\x00\x00\x00"
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V51-mars.png
p236
sg21
F1.6000000000000001
sg70
Vn
sa(dp237
g64
g65
sg20
F4.9009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x01\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p243
sg21
F1.1000000000000001
sg70
Vn
sa(dp244
g64
g65
sg20
F4.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F1.9800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x1b\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p250
sg21
F1.3999999999999999
sg70
Vn
sa(dp251
g64
g65
sg20
F5.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F2.3200000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x00\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p257
sg21
F1.6000000000000001
sg70
Vn
sa(dp258
g64
g65
sg20
F3.2669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F1.5000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\n\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p264
sg21
F1.2
sg70
Vn
sa(dp265
g64
g65
sg20
F4.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F1.0599999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x1a\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V35-raisins.png
p271
sg21
F1.5
sg70
Vn
sa(dp272
g64
g65
sg20
F5.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F1.8399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\r\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p278
sg21
F1.8999999999999999
sg70
Vn
sa(dp279
g64
g65
sg20
F4.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F2.600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'#\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p285
sg21
F1.3
sg70
Vn
sa(dp286
g64
g65
sg20
F2.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.93999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x02\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p292
sg21
F1.7
sg70
Vn
sa(dp293
g64
g65
sg20
F5.1340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F1.8800000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x05\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p299
sg21
F1.6000000000000001
sg70
Vn
sa(dp300
g64
g65
sg20
F3.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F2.2000000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'!\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V44-crunch.png
p306
sg21
F1.2
sg70
Vn
sa(dp307
g64
g65
sg20
F5.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F2.0800000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'%\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p313
sg21
F1.8999999999999999
sg70
Vn
sa(dp314
g64
g65
sg20
F5.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F2.1000000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x1f\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p320
sg21
F1.5
sg70
Vn
sa(dp321
g64
g65
sg20
F4.4180000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.87999999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'&\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V50-polo.png
p327
sg21
F1
sg70
Vn
sa(dp328
g64
g65
sg20
F5.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.71999999999999953
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x1d\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V40-sardines.png
p334
sg21
F1.3
sg70
Vn
sa(dp335
g64
g65
sg20
F10.167
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F2.0200000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x12\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p341
sg21
F1
sg70
Vn
sa(dp342
g64
g65
sg20
F4.0010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F2.5600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x0c\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V18-mms.png
p348
sg21
F1.8
sg70
Vn
sa(dp349
g64
g65
sg20
F2.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F2.0400000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x0b\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p355
sg21
F1.5
sg70
Vn
sa(dp356
g64
g65
sg20
F1.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F1.8200000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\t\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p362
sg21
F1.7
sg70
Vn
sa(dp363
g64
g65
sg20
F2.2170000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F2.1200000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x17\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p369
sg21
F1.8999999999999999
sg70
Vn
sa(dp370
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F1.2799999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x18\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p376
sg21
F1.8999999999999999
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F2.1168913440383221
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p381
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F1.683426998005416
sg27
F1.901
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'22-daim.png'
p390
sg26
F1.9999999999999991
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F6.500067853668952
sg27
F3.5670000000000002
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'50-polo.png'
p399
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.1167125866845709
sg27
F1.8009999999999999
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'5-pineapple.png'
p408
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.2500838192381707
sg27
F2.101
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p417
sg26
F4.6000000000000005
sg28
F4
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F2.3664215001476805
sg27
F2.617
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'51-mars.png'
p426
sg26
F5.1000000000000014
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F1.2500650026745461
sg27
F1.784
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p435
sg26
F2.2999999999999994
sg28
F3
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F5.700119285609162
sg27
F2.5670000000000002
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p444
sg26
F1.4999999999999996
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F8.5167008405874185
sg27
F2.8010000000000002
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p453
sg26
F4.0000000000000009
sg28
F3
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F3.2500299354423987
sg27
F2.351
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p462
sg26
F3.5999999999999996
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F3.0168459562064527
sg27
F5.3010000000000002
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p471
sg26
F4.3000000000000007
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F2.9334911453815948
sg27
F1.6339999999999999
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p480
sg26
F5.2000000000000002
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.5334361782074666
sg27
F1.8839999999999999
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'7-olives.png'
p489
sg26
F2.7999999999999994
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F4.7168050159257291
sg27
F1.9510000000000001
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p498
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.0667968050615855
sg27
F1.2509999999999999
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'40-sardines.png'
p507
sg26
F5.3999999999999995
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.3001846304023275
sg27
F2.0009999999999999
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p516
sg26
F5.4999999999999991
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.2335260985737477
sg27
F1.3839999999999999
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p525
sg26
F2.9999999999999996
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F3.6667760498216921
sg27
F2.867
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p534
sg26
F1.3999999999999995
sg28
F3
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F4.7166921165444364
sg27
F3.7010000000000001
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'35-raisins.png'
p543
sg26
F5.2000000000000002
sg28
F4
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.1833830926907467
sg27
F1.5840000000000001
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p552
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'right'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.2000733845979994
sg27
F0.98399999999999999
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p561
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F0.95021621942169077
sg27
F0.98399999999999999
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p570
sg26
F1.3999999999999986
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F6.383333599425896
sg27
F2.5840000000000001
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'49-yorkie.png'
p579
sg26
F5.5
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F0.98345339821435118
sg27
F1.651
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p588
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.1172223444982592
sg27
F1.0669999999999999
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'46-pistachios.png'
p597
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.083379899576812
sg27
F0.98399999999999999
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p606
sg26
F3.3999999999999995
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.9499362517635745
sg27
F1.5840000000000001
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p615
sg26
F4.0999999999999996
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.166718459733147
sg27
F2.3010000000000002
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'18-mms.png'
p624
sg26
F2.4999999999999996
sg28
F3
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F2.2500895212265277
sg27
F3.7010000000000001
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'31-hobnobs.png'
p633
sg26
F2.0999999999999983
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F4.1334767193488915
sg27
F2.0169999999999999
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'29-beans.png'
p642
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F0.96675997021293369
sg27
F1.351
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'38-maltesers.png'
p651
sg26
F4
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F2.2998821398878135
sg27
F2.2839999999999998
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'4-corn.png'
p660
sg26
F5.3000000000000007
sg28
F3
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.0335208527440045
sg27
F1.867
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'44-crunch.png'
p669
sg26
F1.9999999999999987
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.6335160630733299
sg27
F1.367
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p678
sg26
F2.3999999999999995
sg28
F3
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.2168660272072884
sg27
F1.0509999999999999
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p687
sg26
F3.0999999999999992
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.2500507477016072
sg27
F2.0510000000000002
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'48-twix.png'
p696
sg26
F4.2000000000000011
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.0000327864368046
sg27
F1.667
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'25-kitkat.png'
p705
sg26
F2.1999999999999984
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F3.6667233064235916
sg27
F1.284
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p714
sg26
F2.2999999999999989
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.5668692203216779
sg27
F2.1680000000000001
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p723
sg26
F2.5999999999999996
sg28
F3
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F2.3167677249180088
sg27
F1.8009999999999999
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p732
sg26
F3
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F2.816835578586506
sg27
F3.5840000000000001
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F204.09627380722941
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F11.966688980449817
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'12-topic.png'
p744
sg83
S'39-mackerel.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'39-mackerel.png'
p749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x0e\x0e\x1d\x14\n\nP'
tRp754
sa(dp755
g64
g65
sg82
S'11-snickers.png'
p756
sg83
S'11-snickers.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'54-frubes_yogurt.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1d\x1b\nXp'
tRp765
sa(dp766
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p767
sg83
S'9-yu_mango_pieces.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'9-yu_mango_pieces.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1d#\x01W\xc0'
tRp776
sa(dp777
g64
g65
sg82
S'52-aero_mousse.png'
p778
sg83
S'14-discos_salt_vinegar.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'14-discos_salt_vinegar.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1d+\x04x\x88'
tRp787
sa(dp788
g64
g65
sg82
S'53-cheestrings.png'
p789
sg83
S'47-picnic.png'
p790
sg56
g57
sS'practice_loop.thisN'
p791
I4
sS'practice_loop.thisTrialN'
p792
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p793
I0
sg84
S'47-picnic.png'
p794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p795
sS'practice_loop.thisIndex'
p796
g60
(g99
S'\x04\x00\x00\x00'
tRp797
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1d1\r\xda\xe0'
tRp798
sa(dp799
g64
g65
sg82
S'15-walnut_whip.png'
p800
sg83
S'15-walnut_whip.png'
p801
sg56
g57
sS'practice_loop.thisN'
p802
I5
sS'practice_loop.thisTrialN'
p803
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p804
I0
sg84
S'28-maple_pecan.png'
p805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p806
sS'practice_loop.thisIndex'
p807
g60
(g99
S'\x05\x00\x00\x00'
tRp808
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1d8\x03\xadh'
tRp809
sa(dp810
g64
g65
sg82
S'32-hovis_crackers.png'
p811
sg83
S'32-hovis_crackers.png'
p812
sg56
g57
sS'practice_loop.thisN'
p813
I6
sS'practice_loop.thisTrialN'
p814
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p815
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p816
sg33
g811
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p817
sS'practice_loop.thisIndex'
p818
g60
(g99
S'\x06\x00\x00\x00'
tRp819
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e\x02\x0c\x92\xc0'
tRp820
sa(dp821
g64
g65
sg82
g744
sg83
S'12-topic.png'
p822
sg56
g57
sS'practice_loop.thisN'
p823
I7
sS'practice_loop.thisTrialN'
p824
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p825
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e\t\x04\x12\xf8'
tRp829
sa(dp830
g64
g65
sg82
g811
sg83
S'24-food_doctor_apple_walnut_bar.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g816
sg33
g811
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e\x0f\tf@'
tRp838
sa(dp839
g64
g65
sg82
g767
sg83
S'37-nakd_cashew_cookie.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e\x16\x01$\xf8'
tRp847
sa(dp848
g64
g65
sg82
g778
sg83
S'52-aero_mousse.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e\x1d\x05\xf7X'
tRp856
sa(dp857
g64
g65
sg82
g800
sg83
S'28-maple_pecan.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e$\x03k\x00'
tRp865
sa(dp866
g64
g65
sg82
g789
sg83
S'53-cheestrings.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e+\x00\xa0('
tRp874
sa(dp875
g64
g65
sg82
g756
sg83
S'54-frubes_yogurt.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x0e\x0e\x1e1\n{\x98'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F89.281726151716157
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'50-polo.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'48-twix.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'48-twix.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'50-polo.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.9665276141622599
sg34
g753
(S'\x07\xdf\x07\x0e\x0e"\'\x03r\xd0'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'46-pistachios.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'46-pistachios.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'29-beans.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'29-beans.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.7166590450078729
sg34
g753
(S'\x07\xdf\x07\x0e\x0e"/\x03~\x88'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'13-mccoys_steak_crisps.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'3-ellas_strawberries_apples.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'3-ellas_strawberries_apples.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'13-mccoys_steak_crisps.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.2333410690316668
sg34
g753
(S'\x07\xdf\x07\x0e\x0e"5\x0e\xc5@'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'2-steamed_puddings.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'2-steamed_puddings.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'20-fruit_pastilles.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'20-fruit_pastilles.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.6166478691097836
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#\x00\x03\xa5\x98'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'38-maltesers.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'38-maltesers.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'6-sour_patch_kids.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'6-sour_patch_kids.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.2501037761994667
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#\x06\r\x81\x08'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'3-ellas_strawberries_apples.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p988
g60
(g99
S'\x05\x00\x00\x00'
tRp989
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p990
I0
sg904
S'13-mccoys_steak_crisps.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p993
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p994
Nsg70
Vn
sS'block_loop.thisTrialN'
p995
I0
sg39
F1.4833148398820413
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#\r\x02\x9b\xf8'
tRp996
sa(dp997
S'trial_loop.thisTrialN'
p998
I6
sg895
S'10-bounty_redo.png'
p999
sS'block_loop.thisIndex'
p1000
g889
sg38
S'left'
p1001
sg59
g63
sS'trial_loop.thisN'
p1002
I6
sg33
S'4-corn.png'
p1003
sg64
g65
sS'trial_loop.thisIndex'
p1004
g60
(g99
S'\x06\x00\x00\x00'
tRp1005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1006
I0
sg904
S'4-corn.png'
p1007
sS'block_loop.thisRepN'
p1008
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1009
I0
sg909
S'10-bounty_redo.png'
p1010
sg55
g11
sS'block_loop.thisTrial'
p1011
Nsg70
Vn
sS'block_loop.thisTrialN'
p1012
I0
sg39
F1.2333607408936587
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#\x13\n\x8f '
tRp1013
sa(dp1014
S'trial_loop.thisTrialN'
p1015
I7
sg895
g896
sS'block_loop.thisIndex'
p1016
g889
sg38
S'right'
p1017
sg59
g63
sS'trial_loop.thisN'
p1018
I7
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1019
g60
(g99
S'\x07\x00\x00\x00'
tRp1020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1021
I0
sg904
g905
sS'block_loop.thisRepN'
p1022
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1023
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1024
Nsg70
Vn
sS'block_loop.thisTrialN'
p1025
I0
sg39
F2.2499002151930654
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#\x19\x0ew '
tRp1026
sa(dp1027
S'trial_loop.thisTrialN'
p1028
I8
sg895
S'26-walkers_smoky_bacon.png'
p1029
sS'block_loop.thisIndex'
p1030
g889
sg38
S'right'
p1031
sg59
g63
sS'trial_loop.thisN'
p1032
I8
sg33
S'44-crunch.png'
p1033
sg64
g65
sS'trial_loop.thisIndex'
p1034
g60
(g99
S'\x08\x00\x00\x00'
tRp1035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1036
I0
sg904
S'44-crunch.png'
p1037
sS'block_loop.thisRepN'
p1038
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1039
I0
sg909
S'26-walkers_smoky_bacon.png'
p1040
sg55
g11
sS'block_loop.thisTrial'
p1041
Nsg70
Vn
sS'block_loop.thisTrialN'
p1042
I0
sg39
F1.3000038773525375
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#!\x03\x8e('
tRp1043
sa(dp1044
S'trial_loop.thisTrialN'
p1045
I9
sg895
S'51-mars.png'
p1046
sS'block_loop.thisIndex'
p1047
g889
sg38
S'left'
p1048
sg59
g63
sS'trial_loop.thisN'
p1049
I9
sg33
S'51-mars.png'
p1050
sg64
g65
sS'trial_loop.thisIndex'
p1051
g60
(g99
S'\t\x00\x00\x00'
tRp1052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1053
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1054
sS'block_loop.thisRepN'
p1055
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1056
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1057
sg55
g11
sS'block_loop.thisTrial'
p1058
Nsg70
Vn
sS'block_loop.thisTrialN'
p1059
I0
sg39
F1.7666423952005061
sg34
g753
(S"\x07\xdf\x07\x0e\x0e#'\x08\xa6\xd8"
tRp1060
sa(dp1061
S'trial_loop.thisTrialN'
p1062
I10
sg895
S'8-liquorice_catherine_wheels.png'
p1063
sS'block_loop.thisIndex'
p1064
g889
sg38
S'left'
p1065
sg59
g63
sS'trial_loop.thisN'
p1066
I10
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1067
sg64
g65
sS'trial_loop.thisIndex'
p1068
g60
(g99
S'\n\x00\x00\x00'
tRp1069
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1070
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1071
sS'block_loop.thisRepN'
p1072
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1073
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1074
sg55
g11
sS'block_loop.thisTrial'
p1075
Nsg70
Vn
sS'block_loop.thisTrialN'
p1076
I0
sg39
F1.5000815384423731
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#.\x05\x9d\x80'
tRp1077
sa(dp1078
S'trial_loop.thisTrialN'
p1079
I11
sg895
S'40-sardines.png'
p1080
sS'block_loop.thisIndex'
p1081
g889
sg38
S'right'
p1082
sg59
g63
sS'trial_loop.thisN'
p1083
I11
sg33
S'5-pineapple.png'
p1084
sg64
g65
sS'trial_loop.thisIndex'
p1085
g60
(g99
S'\x0b\x00\x00\x00'
tRp1086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1087
I0
sg904
S'5-pineapple.png'
p1088
sS'block_loop.thisRepN'
p1089
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1090
I0
sg909
S'40-sardines.png'
p1091
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vn
sS'block_loop.thisTrialN'
p1093
I0
sg39
F1.5832803998687268
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#4\r\xcf('
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'35-raisins.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'left'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
S'35-raisins.png'
p1101
sg64
g65
sS'trial_loop.thisIndex'
p1102
g60
(g99
S'\x0c\x00\x00\x00'
tRp1103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1104
I0
sg904
S'49-yorkie.png'
p1105
sS'block_loop.thisRepN'
p1106
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1107
I0
sg909
S'49-yorkie.png'
p1108
sg55
g11
sS'block_loop.thisTrial'
p1109
Nsg70
Vn
sS'block_loop.thisTrialN'
p1110
I0
sg39
F1.6000151672906213
sg34
g753
(S'\x07\xdf\x07\x0e\x0e#;\x07\xebX'
tRp1111
sa(dp1112
S'trial_loop.thisTrialN'
p1113
I13
sg895
S'29-beans.png'
p1114
sS'block_loop.thisIndex'
p1115
g889
sg38
S'right'
p1116
sg59
g63
sS'trial_loop.thisN'
p1117
I13
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1118
g60
(g99
S'\r\x00\x00\x00'
tRp1119
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1120
I0
sg904
S'46-pistachios.png'
p1121
sS'block_loop.thisRepN'
p1122
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1123
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1124
Nsg70
Vn
sS'block_loop.thisTrialN'
p1125
I0
sg39
F1.3333243051843056
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$\x06\x02F\x08'
tRp1126
sa(dp1127
S'trial_loop.thisTrialN'
p1128
I14
sg895
S'44-crunch.png'
p1129
sS'block_loop.thisIndex'
p1130
g889
sg38
S'right'
p1131
sg59
g63
sS'trial_loop.thisN'
p1132
I14
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p1133
g60
(g99
S'\x0e\x00\x00\x00'
tRp1134
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1135
I0
sg904
S'26-walkers_smoky_bacon.png'
p1136
sS'block_loop.thisRepN'
p1137
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1138
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1139
Nsg70
Vn
sS'block_loop.thisTrialN'
p1140
I0
sg39
F2.3166417109619033
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$\x0c\x07\xd7\xd0'
tRp1141
sa(dp1142
S'trial_loop.thisTrialN'
p1143
I15
sg895
g1080
sS'block_loop.thisIndex'
p1144
g889
sg38
S'right'
p1145
sg59
g63
sS'trial_loop.thisN'
p1146
I15
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p1147
g60
(g99
S'\x0f\x00\x00\x00'
tRp1148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1149
I0
sg904
g1088
sS'block_loop.thisRepN'
p1150
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1151
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1152
Nsg70
Vn
sS'block_loop.thisTrialN'
p1153
I0
sg39
F1.1166561369936971
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$\x13\ra\xc8'
tRp1154
sa(dp1155
S'trial_loop.thisTrialN'
p1156
I16
sg895
S'16-skips_prawn.png'
p1157
sS'block_loop.thisIndex'
p1158
g889
sg38
S'right'
p1159
sg59
g63
sS'trial_loop.thisN'
p1160
I16
sg33
S'16-skips_prawn.png'
p1161
sg64
g65
sS'trial_loop.thisIndex'
p1162
g60
(g99
S'\x10\x00\x00\x00'
tRp1163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1164
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1165
sS'block_loop.thisRepN'
p1166
I0
sg907
S'42-mrkipling_lemon_slices.png'
p1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1168
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vn
sS'block_loop.thisTrialN'
p1170
I0
sg39
F1.6332204149448444
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$\x1a\x00Y\xd8'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
S'7-olives.png'
p1174
sS'block_loop.thisIndex'
p1175
g889
sg38
S'right'
p1176
sg59
g63
sS'trial_loop.thisN'
p1177
I17
sg33
S'22-daim.png'
p1178
sg64
g65
sS'trial_loop.thisIndex'
p1179
g60
(g99
S'\x11\x00\x00\x00'
tRp1180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1181
I0
sg904
S'22-daim.png'
p1182
sS'block_loop.thisRepN'
p1183
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1184
I0
sg909
S'7-olives.png'
p1185
sg55
g11
sS'block_loop.thisTrial'
p1186
Nsg70
Vn
sS'block_loop.thisTrialN'
p1187
I0
sg39
F1.6166877830323756
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$ \ns\xc8'
tRp1188
sa(dp1189
S'trial_loop.thisTrialN'
p1190
I18
sg895
S'20-fruit_pastilles.png'
p1191
sS'block_loop.thisIndex'
p1192
g889
sg38
S'right'
p1193
sg59
g63
sS'trial_loop.thisN'
p1194
I18
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1195
g60
(g99
S'\x12\x00\x00\x00'
tRp1196
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1197
I0
sg904
S'2-steamed_puddings.png'
p1198
sS'block_loop.thisRepN'
p1199
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1200
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1201
Nsg70
Vn
sS'block_loop.thisTrialN'
p1202
I0
sg39
F1.3999891092012149
sg34
g753
(S"\x07\xdf\x07\x0e\x0e$'\x05\t\x10"
tRp1203
sa(dp1204
S'trial_loop.thisTrialN'
p1205
I19
sg895
S'33-ambrosia_rice.png'
p1206
sS'block_loop.thisIndex'
p1207
g889
sg38
S'left'
p1208
sg59
g63
sS'trial_loop.thisN'
p1209
I19
sg33
S'33-ambrosia_rice.png'
p1210
sg64
g65
sS'trial_loop.thisIndex'
p1211
g60
(g99
S'\x13\x00\x00\x00'
tRp1212
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1213
I0
sg904
S'23-crunchie_redo.png'
p1214
sS'block_loop.thisRepN'
p1215
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1216
I0
sg909
S'23-crunchie_redo.png'
p1217
sg55
g11
sS'block_loop.thisTrial'
p1218
Nsg70
Vn
sS'block_loop.thisTrialN'
p1219
I0
sg39
F1.6500102065601823
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$-\x0b\xcb\x88'
tRp1220
sa(dp1221
S'trial_loop.thisTrialN'
p1222
I20
sg895
S'36-fig_rolls.png'
p1223
sS'block_loop.thisIndex'
p1224
g889
sg38
S'left'
p1225
sg59
g63
sS'trial_loop.thisN'
p1226
I20
sg33
S'36-fig_rolls.png'
p1227
sg64
g65
sS'trial_loop.thisIndex'
p1228
g60
(g99
S'\x14\x00\x00\x00'
tRp1229
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1230
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1231
sS'block_loop.thisRepN'
p1232
I0
sg907
S'34-hula_hoops_bbq_beef_redo.png'
p1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1234
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p1235
Nsg70
Vn
sS'block_loop.thisTrialN'
p1236
I0
sg39
F1.6999844335705347
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$4\x06\xdd\xd0'
tRp1237
sa(dp1238
S'trial_loop.thisTrialN'
p1239
I21
sg895
g967
sS'block_loop.thisIndex'
p1240
g889
sg38
S'left'
p1241
sg59
g63
sS'trial_loop.thisN'
p1242
I21
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1243
g60
(g99
S'\x15\x00\x00\x00'
tRp1244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1245
I0
sg904
g975
sS'block_loop.thisRepN'
p1246
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1247
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1248
Nsg70
Vn
sS'block_loop.thisTrialN'
p1249
I0
sg39
F1.6830421137501617
sg34
g753
(S'\x07\xdf\x07\x0e\x0e$;\x02\xe2H'
tRp1250
sa(dp1251
S'trial_loop.thisTrialN'
p1252
I22
sg895
S'4-corn.png'
p1253
sS'block_loop.thisIndex'
p1254
g889
sg38
S'right'
p1255
sg59
g63
sS'trial_loop.thisN'
p1256
I22
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p1257
g60
(g99
S'\x16\x00\x00\x00'
tRp1258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1259
I0
sg904
S'10-bounty_redo.png'
p1260
sS'block_loop.thisRepN'
p1261
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1262
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p1263
Nsg70
Vn
sS'block_loop.thisTrialN'
p1264
I0
sg39
F1.3332225246808775
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%\x05\r\xaf\xe8'
tRp1265
sa(dp1266
S'trial_loop.thisTrialN'
p1267
I23
sg895
S'18-mms.png'
p1268
sS'block_loop.thisIndex'
p1269
g889
sg38
S'left'
p1270
sg59
g63
sS'trial_loop.thisN'
p1271
I23
sg33
S'18-mms.png'
p1272
sg64
g65
sS'trial_loop.thisIndex'
p1273
g60
(g99
S'\x17\x00\x00\x00'
tRp1274
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1275
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1276
sS'block_loop.thisRepN'
p1277
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1278
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1279
sg55
g11
sS'block_loop.thisTrial'
p1280
Nsg70
Vn
sS'block_loop.thisTrialN'
p1281
I0
sg39
F1.433275325098748
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%\x0c\x04=\xf0'
tRp1282
sa(dp1283
S'trial_loop.thisTrialN'
p1284
I24
sg895
S'30-spaghetti_hoops.png'
p1285
sS'block_loop.thisIndex'
p1286
g889
sg38
S'right'
p1287
sg59
g63
sS'trial_loop.thisN'
p1288
I24
sg33
S'19-caramello_redo.png'
p1289
sg64
g65
sS'trial_loop.thisIndex'
p1290
g60
(g99
S'\x18\x00\x00\x00'
tRp1291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1292
I0
sg904
S'19-caramello_redo.png'
p1293
sS'block_loop.thisRepN'
p1294
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1295
I0
sg909
S'30-spaghetti_hoops.png'
p1296
sg55
g11
sS'block_loop.thisTrial'
p1297
Nsg70
Vn
sS'block_loop.thisTrialN'
p1298
I0
sg39
F1.5000091231822807
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%\x12\x0b;\x00'
tRp1299
sa(dp1300
S'trial_loop.thisTrialN'
p1301
I25
sg895
g1253
sS'block_loop.thisIndex'
p1302
g889
sg38
S'left'
p1303
sg59
g63
sS'trial_loop.thisN'
p1304
I25
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p1305
g60
(g99
S'\x19\x00\x00\x00'
tRp1306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1307
I0
sg904
g1260
sS'block_loop.thisRepN'
p1308
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1309
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p1310
Nsg70
Vn
sS'block_loop.thisTrialN'
p1311
I0
sg39
F1.2833500781744078
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%\x19\x04&\x80'
tRp1312
sa(dp1313
S'trial_loop.thisTrialN'
p1314
I26
sg895
g1063
sS'block_loop.thisIndex'
p1315
g889
sg38
S'right'
p1316
sg59
g63
sS'trial_loop.thisN'
p1317
I26
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1318
g60
(g99
S'\x1a\x00\x00\x00'
tRp1319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1320
I0
sg904
g1071
sS'block_loop.thisRepN'
p1321
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1322
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p1323
Nsg70
Vn
sS'block_loop.thisTrialN'
p1324
I0
sg39
F1.5000062721878749
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%\x1f\t\x00\xb0'
tRp1325
sa(dp1326
S'trial_loop.thisTrialN'
p1327
I27
sg895
S'5-pineapple.png'
p1328
sS'block_loop.thisIndex'
p1329
g889
sg38
S'left'
p1330
sg59
g63
sS'trial_loop.thisN'
p1331
I27
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p1332
g60
(g99
S'\x1b\x00\x00\x00'
tRp1333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1334
I0
sg904
S'40-sardines.png'
p1335
sS'block_loop.thisRepN'
p1336
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1337
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1338
Nsg70
Vn
sS'block_loop.thisTrialN'
p1339
I0
sg39
F1.1333726580505754
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%&\x01\xf0\x18'
tRp1340
sa(dp1341
S'trial_loop.thisTrialN'
p1342
I28
sg895
g1029
sS'block_loop.thisIndex'
p1343
g889
sg38
S'right'
p1344
sg59
g63
sS'trial_loop.thisN'
p1345
I28
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p1346
g60
(g99
S'\x1c\x00\x00\x00'
tRp1347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1348
I0
sg904
g1037
sS'block_loop.thisRepN'
p1349
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1350
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1351
Nsg70
Vn
sS'block_loop.thisTrialN'
p1352
I0
sg39
F1.1500082108641436
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%,\x04h\xe8'
tRp1353
sa(dp1354
S'trial_loop.thisTrialN'
p1355
I29
sg895
S'41-peanuts_redo.png'
p1356
sS'block_loop.thisIndex'
p1357
g889
sg38
S'right'
p1358
sg59
g63
sS'trial_loop.thisN'
p1359
I29
sg33
S'41-peanuts_redo.png'
p1360
sg64
g65
sS'trial_loop.thisIndex'
p1361
g60
(g99
S'\x1d\x00\x00\x00'
tRp1362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1363
I0
sg904
S'45-chewy_nougat_redo.png'
p1364
sS'block_loop.thisRepN'
p1365
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1366
I0
sg909
S'45-chewy_nougat_redo.png'
p1367
sg55
g11
sS'block_loop.thisTrial'
p1368
Nsg70
Vn
sS'block_loop.thisTrialN'
p1369
I0
sg39
F1.1833742546077701
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%2\x07\x1cP'
tRp1370
sa(dp1371
S'trial_loop.thisTrialN'
p1372
I30
sg895
g1191
sS'block_loop.thisIndex'
p1373
g889
sg38
S'right'
p1374
sg59
g63
sS'trial_loop.thisN'
p1375
I30
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1376
g60
(g99
S'\x1e\x00\x00\x00'
tRp1377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1378
I0
sg904
g1198
sS'block_loop.thisRepN'
p1379
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1380
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1381
Nsg70
Vn
sS'block_loop.thisTrialN'
p1382
I0
sg39
F1.5499964647665365
sg34
g753
(S'\x07\xdf\x07\x0e\x0e%8\n\x8b8'
tRp1383
sa(dp1384
S'trial_loop.thisTrialN'
p1385
I31
sg895
S'25-kitkat.png'
p1386
sS'block_loop.thisIndex'
p1387
g889
sg38
S'left'
p1388
sg59
g63
sS'trial_loop.thisN'
p1389
I31
sg33
S'25-kitkat.png'
p1390
sg64
g65
sS'trial_loop.thisIndex'
p1391
g60
(g99
S'\x1f\x00\x00\x00'
tRp1392
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1393
I0
sg904
S'31-hobnobs.png'
p1394
sS'block_loop.thisRepN'
p1395
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1396
I0
sg909
S'31-hobnobs.png'
p1397
sg55
g11
sS'block_loop.thisTrial'
p1398
Nsg70
Vn
sS'block_loop.thisTrialN'
p1399
I0
sg39
F2.2999787886010381
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&\x03\x04.P'
tRp1400
sa(dp1401
S'trial_loop.thisTrialN'
p1402
I32
sg895
g1063
sS'block_loop.thisIndex'
p1403
g889
sg38
S'right'
p1404
sg59
g63
sS'trial_loop.thisN'
p1405
I32
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1406
g60
(g99
S' \x00\x00\x00'
tRp1407
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1408
I0
sg904
g1071
sS'block_loop.thisRepN'
p1409
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1410
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p1411
Nsg70
Vn
sS'block_loop.thisTrialN'
p1412
I0
sg39
F1.4164983629589187
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&\n\t?0'
tRp1413
sa(dp1414
S'trial_loop.thisTrialN'
p1415
I33
sg895
g916
sS'block_loop.thisIndex'
p1416
g889
sg38
S'left'
p1417
sg59
g63
sS'trial_loop.thisN'
p1418
I33
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1419
g60
(g99
S'!\x00\x00\x00'
tRp1420
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1421
I0
sg904
g924
sS'block_loop.thisRepN'
p1422
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1423
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1424
Nsg70
Vn
sS'block_loop.thisTrialN'
p1425
I0
sg39
F1.9499185755976214
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&\x11\x00\xbfh'
tRp1426
sa(dp1427
S'trial_loop.thisTrialN'
p1428
I34
sg895
g1191
sS'block_loop.thisIndex'
p1429
g889
sg38
S'right'
p1430
sg59
g63
sS'trial_loop.thisN'
p1431
I34
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1432
g60
(g99
S'"\x00\x00\x00'
tRp1433
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1434
I0
sg904
g1198
sS'block_loop.thisRepN'
p1435
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1436
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1437
Nsg70
Vn
sS'block_loop.thisTrialN'
p1438
I0
sg39
F1.1503355050308528
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&\x18\x00\x94p'
tRp1439
sa(dp1440
S'trial_loop.thisTrialN'
p1441
I35
sg895
g1285
sS'block_loop.thisIndex'
p1442
g889
sg38
S'right'
p1443
sg59
g63
sS'trial_loop.thisN'
p1444
I35
sg33
g1289
sg64
g65
sS'trial_loop.thisIndex'
p1445
g60
(g99
S'#\x00\x00\x00'
tRp1446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1447
I0
sg904
g1293
sS'block_loop.thisRepN'
p1448
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1449
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p1450
Nsg70
Vn
sS'block_loop.thisTrialN'
p1451
I0
sg39
F1.6498876137975458
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&\x1e\x03G\xd8'
tRp1452
sa(dp1453
S'trial_loop.thisTrialN'
p1454
I36
sg895
S'31-hobnobs.png'
p1455
sS'block_loop.thisIndex'
p1456
g889
sg38
S'left'
p1457
sg59
g63
sS'trial_loop.thisN'
p1458
I36
sg33
g1390
sg64
g65
sS'trial_loop.thisIndex'
p1459
g60
(g99
S'$\x00\x00\x00'
tRp1460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1461
I0
sg904
S'25-kitkat.png'
p1462
sS'block_loop.thisRepN'
p1463
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1464
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p1465
Nsg70
Vn
sS'block_loop.thisTrialN'
p1466
I0
sg39
F3.59995330071024
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&$\r\xda\xe0'
tRp1467
sa(dp1468
S'trial_loop.thisTrialN'
p1469
I37
sg895
S'22-daim.png'
p1470
sS'block_loop.thisIndex'
p1471
g889
sg38
S'right'
p1472
sg59
g63
sS'trial_loop.thisN'
p1473
I37
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p1474
g60
(g99
S'%\x00\x00\x00'
tRp1475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1476
I0
sg904
S'7-olives.png'
p1477
sS'block_loop.thisRepN'
p1478
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1479
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p1480
Nsg70
Vn
sS'block_loop.thisTrialN'
p1481
I0
sg39
F3.1332879835144922
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&-\x08)\xd8'
tRp1482
sa(dp1483
S'trial_loop.thisTrialN'
p1484
I38
sg895
g1328
sS'block_loop.thisIndex'
p1485
g889
sg38
S'left'
p1486
sg59
g63
sS'trial_loop.thisN'
p1487
I38
sg33
g1091
sg64
g65
sS'trial_loop.thisIndex'
p1488
g60
(g99
S'&\x00\x00\x00'
tRp1489
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1490
I0
sg904
g1335
sS'block_loop.thisRepN'
p1491
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1492
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1493
Nsg70
Vn
sS'block_loop.thisTrialN'
p1494
I0
sg39
F0.95001379881296089
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&5\n\xd1\x88'
tRp1495
sa(dp1496
S'trial_loop.thisTrialN'
p1497
I39
sg895
g1356
sS'block_loop.thisIndex'
p1498
g889
sg38
S'left'
p1499
sg59
g63
sS'trial_loop.thisN'
p1500
I39
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p1501
g60
(g99
S"'\x00\x00\x00"
tRp1502
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1503
I0
sg904
g1364
sS'block_loop.thisRepN'
p1504
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1505
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p1506
Nsg70
Vn
sS'block_loop.thisTrialN'
p1507
I0
sg39
F1.5666876119730659
sg34
g753
(S'\x07\xdf\x07\x0e\x0e&;\no\xe0'
tRp1508
sa(dp1509
S'trial_loop.thisTrialN'
p1510
I40
sg895
g1157
sS'block_loop.thisIndex'
p1511
g889
sg38
S'right'
p1512
sg59
g63
sS'trial_loop.thisN'
p1513
I40
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1514
g60
(g99
S'(\x00\x00\x00'
tRp1515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1516
I0
sg904
g1165
sS'block_loop.thisRepN'
p1517
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1518
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1519
Nsg70
Vn
sS'block_loop.thisTrialN'
p1520
I0
sg39
F1.6498836224050137
sg34
g753
(S"\x07\xdf\x07\x0e\x0e'\x06\x04Qx"
tRp1521
sa(dp1522
S'trial_loop.thisTrialN'
p1523
I41
sg895
S'48-twix.png'
p1524
sS'block_loop.thisIndex'
p1525
g889
sg38
S'left'
p1526
sg59
g63
sS'trial_loop.thisN'
p1527
I41
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1528
g60
(g99
S')\x00\x00\x00'
tRp1529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1530
I0
sg904
S'50-polo.png'
p1531
sS'block_loop.thisRepN'
p1532
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1533
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1534
Nsg70
Vn
sS'block_loop.thisTrialN'
p1535
I0
sg39
F1.8333126161069231
sg34
g753
(S"\x07\xdf\x07\x0e\x0e'\x0c\x0e\xe0\x98"
tRp1536
sa(dp1537
S'trial_loop.thisTrialN'
p1538
I42
sg895
g1046
sS'block_loop.thisIndex'
p1539
g889
sg38
S'left'
p1540
sg59
g63
sS'trial_loop.thisN'
p1541
I42
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1542
g60
(g99
S'*\x00\x00\x00'
tRp1543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1544
I0
sg904
g1054
sS'block_loop.thisRepN'
p1545
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1546
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1547
Nsg70
Vn
sS'block_loop.thisTrialN'
p1548
I0
sg39
F2.0830948001284924
sg34
g753
(S"\x07\xdf\x07\x0e\x0e'\x13\x0c\xcdX"
tRp1549
sa(dp1550
S'trial_loop.thisTrialN'
p1551
I43
sg895
S'1-treacle_cookies.png'
p1552
sS'block_loop.thisIndex'
p1553
g889
sg38
S'left'
p1554
sg59
g63
sS'trial_loop.thisN'
p1555
I43
sg33
S'21-nakd_banana_crunch.png'
p1556
sg64
g65
sS'trial_loop.thisIndex'
p1557
g60
(g99
S'+\x00\x00\x00'
tRp1558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1559
I0
sg904
S'21-nakd_banana_crunch.png'
p1560
sS'block_loop.thisRepN'
p1561
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1562
I0
sg909
S'1-treacle_cookies.png'
p1563
sg55
g11
sS'block_loop.thisTrial'
p1564
Nsg70
Vn
sS'block_loop.thisTrialN'
p1565
I0
sg39
F1.4166736991196558
sg34
g753
(S"\x07\xdf\x07\x0e\x0e'\x1a\x0e\x8a\xa8"
tRp1566
sa(dp1567
S'trial_loop.thisTrialN'
p1568
I44
sg895
g1470
sS'block_loop.thisIndex'
p1569
g889
sg38
S'left'
p1570
sg59
g63
sS'trial_loop.thisN'
p1571
I44
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p1572
g60
(g99
S',\x00\x00\x00'
tRp1573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1574
I0
sg904
g1477
sS'block_loop.thisRepN'
p1575
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1576
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p1577
Nsg70
Vn
sS'block_loop.thisTrialN'
p1578
I0
sg39
F1.4500066713271735
sg34
g753
(S"\x07\xdf\x07\x0e\x0e'!\x06Ex"
tRp1579
sa(dp1580
S'trial_loop.thisTrialN'
p1581
I45
sg895
g967
sS'block_loop.thisIndex'
p1582
g889
sg38
S'left'
p1583
sg59
g63
sS'trial_loop.thisN'
p1584
I45
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1585
g60
(g99
S'-\x00\x00\x00'
tRp1586
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1587
I0
sg904
g975
sS'block_loop.thisRepN'
p1588
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1589
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1590
Nsg70
Vn
sS'block_loop.thisTrialN'
p1591
I0
sg39
F1.4663631117809928
sg34
g753
(S"\x07\xdf\x07\x0e\x0e''\r\x81\x08"
tRp1592
sa(dp1593
S'trial_loop.thisTrialN'
p1594
I46
sg895
S'43-mrporky_pork_crackles_redo.png'
p1595
sS'block_loop.thisIndex'
p1596
g889
sg38
S'right'
p1597
sg59
g63
sS'trial_loop.thisN'
p1598
I46
sg33
g1272
sg64
g65
sS'trial_loop.thisIndex'
p1599
g60
(g99
S'.\x00\x00\x00'
tRp1600
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1601
I0
sg904
S'18-mms.png'
p1602
sS'block_loop.thisRepN'
p1603
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1604
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p1605
Nsg70
Vn
sS'block_loop.thisTrialN'
p1606
I0
sg39
F1.2165661025878762
sg34
g753
(S"\x07\xdf\x07\x0e\x0e'.\x05\xf3p"
tRp1607
sa(dp1608
S'trial_loop.thisTrialN'
p1609
I47
sg895
g1157
sS'block_loop.thisIndex'
p1610
g889
sg38
S'left'
p1611
sg59
g63
sS'trial_loop.thisN'
p1612
I47
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p1613
g60
(g99
S'/\x00\x00\x00'
tRp1614
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1615
I0
sg904
g1165
sS'block_loop.thisRepN'
p1616
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1617
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1618
Nsg70
Vn
sS'block_loop.thisTrialN'
p1619
I0
sg39
F1.4332203009053046
sg34
g753
(S"\x07\xdf\x07\x0e\x0e'4\t\x9c\xf0"
tRp1620
sa(dp1621
S'trial_loop.thisTrialN'
p1622
I48
sg895
S'19-caramello_redo.png'
p1623
sS'block_loop.thisIndex'
p1624
g889
sg38
S'left'
p1625
sg59
g63
sS'trial_loop.thisN'
p1626
I48
sg33
g1289
sg64
g65
sS'trial_loop.thisIndex'
p1627
g60
(g99
S'0\x00\x00\x00'
tRp1628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1629
I0
sg904
S'30-spaghetti_hoops.png'
p1630
sS'block_loop.thisRepN'
p1631
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1632
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p1633
Nsg70
Vn
sS'block_loop.thisTrialN'
p1634
I0
sg39
F1.5166560799739273
sg34
g753
(S"\x07\xdf\x07\x0e\x0e';\x01\x96@"
tRp1635
sa(dp1636
S'trial_loop.thisTrialN'
p1637
I49
sg895
g950
sS'block_loop.thisIndex'
p1638
g889
sg38
S'left'
p1639
sg59
g63
sS'trial_loop.thisN'
p1640
I49
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1641
g60
(g99
S'1\x00\x00\x00'
tRp1642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1643
I0
sg904
g958
sS'block_loop.thisRepN'
p1644
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1645
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1646
Nsg70
Vn
sS'block_loop.thisTrialN'
p1647
I0
sg39
F1.1666959368762946
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(\x05\n\x02\x80'
tRp1648
sa(dp1649
S'trial_loop.thisTrialN'
p1650
I50
sg895
g1046
sS'block_loop.thisIndex'
p1651
g889
sg38
S'left'
p1652
sg59
g63
sS'trial_loop.thisN'
p1653
I50
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1654
g60
(g99
S'2\x00\x00\x00'
tRp1655
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1656
I0
sg904
g1054
sS'block_loop.thisRepN'
p1657
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1658
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1659
Nsg70
Vn
sS'block_loop.thisTrialN'
p1660
I0
sg39
F1.3499359096440458
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(\x0b\x0c\xf4h'
tRp1661
sa(dp1662
S'trial_loop.thisTrialN'
p1663
I51
sg895
g1524
sS'block_loop.thisIndex'
p1664
g889
sg38
S'left'
p1665
sg59
g63
sS'trial_loop.thisN'
p1666
I51
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1667
g60
(g99
S'3\x00\x00\x00'
tRp1668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1669
I0
sg904
g1531
sS'block_loop.thisRepN'
p1670
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1671
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1672
Nsg70
Vn
sS'block_loop.thisTrialN'
p1673
I0
sg39
F1.1000234351745348
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(\x12\x03\x82p'
tRp1674
sa(dp1675
S'trial_loop.thisTrialN'
p1676
I52
sg895
g950
sS'block_loop.thisIndex'
p1677
g889
sg38
S'left'
p1678
sg59
g63
sS'trial_loop.thisN'
p1679
I52
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1680
g60
(g99
S'4\x00\x00\x00'
tRp1681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1682
I0
sg904
g958
sS'block_loop.thisRepN'
p1683
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1684
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1685
Nsg70
Vn
sS'block_loop.thisTrialN'
p1686
I0
sg39
F1.0000165357682818
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(\x18\x05\xbc\xc0'
tRp1687
sa(dp1688
S'trial_loop.thisTrialN'
p1689
I53
sg895
g1157
sS'block_loop.thisIndex'
p1690
g889
sg38
S'right'
p1691
sg59
g63
sS'trial_loop.thisN'
p1692
I53
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1693
g60
(g99
S'5\x00\x00\x00'
tRp1694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1695
I0
sg904
g1165
sS'block_loop.thisRepN'
p1696
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1697
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg70
Vn
sS'block_loop.thisTrialN'
p1699
I0
sg39
F1.7329864053181154
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(\x1e\x06\x12\xb0'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I54
sg895
g1623
sS'block_loop.thisIndex'
p1703
g889
sg38
S'left'
p1704
sg59
g63
sS'trial_loop.thisN'
p1705
I54
sg33
g1289
sg64
g65
sS'trial_loop.thisIndex'
p1706
g60
(g99
S'6\x00\x00\x00'
tRp1707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1708
I0
sg904
g1630
sS'block_loop.thisRepN'
p1709
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1710
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p1711
Nsg70
Vn
sS'block_loop.thisTrialN'
p1712
I0
sg39
F1.0833479684383747
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(%\x02\x90@'
tRp1713
sa(dp1714
S'trial_loop.thisTrialN'
p1715
I55
sg895
g1097
sS'block_loop.thisIndex'
p1716
g889
sg38
S'left'
p1717
sg59
g63
sS'trial_loop.thisN'
p1718
I55
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1719
g60
(g99
S'7\x00\x00\x00'
tRp1720
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1721
I0
sg904
g1105
sS'block_loop.thisRepN'
p1722
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1723
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1724
Nsg70
Vn
sS'block_loop.thisTrialN'
p1725
I0
sg39
F3.1999872845644859
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(+\x04U`'
tRp1726
sa(dp1727
S'trial_loop.thisTrialN'
p1728
I56
sg895
g1595
sS'block_loop.thisIndex'
p1729
g889
sg38
S'right'
p1730
sg59
g63
sS'trial_loop.thisN'
p1731
I56
sg33
g1272
sg64
g65
sS'trial_loop.thisIndex'
p1732
g60
(g99
S'8\x00\x00\x00'
tRp1733
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1734
I0
sg904
g1602
sS'block_loop.thisRepN'
p1735
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1736
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p1737
Nsg70
Vn
sS'block_loop.thisTrialN'
p1738
I0
sg39
F1.4332827376842943
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(3\x07\xef@'
tRp1739
sa(dp1740
S'trial_loop.thisTrialN'
p1741
I57
sg895
g1253
sS'block_loop.thisIndex'
p1742
g889
sg38
S'left'
p1743
sg59
g63
sS'trial_loop.thisN'
p1744
I57
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p1745
g60
(g99
S'9\x00\x00\x00'
tRp1746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1747
I0
sg904
g1260
sS'block_loop.thisRepN'
p1748
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1749
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p1750
Nsg70
Vn
sS'block_loop.thisTrialN'
p1751
I0
sg39
F3.1332215553429705
sg34
g753
(S'\x07\xdf\x07\x0e\x0e(9\x0e\xf08'
tRp1752
sa(dp1753
S'trial_loop.thisTrialN'
p1754
I58
sg895
g1029
sS'block_loop.thisIndex'
p1755
g889
sg38
S'left'
p1756
sg59
g63
sS'trial_loop.thisN'
p1757
I58
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p1758
g60
(g99
S':\x00\x00\x00'
tRp1759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1760
I0
sg904
g1037
sS'block_loop.thisRepN'
p1761
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1762
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1763
Nsg70
Vn
sS'block_loop.thisTrialN'
p1764
I0
sg39
F1.9167190299317554
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)\x06\x02U\xa8'
tRp1765
sa(dp1766
S'trial_loop.thisTrialN'
p1767
I59
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1768
sS'block_loop.thisIndex'
p1769
g889
sg38
S'right'
p1770
sg59
g63
sS'trial_loop.thisN'
p1771
I59
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p1772
g60
(g99
S';\x00\x00\x00'
tRp1773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1774
I0
sg904
S'36-fig_rolls.png'
p1775
sS'block_loop.thisRepN'
p1776
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1777
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p1778
Nsg70
Vn
sS'block_loop.thisTrialN'
p1779
I0
sg39
F2.0666933139618777
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)\r\x01s\x18'
tRp1780
sa(dp1781
S'trial_loop.thisTrialN'
p1782
I60
sg895
S'23-crunchie_redo.png'
p1783
sS'block_loop.thisIndex'
p1784
g889
sg38
S'right'
p1785
sg59
g63
sS'trial_loop.thisN'
p1786
I60
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p1787
g60
(g99
S'<\x00\x00\x00'
tRp1788
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1789
I0
sg904
S'33-ambrosia_rice.png'
p1790
sS'block_loop.thisRepN'
p1791
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1792
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p1793
Nsg70
Vn
sS'block_loop.thisTrialN'
p1794
I0
sg39
F1.4499770209845337
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)\x14\x030h'
tRp1795
sa(dp1796
S'trial_loop.thisTrialN'
p1797
I61
sg895
g1623
sS'block_loop.thisIndex'
p1798
g889
sg38
S'left'
p1799
sg59
g63
sS'trial_loop.thisN'
p1800
I61
sg33
g1289
sg64
g65
sS'trial_loop.thisIndex'
p1801
g60
(g99
S'=\x00\x00\x00'
tRp1802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1803
I0
sg904
g1630
sS'block_loop.thisRepN'
p1804
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1805
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p1806
Nsg70
Vn
sS'block_loop.thisTrialN'
p1807
I0
sg39
F1.099913671887407
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)\x1a\nk\xf8'
tRp1808
sa(dp1809
S'trial_loop.thisTrialN'
p1810
I62
sg895
S'6-sour_patch_kids.png'
p1811
sS'block_loop.thisIndex'
p1812
g889
sg38
S'right'
p1813
sg59
g63
sS'trial_loop.thisN'
p1814
I62
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1815
g60
(g99
S'>\x00\x00\x00'
tRp1816
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1817
I0
sg904
S'38-maltesers.png'
p1818
sS'block_loop.thisRepN'
p1819
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1820
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1821
Nsg70
Vn
sS'block_loop.thisTrialN'
p1822
I0
sg39
F1.0830383504376186
sg34
g753
(S'\x07\xdf\x07\x0e\x0e) \x0ck\xb0'
tRp1823
sa(dp1824
S'trial_loop.thisTrialN'
p1825
I63
sg895
g933
sS'block_loop.thisIndex'
p1826
g889
sg38
S'right'
p1827
sg59
g63
sS'trial_loop.thisN'
p1828
I63
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1829
g60
(g99
S'?\x00\x00\x00'
tRp1830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1831
I0
sg904
g941
sS'block_loop.thisRepN'
p1832
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1833
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1834
Nsg70
Vn
sS'block_loop.thisTrialN'
p1835
I0
sg39
F1.1333766494431075
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)&\x0e,\xe8'
tRp1836
sa(dp1837
S'trial_loop.thisTrialN'
p1838
I64
sg895
S'49-yorkie.png'
p1839
sS'block_loop.thisIndex'
p1840
g889
sg38
S'right'
p1841
sg59
g63
sS'trial_loop.thisN'
p1842
I64
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1843
g60
(g99
S'@\x00\x00\x00'
tRp1844
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1845
I0
sg904
S'35-raisins.png'
p1846
sS'block_loop.thisRepN'
p1847
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1848
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1849
Nsg70
Vn
sS'block_loop.thisTrialN'
p1850
I0
sg39
F1.1169837162597105
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)-\x01\x9e\x10'
tRp1851
sa(dp1852
S'trial_loop.thisTrialN'
p1853
I65
sg895
g999
sS'block_loop.thisIndex'
p1854
g889
sg38
S'right'
p1855
sg59
g63
sS'trial_loop.thisN'
p1856
I65
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p1857
g60
(g99
S'A\x00\x00\x00'
tRp1858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1859
I0
sg904
g1007
sS'block_loop.thisRepN'
p1860
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1861
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p1862
Nsg70
Vn
sS'block_loop.thisTrialN'
p1863
I0
sg39
F1.266679173029388
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)3\x03\xdcH'
tRp1864
sa(dp1865
S'trial_loop.thisTrialN'
p1866
I66
sg895
S'27-hartleys_raspberries_jelly.png'
p1867
sS'block_loop.thisIndex'
p1868
g889
sg38
S'right'
p1869
sg59
g63
sS'trial_loop.thisN'
p1870
I66
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1871
g60
(g99
S'B\x00\x00\x00'
tRp1872
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1873
I0
sg904
S'51-mars.png'
p1874
sS'block_loop.thisRepN'
p1875
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1876
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1877
Nsg70
Vn
sS'block_loop.thisTrialN'
p1878
I0
sg39
F1.1666851030972794
sg34
g753
(S'\x07\xdf\x07\x0e\x0e)9\x08w\xf8'
tRp1879
sa(dp1880
S'trial_loop.thisTrialN'
p1881
I67
sg895
S'45-chewy_nougat_redo.png'
p1882
sS'block_loop.thisIndex'
p1883
g889
sg38
S'right'
p1884
sg59
g63
sS'trial_loop.thisN'
p1885
I67
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p1886
g60
(g99
S'C\x00\x00\x00'
tRp1887
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1888
I0
sg904
S'41-peanuts_redo.png'
p1889
sS'block_loop.thisRepN'
p1890
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1891
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p1892
Nsg70
Vn
sS'block_loop.thisTrialN'
p1893
I0
sg39
F1.3165918185582086
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*\x03\x0bi\xe0'
tRp1894
sa(dp1895
S'trial_loop.thisTrialN'
p1896
I68
sg895
g1783
sS'block_loop.thisIndex'
p1897
g889
sg38
S'right'
p1898
sg59
g63
sS'trial_loop.thisN'
p1899
I68
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p1900
g60
(g99
S'D\x00\x00\x00'
tRp1901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1902
I0
sg904
g1790
sS'block_loop.thisRepN'
p1903
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1904
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p1905
Nsg70
Vn
sS'block_loop.thisTrialN'
p1906
I0
sg39
F1.4833142696834329
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*\n\x01~\xd0'
tRp1907
sa(dp1908
S'trial_loop.thisTrialN'
p1909
I69
sg895
g1768
sS'block_loop.thisIndex'
p1910
g889
sg38
S'right'
p1911
sg59
g63
sS'trial_loop.thisN'
p1912
I69
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p1913
g60
(g99
S'E\x00\x00\x00'
tRp1914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1915
I0
sg904
g1775
sS'block_loop.thisRepN'
p1916
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1917
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p1918
Nsg70
Vn
sS'block_loop.thisTrialN'
p1919
I0
sg39
F1.1000194437824575
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*\x10\tn\x10'
tRp1920
sa(dp1921
S'trial_loop.thisTrialN'
p1922
I70
sg895
g1114
sS'block_loop.thisIndex'
p1923
g889
sg38
S'left'
p1924
sg59
g63
sS'trial_loop.thisN'
p1925
I70
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1926
g60
(g99
S'F\x00\x00\x00'
tRp1927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1928
I0
sg904
g1121
sS'block_loop.thisRepN'
p1929
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1930
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1931
Nsg70
Vn
sS'block_loop.thisTrialN'
p1932
I0
sg39
F1.5167336270237683
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*\x16\x0bm\xc8'
tRp1933
sa(dp1934
S'trial_loop.thisTrialN'
p1935
I71
sg895
g1595
sS'block_loop.thisIndex'
p1936
g889
sg38
S'right'
p1937
sg59
g63
sS'trial_loop.thisN'
p1938
I71
sg33
g1272
sg64
g65
sS'trial_loop.thisIndex'
p1939
g60
(g99
S'G\x00\x00\x00'
tRp1940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1941
I0
sg904
g1602
sS'block_loop.thisRepN'
p1942
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1943
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p1944
Nsg70
Vn
sS'block_loop.thisTrialN'
p1945
I0
sg39
F1.1500275976263765
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*\x1d\x04\x97\xc8'
tRp1946
sa(dp1947
S'trial_loop.thisTrialN'
p1948
I72
sg895
g1882
sS'block_loop.thisIndex'
p1949
g889
sg38
S'left'
p1950
sg59
g63
sS'trial_loop.thisN'
p1951
I72
sg33
g1360
sg64
g65
sS'trial_loop.thisIndex'
p1952
g60
(g99
S'H\x00\x00\x00'
tRp1953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1954
I0
sg904
g1889
sS'block_loop.thisRepN'
p1955
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1956
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p1957
Nsg70
Vn
sS'block_loop.thisTrialN'
p1958
I0
sg39
F1.2999822097945071
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*#\x07O\x18'
tRp1959
sa(dp1960
S'trial_loop.thisTrialN'
p1961
I73
sg895
g1768
sS'block_loop.thisIndex'
p1962
g889
sg38
S'right'
p1963
sg59
g63
sS'trial_loop.thisN'
p1964
I73
sg33
g1233
sg64
g65
sS'trial_loop.thisIndex'
p1965
g60
(g99
S'I\x00\x00\x00'
tRp1966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1967
I0
sg904
g1775
sS'block_loop.thisRepN'
p1968
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1969
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p1970
Nsg70
Vn
sS'block_loop.thisTrialN'
p1971
I0
sg39
F0.96662198207968686
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*)\x0cg\xc8'
tRp1972
sa(dp1973
S'trial_loop.thisTrialN'
p1974
I74
sg895
g1285
sS'block_loop.thisIndex'
p1975
g889
sg38
S'right'
p1976
sg59
g63
sS'trial_loop.thisN'
p1977
I74
sg33
g1296
sg64
g65
sS'trial_loop.thisIndex'
p1978
g60
(g99
S'J\x00\x00\x00'
tRp1979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1980
I0
sg904
g1293
sS'block_loop.thisRepN'
p1981
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1982
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p1983
Nsg70
Vn
sS'block_loop.thisTrialN'
p1984
I0
sg39
F0.98334933691558035
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*/\x0c\x7f8'
tRp1985
sa(dp1986
S'trial_loop.thisTrialN'
p1987
I75
sg895
g1470
sS'block_loop.thisIndex'
p1988
g889
sg38
S'left'
p1989
sg59
g63
sS'trial_loop.thisN'
p1990
I75
sg33
g1185
sg64
g65
sS'trial_loop.thisIndex'
p1991
g60
(g99
S'K\x00\x00\x00'
tRp1992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1993
I0
sg904
g1477
sS'block_loop.thisRepN'
p1994
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1995
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p1996
Nsg70
Vn
sS'block_loop.thisTrialN'
p1997
I0
sg39
F1.6666557378543985
sg34
g753
(S'\x07\xdf\x07\x0e\x0e*5\x0c\xd1@'
tRp1998
sa(dp1999
S'trial_loop.thisTrialN'
p2000
I76
sg895
g1356
sS'block_loop.thisIndex'
p2001
g889
sg38
S'right'
p2002
sg59
g63
sS'trial_loop.thisN'
p2003
I76
sg33
g1360
sg64
g65
sS'trial_loop.thisIndex'
p2004
g60
(g99
S'L\x00\x00\x00'
tRp2005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2006
I0
sg904
g1364
sS'block_loop.thisRepN'
p2007
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2008
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p2009
Nsg70
Vn
sS'block_loop.thisTrialN'
p2010
I0
sg39
F1.3999931005932922
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+\x00\x08"\x08'
tRp2011
sa(dp2012
S'trial_loop.thisTrialN'
p2013
I77
sg895
g933
sS'block_loop.thisIndex'
p2014
g889
sg38
S'right'
p2015
sg59
g63
sS'trial_loop.thisN'
p2016
I77
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2017
g60
(g99
S'M\x00\x00\x00'
tRp2018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2019
I0
sg904
g941
sS'block_loop.thisRepN'
p2020
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2021
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2022
Nsg70
Vn
sS'block_loop.thisTrialN'
p2023
I0
sg39
F1.0833334283665863
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+\x06\x0e\xe0\x98'
tRp2024
sa(dp2025
S'trial_loop.thisTrialN'
p2026
I78
sg895
g1223
sS'block_loop.thisIndex'
p2027
g889
sg38
S'left'
p2028
sg59
g63
sS'trial_loop.thisN'
p2029
I78
sg33
g1233
sg64
g65
sS'trial_loop.thisIndex'
p2030
g60
(g99
S'N\x00\x00\x00'
tRp2031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2032
I0
sg904
g1231
sS'block_loop.thisRepN'
p2033
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2034
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p2035
Nsg70
Vn
sS'block_loop.thisTrialN'
p2036
I0
sg39
F1.3500077547050751
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+\r\x01cx'
tRp2037
sa(dp2038
S'trial_loop.thisTrialN'
p2039
I79
sg895
g1470
sS'block_loop.thisIndex'
p2040
g889
sg38
S'right'
p2041
sg59
g63
sS'trial_loop.thisN'
p2042
I79
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2043
g60
(g99
S'O\x00\x00\x00'
tRp2044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2045
I0
sg904
g1477
sS'block_loop.thisRepN'
p2046
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2047
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F1.2500074125855463
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+\x13\x07/\xd8'
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g984
sS'block_loop.thisIndex'
p2053
g889
sg38
S'left'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g991
sS'block_loop.thisRepN'
p2059
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F0.98338525944654975
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+\x19\x0b\x90\xf0'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
S'21-nakd_banana_crunch.png'
p2066
sS'block_loop.thisIndex'
p2067
g889
sg38
S'left'
p2068
sg59
g63
sS'trial_loop.thisN'
p2069
I81
sg33
g1563
sg64
g65
sS'trial_loop.thisIndex'
p2070
g60
(g99
S'Q\x00\x00\x00'
tRp2071
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2072
I0
sg904
S'1-treacle_cookies.png'
p2073
sS'block_loop.thisRepN'
p2074
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2075
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2076
Nsg70
Vn
sS'block_loop.thisTrialN'
p2077
I0
sg39
F1.683320085712694
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+\x1f\x0b\xa8`'
tRp2078
sa(dp2079
S'trial_loop.thisTrialN'
p2080
I82
sg895
g1129
sS'block_loop.thisIndex'
p2081
g889
sg38
S'left'
p2082
sg59
g63
sS'trial_loop.thisN'
p2083
I82
sg33
g1040
sg64
g65
sS'trial_loop.thisIndex'
p2084
g60
(g99
S'R\x00\x00\x00'
tRp2085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2086
I0
sg904
g1136
sS'block_loop.thisRepN'
p2087
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2088
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p2089
Nsg70
Vn
sS'block_loop.thisTrialN'
p2090
I0
sg39
F1.183339187375168
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+&\x07nX'
tRp2091
sa(dp2092
S'trial_loop.thisTrialN'
p2093
I83
sg895
g1386
sS'block_loop.thisIndex'
p2094
g889
sg38
S'left'
p2095
sg59
g63
sS'trial_loop.thisN'
p2096
I83
sg33
g1390
sg64
g65
sS'trial_loop.thisIndex'
p2097
g60
(g99
S'S\x00\x00\x00'
tRp2098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2099
I0
sg904
g1394
sS'block_loop.thisRepN'
p2100
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2101
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p2102
Nsg70
Vn
sS'block_loop.thisTrialN'
p2103
I0
sg39
F1.2999930435735223
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+,\n\x9e\xc0'
tRp2104
sa(dp2105
S'trial_loop.thisTrialN'
p2106
I84
sg895
g1285
sS'block_loop.thisIndex'
p2107
g889
sg38
S'right'
p2108
sg59
g63
sS'trial_loop.thisN'
p2109
I84
sg33
g1289
sg64
g65
sS'trial_loop.thisIndex'
p2110
g60
(g99
S'T\x00\x00\x00'
tRp2111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2112
I0
sg904
g1293
sS'block_loop.thisRepN'
p2113
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2114
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p2115
Nsg70
Vn
sS'block_loop.thisTrialN'
p2116
I0
sg39
F1.0837245848097155
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+3\x00u0'
tRp2117
sa(dp2118
S'trial_loop.thisTrialN'
p2119
I85
sg895
g1174
sS'block_loop.thisIndex'
p2120
g889
sg38
S'left'
p2121
sg59
g63
sS'trial_loop.thisN'
p2122
I85
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2123
g60
(g99
S'U\x00\x00\x00'
tRp2124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2125
I0
sg904
g1182
sS'block_loop.thisRepN'
p2126
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F2.3999680118417928
sg34
g753
(S'\x07\xdf\x07\x0e\x0e+9\x026h'
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g1097
sS'block_loop.thisIndex'
p2133
g889
sg38
S'left'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g1105
sS'block_loop.thisRepN'
p2139
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2140
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vn
sS'block_loop.thisTrialN'
p2142
I0
sg39
F1.1499902495988863
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,\x04\x08\xf1\x10'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
g1524
sS'block_loop.thisIndex'
p2146
g889
sg38
S'left'
p2147
sg59
g63
sS'trial_loop.thisN'
p2148
I87
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2149
g60
(g99
S'W\x00\x00\x00'
tRp2150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2151
I0
sg904
g1531
sS'block_loop.thisRepN'
p2152
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2153
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2154
Nsg70
Vn
sS'block_loop.thisTrialN'
p2155
I0
sg39
F1.3666464436123533
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,\n\x0b\xa8`'
tRp2156
sa(dp2157
S'trial_loop.thisTrialN'
p2158
I88
sg895
g1386
sS'block_loop.thisIndex'
p2159
g889
sg38
S'left'
p2160
sg59
g63
sS'trial_loop.thisN'
p2161
I88
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p2162
g60
(g99
S'X\x00\x00\x00'
tRp2163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2164
I0
sg904
g1394
sS'block_loop.thisRepN'
p2165
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2166
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p2167
Nsg70
Vn
sS'block_loop.thisTrialN'
p2168
I0
sg39
F1.4333654165247935
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,\x11\x02\xaf\x80'
tRp2169
sa(dp2170
S'trial_loop.thisTrialN'
p2171
I89
sg895
g1882
sS'block_loop.thisIndex'
p2172
g889
sg38
S'right'
p2173
sg59
g63
sS'trial_loop.thisN'
p2174
I89
sg33
g1360
sg64
g65
sS'trial_loop.thisIndex'
p2175
g60
(g99
S'Y\x00\x00\x00'
tRp2176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2177
I0
sg904
g1889
sS'block_loop.thisRepN'
p2178
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2179
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p2180
Nsg70
Vn
sS'block_loop.thisTrialN'
p2181
I0
sg39
F2.1666967921751166
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,\x17\t\xac\x90'
tRp2182
sa(dp2183
S'trial_loop.thisTrialN'
p2184
I90
sg895
g916
sS'block_loop.thisIndex'
p2185
g889
sg38
S'right'
p2186
sg59
g63
sS'trial_loop.thisN'
p2187
I90
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2188
g60
(g99
S'Z\x00\x00\x00'
tRp2189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2190
I0
sg904
g924
sS'block_loop.thisRepN'
p2191
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2192
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2193
Nsg70
Vn
sS'block_loop.thisTrialN'
p2194
I0
sg39
F1.1666731289205927
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,\x1e\x0c\xd5('
tRp2195
sa(dp2196
S'trial_loop.thisTrialN'
p2197
I91
sg895
g1455
sS'block_loop.thisIndex'
p2198
g889
sg38
S'right'
p2199
sg59
g63
sS'trial_loop.thisN'
p2200
I91
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p2201
g60
(g99
S'[\x00\x00\x00'
tRp2202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2203
I0
sg904
g1462
sS'block_loop.thisRepN'
p2204
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2205
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p2206
Nsg70
Vn
sS'block_loop.thisTrialN'
p2207
I0
sg39
F2.0333018963679024
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,%\x00\x84\xd0'
tRp2208
sa(dp2209
S'trial_loop.thisTrialN'
p2210
I92
sg895
g1129
sS'block_loop.thisIndex'
p2211
g889
sg38
S'left'
p2212
sg59
g63
sS'trial_loop.thisN'
p2213
I92
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p2214
g60
(g99
S'\\\x00\x00\x00'
tRp2215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2216
I0
sg904
g1136
sS'block_loop.thisRepN'
p2217
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2218
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p2219
Nsg70
Vn
sS'block_loop.thisTrialN'
p2220
I0
sg39
F1.8999990876818629
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,,\x01\x8a\x88'
tRp2221
sa(dp2222
S'trial_loop.thisTrialN'
p2223
I93
sg895
g1623
sS'block_loop.thisIndex'
p2224
g889
sg38
S'left'
p2225
sg59
g63
sS'trial_loop.thisN'
p2226
I93
sg33
g1289
sg64
g65
sS'trial_loop.thisIndex'
p2227
g60
(g99
S']\x00\x00\x00'
tRp2228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2229
I0
sg904
g1630
sS'block_loop.thisRepN'
p2230
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2231
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p2232
Nsg70
Vn
sS'block_loop.thisTrialN'
p2233
I0
sg39
F1.2666666286531836
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,3\x00m`'
tRp2234
sa(dp2235
S'trial_loop.thisTrialN'
p2236
I94
sg895
g1114
sS'block_loop.thisIndex'
p2237
g889
sg38
S'left'
p2238
sg59
g63
sS'trial_loop.thisN'
p2239
I94
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2240
g60
(g99
S'^\x00\x00\x00'
tRp2241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2242
I0
sg904
g1121
sS'block_loop.thisRepN'
p2243
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2244
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2245
Nsg70
Vn
sS'block_loop.thisTrialN'
p2246
I0
sg39
F1.4002941656108305
sg34
g753
(S'\x07\xdf\x07\x0e\x0e,9\x05\t\x10'
tRp2247
sa(dp2248
S'trial_loop.thisTrialN'
p2249
I95
sg895
g1867
sS'block_loop.thisIndex'
p2250
g889
sg38
S'right'
p2251
sg59
g63
sS'trial_loop.thisN'
p2252
I95
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2253
g60
(g99
S'_\x00\x00\x00'
tRp2254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2255
I0
sg904
g1874
sS'block_loop.thisRepN'
p2256
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2257
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2258
Nsg70
Vn
sS'block_loop.thisTrialN'
p2259
I0
sg39
F1.2500487520055685
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-\x03\x0b\xcb\x88'
tRp2260
sa(dp2261
S'trial_loop.thisTrialN'
p2262
I96
sg895
g1328
sS'block_loop.thisIndex'
p2263
g889
sg38
S'left'
p2264
sg59
g63
sS'trial_loop.thisN'
p2265
I96
sg33
g1091
sg64
g65
sS'trial_loop.thisIndex'
p2266
g60
(g99
S'`\x00\x00\x00'
tRp2267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2268
I0
sg904
g1335
sS'block_loop.thisRepN'
p2269
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2270
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2271
Nsg70
Vn
sS'block_loop.thisTrialN'
p2272
I0
sg39
F1.0331265602067106
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-\n\x00\xab\xe0'
tRp2273
sa(dp2274
S'trial_loop.thisTrialN'
p2275
I97
sg895
g1552
sS'block_loop.thisIndex'
p2276
g889
sg38
S'right'
p2277
sg59
g63
sS'trial_loop.thisN'
p2278
I97
sg33
g1563
sg64
g65
sS'trial_loop.thisIndex'
p2279
g60
(g99
S'a\x00\x00\x00'
tRp2280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2281
I0
sg904
g1560
sS'block_loop.thisRepN'
p2282
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2283
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2284
Nsg70
Vn
sS'block_loop.thisTrialN'
p2285
I0
sg39
F1.6500404271014304
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-\x10\x01\xb5\x80'
tRp2286
sa(dp2287
S'trial_loop.thisTrialN'
p2288
I98
sg895
g1191
sS'block_loop.thisIndex'
p2289
g889
sg38
S'right'
p2290
sg59
g63
sS'trial_loop.thisN'
p2291
I98
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2292
g60
(g99
S'b\x00\x00\x00'
tRp2293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2294
I0
sg904
g1198
sS'block_loop.thisRepN'
p2295
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2296
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2297
Nsg70
Vn
sS'block_loop.thisTrialN'
p2298
I0
sg39
F1.2333635918880645
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-\x16\x0cH\x88'
tRp2299
sa(dp2300
S'trial_loop.thisTrialN'
p2301
I99
sg895
S'17-jacobs_mini_cheddars_redo.png'
p2302
sS'block_loop.thisIndex'
p2303
g889
sg38
S'left'
p2304
sg59
g63
sS'trial_loop.thisN'
p2305
I99
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2306
g60
(g99
S'c\x00\x00\x00'
tRp2307
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2308
I0
sg904
S'8-liquorice_catherine_wheels.png'
p2309
sS'block_loop.thisRepN'
p2310
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2311
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p2312
Nsg70
Vn
sS'block_loop.thisTrialN'
p2313
I0
sg39
F2.2000001140399945
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-\x1d\x00\xea`'
tRp2314
sa(dp2315
S'trial_loop.thisTrialN'
p2316
I100
sg895
g916
sS'block_loop.thisIndex'
p2317
g889
sg38
S'right'
p2318
sg59
g63
sS'trial_loop.thisN'
p2319
I100
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2320
g60
(g99
S'd\x00\x00\x00'
tRp2321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2322
I0
sg904
g924
sS'block_loop.thisRepN'
p2323
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2324
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2325
Nsg70
Vn
sS'block_loop.thisTrialN'
p2326
I0
sg39
F0.93337625030380877
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-$\x04\x8f\xf8'
tRp2327
sa(dp2328
S'trial_loop.thisTrialN'
p2329
I101
sg895
g2302
sS'block_loop.thisIndex'
p2330
g889
sg38
S'left'
p2331
sg59
g63
sS'trial_loop.thisN'
p2332
I101
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2333
g60
(g99
S'e\x00\x00\x00'
tRp2334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2335
I0
sg904
g2309
sS'block_loop.thisRepN'
p2336
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2337
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p2338
Nsg70
Vn
sS'block_loop.thisTrialN'
p2339
I0
sg39
F1.2667011256867227
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-*\x04.P'
tRp2340
sa(dp2341
S'trial_loop.thisTrialN'
p2342
I102
sg895
g950
sS'block_loop.thisIndex'
p2343
g889
sg38
S'left'
p2344
sg59
g63
sS'trial_loop.thisN'
p2345
I102
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2346
g60
(g99
S'f\x00\x00\x00'
tRp2347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2348
I0
sg904
g958
sS'block_loop.thisRepN'
p2349
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2350
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2351
Nsg70
Vn
sS'block_loop.thisTrialN'
p2352
I0
sg39
F1.0166455312942162
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-0\x08\x8b\x80'
tRp2353
sa(dp2354
S'trial_loop.thisTrialN'
p2355
I103
sg895
g1867
sS'block_loop.thisIndex'
p2356
g889
sg38
S'right'
p2357
sg59
g63
sS'trial_loop.thisN'
p2358
I103
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p2359
g60
(g99
S'g\x00\x00\x00'
tRp2360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2361
I0
sg904
g1874
sS'block_loop.thisRepN'
p2362
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2363
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2364
Nsg70
Vn
sS'block_loop.thisTrialN'
p2365
I0
sg39
F0.81667991428776077
sg34
g753
(S'\x07\xdf\x07\x0e\x0e-6\tZ\x88'
tRp2366
sa(dp2367
S'trial_loop.thisTrialN'
p2368
I104
sg895
g1882
sS'block_loop.thisIndex'
p2369
g889
sg38
S'right'
p2370
sg59
g63
sS'trial_loop.thisN'
p2371
I104
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p2372
g60
(g99
S'h\x00\x00\x00'
tRp2373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2374
I0
sg904
g1889
sS'block_loop.thisRepN'
p2375
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2376
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p2377
Nsg70
Vn
sS'block_loop.thisTrialN'
p2378
I0
sg39
F1.1666768352133658
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.\x00\x07\x10\x98'
tRp2379
sa(dp2380
S'trial_loop.thisTrialN'
p2381
I105
sg895
g2302
sS'block_loop.thisIndex'
p2382
g889
sg38
S'left'
p2383
sg59
g63
sS'trial_loop.thisN'
p2384
I105
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2385
g60
(g99
S'i\x00\x00\x00'
tRp2386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2387
I0
sg904
g2309
sS'block_loop.thisRepN'
p2388
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vn
sS'block_loop.thisTrialN'
p2391
I0
sg39
F0.98333992863354069
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.\x06\nA\x00'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g1811
sS'block_loop.thisIndex'
p2395
g889
sg38
S'right'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g1818
sS'block_loop.thisRepN'
p2401
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vn
sS'block_loop.thisTrialN'
p2404
I0
sg39
F0.96633203594092265
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.\x0c\nXp'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g1839
sS'block_loop.thisIndex'
p2408
g889
sg38
S'right'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g1846
sS'block_loop.thisRepN'
p2414
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vn
sS'block_loop.thisTrialN'
p2417
I0
sg39
F1.1999117332111382
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.\x12\no\xe0'
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g1552
sS'block_loop.thisIndex'
p2421
g889
sg38
S'left'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g1560
sS'block_loop.thisRepN'
p2427
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vn
sS'block_loop.thisTrialN'
p2430
I0
sg39
F1.1000114609978482
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.\x18\r\xde\xc8'
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
g1206
sS'block_loop.thisIndex'
p2434
g889
sg38
S'left'
p2435
sg59
g63
sS'trial_loop.thisN'
p2436
I109
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2437
g60
(g99
S'm\x00\x00\x00'
tRp2438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2439
I0
sg904
g1214
sS'block_loop.thisRepN'
p2440
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2441
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p2442
Nsg70
Vn
sS'block_loop.thisTrialN'
p2443
I0
sg39
F1.8833746537470688
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.\x1f\x00\xd6\xd8'
tRp2444
sa(dp2445
S'trial_loop.thisTrialN'
p2446
I110
sg895
g1174
sS'block_loop.thisIndex'
p2447
g889
sg38
S'right'
p2448
sg59
g63
sS'trial_loop.thisN'
p2449
I110
sg33
g1185
sg64
g65
sS'trial_loop.thisIndex'
p2450
g60
(g99
S'n\x00\x00\x00'
tRp2451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2452
I0
sg904
g1182
sS'block_loop.thisRepN'
p2453
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vn
sS'block_loop.thisTrialN'
p2456
I0
sg39
F1.9666815678642706
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.%\x0e\xbdp'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
g1253
sS'block_loop.thisIndex'
p2460
g889
sg38
S'left'
p2461
sg59
g63
sS'trial_loop.thisN'
p2462
I111
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p2463
g60
(g99
S'o\x00\x00\x00'
tRp2464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2465
I0
sg904
g1260
sS'block_loop.thisRepN'
p2466
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2467
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F1.5832387753498551
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.,\x0e\xcd\x10'
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
g1097
sS'block_loop.thisIndex'
p2473
g889
sg38
S'left'
p2474
sg59
g63
sS'trial_loop.thisN'
p2475
I112
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2476
g60
(g99
S'p\x00\x00\x00'
tRp2477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2478
I0
sg904
g1105
sS'block_loop.thisRepN'
p2479
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2480
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2481
Nsg70
Vn
sS'block_loop.thisTrialN'
p2482
I0
sg39
F0.88338833852003518
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.3\x08\xed('
tRp2483
sa(dp2484
S'trial_loop.thisTrialN'
p2485
I113
sg895
g1470
sS'block_loop.thisIndex'
p2486
g889
sg38
S'right'
p2487
sg59
g63
sS'trial_loop.thisN'
p2488
I113
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2489
g60
(g99
S'q\x00\x00\x00'
tRp2490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2491
I0
sg904
g1477
sS'block_loop.thisRepN'
p2492
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2493
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2494
Nsg70
Vn
sS'block_loop.thisTrialN'
p2495
I0
sg39
F1.3666874979330714
sg34
g753
(S'\x07\xdf\x07\x0e\x0e.9\x07\x95h'
tRp2496
sa(dp2497
S'trial_loop.thisTrialN'
p2498
I114
sg895
g1455
sS'block_loop.thisIndex'
p2499
g889
sg38
S'left'
p2500
sg59
g63
sS'trial_loop.thisN'
p2501
I114
sg33
g1390
sg64
g65
sS'trial_loop.thisIndex'
p2502
g60
(g99
S'r\x00\x00\x00'
tRp2503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2504
I0
sg904
g1462
sS'block_loop.thisRepN'
p2505
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2506
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p2507
Nsg70
Vn
sS'block_loop.thisTrialN'
p2508
I0
sg39
F1.9169955763968574
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/\x03\r\xa0H'
tRp2509
sa(dp2510
S'trial_loop.thisTrialN'
p2511
I115
sg895
g1839
sS'block_loop.thisIndex'
p2512
g889
sg38
S'right'
p2513
sg59
g63
sS'trial_loop.thisN'
p2514
I115
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2515
g60
(g99
S's\x00\x00\x00'
tRp2516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2517
I0
sg904
g1846
sS'block_loop.thisRepN'
p2518
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2519
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2520
Nsg70
Vn
sS'block_loop.thisTrialN'
p2521
I0
sg39
F1.1000051888099733
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/\n\x0c\xfc8'
tRp2522
sa(dp2523
S'trial_loop.thisTrialN'
p2524
I116
sg895
S'42-mrkipling_lemon_slices.png'
p2525
sS'block_loop.thisIndex'
p2526
g889
sg38
S'right'
p2527
sg59
g63
sS'trial_loop.thisN'
p2528
I116
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p2529
g60
(g99
S't\x00\x00\x00'
tRp2530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2531
I0
sg904
S'16-skips_prawn.png'
p2532
sS'block_loop.thisRepN'
p2533
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.6832137436181256
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/\x10\x0e\xf8\x08'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1595
sS'block_loop.thisIndex'
p2540
g889
sg38
S'right'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1272
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1602
sS'block_loop.thisRepN'
p2546
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F1.0500500634630043
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/\x17\n\xc1\xe8'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1223
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1233
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1231
sS'block_loop.thisRepN'
p2559
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.0833394154547022
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/\x1d\x0c\n\x08'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1783
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1790
sS'block_loop.thisRepN'
p2572
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.4670185554127784
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/#\r\xcb@'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g1524
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g1531
sS'block_loop.thisRepN'
p2585
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F1.0498388047722074
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/*\x06\x03\x10'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1080
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1088
sS'block_loop.thisRepN'
p2598
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F0.81659324405563893
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/0\x07K0'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g950
sS'block_loop.thisIndex'
p2605
g889
sg38
S'left'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g958
sS'block_loop.thisRepN'
p2611
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F0.93333605128145791
sg34
g753
(S'\x07\xdf\x07\x0e\x0e/6\x05\x01@'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1595
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1279
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1602
sS'block_loop.thisRepN'
p2624
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.149911847250678
sg34
g753
(S'\x07\xdf\x07\x0e\x0e0\x00\x04\x9f\x98'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1552
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1560
sS'block_loop.thisRepN'
p2637
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F2.849990648738185
sg34
g753
(S'\x07\xdf\x07\x0e\x0e0\x06\x07S\x00'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g967
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g975
sS'block_loop.thisRepN'
p2650
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.116389283909939
sg34
g753
(S'\x07\xdf\x07\x0e\x0e0\x0e\x05vp'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1174
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1182
sS'block_loop.thisRepN'
p2663
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.8000158515292242
sg34
g753
(S'\x07\xdf\x07\x0e\x0e0\x14\x07\xef@'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g2525
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g2532
sS'block_loop.thisRepN'
p2676
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F3.4165340003901292
sg34
g753
(S'\x07\xdf\x07\x0e\x0e0\x1b\x05b\xe8'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g999
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1010
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1007
sS'block_loop.thisRepN'
p2689
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.8666567071927602
sg34
g753
(S'\x07\xdf\x07\x0e\x0e0#\x0c\x19\xa8'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1768
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1233
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1775
sS'block_loop.thisRepN'
p2702
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.183393641370003
sg34
g753
(S'\x07\xdf\x07\x0e\x0e0*\n\xbe\x00'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g2525
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g2532
sS'block_loop.thisRepN'
p2715
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.6498716482283271
sg34
g753
(S'\x07\xdf\x07\x0e\x0e00\r\xea\x80'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1268
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1272
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1276
sS'block_loop.thisRepN'
p2728
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.0667560358406263
sg34
g753
(S'\x07\xdf\x07\x0e\x0e07\t;H'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1867
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1874
sS'block_loop.thisRepN'
p2741
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.0166737561394257
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1\x01\n\xbe\x00'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1174
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1182
sS'block_loop.thisRepN'
p2754
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.1666517464623212
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1\x07\x0bRp'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1768
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1233
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1775
sS'block_loop.thisRepN'
p2767
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F2.1503688616662657
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1\r\x0e~\xf0'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1811
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1818
sS'block_loop.thisRepN'
p2780
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.98301206426822318
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1\x15\x01\xec0'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1839
sS'block_loop.thisIndex'
p2787
g889
sg38
S'right'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1846
sS'block_loop.thisRepN'
p2793
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F0.93327218900503794
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1\x1b\x02B '
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g896
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g905
sS'block_loop.thisRepN'
p2806
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.1666651461364381
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1!\x01\xa1\xf8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g2302
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g2309
sS'block_loop.thisRepN'
p2819
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.3332256607750423
sg34
g753
(S"\x07\xdf\x07\x0e\x0e1'\x04\xd2`"
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1783
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1790
sS'block_loop.thisRepN'
p2832
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.3499370500417172
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1-\nd('
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1114
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1121
sS'block_loop.thisRepN'
p2845
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.1501658708593823
sg34
g753
(S'\x07\xdf\x07\x0e\x0e14\x00\xeeH'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1328
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1335
sS'block_loop.thisRepN'
p2858
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.0665541854305047
sg34
g753
(S'\x07\xdf\x07\x0e\x0e1:\x03\xe4\x18'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g2066
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g2073
sS'block_loop.thisRepN'
p2871
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.1333087957737007
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2\x04\x05f\xd0'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1080
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1088
sS'block_loop.thisRepN'
p2884
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.79992205381131498
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2\n\x07\xdf\xa0'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1811
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1818
sS'block_loop.thisRepN'
p2897
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.93304696044015145
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2\x10\x05[\x18'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1129
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1136
sS'block_loop.thisRepN'
p2910
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.4333634208278454
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2\x16\x04\xba\xf0'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g933
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g941
sS'block_loop.thisRepN'
p2923
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.0333438059860782
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2\x1c\x0b\xf6\x80'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1046
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1054
sS'block_loop.thisRepN'
p2936
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.3833019533867628
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2"\r\x00 '
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g933
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g941
sS'block_loop.thisRepN'
p2949
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.1332349550175422
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2)\x04\x07@'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1455
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1390
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1462
sS'block_loop.thisRepN'
p2962
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F2.1333715176524493
sg34
g753
(S'\x07\xdf\x07\x0e\x0e2/\x06\x80\x10'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1063
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1071
sS'block_loop.thisRepN'
p2975
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.1833101072315912
sg34
g753
(S'\x07\xdf\x07\x0e\x0e26\t/\x90'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1029
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1037
sS'block_loop.thisRepN'
p2988
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.0166643478578408
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3\x00\x0c_\xf8'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1206
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1214
sS'block_loop.thisRepN'
p3001
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.3666518605014062
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3\x06\r+\x18'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g967
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g975
sS'block_loop.thisRepN'
p3014
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.9329927915459848
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3\r\x03\xf3\xb8'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1552
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1560
sS'block_loop.thisRepN'
p3027
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.1333632497689905
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3\x13\x03\x92\x10'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1029
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1040
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1037
sS'block_loop.thisRepN'
p3040
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.1333045192823192
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3\x19\x06\n\xe0'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1223
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1233
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1231
sS'block_loop.thisRepN'
p3053
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F2.0166284253273261
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3\x1f\x08\x83\xb0'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1268
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1279
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1276
sS'block_loop.thisRepN'
p3066
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.066703292442071
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3&\tJ\xe8'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1129
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1136
sS'block_loop.thisRepN'
p3079
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.1833882244800407
sg34
g753
(S'\x07\xdf\x07\x0e\x0e3,\n\xd1\x88'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1386
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1390
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1394
sS'block_loop.thisRepN'
p3092
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.3836862674443182
sg34
g753
(S'\x07\xdf\x07\x0e\x0e32\x0e@p'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1223
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1233
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1231
sS'block_loop.thisRepN'
p3105
I0
sg907
g1233
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1227
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.91668567329634243
sg34
g753
(S'\x07\xdf\x07\x0e\x0e39\x05C\xa8'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1191
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1198
sS'block_loop.thisRepN'
p3118
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.90002902312426158
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4\x03\x04\xa3\x80'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g999
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1007
sS'block_loop.thisRepN'
p3131
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.0666813397856458
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4\t\x03\x8a@'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1783
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1790
sS'block_loop.thisRepN'
p3144
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.0665795592822178
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4\x0f\x05\x10\xe0'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g984
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g991
sS'block_loop.thisRepN'
p3157
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.4337058252658608
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4\x15\x06\x97\x80'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1206
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1214
sS'block_loop.thisRepN'
p3170
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F2.6166321886394144
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4\x1b\r\x94\x90'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1097
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1105
sS'block_loop.thisRepN'
p3183
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.88326546065854927
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4#\x08dp'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1080
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1091
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1088
sS'block_loop.thisRepN'
p3196
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.80003381279402674
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4)\x07\x0c\xb0'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1867
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1874
sS'block_loop.thisRepN'
p3209
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.83306087329401635
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4/\x04\x84@'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1285
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1289
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1293
sS'block_loop.thisRepN'
p3222
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.2000571339294765
sg34
g753
(S'\x07\xdf\x07\x0e\x0e45\x02x\xd0'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1268
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1272
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1276
sS'block_loop.thisRepN'
p3235
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.98333793293841154
sg34
g753
(S'\x07\xdf\x07\x0e\x0e4;\x06"P'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1046
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1054
sS'block_loop.thisRepN'
p3248
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.96658064266011934
sg34
g753
(S'\x07\xdf\x07\x0e\x0e5\x05\x069\xc0'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1157
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1165
sS'block_loop.thisRepN'
p3261
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.2164874151403637
sg34
g753
(S'\x07\xdf\x07\x0e\x0e5\x0b\x06Q0'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1356
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1360
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1364
sS'block_loop.thisRepN'
p3274
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.5665744274920144
sg34
g753
(S'\x07\xdf\x07\x0e\x0e5\x11\n90'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g999
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1007
sS'block_loop.thisRepN'
p3287
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.1502551069861511
sg34
g753
(S'\x07\xdf\x07\x0e\x0e5\x18\x04\x16\xe0'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g2302
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g2309
sS'block_loop.thisRepN'
p3300
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.93333804697704181
sg34
g753
(S'\x07\xdf\x07\x0e\x0e5\x1e\x06\xce0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1882
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1360
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1889
sS'block_loop.thisRepN'
p3313
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.88332960803381866
sg34
g753
(S'\x07\xdf\x07\x0e\x0e5$\x06.\x08'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g2066
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g2073
sS'block_loop.thisRepN'
p3326
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.99996778376316797
sg34
g753
(S'\x07\xdf\x07\x0e\x0e5*\x05\x14\xc8'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g984
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g991
sS'block_loop.thisRepN'
p3339
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.78330332186487794
sg34
g753
(S'\x07\xdf\x07\x0e\x0e50\x05j\xb8'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1839
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1846
sS'block_loop.thisRepN'
p3352
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.93332065591130231
sg34
g753
(S'\x07\xdf\x07\x0e\x0e56\x02\xa7\xb0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g916
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g924
sS'block_loop.thisRepN'
p3365
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.4333260728008099
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6\x00\x02F\x08'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g2066
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g2073
sS'block_loop.thisRepN'
p3378
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.96660943770439189
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6\x06\tC\x18'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g896
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g905
sS'block_loop.thisRepN'
p3391
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.96667301488105295
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6\x0c\tZ\x88'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1253
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1003
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1260
sS'block_loop.thisRepN'
p3404
I0
sg907
g1003
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1010
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.4499898504600424
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6\x12\tq\xf8'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1114
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1121
sS'block_loop.thisRepN'
p3417
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.2166661724950245
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6\x19\x01kH'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g984
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g991
sS'block_loop.thisRepN'
p3430
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.83336478930596058
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6\x1f\x05SH'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g2525
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g2532
sS'block_loop.thisRepN'
p3443
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F1.116584577031972
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6%\x03C\xf0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g896
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g905
sS'block_loop.thisRepN'
p3456
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.91670135376625694
sg34
g753
(S'\x07\xdf\x07\x0e\x0e6+\x05\x82('
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g2525
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g2532
sS'block_loop.thisRepN'
p3469
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.86655350119235663
sg34
g753
(S'\x07\xdf\x07\x0e\x0e61\x04\xe2\x00'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1455
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1390
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1462
sS'block_loop.thisRepN'
p3482
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.93329214596633392
sg34
g753
(S'\x07\xdf\x07\x0e\x0e67\x03O\xa8'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1328
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1335
sS'block_loop.thisRepN'
p3495
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.93328615887730848
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7\x01\x02\xaf\x80'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1356
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1367
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1364
sS'block_loop.thisRepN'
p3508
I0
sg907
g1360
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1367
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.88334101201235171
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7\x07\x02M\xd8'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g2066
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g2073
sS'block_loop.thisRepN'
p3521
I0
sg907
g1556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.83330805451623746
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7\r\x00\xf6\x18'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1268
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1272
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1276
sS'block_loop.thisRepN'
p3534
I0
sg907
g1272
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1279
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.78331672153944965
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7\x12\x0e,\xe8'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1524
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1531
sS'block_loop.thisRepN'
p3547
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.1166575624911275
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7\x18\x0be\xf8'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1811
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1818
sS'block_loop.thisRepN'
p3560
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.94974580533107655
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7\x1e\x0e\x1dH'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1386
sS'block_loop.thisIndex'
p3567
g889
sg38
S'left'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1390
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1394
sS'block_loop.thisRepN'
p3573
I0
sg907
g1390
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1397
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.8500753232747229
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7$\r\xf68'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1623
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1296
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1630
sS'block_loop.thisRepN'
p3586
I0
sg907
g1289
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1296
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.9499231371892165
sg34
g753
(S'\x07\xdf\x07\x0e\x0e7*\x0c)H'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1063
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1071
sS'block_loop.thisRepN'
p3599
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.96668812515235913
sg34
g753
(S'\x07\xdf\x07\x0e\x0e70\x0b\xc7\xa0'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1206
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1214
sS'block_loop.thisRepN'
p3612
I0
sg907
g1210
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1217
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.0499710909152782
sg34
g753
(S'\x07\xdf\x07\x0e\x0e76\x0b\xdf\x10'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F152.61364520171901
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'27-hartleys_raspberries_jelly.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'27-hartleys_raspberries_jelly.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'51-mars.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
S'51-mars.png'
p3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3647
I1
sS'img_wrong'
p3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F2.7164885555384899
sg34
g753
(S'\x07\xdf\x07\x0e\x0e;\x17\x07\xb8\x90'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'22-daim.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'22-daim.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'7-olives.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3648
S'7-olives.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.0833357091623839
sg34
g753
(S'\x07\xdf\x07\x0e\x0e;\x1f\x03\xb9 '
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'3-ellas_strawberries_apples.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'3-ellas_strawberries_apples.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3648
S'13-mccoys_steak_crisps.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.88336610076294164
sg34
g753
(S'\x07\xdf\x07\x0e\x0e;%\x05zX'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'51-mars.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3692
g60
(g99
S'\x03\x00\x00\x00'
tRp3693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3694
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3697
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3698
Nsg70
Vn
sS'block_loop.thisTrialN'
p3699
I0
sg39
F0.91668310740169545
sg34
g753
(S'\x07\xdf\x07\x0e\x0e;+\x04"\x98'
tRp3700
sa(dp3701
S'trial_loop.thisTrialN'
p3702
I4
sg3633
S'48-twix.png'
p3703
sS'block_loop.thisIndex'
p3704
g3627
sg38
S'left'
p3705
sg59
g63
sS'trial_loop.thisN'
p3706
I4
sg33
S'48-twix.png'
p3707
sg64
g65
sS'trial_loop.thisIndex'
p3708
g60
(g99
S'\x04\x00\x00\x00'
tRp3709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3710
I0
sg3642
S'50-polo.png'
p3711
sS'block_loop.thisRepN'
p3712
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3713
I1
sg3648
S'50-polo.png'
p3714
sg55
g11
sS'block_loop.thisTrial'
p3715
Nsg70
Vn
sS'block_loop.thisTrialN'
p3716
I0
sg39
F1.0000051317902034
sg34
g753
(S'\x07\xdf\x07\x0e\x0e;1\x03\x82p'
tRp3717
sa(dp3718
S'trial_loop.thisTrialN'
p3719
I5
sg3633
S'49-yorkie.png'
p3720
sS'block_loop.thisIndex'
p3721
g3627
sg38
S'right'
p3722
sg59
g63
sS'trial_loop.thisN'
p3723
I5
sg33
S'35-raisins.png'
p3724
sg64
g65
sS'trial_loop.thisIndex'
p3725
g60
(g99
S'\x05\x00\x00\x00'
tRp3726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3727
I0
sg3642
S'35-raisins.png'
p3728
sS'block_loop.thisRepN'
p3729
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3730
I1
sg3648
S'49-yorkie.png'
p3731
sg55
g11
sS'block_loop.thisTrial'
p3732
Nsg70
Vn
sS'block_loop.thisTrialN'
p3733
I0
sg39
F0.93336541652479355
sg34
g753
(S'\x07\xdf\x07\x0e\x0e;7\x03\xd8`'
tRp3734
sa(dp3735
S'trial_loop.thisTrialN'
p3736
I6
sg3633
S'26-walkers_smoky_bacon.png'
p3737
sS'block_loop.thisIndex'
p3738
g3627
sg38
S'right'
p3739
sg59
g63
sS'trial_loop.thisN'
p3740
I6
sg33
S'44-crunch.png'
p3741
sg64
g65
sS'trial_loop.thisIndex'
p3742
g60
(g99
S'\x06\x00\x00\x00'
tRp3743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3744
I0
sg3642
S'44-crunch.png'
p3745
sS'block_loop.thisRepN'
p3746
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3747
I1
sg3648
S'26-walkers_smoky_bacon.png'
p3748
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vn
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.93335173175091768
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00\x01\x03v\xb8'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'5-pineapple.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'left'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'5-pineapple.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'40-sardines.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3764
I1
sg3648
S'40-sardines.png'
p3765
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vn
sS'block_loop.thisTrialN'
p3767
I0
sg39
F0.88321442785672843
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00\x07\x02\xd6\x90'
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'2-steamed_puddings.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'left'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
S'2-steamed_puddings.png'
p3775
sg64
g65
sS'trial_loop.thisIndex'
p3776
g60
(g99
S'\x08\x00\x00\x00'
tRp3777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3778
I0
sg3642
S'20-fruit_pastilles.png'
p3779
sS'block_loop.thisRepN'
p3780
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3781
I1
sg3648
S'20-fruit_pastilles.png'
p3782
sg55
g11
sS'block_loop.thisTrial'
p3783
Nsg70
Vn
sS'block_loop.thisTrialN'
p3784
I0
sg39
F1.033241740383346
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00\r\x01\xbdP'
tRp3785
sa(dp3786
S'trial_loop.thisTrialN'
p3787
I9
sg3633
S'10-bounty_redo.png'
p3788
sS'block_loop.thisIndex'
p3789
g3627
sg38
S'right'
p3790
sg59
g63
sS'trial_loop.thisN'
p3791
I9
sg33
S'4-corn.png'
p3792
sg64
g65
sS'trial_loop.thisIndex'
p3793
g60
(g99
S'\t\x00\x00\x00'
tRp3794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3795
I0
sg3642
S'4-corn.png'
p3796
sS'block_loop.thisRepN'
p3797
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3798
I1
sg3648
S'10-bounty_redo.png'
p3799
sg55
g11
sS'block_loop.thisTrial'
p3800
Nsg70
Vn
sS'block_loop.thisTrialN'
p3801
I0
sg39
F0.99993471222569497
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00\x13\x02\xc6\xf0'
tRp3802
sa(dp3803
S'trial_loop.thisTrialN'
p3804
I10
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3805
sS'block_loop.thisIndex'
p3806
g3627
sg38
S'left'
p3807
sg59
g63
sS'trial_loop.thisN'
p3808
I10
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3809
sg64
g65
sS'trial_loop.thisIndex'
p3810
g60
(g99
S'\n\x00\x00\x00'
tRp3811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3812
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3813
sS'block_loop.thisRepN'
p3814
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3815
I1
sg3648
S'8-liquorice_catherine_wheels.png'
p3816
sg55
g11
sS'block_loop.thisTrial'
p3817
Nsg70
Vn
sS'block_loop.thisTrialN'
p3818
I0
sg39
F1.0500033071539292
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00\x19\x03\x1c\xe0'
tRp3819
sa(dp3820
S'trial_loop.thisTrialN'
p3821
I11
sg3633
g3634
sS'block_loop.thisIndex'
p3822
g3627
sg38
S'right'
p3823
sg59
g63
sS'trial_loop.thisN'
p3824
I11
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p3825
g60
(g99
S'\x0b\x00\x00\x00'
tRp3826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3827
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3828
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3829
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3830
Nsg70
Vn
sS'block_loop.thisTrialN'
p3831
I0
sg39
F1.4499889951612204
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00\x1f\x04e\x00'
tRp3832
sa(dp3833
S'trial_loop.thisTrialN'
p3834
I12
sg3633
S'6-sour_patch_kids.png'
p3835
sS'block_loop.thisIndex'
p3836
g3627
sg38
S'left'
p3837
sg59
g63
sS'trial_loop.thisN'
p3838
I12
sg33
S'6-sour_patch_kids.png'
p3839
sg64
g65
sS'trial_loop.thisIndex'
p3840
g60
(g99
S'\x0c\x00\x00\x00'
tRp3841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3842
I0
sg3642
S'38-maltesers.png'
p3843
sS'block_loop.thisRepN'
p3844
I1
sg3645
S'38-maltesers.png'
p3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3846
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p3847
Nsg70
Vn
sS'block_loop.thisTrialN'
p3848
I0
sg39
F1.4997274449269753
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00%\x0b\xdf\x10'
tRp3849
sa(dp3850
S'trial_loop.thisTrialN'
p3851
I13
sg3633
S'18-mms.png'
p3852
sS'block_loop.thisIndex'
p3853
g3627
sg38
S'left'
p3854
sg59
g63
sS'trial_loop.thisN'
p3855
I13
sg33
S'18-mms.png'
p3856
sg64
g65
sS'trial_loop.thisIndex'
p3857
g60
(g99
S'\r\x00\x00\x00'
tRp3858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3859
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3860
sS'block_loop.thisRepN'
p3861
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3862
I1
sg3648
S'43-mrporky_pork_crackles_redo.png'
p3863
sg55
g11
sS'block_loop.thisTrial'
p3864
Nsg70
Vn
sS'block_loop.thisTrialN'
p3865
I0
sg39
F0.98326152628487762
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x00,\x04\xca\x90'
tRp3866
sa(dp3867
S'trial_loop.thisTrialN'
p3868
I14
sg3633
S'35-raisins.png'
p3869
sS'block_loop.thisIndex'
p3870
g3627
sg38
S'left'
p3871
sg59
g63
sS'trial_loop.thisN'
p3872
I14
sg33
g3731
sg64
g65
sS'trial_loop.thisIndex'
p3873
g60
(g99
S'\x0e\x00\x00\x00'
tRp3874
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3875
I0
sg3642
S'49-yorkie.png'
p3876
sS'block_loop.thisRepN'
p3877
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3878
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p3879
Nsg70
Vn
sS'block_loop.thisTrialN'
p3880
I0
sg39
F0.86655207569583581
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x002\x04\xe2\x00'
tRp3881
sa(dp3882
S'trial_loop.thisTrialN'
p3883
I15
sg3633
g3688
sS'block_loop.thisIndex'
p3884
g3627
sg38
S'left'
p3885
sg59
g63
sS'trial_loop.thisN'
p3886
I15
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p3887
g60
(g99
S'\x0f\x00\x00\x00'
tRp3888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3889
I0
sg3642
g3695
sS'block_loop.thisRepN'
p3890
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3891
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3892
Nsg70
Vn
sS'block_loop.thisTrialN'
p3893
I0
sg39
F3.1333948958072142
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x008\x03\x8a@'
tRp3894
sa(dp3895
S'trial_loop.thisTrialN'
p3896
I16
sg3633
g3754
sS'block_loop.thisIndex'
p3897
g3627
sg38
S'left'
p3898
sg59
g63
sS'trial_loop.thisN'
p3899
I16
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p3900
g60
(g99
S'\x10\x00\x00\x00'
tRp3901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3902
I0
sg3642
g3762
sS'block_loop.thisRepN'
p3903
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3904
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p3905
Nsg70
Vn
sS'block_loop.thisTrialN'
p3906
I0
sg39
F0.73336530248434428
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01\x04\x05\xf7X'
tRp3907
sa(dp3908
S'trial_loop.thisTrialN'
p3909
I17
sg3633
S'25-kitkat.png'
p3910
sS'block_loop.thisIndex'
p3911
g3627
sg38
S'left'
p3912
sg59
g63
sS'trial_loop.thisN'
p3913
I17
sg33
S'31-hobnobs.png'
p3914
sg64
g65
sS'trial_loop.thisIndex'
p3915
g60
(g99
S'\x11\x00\x00\x00'
tRp3916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3917
I0
sg3642
S'31-hobnobs.png'
p3918
sS'block_loop.thisRepN'
p3919
I1
sg3645
S'25-kitkat.png'
p3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3921
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p3922
Nsg70
Vn
sS'block_loop.thisTrialN'
p3923
I0
sg39
F1.1666890944898114
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01\n\x02|\xb8'
tRp3924
sa(dp3925
S'trial_loop.thisTrialN'
p3926
I18
sg3633
S'23-crunchie_redo.png'
p3927
sS'block_loop.thisIndex'
p3928
g3627
sg38
S'right'
p3929
sg59
g63
sS'trial_loop.thisN'
p3930
I18
sg33
S'23-crunchie_redo.png'
p3931
sg64
g65
sS'trial_loop.thisIndex'
p3932
g60
(g99
S'\x12\x00\x00\x00'
tRp3933
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3934
I0
sg3642
S'33-ambrosia_rice.png'
p3935
sS'block_loop.thisRepN'
p3936
I1
sg3645
S'33-ambrosia_rice.png'
p3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3938
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p3939
Nsg70
Vn
sS'block_loop.thisTrialN'
p3940
I0
sg39
F1.2332475564126071
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01\x10\x05n\xa0'
tRp3941
sa(dp3942
S'trial_loop.thisTrialN'
p3943
I19
sg3633
S'41-peanuts_redo.png'
p3944
sS'block_loop.thisIndex'
p3945
g3627
sg38
S'left'
p3946
sg59
g63
sS'trial_loop.thisN'
p3947
I19
sg33
S'41-peanuts_redo.png'
p3948
sg64
g65
sS'trial_loop.thisIndex'
p3949
g60
(g99
S'\x13\x00\x00\x00'
tRp3950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3951
I0
sg3642
S'45-chewy_nougat_redo.png'
p3952
sS'block_loop.thisRepN'
p3953
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3954
I1
sg3648
S'45-chewy_nougat_redo.png'
p3955
sg55
g11
sS'block_loop.thisTrial'
p3956
Nsg70
Vn
sS'block_loop.thisTrialN'
p3957
I0
sg39
F0.89995318667115498
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01\x16\t\x95 '
tRp3958
sa(dp3959
S'trial_loop.thisTrialN'
p3960
I20
sg3633
S'30-spaghetti_hoops.png'
p3961
sS'block_loop.thisIndex'
p3962
g3627
sg38
S'right'
p3963
sg59
g63
sS'trial_loop.thisN'
p3964
I20
sg33
S'30-spaghetti_hoops.png'
p3965
sg64
g65
sS'trial_loop.thisIndex'
p3966
g60
(g99
S'\x14\x00\x00\x00'
tRp3967
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3968
I0
sg3642
S'19-caramello_redo.png'
p3969
sS'block_loop.thisRepN'
p3970
I1
sg3645
S'19-caramello_redo.png'
p3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3972
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p3973
Nsg70
Vn
sS'block_loop.thisTrialN'
p3974
I0
sg39
F1.0169283499471931
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01\x1c\x08{\xe0'
tRp3975
sa(dp3976
S'trial_loop.thisTrialN'
p3977
I21
sg3633
g3944
sS'block_loop.thisIndex'
p3978
g3627
sg38
S'left'
p3979
sg59
g63
sS'trial_loop.thisN'
p3980
I21
sg33
g3955
sg64
g65
sS'trial_loop.thisIndex'
p3981
g60
(g99
S'\x15\x00\x00\x00'
tRp3982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3983
I0
sg3642
g3952
sS'block_loop.thisRepN'
p3984
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3985
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p3986
Nsg70
Vn
sS'block_loop.thisTrialN'
p3987
I0
sg39
F1.0832490389293525
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01"\tJ\xe8'
tRp3988
sa(dp3989
S'trial_loop.thisTrialN'
p3990
I22
sg3633
S'38-maltesers.png'
p3991
sS'block_loop.thisIndex'
p3992
g3627
sg38
S'right'
p3993
sg59
g63
sS'trial_loop.thisN'
p3994
I22
sg33
g3845
sg64
g65
sS'trial_loop.thisIndex'
p3995
g60
(g99
S'\x16\x00\x00\x00'
tRp3996
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3997
I0
sg3642
S'6-sour_patch_kids.png'
p3998
sS'block_loop.thisRepN'
p3999
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4000
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p4001
Nsg70
Vn
sS'block_loop.thisTrialN'
p4002
I0
sg39
F1.4663648223768178
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01(\x0b\x0c '
tRp4003
sa(dp4004
S'trial_loop.thisTrialN'
p4005
I23
sg3633
g3654
sS'block_loop.thisIndex'
p4006
g3627
sg38
S'left'
p4007
sg59
g63
sS'trial_loop.thisN'
p4008
I23
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4009
g60
(g99
S'\x17\x00\x00\x00'
tRp4010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4011
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4012
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4013
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4014
Nsg70
Vn
sS'block_loop.thisTrialN'
p4015
I0
sg39
F0.84991994407482707
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01/\x03~\x88'
tRp4016
sa(dp4017
S'trial_loop.thisTrialN'
p4018
I24
sg3633
S'13-mccoys_steak_crisps.png'
p4019
sS'block_loop.thisIndex'
p4020
g3627
sg38
S'right'
p4021
sg59
g63
sS'trial_loop.thisN'
p4022
I24
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4023
g60
(g99
S'\x18\x00\x00\x00'
tRp4024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4025
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4026
sS'block_loop.thisRepN'
p4027
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4028
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p4029
Nsg70
Vn
sS'block_loop.thisTrialN'
p4030
I0
sg39
F0.94991201830998762
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x015\x01\xad\xb0'
tRp4031
sa(dp4032
S'trial_loop.thisTrialN'
p4033
I25
sg3633
g3961
sS'block_loop.thisIndex'
p4034
g3627
sg38
S'right'
p4035
sg59
g63
sS'trial_loop.thisN'
p4036
I25
sg33
g3971
sg64
g65
sS'trial_loop.thisIndex'
p4037
g60
(g99
S'\x19\x00\x00\x00'
tRp4038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4039
I0
sg3642
g3969
sS'block_loop.thisRepN'
p4040
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4041
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p4042
Nsg70
Vn
sS'block_loop.thisTrialN'
p4043
I0
sg39
F0.86663560983288335
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x01;\x01L\x08'
tRp4044
sa(dp4045
S'trial_loop.thisTrialN'
p4046
I26
sg3633
S'7-olives.png'
p4047
sS'block_loop.thisIndex'
p4048
g3627
sg38
S'right'
p4049
sg59
g63
sS'trial_loop.thisN'
p4050
I26
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4051
g60
(g99
S'\x1a\x00\x00\x00'
tRp4052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4053
I0
sg3642
S'22-daim.png'
p4054
sS'block_loop.thisRepN'
p4055
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4056
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4057
Nsg70
Vn
sS'block_loop.thisTrialN'
p4058
I0
sg39
F0.95001779020549293
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02\x04\x0f6\x88'
tRp4059
sa(dp4060
S'trial_loop.thisTrialN'
p4061
I27
sg3633
S'1-treacle_cookies.png'
p4062
sS'block_loop.thisIndex'
p4063
g3627
sg38
S'right'
p4064
sg59
g63
sS'trial_loop.thisN'
p4065
I27
sg33
S'21-nakd_banana_crunch.png'
p4066
sg64
g65
sS'trial_loop.thisIndex'
p4067
g60
(g99
S'\x1b\x00\x00\x00'
tRp4068
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4069
I0
sg3642
S'21-nakd_banana_crunch.png'
p4070
sS'block_loop.thisRepN'
p4071
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4072
I1
sg3648
S'1-treacle_cookies.png'
p4073
sg55
g11
sS'block_loop.thisTrial'
p4074
Nsg70
Vn
sS'block_loop.thisTrialN'
p4075
I0
sg39
F1.1832565085360329
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02\n\x0e\xd4\xe0'
tRp4076
sa(dp4077
S'trial_loop.thisTrialN'
p4078
I28
sg3633
S'19-caramello_redo.png'
p4079
sS'block_loop.thisIndex'
p4080
g3627
sg38
S'left'
p4081
sg59
g63
sS'trial_loop.thisN'
p4082
I28
sg33
g3965
sg64
g65
sS'trial_loop.thisIndex'
p4083
g60
(g99
S'\x1c\x00\x00\x00'
tRp4084
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4085
I0
sg3642
S'30-spaghetti_hoops.png'
p4086
sS'block_loop.thisRepN'
p4087
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4088
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p4089
Nsg70
Vn
sS'block_loop.thisTrialN'
p4090
I0
sg39
F1.0332631228420723
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02\x11\x03\x01\x88'
tRp4091
sa(dp4092
S'trial_loop.thisTrialN'
p4093
I29
sg3633
S'20-fruit_pastilles.png'
p4094
sS'block_loop.thisIndex'
p4095
g3627
sg38
S'right'
p4096
sg59
g63
sS'trial_loop.thisN'
p4097
I29
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4098
g60
(g99
S'\x1d\x00\x00\x00'
tRp4099
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4100
I0
sg3642
S'2-steamed_puddings.png'
p4101
sS'block_loop.thisRepN'
p4102
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4103
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p4104
Nsg70
Vn
sS'block_loop.thisTrialN'
p4105
I0
sg39
F0.93331096252950374
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02\x17\x04\x0b('
tRp4106
sa(dp4107
S'trial_loop.thisTrialN'
p4108
I30
sg3633
g3961
sS'block_loop.thisIndex'
p4109
g3627
sg38
S'right'
p4110
sg59
g63
sS'trial_loop.thisN'
p4111
I30
sg33
g3971
sg64
g65
sS'trial_loop.thisIndex'
p4112
g60
(g99
S'\x1e\x00\x00\x00'
tRp4113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4114
I0
sg3642
g3969
sS'block_loop.thisRepN'
p4115
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4116
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p4117
Nsg70
Vn
sS'block_loop.thisTrialN'
p4118
I0
sg39
F0.81661092022113735
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02\x1d\x03k\x00'
tRp4119
sa(dp4120
S'trial_loop.thisTrialN'
p4121
I31
sg3633
S'21-nakd_banana_crunch.png'
p4122
sS'block_loop.thisIndex'
p4123
g3627
sg38
S'left'
p4124
sg59
g63
sS'trial_loop.thisN'
p4125
I31
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p4126
g60
(g99
S'\x1f\x00\x00\x00'
tRp4127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4128
I0
sg3642
S'1-treacle_cookies.png'
p4129
sS'block_loop.thisRepN'
p4130
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4131
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p4132
Nsg70
Vn
sS'block_loop.thisTrialN'
p4133
I0
sg39
F0.81657072119924123
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02#\x01!\x10'
tRp4134
sa(dp4135
S'trial_loop.thisTrialN'
p4136
I32
sg3633
g4094
sS'block_loop.thisIndex'
p4137
g3627
sg38
S'right'
p4138
sg59
g63
sS'trial_loop.thisN'
p4139
I32
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4140
g60
(g99
S' \x00\x00\x00'
tRp4141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4142
I0
sg3642
g4101
sS'block_loop.thisRepN'
p4143
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vn
sS'block_loop.thisTrialN'
p4146
I0
sg39
F0.74993243143035215
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02(\x0e\x19`'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
g3671
sS'block_loop.thisIndex'
p4150
g3627
sg38
S'left'
p4151
sg59
g63
sS'trial_loop.thisN'
p4152
I33
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4153
g60
(g99
S'!\x00\x00\x00'
tRp4154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4155
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4156
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4157
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg70
Vn
sS'block_loop.thisTrialN'
p4159
I0
sg39
F0.71662739896964922
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02.\n\xdd@'
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I34
sg3633
g3737
sS'block_loop.thisIndex'
p4163
g3627
sg38
S'right'
p4164
sg59
g63
sS'trial_loop.thisN'
p4165
I34
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4166
g60
(g99
S'"\x00\x00\x00'
tRp4167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4168
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4169
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4170
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p4171
Nsg70
Vn
sS'block_loop.thisTrialN'
p4172
I0
sg39
F1.0164947136863702
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x024\x06\xe9\x88'
tRp4173
sa(dp4174
S'trial_loop.thisTrialN'
p4175
I35
sg3633
g3805
sS'block_loop.thisIndex'
p4176
g3627
sg38
S'left'
p4177
sg59
g63
sS'trial_loop.thisN'
p4178
I35
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p4179
g60
(g99
S'#\x00\x00\x00'
tRp4180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4181
I0
sg3642
g3813
sS'block_loop.thisRepN'
p4182
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4183
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p4184
Nsg70
Vn
sS'block_loop.thisTrialN'
p4185
I0
sg39
F1.1332204149457539
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x02:\x07\xb4\xa8'
tRp4186
sa(dp4187
S'trial_loop.thisTrialN'
p4188
I36
sg3633
g4079
sS'block_loop.thisIndex'
p4189
g3627
sg38
S'left'
p4190
sg59
g63
sS'trial_loop.thisN'
p4191
I36
sg33
g3965
sg64
g65
sS'trial_loop.thisIndex'
p4192
g60
(g99
S'$\x00\x00\x00'
tRp4193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4194
I0
sg3642
g4086
sS'block_loop.thisRepN'
p4195
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4196
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p4197
Nsg70
Vn
sS'block_loop.thisTrialN'
p4198
I0
sg39
F0.80003523829145706
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03\x04\n-x'
tRp4199
sa(dp4200
S'trial_loop.thisTrialN'
p4201
I37
sg3633
g3634
sS'block_loop.thisIndex'
p4202
g3627
sg38
S'right'
p4203
sg59
g63
sS'trial_loop.thisN'
p4204
I37
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4205
g60
(g99
S'%\x00\x00\x00'
tRp4206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4207
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4208
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4209
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4210
Nsg70
Vn
sS'block_loop.thisTrialN'
p4211
I0
sg39
F0.96658548935101862
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03\n\x07\xa8\xf0'
tRp4212
sa(dp4213
S'trial_loop.thisTrialN'
p4214
I38
sg3633
S'46-pistachios.png'
p4215
sS'block_loop.thisIndex'
p4216
g3627
sg38
S'right'
p4217
sg59
g63
sS'trial_loop.thisN'
p4218
I38
sg33
S'46-pistachios.png'
p4219
sg64
g65
sS'trial_loop.thisIndex'
p4220
g60
(g99
S'&\x00\x00\x00'
tRp4221
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4222
I0
sg3642
S'29-beans.png'
p4223
sS'block_loop.thisRepN'
p4224
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4225
I1
sg3648
S'29-beans.png'
p4226
sg55
g11
sS'block_loop.thisTrial'
p4227
Nsg70
Vn
sS'block_loop.thisTrialN'
p4228
I0
sg39
F0.89991526844460168
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03\x10\x07\xc0`'
tRp4229
sa(dp4230
S'trial_loop.thisTrialN'
p4231
I39
sg3633
S'50-polo.png'
p4232
sS'block_loop.thisIndex'
p4233
g3627
sg38
S'right'
p4234
sg59
g63
sS'trial_loop.thisN'
p4235
I39
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4236
g60
(g99
S"'\x00\x00\x00"
tRp4237
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4238
I0
sg3642
S'48-twix.png'
p4239
sS'block_loop.thisRepN'
p4240
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4241
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p4242
Nsg70
Vn
sS'block_loop.thisTrialN'
p4243
I0
sg39
F0.81669217356375157
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03\x16\x06\xa7 '
tRp4244
sa(dp4245
S'trial_loop.thisTrialN'
p4246
I40
sg3633
g3944
sS'block_loop.thisIndex'
p4247
g3627
sg38
S'left'
p4248
sg59
g63
sS'trial_loop.thisN'
p4249
I40
sg33
g3948
sg64
g65
sS'trial_loop.thisIndex'
p4250
g60
(g99
S'(\x00\x00\x00'
tRp4251
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4252
I0
sg3642
g3952
sS'block_loop.thisRepN'
p4253
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4254
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p4255
Nsg70
Vn
sS'block_loop.thisTrialN'
p4256
I0
sg39
F1.1833537274469563
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03\x1c\x04]0'
tRp4257
sa(dp4258
S'trial_loop.thisTrialN'
p4259
I41
sg3633
S'16-skips_prawn.png'
p4260
sS'block_loop.thisIndex'
p4261
g3627
sg38
S'right'
p4262
sg59
g63
sS'trial_loop.thisN'
p4263
I41
sg33
S'42-mrkipling_lemon_slices.png'
p4264
sg64
g65
sS'trial_loop.thisIndex'
p4265
g60
(g99
S')\x00\x00\x00'
tRp4266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4267
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p4268
sS'block_loop.thisRepN'
p4269
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4270
I1
sg3648
S'16-skips_prawn.png'
p4271
sg55
g11
sS'block_loop.thisTrial'
p4272
Nsg70
Vn
sS'block_loop.thisTrialN'
p4273
I0
sg39
F1.0165483123819286
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03"\x07\xc80'
tRp4274
sa(dp4275
S'trial_loop.thisTrialN'
p4276
I42
sg3633
S'36-fig_rolls.png'
p4277
sS'block_loop.thisIndex'
p4278
g3627
sg38
S'right'
p4279
sg59
g63
sS'trial_loop.thisN'
p4280
I42
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p4281
sg64
g65
sS'trial_loop.thisIndex'
p4282
g60
(g99
S'*\x00\x00\x00'
tRp4283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4284
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4285
sS'block_loop.thisRepN'
p4286
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4287
I1
sg3648
S'36-fig_rolls.png'
p4288
sg55
g11
sS'block_loop.thisTrial'
p4289
Nsg70
Vn
sS'block_loop.thisTrialN'
p4290
I0
sg39
F1.4831540437935473
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03(\x08\x978'
tRp4291
sa(dp4292
S'trial_loop.thisTrialN'
p4293
I43
sg3633
g4260
sS'block_loop.thisIndex'
p4294
g3627
sg38
S'right'
p4295
sg59
g63
sS'trial_loop.thisN'
p4296
I43
sg33
g4271
sg64
g65
sS'trial_loop.thisIndex'
p4297
g60
(g99
S'+\x00\x00\x00'
tRp4298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4299
I0
sg3642
g4268
sS'block_loop.thisRepN'
p4300
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4301
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p4302
Nsg70
Vn
sS'block_loop.thisTrialN'
p4303
I0
sg39
F0.98326580277716857
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03/\x01\t\xa0'
tRp4304
sa(dp4305
S'trial_loop.thisTrialN'
p4306
I44
sg3633
S'29-beans.png'
p4307
sS'block_loop.thisIndex'
p4308
g3627
sg38
S'left'
p4309
sg59
g63
sS'trial_loop.thisN'
p4310
I44
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p4311
g60
(g99
S',\x00\x00\x00'
tRp4312
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4313
I0
sg3642
S'46-pistachios.png'
p4314
sS'block_loop.thisRepN'
p4315
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4316
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p4317
Nsg70
Vn
sS'block_loop.thisTrialN'
p4318
I0
sg39
F1.0999920742351605
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x035\x01_\x90'
tRp4319
sa(dp4320
S'trial_loop.thisTrialN'
p4321
I45
sg3633
g4122
sS'block_loop.thisIndex'
p4322
g3627
sg38
S'left'
p4323
sg59
g63
sS'trial_loop.thisN'
p4324
I45
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p4325
g60
(g99
S'-\x00\x00\x00'
tRp4326
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4327
I0
sg3642
g4129
sS'block_loop.thisRepN'
p4328
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4329
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p4330
Nsg70
Vn
sS'block_loop.thisTrialN'
p4331
I0
sg39
F0.86667951514846209
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x03;\x03_H'
tRp4332
sa(dp4333
S'trial_loop.thisTrialN'
p4334
I46
sg3633
g3910
sS'block_loop.thisIndex'
p4335
g3627
sg38
S'left'
p4336
sg59
g63
sS'trial_loop.thisN'
p4337
I46
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p4338
g60
(g99
S'.\x00\x00\x00'
tRp4339
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4340
I0
sg3642
g3918
sS'block_loop.thisRepN'
p4341
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4342
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p4343
Nsg70
Vn
sS'block_loop.thisTrialN'
p4344
I0
sg39
F1.8333402707530695
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x04\x05\x01\xcc\xf0'
tRp4345
sa(dp4346
S'trial_loop.thisTrialN'
p4347
I47
sg3633
g3788
sS'block_loop.thisIndex'
p4348
g3627
sg38
S'right'
p4349
sg59
g63
sS'trial_loop.thisN'
p4350
I47
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4351
g60
(g99
S'/\x00\x00\x00'
tRp4352
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4353
I0
sg3642
g3796
sS'block_loop.thisRepN'
p4354
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4355
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p4356
Nsg70
Vn
sS'block_loop.thisTrialN'
p4357
I0
sg39
F0.96672062648849533
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x04\x0b\x0f6\x88'
tRp4358
sa(dp4359
S'trial_loop.thisTrialN'
p4360
I48
sg3633
g3910
sS'block_loop.thisIndex'
p4361
g3627
sg38
S'left'
p4362
sg59
g63
sS'trial_loop.thisN'
p4363
I48
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p4364
g60
(g99
S'0\x00\x00\x00'
tRp4365
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4366
I0
sg3642
g3918
sS'block_loop.thisRepN'
p4367
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4368
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p4369
Nsg70
Vn
sS'block_loop.thisTrialN'
p4370
I0
sg39
F1.4999136148671823
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x04\x11\x0f\x13`'
tRp4371
sa(dp4372
S'trial_loop.thisTrialN'
p4373
I49
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4374
sS'block_loop.thisIndex'
p4375
g3627
sg38
S'left'
p4376
sg59
g63
sS'trial_loop.thisN'
p4377
I49
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4378
g60
(g99
S'1\x00\x00\x00'
tRp4379
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4380
I0
sg3642
S'36-fig_rolls.png'
p4381
sS'block_loop.thisRepN'
p4382
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4383
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p4384
Nsg70
Vn
sS'block_loop.thisTrialN'
p4385
I0
sg39
F1.0831067743056337
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x04\x18\x07\xfe\xe0'
tRp4386
sa(dp4387
S'trial_loop.thisTrialN'
p4388
I50
sg3633
g3654
sS'block_loop.thisIndex'
p4389
g3627
sg38
S'left'
p4390
sg59
g63
sS'trial_loop.thisN'
p4391
I50
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4392
g60
(g99
S'2\x00\x00\x00'
tRp4393
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4394
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4395
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4396
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4397
Nsg70
Vn
sS'block_loop.thisTrialN'
p4398
I0
sg39
F0.96667215958223096
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x04\x1e\t\xc0\x18'
tRp4399
sa(dp4400
S'trial_loop.thisTrialN'
p4401
I51
sg3633
S'31-hobnobs.png'
p4402
sS'block_loop.thisIndex'
p4403
g3627
sg38
S'right'
p4404
sg59
g63
sS'trial_loop.thisN'
p4405
I51
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p4406
g60
(g99
S'3\x00\x00\x00'
tRp4407
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4408
I0
sg3642
S'25-kitkat.png'
p4409
sS'block_loop.thisRepN'
p4410
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4411
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p4412
Nsg70
Vn
sS'block_loop.thisTrialN'
p4413
I0
sg39
F0.96706559682206716
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x04$\t\xd7\x88'
tRp4414
sa(dp4415
S'trial_loop.thisTrialN'
p4416
I52
sg3633
S'44-crunch.png'
p4417
sS'block_loop.thisIndex'
p4418
g3627
sg38
S'left'
p4419
sg59
g63
sS'trial_loop.thisN'
p4420
I52
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4421
g60
(g99
S'4\x00\x00\x00'
tRp4422
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4423
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4424
sS'block_loop.thisRepN'
p4425
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4426
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p4427
Nsg70
Vn
sS'block_loop.thisTrialN'
p4428
I0
sg39
F0.84990854009720351
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x04*\t\xb4`'
tRp4429
sa(dp4430
S'trial_loop.thisTrialN'
p4431
I53
sg3633
g4019
sS'block_loop.thisIndex'
p4432
g3627
sg38
S'right'
p4433
sg59
g63
sS'trial_loop.thisN'
p4434
I53
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4435
g60
(g99
S'5\x00\x00\x00'
tRp4436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4437
I0
sg3642
g4026
sS'block_loop.thisRepN'
p4438
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4439
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p4440
Nsg70
Vn
sS'block_loop.thisTrialN'
p4441
I0
sg39
F0.9665911913398304
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x040\x07\xe3\x88'
tRp4442
sa(dp4443
S'trial_loop.thisTrialN'
p4444
I54
sg3633
g4307
sS'block_loop.thisIndex'
p4445
g3627
sg38
S'left'
p4446
sg59
g63
sS'trial_loop.thisN'
p4447
I54
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p4448
g60
(g99
S'6\x00\x00\x00'
tRp4449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4450
I0
sg3642
g4314
sS'block_loop.thisRepN'
p4451
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4452
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p4453
Nsg70
Vn
sS'block_loop.thisTrialN'
p4454
I0
sg39
F0.8999238214273646
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x046\x07\xfa\xf8'
tRp4455
sa(dp4456
S'trial_loop.thisTrialN'
p4457
I55
sg3633
g3754
sS'block_loop.thisIndex'
p4458
g3627
sg38
S'left'
p4459
sg59
g63
sS'trial_loop.thisN'
p4460
I55
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4461
g60
(g99
S'7\x00\x00\x00'
tRp4462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4463
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4464
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4465
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p4466
Nsg70
Vn
sS'block_loop.thisTrialN'
p4467
I0
sg39
F0.96664479003538872
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05\x00\x06\xe1\xb8'
tRp4468
sa(dp4469
S'trial_loop.thisTrialN'
p4470
I56
sg3633
S'42-mrkipling_lemon_slices.png'
p4471
sS'block_loop.thisIndex'
p4472
g3627
sg38
S'left'
p4473
sg59
g63
sS'trial_loop.thisN'
p4474
I56
sg33
g4264
sg64
g65
sS'trial_loop.thisIndex'
p4475
g60
(g99
S'8\x00\x00\x00'
tRp4476
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4477
I0
sg3642
S'16-skips_prawn.png'
p4478
sS'block_loop.thisRepN'
p4479
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4480
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p4481
Nsg70
Vn
sS'block_loop.thisTrialN'
p4482
I0
sg39
F0.93314189855664154
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05\x06\x06\xf9('
tRp4483
sa(dp4484
S'trial_loop.thisTrialN'
p4485
I57
sg3633
g4232
sS'block_loop.thisIndex'
p4486
g3627
sg38
S'right'
p4487
sg59
g63
sS'trial_loop.thisN'
p4488
I57
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4489
g60
(g99
S'9\x00\x00\x00'
tRp4490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4491
I0
sg3642
g4239
sS'block_loop.thisRepN'
p4492
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4493
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p4494
Nsg70
Vn
sS'block_loop.thisTrialN'
p4495
I0
sg39
F0.76702015196951834
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05\x0c\x06Y\x00'
tRp4496
sa(dp4497
S'trial_loop.thisTrialN'
p4498
I58
sg3633
g4277
sS'block_loop.thisIndex'
p4499
g3627
sg38
S'right'
p4500
sg59
g63
sS'trial_loop.thisN'
p4501
I58
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4502
g60
(g99
S':\x00\x00\x00'
tRp4503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4504
I0
sg3642
g4285
sS'block_loop.thisRepN'
p4505
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4506
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p4507
Nsg70
Vn
sS'block_loop.thisTrialN'
p4508
I0
sg39
F0.83325759191302495
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05\x12\x03Wx'
tRp4509
sa(dp4510
S'trial_loop.thisTrialN'
p4511
I59
sg3633
g4122
sS'block_loop.thisIndex'
p4512
g3627
sg38
S'left'
p4513
sg59
g63
sS'trial_loop.thisN'
p4514
I59
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p4515
g60
(g99
S';\x00\x00\x00'
tRp4516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4517
I0
sg3642
g4129
sS'block_loop.thisRepN'
p4518
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4519
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p4520
Nsg70
Vn
sS'block_loop.thisTrialN'
p4521
I0
sg39
F0.84989856161701027
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05\x18\x01L\x08'
tRp4522
sa(dp4523
S'trial_loop.thisTrialN'
p4524
I60
sg3633
g3688
sS'block_loop.thisIndex'
p4525
g3627
sg38
S'left'
p4526
sg59
g63
sS'trial_loop.thisN'
p4527
I60
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4528
g60
(g99
S'<\x00\x00\x00'
tRp4529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4530
I0
sg3642
g3695
sS'block_loop.thisRepN'
p4531
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4532
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4533
Nsg70
Vn
sS'block_loop.thisTrialN'
p4534
I0
sg39
F0.81670414774089295
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05\x1d\x0e\xbdp'
tRp4535
sa(dp4536
S'trial_loop.thisTrialN'
p4537
I61
sg3633
S'40-sardines.png'
p4538
sS'block_loop.thisIndex'
p4539
g3627
sg38
S'right'
p4540
sg59
g63
sS'trial_loop.thisN'
p4541
I61
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4542
g60
(g99
S'=\x00\x00\x00'
tRp4543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4544
I0
sg3642
S'5-pineapple.png'
p4545
sS'block_loop.thisRepN'
p4546
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4547
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p4548
Nsg70
Vn
sS'block_loop.thisTrialN'
p4549
I0
sg39
F0.75004419041488291
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05#\x0cs\x80'
tRp4550
sa(dp4551
S'trial_loop.thisTrialN'
p4552
I62
sg3633
g3688
sS'block_loop.thisIndex'
p4553
g3627
sg38
S'left'
p4554
sg59
g63
sS'trial_loop.thisN'
p4555
I62
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4556
g60
(g99
S'>\x00\x00\x00'
tRp4557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4558
I0
sg3642
g3695
sS'block_loop.thisRepN'
p4559
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4560
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4561
Nsg70
Vn
sS'block_loop.thisTrialN'
p4562
I0
sg39
F0.69999754814489279
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05)\t7`'
tRp4563
sa(dp4564
S'trial_loop.thisTrialN'
p4565
I63
sg3633
g4307
sS'block_loop.thisIndex'
p4566
g3627
sg38
S'left'
p4567
sg59
g63
sS'trial_loop.thisN'
p4568
I63
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p4569
g60
(g99
S'?\x00\x00\x00'
tRp4570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4571
I0
sg3642
g4314
sS'block_loop.thisRepN'
p4572
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4573
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p4574
Nsg70
Vn
sS'block_loop.thisTrialN'
p4575
I0
sg39
F1.4004466938158657
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05/\x05C\xa8'
tRp4576
sa(dp4577
S'trial_loop.thisTrialN'
p4578
I64
sg3633
g4079
sS'block_loop.thisIndex'
p4579
g3627
sg38
S'left'
p4580
sg59
g63
sS'trial_loop.thisN'
p4581
I64
sg33
g3965
sg64
g65
sS'trial_loop.thisIndex'
p4582
g60
(g99
S'@\x00\x00\x00'
tRp4583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4584
I0
sg3642
g4086
sS'block_loop.thisRepN'
p4585
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4586
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p4587
Nsg70
Vn
sS'block_loop.thisTrialN'
p4588
I0
sg39
F1.0666191881055056
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x055\x0b\xc7\xa0'
tRp4589
sa(dp4590
S'trial_loop.thisTrialN'
p4591
I65
sg3633
g4277
sS'block_loop.thisIndex'
p4592
g3627
sg38
S'right'
p4593
sg59
g63
sS'trial_loop.thisN'
p4594
I65
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4595
g60
(g99
S'A\x00\x00\x00'
tRp4596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4597
I0
sg3642
g4285
sS'block_loop.thisRepN'
p4598
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4599
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p4600
Nsg70
Vn
sS'block_loop.thisTrialN'
p4601
I0
sg39
F0.81665767653066723
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x05;\rJX'
tRp4602
sa(dp4603
S'trial_loop.thisTrialN'
p4604
I66
sg3633
g4047
sS'block_loop.thisIndex'
p4605
g3627
sg38
S'right'
p4606
sg59
g63
sS'trial_loop.thisN'
p4607
I66
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4608
g60
(g99
S'B\x00\x00\x00'
tRp4609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4610
I0
sg3642
g4054
sS'block_loop.thisRepN'
p4611
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4612
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4613
Nsg70
Vn
sS'block_loop.thisTrialN'
p4614
I0
sg39
F0.98333337134681642
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x06\x05\x0b\x00h'
tRp4615
sa(dp4616
S'trial_loop.thisTrialN'
p4617
I67
sg3633
S'8-liquorice_catherine_wheels.png'
p4618
sS'block_loop.thisIndex'
p4619
g3627
sg38
S'right'
p4620
sg59
g63
sS'trial_loop.thisN'
p4621
I67
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p4622
g60
(g99
S'C\x00\x00\x00'
tRp4623
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4624
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4625
sS'block_loop.thisRepN'
p4626
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4627
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p4628
Nsg70
Vn
sS'block_loop.thisTrialN'
p4629
I0
sg39
F1.1833326300875342
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x06\x0b\x0bVX'
tRp4630
sa(dp4631
S'trial_loop.thisTrialN'
p4632
I68
sg3633
g3835
sS'block_loop.thisIndex'
p4633
g3627
sg38
S'left'
p4634
sg59
g63
sS'trial_loop.thisN'
p4635
I68
sg33
g3845
sg64
g65
sS'trial_loop.thisIndex'
p4636
g60
(g99
S'D\x00\x00\x00'
tRp4637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4638
I0
sg3642
g3843
sS'block_loop.thisRepN'
p4639
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4640
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p4641
Nsg70
Vn
sS'block_loop.thisTrialN'
p4642
I0
sg39
F2.2328914672016253
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x06\x11\x0e\x86\xc0'
tRp4643
sa(dp4644
S'trial_loop.thisTrialN'
p4645
I69
sg3633
g3869
sS'block_loop.thisIndex'
p4646
g3627
sg38
S'left'
p4647
sg59
g63
sS'trial_loop.thisN'
p4648
I69
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p4649
g60
(g99
S'E\x00\x00\x00'
tRp4650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4651
I0
sg3642
g3876
sS'block_loop.thisRepN'
p4652
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4653
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p4654
Nsg70
Vn
sS'block_loop.thisTrialN'
p4655
I0
sg39
F0.86659655120911339
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x06\x19\x03_H'
tRp4656
sa(dp4657
S'trial_loop.thisTrialN'
p4658
I70
sg3633
g3654
sS'block_loop.thisIndex'
p4659
g3627
sg38
S'left'
p4660
sg59
g63
sS'trial_loop.thisN'
p4661
I70
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4662
g60
(g99
S'F\x00\x00\x00'
tRp4663
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4664
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4665
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4666
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4667
Nsg70
Vn
sS'block_loop.thisTrialN'
p4668
I0
sg39
F0.81661747750877112
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x06\x1f\x01\xcc\xf0'
tRp4669
sa(dp4670
S'trial_loop.thisTrialN'
p4671
I71
sg3633
g4232
sS'block_loop.thisIndex'
p4672
g3627
sg38
S'right'
p4673
sg59
g63
sS'trial_loop.thisN'
p4674
I71
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4675
g60
(g99
S'G\x00\x00\x00'
tRp4676
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4677
I0
sg3642
g4239
sS'block_loop.thisRepN'
p4678
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4679
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p4680
Nsg70
Vn
sS'block_loop.thisTrialN'
p4681
I0
sg39
F1.0166962789953686
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x06$\x0e\xc5@'
tRp4682
sa(dp4683
S'trial_loop.thisTrialN'
p4684
I72
sg3633
g3852
sS'block_loop.thisIndex'
p4685
g3627
sg38
S'left'
p4686
sg59
g63
sS'trial_loop.thisN'
p4687
I72
sg33
g3856
sg64
g65
sS'trial_loop.thisIndex'
p4688
g60
(g99
S'H\x00\x00\x00'
tRp4689
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4690
I0
sg3642
g3860
sS'block_loop.thisRepN'
p4691
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4692
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p4693
Nsg70
Vn
sS'block_loop.thisTrialN'
p4694
I0
sg39
F0.93325223204374197
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x06+\x00R\x08'
tRp4695
sa(dp4696
S'trial_loop.thisTrialN'
p4697
I73
sg3633
S'45-chewy_nougat_redo.png'
p4698
sS'block_loop.thisIndex'
p4699
g3627
sg38
S'right'
p4700
sg59
g63
sS'trial_loop.thisN'
p4701
I73
sg33
g3948
sg64
g65
sS'trial_loop.thisIndex'
p4702
g60
(g99
S'I\x00\x00\x00'
tRp4703
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4704
I0
sg3642
S'41-peanuts_redo.png'
p4705
sS'block_loop.thisRepN'
p4706
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4707
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p4708
Nsg70
Vn
sS'block_loop.thisTrialN'
p4709
I0
sg39
F1.1332420825028748
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x060\x0f2\xa0'
tRp4710
sa(dp4711
S'trial_loop.thisTrialN'
p4712
I74
sg3633
g4402
sS'block_loop.thisIndex'
p4713
g3627
sg38
S'right'
p4714
sg59
g63
sS'trial_loop.thisN'
p4715
I74
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p4716
g60
(g99
S'J\x00\x00\x00'
tRp4717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4718
I0
sg3642
g4409
sS'block_loop.thisRepN'
p4719
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4720
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p4721
Nsg70
Vn
sS'block_loop.thisTrialN'
p4722
I0
sg39
F1.1332751540394383
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x067\x02i0'
tRp4723
sa(dp4724
S'trial_loop.thisTrialN'
p4725
I75
sg3633
g3805
sS'block_loop.thisIndex'
p4726
g3627
sg38
S'left'
p4727
sg59
g63
sS'trial_loop.thisN'
p4728
I75
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p4729
g60
(g99
S'K\x00\x00\x00'
tRp4730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4731
I0
sg3642
g3813
sS'block_loop.thisRepN'
p4732
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4733
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p4734
Nsg70
Vn
sS'block_loop.thisTrialN'
p4735
I0
sg39
F1.1500381463056328
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x07\x01\x04\xe2\x00'
tRp4736
sa(dp4737
S'trial_loop.thisTrialN'
p4738
I76
sg3633
g3720
sS'block_loop.thisIndex'
p4739
g3627
sg38
S'right'
p4740
sg59
g63
sS'trial_loop.thisN'
p4741
I76
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p4742
g60
(g99
S'L\x00\x00\x00'
tRp4743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4744
I0
sg3642
g3728
sS'block_loop.thisRepN'
p4745
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4746
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p4747
Nsg70
Vn
sS'block_loop.thisTrialN'
p4748
I0
sg39
F1.4332222966013433
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x07\x07\x07\xd3\xe8'
tRp4749
sa(dp4750
S'trial_loop.thisTrialN'
p4751
I77
sg3633
g3944
sS'block_loop.thisIndex'
p4752
g3627
sg38
S'left'
p4753
sg59
g63
sS'trial_loop.thisN'
p4754
I77
sg33
g3948
sg64
g65
sS'trial_loop.thisIndex'
p4755
g60
(g99
S'M\x00\x00\x00'
tRp4756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4757
I0
sg3642
g3952
sS'block_loop.thisRepN'
p4758
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4759
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p4760
Nsg70
Vn
sS'block_loop.thisTrialN'
p4761
I0
sg39
F1.7166362370526258
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x07\r\x0e\xd4\xe0'
tRp4762
sa(dp4763
S'trial_loop.thisTrialN'
p4764
I78
sg3633
g4047
sS'block_loop.thisIndex'
p4765
g3627
sg38
S'right'
p4766
sg59
g63
sS'trial_loop.thisN'
p4767
I78
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4768
g60
(g99
S'N\x00\x00\x00'
tRp4769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4770
I0
sg3642
g4054
sS'block_loop.thisRepN'
p4771
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4772
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4773
Nsg70
Vn
sS'block_loop.thisTrialN'
p4774
I0
sg39
F0.8670096603100319
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x07\x14\x0b\x13\xf0'
tRp4775
sa(dp4776
S'trial_loop.thisTrialN'
p4777
I79
sg3633
S'33-ambrosia_rice.png'
p4778
sS'block_loop.thisIndex'
p4779
g3627
sg38
S'left'
p4780
sg59
g63
sS'trial_loop.thisN'
p4781
I79
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p4782
g60
(g99
S'O\x00\x00\x00'
tRp4783
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4784
I0
sg3642
S'23-crunchie_redo.png'
p4785
sS'block_loop.thisRepN'
p4786
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4787
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p4788
Nsg70
Vn
sS'block_loop.thisTrialN'
p4789
I0
sg39
F1.7999679548220229
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x07\x1a\t\x81\x98'
tRp4790
sa(dp4791
S'trial_loop.thisTrialN'
p4792
I80
sg3633
g4417
sS'block_loop.thisIndex'
p4793
g3627
sg38
S'left'
p4794
sg59
g63
sS'trial_loop.thisN'
p4795
I80
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4796
g60
(g99
S'P\x00\x00\x00'
tRp4797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4798
I0
sg3642
g4424
sS'block_loop.thisRepN'
p4799
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4800
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p4801
Nsg70
Vn
sS'block_loop.thisTrialN'
p4802
I0
sg39
F0.91665801865019603
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x07!\x06\xf5@'
tRp4803
sa(dp4804
S'trial_loop.thisTrialN'
p4805
I81
sg3633
g3852
sS'block_loop.thisIndex'
p4806
g3627
sg38
S'left'
p4807
sg59
g63
sS'trial_loop.thisN'
p4808
I81
sg33
g3856
sg64
g65
sS'trial_loop.thisIndex'
p4809
g60
(g99
S'Q\x00\x00\x00'
tRp4810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4811
I0
sg3642
g3860
sS'block_loop.thisRepN'
p4812
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4813
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p4814
Nsg70
Vn
sS'block_loop.thisTrialN'
p4815
I0
sg39
F0.86672712675681396
sg34
g753
(S"\x07\xdf\x07\x0e\x0f\x07'\x06\x1a\x80"
tRp4816
sa(dp4817
S'trial_loop.thisTrialN'
p4818
I82
sg3633
g4698
sS'block_loop.thisIndex'
p4819
g3627
sg38
S'right'
p4820
sg59
g63
sS'trial_loop.thisN'
p4821
I82
sg33
g3948
sg64
g65
sS'trial_loop.thisIndex'
p4822
g60
(g99
S'R\x00\x00\x00'
tRp4823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4824
I0
sg3642
g4705
sS'block_loop.thisRepN'
p4825
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4826
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p4827
Nsg70
Vn
sS'block_loop.thisTrialN'
p4828
I0
sg39
F1.0999356245447416
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x07-\x04\xc2\xc0'
tRp4829
sa(dp4830
S'trial_loop.thisTrialN'
p4831
I83
sg3633
g4047
sS'block_loop.thisIndex'
p4832
g3627
sg38
S'right'
p4833
sg59
g63
sS'trial_loop.thisN'
p4834
I83
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4835
g60
(g99
S'S\x00\x00\x00'
tRp4836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4837
I0
sg3642
g4054
sS'block_loop.thisRepN'
p4838
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4839
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4840
Nsg70
Vn
sS'block_loop.thisTrialN'
p4841
I0
sg39
F0.93344296357372514
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x073\x06\xc2x'
tRp4842
sa(dp4843
S'trial_loop.thisTrialN'
p4844
I84
sg3633
g3991
sS'block_loop.thisIndex'
p4845
g3627
sg38
S'right'
p4846
sg59
g63
sS'trial_loop.thisN'
p4847
I84
sg33
g3845
sg64
g65
sS'trial_loop.thisIndex'
p4848
g60
(g99
S'T\x00\x00\x00'
tRp4849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4850
I0
sg3642
g3998
sS'block_loop.thisRepN'
p4851
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4852
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p4853
Nsg70
Vn
sS'block_loop.thisTrialN'
p4854
I0
sg39
F2.3662766696279505
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x079\x06"P'
tRp4855
sa(dp4856
S'trial_loop.thisTrialN'
p4857
I85
sg3633
g4698
sS'block_loop.thisIndex'
p4858
g3627
sg38
S'right'
p4859
sg59
g63
sS'trial_loop.thisN'
p4860
I85
sg33
g3955
sg64
g65
sS'trial_loop.thisIndex'
p4861
g60
(g99
S'U\x00\x00\x00'
tRp4862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4863
I0
sg3642
g4705
sS'block_loop.thisRepN'
p4864
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4865
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p4866
Nsg70
Vn
sS'block_loop.thisTrialN'
p4867
I0
sg39
F1.0666707911050253
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08\x04\x0cc\xe0'
tRp4868
sa(dp4869
S'trial_loop.thisTrialN'
p4870
I86
sg3633
g3991
sS'block_loop.thisIndex'
p4871
g3627
sg38
S'left'
p4872
sg59
g63
sS'trial_loop.thisN'
p4873
I86
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p4874
g60
(g99
S'V\x00\x00\x00'
tRp4875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4876
I0
sg3642
g3998
sS'block_loop.thisRepN'
p4877
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4878
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p4879
Nsg70
Vn
sS'block_loop.thisTrialN'
p4880
I0
sg39
F0.81630957010474958
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08\n\r\xea\x80'
tRp4881
sa(dp4882
S'trial_loop.thisTrialN'
p4883
I87
sg3633
g4122
sS'block_loop.thisIndex'
p4884
g3627
sg38
S'left'
p4885
sg59
g63
sS'trial_loop.thisN'
p4886
I87
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p4887
g60
(g99
S'W\x00\x00\x00'
tRp4888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4889
I0
sg3642
g4129
sS'block_loop.thisRepN'
p4890
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4891
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p4892
Nsg70
Vn
sS'block_loop.thisTrialN'
p4893
I0
sg39
F1.1499223959299343
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08\x10\x0b\xa0\x90'
tRp4894
sa(dp4895
S'trial_loop.thisTrialN'
p4896
I88
sg3633
g3703
sS'block_loop.thisIndex'
p4897
g3627
sg38
S'left'
p4898
sg59
g63
sS'trial_loop.thisN'
p4899
I88
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4900
g60
(g99
S'X\x00\x00\x00'
tRp4901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4902
I0
sg3642
g3711
sS'block_loop.thisRepN'
p4903
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4904
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p4905
Nsg70
Vn
sS'block_loop.thisTrialN'
p4906
I0
sg39
F0.85012493057820393
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08\x16\x0eS\xf8'
tRp4907
sa(dp4908
S'trial_loop.thisTrialN'
p4909
I89
sg3633
S'4-corn.png'
p4910
sS'block_loop.thisIndex'
p4911
g3627
sg38
S'left'
p4912
sg59
g63
sS'trial_loop.thisN'
p4913
I89
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p4914
g60
(g99
S'Y\x00\x00\x00'
tRp4915
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4916
I0
sg3642
S'10-bounty_redo.png'
p4917
sS'block_loop.thisRepN'
p4918
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4919
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p4920
Nsg70
Vn
sS'block_loop.thisTrialN'
p4921
I0
sg39
F1.3498863023405647
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08\x1c\x0c\x83 '
tRp4922
sa(dp4923
S'trial_loop.thisTrialN'
p4924
I90
sg3633
g3961
sS'block_loop.thisIndex'
p4925
g3627
sg38
S'right'
p4926
sg59
g63
sS'trial_loop.thisN'
p4927
I90
sg33
g3971
sg64
g65
sS'trial_loop.thisIndex'
p4928
g60
(g99
S'Z\x00\x00\x00'
tRp4929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4930
I0
sg3642
g3969
sS'block_loop.thisRepN'
p4931
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4932
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p4933
Nsg70
Vn
sS'block_loop.thisTrialN'
p4934
I0
sg39
F0.89998283701334003
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08#\x03\x11('
tRp4935
sa(dp4936
S'trial_loop.thisTrialN'
p4937
I91
sg3633
g3703
sS'block_loop.thisIndex'
p4938
g3627
sg38
S'left'
p4939
sg59
g63
sS'trial_loop.thisN'
p4940
I91
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p4941
g60
(g99
S'[\x00\x00\x00'
tRp4942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4943
I0
sg3642
g3711
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F1.0499132157283384
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08)\x022\x80'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g4062
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g4070
sS'block_loop.thisRepN'
p4957
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F1.1333273272375664
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08/\x03z\xa0'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g3720
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'right'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g3731
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g3728
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F0.93338223739283421
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x085\x05\xf3p'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g4471
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g4271
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g4478
sS'block_loop.thisRepN'
p4983
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F0.96667244468244462
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x08;\x05W0'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4990
sS'block_loop.thisIndex'
p4991
g3627
sg38
S'right'
p4992
sg59
g63
sS'trial_loop.thisN'
p4993
I95
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p4994
g60
(g99
S'_\x00\x00\x00'
tRp4995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4996
I0
sg3642
S'18-mms.png'
p4997
sS'block_loop.thisRepN'
p4998
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4999
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p5000
Nsg70
Vn
sS'block_loop.thisTrialN'
p5001
I0
sg39
F0.76659820478562324
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t\x05\x05n\xa0'
tRp5002
sa(dp5003
S'trial_loop.thisTrialN'
p5004
I96
sg3633
g3991
sS'block_loop.thisIndex'
p5005
g3627
sg38
S'left'
p5006
sg59
g63
sS'trial_loop.thisN'
p5007
I96
sg33
g3845
sg64
g65
sS'trial_loop.thisIndex'
p5008
g60
(g99
S'`\x00\x00\x00'
tRp5009
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5010
I0
sg3642
g3998
sS'block_loop.thisRepN'
p5011
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5012
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p5013
Nsg70
Vn
sS'block_loop.thisTrialN'
p5014
I0
sg39
F1.4497312652601977
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t\x0b\x02m\x18'
tRp5015
sa(dp5016
S'trial_loop.thisTrialN'
p5017
I97
sg3633
g3720
sS'block_loop.thisIndex'
p5018
g3627
sg38
S'right'
p5019
sg59
g63
sS'trial_loop.thisN'
p5020
I97
sg33
g3731
sg64
g65
sS'trial_loop.thisIndex'
p5021
g60
(g99
S'a\x00\x00\x00'
tRp5022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5023
I0
sg3642
g3728
sS'block_loop.thisRepN'
p5024
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5025
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p5026
Nsg70
Vn
sS'block_loop.thisTrialN'
p5027
I0
sg39
F1.0000210973594221
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t\x11\t\xa8\xa8'
tRp5028
sa(dp5029
S'trial_loop.thisTrialN'
p5030
I98
sg3633
g3754
sS'block_loop.thisIndex'
p5031
g3627
sg38
S'left'
p5032
sg59
g63
sS'trial_loop.thisN'
p5033
I98
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5034
g60
(g99
S'b\x00\x00\x00'
tRp5035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5036
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5037
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5038
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p5039
Nsg70
Vn
sS'block_loop.thisTrialN'
p5040
I0
sg39
F1.0333765924233376
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t\x17\n90'
tRp5041
sa(dp5042
S'trial_loop.thisTrialN'
p5043
I99
sg3633
g4019
sS'block_loop.thisIndex'
p5044
g3627
sg38
S'right'
p5045
sg59
g63
sS'trial_loop.thisN'
p5046
I99
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5047
g60
(g99
S'c\x00\x00\x00'
tRp5048
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5049
I0
sg3642
g4026
sS'block_loop.thisRepN'
p5050
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5051
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p5052
Nsg70
Vn
sS'block_loop.thisTrialN'
p5053
I0
sg39
F0.91668253720308712
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t\x1d\x0bF\xb8'
tRp5054
sa(dp5055
S'trial_loop.thisTrialN'
p5056
I100
sg3633
g4215
sS'block_loop.thisIndex'
p5057
g3627
sg38
S'left'
p5058
sg59
g63
sS'trial_loop.thisN'
p5059
I100
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p5060
g60
(g99
S'd\x00\x00\x00'
tRp5061
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5062
I0
sg3642
g4223
sS'block_loop.thisRepN'
p5063
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5064
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p5065
Nsg70
Vn
sS'block_loop.thisTrialN'
p5066
I0
sg39
F1.3498600731900297
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t#\nh\x10'
tRp5067
sa(dp5068
S'trial_loop.thisTrialN'
p5069
I101
sg3633
g4538
sS'block_loop.thisIndex'
p5070
g3627
sg38
S'right'
p5071
sg59
g63
sS'trial_loop.thisN'
p5072
I101
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5073
g60
(g99
S'e\x00\x00\x00'
tRp5074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5075
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5076
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5077
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p5078
Nsg70
Vn
sS'block_loop.thisTrialN'
p5079
I0
sg39
F0.74993984401589842
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t*\x010\xb0'
tRp5080
sa(dp5081
S'trial_loop.thisTrialN'
p5082
I102
sg3633
g3788
sS'block_loop.thisIndex'
p5083
g3627
sg38
S'right'
p5084
sg59
g63
sS'trial_loop.thisN'
p5085
I102
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5086
g60
(g99
S'f\x00\x00\x00'
tRp5087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5088
I0
sg3642
g3796
sS'block_loop.thisRepN'
p5089
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5090
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p5091
Nsg70
Vn
sS'block_loop.thisTrialN'
p5092
I0
sg39
F1.3833330292272876
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t/\x0c\xf8P'
tRp5093
sa(dp5094
S'trial_loop.thisTrialN'
p5095
I103
sg3633
g4698
sS'block_loop.thisIndex'
p5096
g3627
sg38
S'right'
p5097
sg59
g63
sS'trial_loop.thisN'
p5098
I103
sg33
g3948
sg64
g65
sS'trial_loop.thisIndex'
p5099
g60
(g99
S'g\x00\x00\x00'
tRp5100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5101
I0
sg3642
g4705
sS'block_loop.thisRepN'
p5102
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5103
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p5104
Nsg70
Vn
sS'block_loop.thisTrialN'
p5105
I0
sg39
F0.98370685162444715
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\t6\x04:\x08'
tRp5106
sa(dp5107
S'trial_loop.thisTrialN'
p5108
I104
sg3633
g4062
sS'block_loop.thisIndex'
p5109
g3627
sg38
S'right'
p5110
sg59
g63
sS'trial_loop.thisN'
p5111
I104
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p5112
g60
(g99
S'h\x00\x00\x00'
tRp5113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5114
I0
sg3642
g4070
sS'block_loop.thisRepN'
p5115
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5116
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p5117
Nsg70
Vn
sS'block_loop.thisTrialN'
p5118
I0
sg39
F0.93325080654631165
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n\x00\x04Qx'
tRp5119
sa(dp5120
S'trial_loop.thisTrialN'
p5121
I105
sg3633
g4307
sS'block_loop.thisIndex'
p5122
g3627
sg38
S'right'
p5123
sg59
g63
sS'trial_loop.thisN'
p5124
I105
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p5125
g60
(g99
S'i\x00\x00\x00'
tRp5126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5127
I0
sg3642
g4314
sS'block_loop.thisRepN'
p5128
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5129
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p5130
Nsg70
Vn
sS'block_loop.thisTrialN'
p5131
I0
sg39
F1.1332540566800162
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n\x06\x03\xef\xd0'
tRp5132
sa(dp5133
S'trial_loop.thisTrialN'
p5134
I106
sg3633
g4910
sS'block_loop.thisIndex'
p5135
g3627
sg38
S'left'
p5136
sg59
g63
sS'trial_loop.thisN'
p5137
I106
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5138
g60
(g99
S'j\x00\x00\x00'
tRp5139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5140
I0
sg3642
g4917
sS'block_loop.thisRepN'
p5141
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5142
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p5143
Nsg70
Vn
sS'block_loop.thisTrialN'
p5144
I0
sg39
F1.3666644048771559
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n\x0c\x06h\xa0'
tRp5145
sa(dp5146
S'trial_loop.thisTrialN'
p5147
I107
sg3633
g4471
sS'block_loop.thisIndex'
p5148
g3627
sg38
S'left'
p5149
sg59
g63
sS'trial_loop.thisN'
p5150
I107
sg33
g4264
sg64
g65
sS'trial_loop.thisIndex'
p5151
g60
(g99
S'k\x00\x00\x00'
tRp5152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5153
I0
sg3642
g4478
sS'block_loop.thisRepN'
p5154
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5155
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p5156
Nsg70
Vn
sS'block_loop.thisTrialN'
p5157
I0
sg39
F1.7832180771301864
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n\x12\x0cs\x80'
tRp5158
sa(dp5159
S'trial_loop.thisTrialN'
p5160
I108
sg3633
g4910
sS'block_loop.thisIndex'
p5161
g3627
sg38
S'left'
p5162
sg59
g63
sS'trial_loop.thisN'
p5163
I108
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5164
g60
(g99
S'l\x00\x00\x00'
tRp5165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5166
I0
sg3642
g4917
sS'block_loop.thisRepN'
p5167
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5168
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vn
sS'block_loop.thisTrialN'
p5170
I0
sg39
F3.133310221271131
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n\x19\t\xa8\xa8'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g4778
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'left'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g4785
sS'block_loop.thisRepN'
p5180
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5181
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vn
sS'block_loop.thisTrialN'
p5183
I0
sg39
F1.233294312722137
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n!\x0cT@'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g3852
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'left'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g3860
sS'block_loop.thisRepN'
p5193
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5194
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vn
sS'block_loop.thisTrialN'
p5196
I0
sg39
F0.78334466128490021
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n(\x00\xf6\x18'
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g3788
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'right'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g3796
sS'block_loop.thisRepN'
p5206
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vn
sS'block_loop.thisTrialN'
p5209
I0
sg39
F1.1499152684436922
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n-\ruP'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g3737
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'right'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g3745
sS'block_loop.thisRepN'
p5219
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vn
sS'block_loop.thisTrialN'
p5222
I0
sg39
F1.033353784467181
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n4\x01(\xe0'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g4778
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'left'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g4785
sS'block_loop.thisRepN'
p5232
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vn
sS'block_loop.thisTrialN'
p5235
I0
sg39
F1.4499941269514238
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\n:\x022\x80'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g4277
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'right'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g4285
sS'block_loop.thisRepN'
p5245
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vn
sS'block_loop.thisTrialN'
p5248
I0
sg39
F0.96667558077569993
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b\x04\tn\x10'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g3835
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'right'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3845
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g3843
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vn
sS'block_loop.thisTrialN'
p5261
I0
sg39
F1.6163319789211528
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b\n\t\x85\x80'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g4215
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'left'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g4226
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g4223
sS'block_loop.thisRepN'
p5271
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vn
sS'block_loop.thisTrialN'
p5274
I0
sg39
F1.1499905346981905
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b\x11\x04\x1e\xb0'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g3771
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'left'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g3782
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5284
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vn
sS'block_loop.thisTrialN'
p5287
I0
sg39
F0.83322765647062624
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b\x17\x06\xd2\x18'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g3805
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'left'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g3813
sS'block_loop.thisRepN'
p5297
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F1.0167259293384632
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b\x1d\x04\xc6\xa8'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g3771
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'left'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.8166682252103783
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b#\x05\x95\xb0'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3703
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3711
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F1.6165671859662325
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b)\x03K\xc0'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4778
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4785
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.84992308016899187
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b/\ra\xc8'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g4990
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3856
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4997
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.94989776333750342
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b5\x0b\x90\xf0'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4402
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'right'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4409
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F1.1832499512483992
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0b;\x0b/H'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g3991
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g3998
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.9329865193576552
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c\x05\x0e\x9aH'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4538
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.75001539537061035
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c\x0b\r\xfa '
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4417
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4424
sS'block_loop.thisRepN'
p5401
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F2.7999833501926332
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c\x11\n\xbe\x00'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g3835
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3845
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g3843
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F1.066391108546668
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c\x19\x08)\xd8'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4232
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'right'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4239
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.73332139716967504
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c\x1f\t\xb0x'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g3671
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.91669394117980119
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c%\x065\xd8'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g4618
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'right'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g4625
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.7833075983562594
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c+\x05[\x18'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4990
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4997
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.83332573068128113
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c1\x02\x94('
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3737
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'right'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3745
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.81665454043650243
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0c7\x00\x88\xb8'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g4698
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3948
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g4705
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.83322109918390197
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r\x00\r\x81\x08'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3771
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.80004920816463709
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r\x06\x0bu\x98'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3805
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'left'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3813
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F1.0332360383945343
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r\x0c\x08\xed('
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3634
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.78338685600283497
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r\x12\t\xf6\xc8'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4232
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4239
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.83326528959878488
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r\x18\x073\xc0'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4019
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4026
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F1.1498779204166567
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r\x1e\x05(P'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4307
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4314
sS'block_loop.thisRepN'
p5570
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F1.1167308330495871
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r$\x07\xdb\xb8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4374
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4381
sS'block_loop.thisRepN'
p5583
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F1.1667019239657748
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r*\n\x19\xf0'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4778
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4785
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F1.049854200142363
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r0\rJX'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3910
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3918
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.86657830484455189
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\r6\x0e\x92x'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g3703
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3707
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g3711
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3707
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3648
g3714
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.68338109699379856
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e\x00\x0c\xfc8'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4471
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g4271
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4478
sS'block_loop.thisRepN'
p5635
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.7165777916652587
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e\x06\x08\x8fh'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4047
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.88376552509089379
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e\x0c\x04\xd6H'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4402
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4409
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.81632125918167731
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e\x12\x03\x82p'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4062
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4070
sS'block_loop.thisRepN'
p5674
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.94988778485731018
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e\x18\x018\x80'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4260
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4264
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4268
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.5998680559750937
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e\x1e\x01\x11p'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4618
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4625
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.86660510419187631
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e$\n\xae`'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4079
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3971
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4086
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F1.5670186124316388
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e*\t\x1c\x08'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3671
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.86665670719230548
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e1\x02\xfd\xa0'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3961
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3971
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3969
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.96668812515144964
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0e7\x01\xa5\xe0'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4122
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4129
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.83326015780858143
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f\x01\x01\x82\xb8'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4094
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.76653719350360916
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f\x06\x0e\xb5\xa0'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3869
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'left'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3876
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.0666901778677129
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f\x0c\x0b\xb8\x00'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4910
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4917
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F1.2166732999803571
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f\x12\r:\xb8'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4260
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4264
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4268
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.81651427150882228
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f\x19\x01\xe0x'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g3944
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3948
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g3952
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3948
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3648
g3955
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.96667843177056056
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f\x1e\x0e\xd8\xc8'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3869
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3876
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.76660048558187555
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f$\x0e\xb1\xb8'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3671
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.89997970091917523
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f*\x0b\xb00'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4990
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3856
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4997
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.0333466569809389
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f0\n\x96\xf0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3927
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3935
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F1.1000191586826986
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x0f6\x0b\xa4x'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4910
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4917
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.2499233082489809
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10\x00\r\xa40'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4402
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4409
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.93333034929219139
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10\x07\x02\xbf '
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4094
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.90000963636157394
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10\r\x02]x'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3910
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3918
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3648
g3914
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.9832521180042022
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10\x13\x01D8'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4215
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4226
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4223
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.5666896076691046
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10\x19\x01\x9a('
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4260
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4264
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4268
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.91657220371598669
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10\x1f\n\xbe\x00'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3869
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3724
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3876
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.86670831019273464
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10%\t\xdfX'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4538
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.74994668640283635
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x10+\x08M\x00'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4417
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4424
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.000019956961296
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x101\x05\x10\xe0'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4538
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.91662836830710148
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x107\x05\xa1h'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3788
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3796
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3648
g3799
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F1.7837073077826062
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11\x01\x04\xc6\xa8'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4990
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4997
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.91671817463429761
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11\x08\x01\xfb\xd0'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3720
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3731
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3728
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3724
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3648
g3731
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.76677268564799306
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11\x0e\x01[\xa8'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4374
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4381
sS'block_loop.thisRepN'
p6051
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.96672034138919116
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11\x13\ra\xc8'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3688
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3695
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.74999230231424008
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11\x19\ry8'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4374
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4381
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.86670802509343048
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11\x1f\n90'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g3927
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g3935
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F1.2666626372611063
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11%\x08\xa6\xd8'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4079
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3971
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4086
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3648
g3965
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.0500189876238437
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x11+\rB\x88'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4019
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4026
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3648
g3682
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.95006283591828833
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x111\x0e\x8a\xa8'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g3654
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.78338257951145351
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x117\x0e)\x00'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4618
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4625
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.76656313755393057
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12\x01\x0be\xf8'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3852
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3856
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3860
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3648
g3863
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.86657716444642574
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12\x07\x08dp'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4062
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4070
sS'block_loop.thisRepN'
p6168
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3648
g4073
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F1.1666642908385256
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12\r\x06\xd2\x18'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4374
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g4288
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4381
sS'block_loop.thisRepN'
p6181
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.89991640884181834
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12\x13\n\x02\x80'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4215
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4223
sS'block_loop.thisRepN'
p6194
I1
sg3645
g4219
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3648
g4226
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.3165675851050764
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12\x19\x08\xe9@'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g3737
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g3745
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.0000048466899898
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12\x1f\x0e<\x88'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3634
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.94999042065865069
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12%\x0e\xcd\x10'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3927
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3935
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.1167097356892555
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x12+\x0ekh'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4094
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4101
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.76660219617861003
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x122\x01g`'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3927
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3935
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3648
g3931
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.1333224805475766
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x127\r\xa8\x18'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4417
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4424
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3648
g3748
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F1.1333718027526629
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x13\x02\x01\x19@'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3754
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3762
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3648
g3765
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.98324983720794989
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x13\x08\x03\x92\x10'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4277
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4285
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3648
g4288
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.86669548071768077
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x13\x0e\x03\xe8\x00'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3771
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3779
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3648
g3782
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.90005610757179966
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x13\x14\x02U\xa8'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4471
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4271
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4478
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4264
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3648
g4271
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F1.1499651608473869
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x13\x1a\x01<h'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3835
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3845
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3843
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3648
g3839
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F2.4997106240598441
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x13 \x03\xef\xd0'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4618
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4625
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3648
g3816
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.85005108982113597
sg34
g753
(S"\x07\xdf\x07\x0e\x0f\x13'\x0c\x19\xa8"
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F81.265480329849197
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'40-sardines.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'5-pineapple.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'5-pineapple.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'40-sardines.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.1498762098199222
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x154\x05\x86\x10'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'20-fruit_pastilles.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'2-steamed_puddings.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'2-steamed_puddings.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'20-fruit_pastilles.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.81654363675170316
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x15:\x07\xfe\xe0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'48-twix.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'48-twix.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'50-polo.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'50-polo.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.59999264443376887
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x16\x04\x05\xb4\xf0'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'41-peanuts_redo.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'41-peanuts_redo.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'45-chewy_nougat_redo.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'45-chewy_nougat_redo.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F1.0666545404365024
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x16\n\x00R\x08'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'22-daim.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'7-olives.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'7-olives.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
S'22-daim.png'
p6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6454
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.76661531075296807
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x16\x10\x01\xd8\xa8'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'50-polo.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6464
g60
(g99
S'\x05\x00\x00\x00'
tRp6465
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6466
I0
sg6380
S'48-twix.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6469
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vn
sS'block_loop.thisTrialN'
p6471
I0
sg39
F0.64986708663673198
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x16\x15\r\xde\xc8'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
g6426
sS'block_loop.thisIndex'
p6475
g6365
sg38
S'left'
p6476
sg59
g63
sS'trial_loop.thisN'
p6477
I6
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6478
g60
(g99
S'\x06\x00\x00\x00'
tRp6479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6480
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6481
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6482
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6483
Nsg70
Vn
sS'block_loop.thisTrialN'
p6484
I0
sg39
F0.84999749112466816
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x16\x1b\t3x'
tRp6485
sa(dp6486
S'trial_loop.thisTrialN'
p6487
I7
sg6371
S'6-sour_patch_kids.png'
p6488
sS'block_loop.thisIndex'
p6489
g6365
sg38
S'right'
p6490
sg59
g63
sS'trial_loop.thisN'
p6491
I7
sg33
S'38-maltesers.png'
p6492
sg64
g65
sS'trial_loop.thisIndex'
p6493
g60
(g99
S'\x07\x00\x00\x00'
tRp6494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6495
I0
sg6380
S'38-maltesers.png'
p6496
sS'block_loop.thisRepN'
p6497
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6498
I2
sg6385
S'6-sour_patch_kids.png'
p6499
sg55
g11
sS'block_loop.thisTrial'
p6500
Nsg70
Vn
sS'block_loop.thisTrialN'
p6501
I0
sg39
F1.2664000606691843
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x16!\x07b\xa0'
tRp6502
sa(dp6503
S'trial_loop.thisTrialN'
p6504
I8
sg6371
S'19-caramello_redo.png'
p6505
sS'block_loop.thisIndex'
p6506
g6365
sg38
S'left'
p6507
sg59
g63
sS'trial_loop.thisN'
p6508
I8
sg33
S'30-spaghetti_hoops.png'
p6509
sg64
g65
sS'trial_loop.thisIndex'
p6510
g60
(g99
S'\x08\x00\x00\x00'
tRp6511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6512
I0
sg6380
S'30-spaghetti_hoops.png'
p6513
sS'block_loop.thisRepN'
p6514
I2
sg6383
S'19-caramello_redo.png'
p6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6516
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p6517
Nsg70
Vn
sS'block_loop.thisTrialN'
p6518
I0
sg39
F0.91669650707535766
sg34
g753
(S"\x07\xdf\x07\x0e\x0f\x16'\x0b\xfeP"
tRp6519
sa(dp6520
S'trial_loop.thisTrialN'
p6521
I9
sg6371
g6392
sS'block_loop.thisIndex'
p6522
g6365
sg38
S'right'
p6523
sg59
g63
sS'trial_loop.thisN'
p6524
I9
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6525
g60
(g99
S'\t\x00\x00\x00'
tRp6526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6527
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6528
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6529
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6530
Nsg70
Vn
sS'block_loop.thisTrialN'
p6531
I0
sg39
F0.73337670646287734
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x16-\x0b#\x90'
tRp6532
sa(dp6533
S'trial_loop.thisTrialN'
p6534
I10
sg6371
S'13-mccoys_steak_crisps.png'
p6535
sS'block_loop.thisIndex'
p6536
g6365
sg38
S'left'
p6537
sg59
g63
sS'trial_loop.thisN'
p6538
I10
sg33
S'3-ellas_strawberries_apples.png'
p6539
sg64
g65
sS'trial_loop.thisIndex'
p6540
g60
(g99
S'\n\x00\x00\x00'
tRp6541
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6542
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6543
sS'block_loop.thisRepN'
p6544
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6545
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6546
sg55
g11
sS'block_loop.thisTrial'
p6547
Nsg70
Vn
sS'block_loop.thisTrialN'
p6548
I0
sg39
F0.90000108337790152
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x163\x07\xa8\xf0'
tRp6549
sa(dp6550
S'trial_loop.thisTrialN'
p6551
I11
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6552
sS'block_loop.thisIndex'
p6553
g6365
sg38
S'left'
p6554
sg59
g63
sS'trial_loop.thisN'
p6555
I11
sg33
S'8-liquorice_catherine_wheels.png'
p6556
sg64
g65
sS'trial_loop.thisIndex'
p6557
g60
(g99
S'\x0b\x00\x00\x00'
tRp6558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6559
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6560
sS'block_loop.thisRepN'
p6561
I2
sg6383
S'17-jacobs_mini_cheddars_redo.png'
p6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6563
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p6564
Nsg70
Vn
sS'block_loop.thisTrialN'
p6565
I0
sg39
F0.96668669965401932
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x169\x06\x8f\xb0'
tRp6566
sa(dp6567
S'trial_loop.thisTrialN'
p6568
I12
sg6371
g6535
sS'block_loop.thisIndex'
p6569
g6365
sg38
S'right'
p6570
sg59
g63
sS'trial_loop.thisN'
p6571
I12
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p6572
g60
(g99
S'\x0c\x00\x00\x00'
tRp6573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6574
I0
sg6380
g6543
sS'block_loop.thisRepN'
p6575
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6576
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p6577
Nsg70
Vn
sS'block_loop.thisTrialN'
p6578
I0
sg39
F0.68327988668988837
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x17\x03\x06\xa7 '
tRp6579
sa(dp6580
S'trial_loop.thisTrialN'
p6581
I13
sg6371
g6488
sS'block_loop.thisIndex'
p6582
g6365
sg38
S'right'
p6583
sg59
g63
sS'trial_loop.thisN'
p6584
I13
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p6585
g60
(g99
S'\r\x00\x00\x00'
tRp6586
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6587
I0
sg6380
g6496
sS'block_loop.thisRepN'
p6588
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6589
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p6590
Nsg70
Vn
sS'block_loop.thisTrialN'
p6591
I0
sg39
F1.0164017712659188
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x17\t\x02:P'
tRp6592
sa(dp6593
S'trial_loop.thisTrialN'
p6594
I14
sg6371
g6426
sS'block_loop.thisIndex'
p6595
g6365
sg38
S'left'
p6596
sg59
g63
sS'trial_loop.thisN'
p6597
I14
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6598
g60
(g99
S'\x0e\x00\x00\x00'
tRp6599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6600
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6601
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6602
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6603
Nsg70
Vn
sS'block_loop.thisTrialN'
p6604
I0
sg39
F0.94989776333750342
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x17\x0f\x03\x05p'
tRp6605
sa(dp6606
S'trial_loop.thisTrialN'
p6607
I15
sg6371
g6488
sS'block_loop.thisIndex'
p6608
g6365
sg38
S'right'
p6609
sg59
g63
sS'trial_loop.thisN'
p6610
I15
sg33
g6499
sg64
g65
sS'trial_loop.thisIndex'
p6611
g60
(g99
S'\x0f\x00\x00\x00'
tRp6612
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6613
I0
sg6380
g6496
sS'block_loop.thisRepN'
p6614
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6615
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p6616
Nsg70
Vn
sS'block_loop.thisTrialN'
p6617
I0
sg39
F0.91637947648905538
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x17\x15\x02\xa3\xc8'
tRp6618
sa(dp6619
S'trial_loop.thisTrialN'
p6620
I16
sg6371
S'23-crunchie_redo.png'
p6621
sS'block_loop.thisIndex'
p6622
g6365
sg38
S'right'
p6623
sg59
g63
sS'trial_loop.thisN'
p6624
I16
sg33
S'33-ambrosia_rice.png'
p6625
sg64
g65
sS'trial_loop.thisIndex'
p6626
g60
(g99
S'\x10\x00\x00\x00'
tRp6627
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6628
I0
sg6380
S'33-ambrosia_rice.png'
p6629
sS'block_loop.thisRepN'
p6630
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6631
I2
sg6385
S'23-crunchie_redo.png'
p6632
sg55
g11
sS'block_loop.thisTrial'
p6633
Nsg70
Vn
sS'block_loop.thisTrialN'
p6634
I0
sg39
F1.2666443908965448
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x17\x1b\x02\x03\xa0'
tRp6635
sa(dp6636
S'trial_loop.thisTrialN'
p6637
I17
sg6371
S'3-ellas_strawberries_apples.png'
p6638
sS'block_loop.thisIndex'
p6639
g6365
sg38
S'left'
p6640
sg59
g63
sS'trial_loop.thisN'
p6641
I17
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p6642
g60
(g99
S'\x11\x00\x00\x00'
tRp6643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6644
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6645
sS'block_loop.thisRepN'
p6646
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6647
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p6648
Nsg70
Vn
sS'block_loop.thisTrialN'
p6649
I0
sg39
F0.91666286534109531
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x17!\x06\xa38'
tRp6650
sa(dp6651
S'trial_loop.thisTrialN'
p6652
I18
sg6371
g6392
sS'block_loop.thisIndex'
p6653
g6365
sg38
S'right'
p6654
sg59
g63
sS'trial_loop.thisN'
p6655
I18
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6656
g60
(g99
S'\x12\x00\x00\x00'
tRp6657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6658
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6659
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6660
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6661
Nsg70
Vn
sS'block_loop.thisTrialN'
p6662
I0
sg39
F0.80002697040799831
sg34
g753
(S"\x07\xdf\x07\x0e\x0f\x17'\x05\xc4\x90"
tRp6663
sa(dp6664
S'trial_loop.thisTrialN'
p6665
I19
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6666
sS'block_loop.thisIndex'
p6667
g6365
sg38
S'right'
p6668
sg59
g63
sS'trial_loop.thisN'
p6669
I19
sg33
S'43-mrporky_pork_crackles_redo.png'
p6670
sg64
g65
sS'trial_loop.thisIndex'
p6671
g60
(g99
S'\x13\x00\x00\x00'
tRp6672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6673
I0
sg6380
S'18-mms.png'
p6674
sS'block_loop.thisRepN'
p6675
I2
sg6383
S'18-mms.png'
p6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6677
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p6678
Nsg70
Vn
sS'block_loop.thisTrialN'
p6679
I0
sg39
F1.0666824801828625
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x17-\x03@\x08'
tRp6680
sa(dp6681
S'trial_loop.thisTrialN'
p6682
I20
sg6371
S'31-hobnobs.png'
p6683
sS'block_loop.thisIndex'
p6684
g6365
sg38
S'right'
p6685
sg59
g63
sS'trial_loop.thisN'
p6686
I20
sg33
S'25-kitkat.png'
p6687
sg64
g65
sS'trial_loop.thisIndex'
p6688
g60
(g99
S'\x14\x00\x00\x00'
tRp6689
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6690
I0
sg6380
S'25-kitkat.png'
p6691
sS'block_loop.thisRepN'
p6692
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6693
I2
sg6385
S'31-hobnobs.png'
p6694
sg55
g11
sS'block_loop.thisTrial'
p6695
Nsg70
Vn
sS'block_loop.thisTrialN'
p6696
I0
sg39
F0.98330172530768323
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x173\x04\xc2\xc0'
tRp6697
sa(dp6698
S'trial_loop.thisTrialN'
p6699
I21
sg6371
g6666
sS'block_loop.thisIndex'
p6700
g6365
sg38
S'right'
p6701
sg59
g63
sS'trial_loop.thisN'
p6702
I21
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p6703
g60
(g99
S'\x15\x00\x00\x00'
tRp6704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6705
I0
sg6380
g6674
sS'block_loop.thisRepN'
p6706
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6707
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p6708
Nsg70
Vn
sS'block_loop.thisTrialN'
p6709
I0
sg39
F0.89998882410145598
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x179\x05\x18\xb0'
tRp6710
sa(dp6711
S'trial_loop.thisTrialN'
p6712
I22
sg6371
S'25-kitkat.png'
p6713
sS'block_loop.thisIndex'
p6714
g6365
sg38
S'left'
p6715
sg59
g63
sS'trial_loop.thisN'
p6716
I22
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p6717
g60
(g99
S'\x16\x00\x00\x00'
tRp6718
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6719
I0
sg6380
S'31-hobnobs.png'
p6720
sS'block_loop.thisRepN'
p6721
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6722
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p6723
Nsg70
Vn
sS'block_loop.thisTrialN'
p6724
I0
sg39
F0.90002389133405813
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x18\x03\x03\xffp'
tRp6725
sa(dp6726
S'trial_loop.thisTrialN'
p6727
I23
sg6371
S'46-pistachios.png'
p6728
sS'block_loop.thisIndex'
p6729
g6365
sg38
S'left'
p6730
sg59
g63
sS'trial_loop.thisN'
p6731
I23
sg33
S'46-pistachios.png'
p6732
sg64
g65
sS'trial_loop.thisIndex'
p6733
g60
(g99
S'\x17\x00\x00\x00'
tRp6734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6735
I0
sg6380
S'29-beans.png'
p6736
sS'block_loop.thisRepN'
p6737
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6738
I2
sg6385
S'29-beans.png'
p6739
sg55
g11
sS'block_loop.thisTrial'
p6740
Nsg70
Vn
sS'block_loop.thisTrialN'
p6741
I0
sg39
F1.1333130722659917
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x18\t\x02\xe60'
tRp6742
sa(dp6743
S'trial_loop.thisTrialN'
p6744
I24
sg6371
S'49-yorkie.png'
p6745
sS'block_loop.thisIndex'
p6746
g6365
sg38
S'right'
p6747
sg59
g63
sS'trial_loop.thisN'
p6748
I24
sg33
S'35-raisins.png'
p6749
sg64
g65
sS'trial_loop.thisIndex'
p6750
g60
(g99
S'\x18\x00\x00\x00'
tRp6751
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6752
I0
sg6380
S'35-raisins.png'
p6753
sS'block_loop.thisRepN'
p6754
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6755
I2
sg6385
S'49-yorkie.png'
p6756
sg55
g11
sS'block_loop.thisTrial'
p6757
Nsg70
Vn
sS'block_loop.thisTrialN'
p6758
I0
sg39
F0.81662888148730417
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x18\x0f\x05\x9d\x80'
tRp6759
sa(dp6760
S'trial_loop.thisTrialN'
p6761
I25
sg6371
g6621
sS'block_loop.thisIndex'
p6762
g6365
sg38
S'right'
p6763
sg59
g63
sS'trial_loop.thisN'
p6764
I25
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p6765
g60
(g99
S'\x19\x00\x00\x00'
tRp6766
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6767
I0
sg6380
g6629
sS'block_loop.thisRepN'
p6768
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6769
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p6770
Nsg70
Vn
sS'block_loop.thisTrialN'
p6771
I0
sg39
F1.1833406128725983
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x18\x15\x03S\x90'
tRp6772
sa(dp6773
S'trial_loop.thisTrialN'
p6774
I26
sg6371
S'8-liquorice_catherine_wheels.png'
p6775
sS'block_loop.thisIndex'
p6776
g6365
sg38
S'right'
p6777
sg59
g63
sS'trial_loop.thisN'
p6778
I26
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p6779
g60
(g99
S'\x1a\x00\x00\x00'
tRp6780
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6781
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6782
sS'block_loop.thisRepN'
p6783
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6784
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p6785
Nsg70
Vn
sS'block_loop.thisTrialN'
p6786
I0
sg39
F0.88340458918901277
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x18\x1b\x06\x83\xf8'
tRp6787
sa(dp6788
S'trial_loop.thisTrialN'
p6789
I27
sg6371
S'29-beans.png'
p6790
sS'block_loop.thisIndex'
p6791
g6365
sg38
S'right'
p6792
sg59
g63
sS'trial_loop.thisN'
p6793
I27
sg33
g6739
sg64
g65
sS'trial_loop.thisIndex'
p6794
g60
(g99
S'\x1b\x00\x00\x00'
tRp6795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6796
I0
sg6380
S'46-pistachios.png'
p6797
sS'block_loop.thisRepN'
p6798
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6799
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p6800
Nsg70
Vn
sS'block_loop.thisTrialN'
p6801
I0
sg39
F0.93335372744695633
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x18!\x05,8'
tRp6802
sa(dp6803
S'trial_loop.thisTrialN'
p6804
I28
sg6371
S'33-ambrosia_rice.png'
p6805
sS'block_loop.thisIndex'
p6806
g6365
sg38
S'left'
p6807
sg59
g63
sS'trial_loop.thisN'
p6808
I28
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p6809
g60
(g99
S'\x1c\x00\x00\x00'
tRp6810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6811
I0
sg6380
S'23-crunchie_redo.png'
p6812
sS'block_loop.thisRepN'
p6813
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6814
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p6815
Nsg70
Vn
sS'block_loop.thisTrialN'
p6816
I0
sg39
F1.1833237920054671
sg34
g753
(S"\x07\xdf\x07\x0e\x0f\x18'\x04\xca\x90"
tRp6817
sa(dp6818
S'trial_loop.thisTrialN'
p6819
I29
sg6371
g6372
sS'block_loop.thisIndex'
p6820
g6365
sg38
S'right'
p6821
sg59
g63
sS'trial_loop.thisN'
p6822
I29
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6823
g60
(g99
S'\x1d\x00\x00\x00'
tRp6824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6825
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6826
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6827
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6828
Nsg70
Vn
sS'block_loop.thisTrialN'
p6829
I0
sg39
F0.78323860429009073
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x18-\x07\xfa\xf8'
tRp6830
sa(dp6831
S'trial_loop.thisTrialN'
p6832
I30
sg6371
S'51-mars.png'
p6833
sS'block_loop.thisIndex'
p6834
g6365
sg38
S'left'
p6835
sg59
g63
sS'trial_loop.thisN'
p6836
I30
sg33
S'51-mars.png'
p6837
sg64
g65
sS'trial_loop.thisIndex'
p6838
g60
(g99
S'\x1e\x00\x00\x00'
tRp6839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6840
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6841
sS'block_loop.thisRepN'
p6842
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6843
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6844
sg55
g11
sS'block_loop.thisTrial'
p6845
Nsg70
Vn
sS'block_loop.thisTrialN'
p6846
I0
sg39
F1.4499958375481583
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x183\x054\x08'
tRp6847
sa(dp6848
S'trial_loop.thisTrialN'
p6849
I31
sg6371
S'44-crunch.png'
p6850
sS'block_loop.thisIndex'
p6851
g6365
sg38
S'left'
p6852
sg59
g63
sS'trial_loop.thisN'
p6853
I31
sg33
S'44-crunch.png'
p6854
sg64
g65
sS'trial_loop.thisIndex'
p6855
g60
(g99
S'\x1f\x00\x00\x00'
tRp6856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6857
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6858
sS'block_loop.thisRepN'
p6859
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6860
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6861
sg55
g11
sS'block_loop.thisTrial'
p6862
Nsg70
Vn
sS'block_loop.thisTrialN'
p6863
I0
sg39
F1.0499120753302122
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x189\x0c\xae\x18'
tRp6864
sa(dp6865
S'trial_loop.thisTrialN'
p6866
I32
sg6371
g6683
sS'block_loop.thisIndex'
p6867
g6365
sg38
S'right'
p6868
sg59
g63
sS'trial_loop.thisN'
p6869
I32
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p6870
g60
(g99
S' \x00\x00\x00'
tRp6871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6872
I0
sg6380
g6691
sS'block_loop.thisRepN'
p6873
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6874
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p6875
Nsg70
Vn
sS'block_loop.thisTrialN'
p6876
I0
sg39
F1.300002166755803
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x19\x03\r\xf68'
tRp6877
sa(dp6878
S'trial_loop.thisTrialN'
p6879
I33
sg6371
g6488
sS'block_loop.thisIndex'
p6880
g6365
sg38
S'right'
p6881
sg59
g63
sS'trial_loop.thisN'
p6882
I33
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p6883
g60
(g99
S'!\x00\x00\x00'
tRp6884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6885
I0
sg6380
g6496
sS'block_loop.thisRepN'
p6886
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6887
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p6888
Nsg70
Vn
sS'block_loop.thisTrialN'
p6889
I0
sg39
F0.83301896367447625
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x19\n\x03\xcc\xa8'
tRp6890
sa(dp6891
S'trial_loop.thisTrialN'
p6892
I34
sg6371
g6638
sS'block_loop.thisIndex'
p6893
g6365
sg38
S'left'
p6894
sg59
g63
sS'trial_loop.thisN'
p6895
I34
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p6896
g60
(g99
S'"\x00\x00\x00'
tRp6897
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6898
I0
sg6380
g6645
sS'block_loop.thisRepN'
p6899
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6900
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p6901
Nsg70
Vn
sS'block_loop.thisTrialN'
p6902
I0
sg39
F0.98335133261116425
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x19\x10\x01\xbdP'
tRp6903
sa(dp6904
S'trial_loop.thisTrialN'
p6905
I35
sg6371
S'42-mrkipling_lemon_slices.png'
p6906
sS'block_loop.thisIndex'
p6907
g6365
sg38
S'left'
p6908
sg59
g63
sS'trial_loop.thisN'
p6909
I35
sg33
S'42-mrkipling_lemon_slices.png'
p6910
sg64
g65
sS'trial_loop.thisIndex'
p6911
g60
(g99
S'#\x00\x00\x00'
tRp6912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6913
I0
sg6380
S'16-skips_prawn.png'
p6914
sS'block_loop.thisRepN'
p6915
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6916
I2
sg6385
S'16-skips_prawn.png'
p6917
sg55
g11
sS'block_loop.thisTrial'
p6918
Nsg70
Vn
sS'block_loop.thisTrialN'
p6919
I0
sg39
F0.88321841924971523
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x19\x16\x02\x13@'
tRp6920
sa(dp6921
S'trial_loop.thisTrialN'
p6922
I36
sg6371
S'26-walkers_smoky_bacon.png'
p6923
sS'block_loop.thisIndex'
p6924
g6365
sg38
S'right'
p6925
sg59
g63
sS'trial_loop.thisN'
p6926
I36
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p6927
g60
(g99
S'$\x00\x00\x00'
tRp6928
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6929
I0
sg6380
S'44-crunch.png'
p6930
sS'block_loop.thisRepN'
p6931
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6932
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p6933
Nsg70
Vn
sS'block_loop.thisTrialN'
p6934
I0
sg39
F0.8165299519778273
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x19\x1c\x00\xbb\x80'
tRp6935
sa(dp6936
S'trial_loop.thisTrialN'
p6937
I37
sg6371
g6745
sS'block_loop.thisIndex'
p6938
g6365
sg38
S'right'
p6939
sg59
g63
sS'trial_loop.thisN'
p6940
I37
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p6941
g60
(g99
S'%\x00\x00\x00'
tRp6942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6943
I0
sg6380
g6753
sS'block_loop.thisRepN'
p6944
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6945
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p6946
Nsg70
Vn
sS'block_loop.thisTrialN'
p6947
I0
sg39
F0.86723945046560402
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x19!\r\xb3\xd0'
tRp6948
sa(dp6949
S'trial_loop.thisTrialN'
p6950
I38
sg6371
g6923
sS'block_loop.thisIndex'
p6951
g6365
sg38
S'right'
p6952
sg59
g63
sS'trial_loop.thisN'
p6953
I38
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p6954
g60
(g99
S'&\x00\x00\x00'
tRp6955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6956
I0
sg6380
g6930
sS'block_loop.thisRepN'
p6957
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6958
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p6959
Nsg70
Vn
sS'block_loop.thisTrialN'
p6960
I0
sg39
F0.85000205271535378
sg34
g753
(S"\x07\xdf\x07\x0e\x0f\x19'\x0c!x"
tRp6961
sa(dp6962
S'trial_loop.thisTrialN'
p6963
I39
sg6371
S'27-hartleys_raspberries_jelly.png'
p6964
sS'block_loop.thisIndex'
p6965
g6365
sg38
S'right'
p6966
sg59
g63
sS'trial_loop.thisN'
p6967
I39
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p6968
g60
(g99
S"'\x00\x00\x00"
tRp6969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6970
I0
sg6380
S'51-mars.png'
p6971
sS'block_loop.thisRepN'
p6972
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6973
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p6974
Nsg70
Vn
sS'block_loop.thisTrialN'
p6975
I0
sg39
F0.86669063402678148
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x19-\nP\xa0'
tRp6976
sa(dp6977
S'trial_loop.thisTrialN'
p6978
I40
sg6371
g6426
sS'block_loop.thisIndex'
p6979
g6365
sg38
S'left'
p6980
sg59
g63
sS'trial_loop.thisN'
p6981
I40
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p6982
g60
(g99
S'(\x00\x00\x00'
tRp6983
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6984
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6985
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6986
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6987
Nsg70
Vn
sS'block_loop.thisTrialN'
p6988
I0
sg39
F0.91671703423617146
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x193\x08\xbeH'
tRp6989
sa(dp6990
S'trial_loop.thisTrialN'
p6991
I41
sg6371
S'7-olives.png'
p6992
sS'block_loop.thisIndex'
p6993
g6365
sg38
S'right'
p6994
sg59
g63
sS'trial_loop.thisN'
p6995
I41
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p6996
g60
(g99
S')\x00\x00\x00'
tRp6997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6998
I0
sg6380
S'22-daim.png'
p6999
sS'block_loop.thisRepN'
p7000
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7001
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7002
Nsg70
Vn
sS'block_loop.thisTrialN'
p7003
I0
sg39
F0.86672484596056165
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x199\x08\x1e '
tRp7004
sa(dp7005
S'trial_loop.thisTrialN'
p7006
I42
sg6371
g6638
sS'block_loop.thisIndex'
p7007
g6365
sg38
S'left'
p7008
sg59
g63
sS'trial_loop.thisN'
p7009
I42
sg33
g6546
sg64
g65
sS'trial_loop.thisIndex'
p7010
g60
(g99
S'*\x00\x00\x00'
tRp7011
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7012
I0
sg6380
g6645
sS'block_loop.thisRepN'
p7013
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7014
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p7015
Nsg70
Vn
sS'block_loop.thisTrialN'
p7016
I0
sg39
F1.5332311917045445
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a\x03\x06\x8b\xc8'
tRp7017
sa(dp7018
S'trial_loop.thisTrialN'
p7019
I43
sg6371
g6621
sS'block_loop.thisIndex'
p7020
g6365
sg38
S'right'
p7021
sg59
g63
sS'trial_loop.thisN'
p7022
I43
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p7023
g60
(g99
S'+\x00\x00\x00'
tRp7024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7025
I0
sg6380
g6629
sS'block_loop.thisRepN'
p7026
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7027
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p7028
Nsg70
Vn
sS'block_loop.thisTrialN'
p7029
I0
sg39
F1.100018018285482
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a\t\x0f6\x88'
tRp7030
sa(dp7031
S'trial_loop.thisTrialN'
p7032
I44
sg6371
g6728
sS'block_loop.thisIndex'
p7033
g6365
sg38
S'left'
p7034
sg59
g63
sS'trial_loop.thisN'
p7035
I44
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p7036
g60
(g99
S',\x00\x00\x00'
tRp7037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7038
I0
sg6380
g6736
sS'block_loop.thisRepN'
p7039
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7040
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p7041
Nsg70
Vn
sS'block_loop.thisTrialN'
p7042
I0
sg39
F1.5166537991781297
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a\x10\x01\xf4\x00'
tRp7043
sa(dp7044
S'trial_loop.thisTrialN'
p7045
I45
sg6371
S'1-treacle_cookies.png'
p7046
sS'block_loop.thisIndex'
p7047
g6365
sg38
S'right'
p7048
sg59
g63
sS'trial_loop.thisN'
p7049
I45
sg33
S'21-nakd_banana_crunch.png'
p7050
sg64
g65
sS'trial_loop.thisIndex'
p7051
g60
(g99
S'-\x00\x00\x00'
tRp7052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7053
I0
sg6380
S'21-nakd_banana_crunch.png'
p7054
sS'block_loop.thisRepN'
p7055
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7056
I2
sg6385
S'1-treacle_cookies.png'
p7057
sg55
g11
sS'block_loop.thisTrial'
p7058
Nsg70
Vn
sS'block_loop.thisTrialN'
p7059
I0
sg39
F0.9165950116721433
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a\x16\n`@'
tRp7060
sa(dp7061
S'trial_loop.thisTrialN'
p7062
I46
sg6371
S'30-spaghetti_hoops.png'
p7063
sS'block_loop.thisIndex'
p7064
g6365
sg38
S'right'
p7065
sg59
g63
sS'trial_loop.thisN'
p7066
I46
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p7067
g60
(g99
S'.\x00\x00\x00'
tRp7068
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7069
I0
sg6380
S'19-caramello_redo.png'
p7070
sS'block_loop.thisRepN'
p7071
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7072
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p7073
Nsg70
Vn
sS'block_loop.thisTrialN'
p7074
I0
sg39
F1.1665964371686641
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a\x1c\t\x81\x98'
tRp7075
sa(dp7076
S'trial_loop.thisTrialN'
p7077
I47
sg6371
g6728
sS'block_loop.thisIndex'
p7078
g6365
sg38
S'left'
p7079
sg59
g63
sS'trial_loop.thisN'
p7080
I47
sg33
g6739
sg64
g65
sS'trial_loop.thisIndex'
p7081
g60
(g99
S'/\x00\x00\x00'
tRp7082
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7083
I0
sg6380
g6736
sS'block_loop.thisRepN'
p7084
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7085
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p7086
Nsg70
Vn
sS'block_loop.thisTrialN'
p7087
I0
sg39
F0.9332456747561082
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a"\x0c\xb2\x00'
tRp7088
sa(dp7089
S'trial_loop.thisTrialN'
p7090
I48
sg6371
g6666
sS'block_loop.thisIndex'
p7091
g6365
sg38
S'right'
p7092
sg59
g63
sS'trial_loop.thisN'
p7093
I48
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p7094
g60
(g99
S'0\x00\x00\x00'
tRp7095
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7096
I0
sg6380
g6674
sS'block_loop.thisRepN'
p7097
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7098
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p7099
Nsg70
Vn
sS'block_loop.thisTrialN'
p7100
I0
sg39
F0.83365245464938198
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a(\x0c\x11\xd8'
tRp7101
sa(dp7102
S'trial_loop.thisTrialN'
p7103
I49
sg6371
g6713
sS'block_loop.thisIndex'
p7104
g6365
sg38
S'left'
p7105
sg59
g63
sS'trial_loop.thisN'
p7106
I49
sg33
g6694
sg64
g65
sS'trial_loop.thisIndex'
p7107
g60
(g99
S'1\x00\x00\x00'
tRp7108
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7109
I0
sg6380
g6720
sS'block_loop.thisRepN'
p7110
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7111
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p7112
Nsg70
Vn
sS'block_loop.thisTrialN'
p7113
I0
sg39
F0.79992547500387445
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a.\n\x06h'
tRp7114
sa(dp7115
S'trial_loop.thisTrialN'
p7116
I50
sg6371
S'16-skips_prawn.png'
p7117
sS'block_loop.thisIndex'
p7118
g6365
sg38
S'right'
p7119
sg59
g63
sS'trial_loop.thisN'
p7120
I50
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p7121
g60
(g99
S'2\x00\x00\x00'
tRp7122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7123
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7124
sS'block_loop.thisRepN'
p7125
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7126
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p7127
Nsg70
Vn
sS'block_loop.thisTrialN'
p7128
I0
sg39
F1.1165061746833089
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a4\x07}\xf8'
tRp7129
sa(dp7130
S'trial_loop.thisTrialN'
p7131
I51
sg6371
g6426
sS'block_loop.thisIndex'
p7132
g6365
sg38
S'left'
p7133
sg59
g63
sS'trial_loop.thisN'
p7134
I51
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7135
g60
(g99
S'3\x00\x00\x00'
tRp7136
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7137
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7138
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7139
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7140
Nsg70
Vn
sS'block_loop.thisTrialN'
p7141
I0
sg39
F0.84997667886545969
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1a:\t\xbc0'
tRp7142
sa(dp7143
S'trial_loop.thisTrialN'
p7144
I52
sg6371
g6964
sS'block_loop.thisIndex'
p7145
g6365
sg38
S'right'
p7146
sg59
g63
sS'trial_loop.thisN'
p7147
I52
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p7148
g60
(g99
S'4\x00\x00\x00'
tRp7149
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7150
I0
sg6380
g6971
sS'block_loop.thisRepN'
p7151
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7152
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p7153
Nsg70
Vn
sS'block_loop.thisTrialN'
p7154
I0
sg39
F0.74994240991145489
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b\x04\x08%\xf0'
tRp7155
sa(dp7156
S'trial_loop.thisTrialN'
p7157
I53
sg6371
S'38-maltesers.png'
p7158
sS'block_loop.thisIndex'
p7159
g6365
sg38
S'left'
p7160
sg59
g63
sS'trial_loop.thisN'
p7161
I53
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p7162
g60
(g99
S'5\x00\x00\x00'
tRp7163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7164
I0
sg6380
S'6-sour_patch_kids.png'
p7165
sS'block_loop.thisRepN'
p7166
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7167
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p7168
Nsg70
Vn
sS'block_loop.thisTrialN'
p7169
I0
sg39
F0.78310403735031286
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b\n\x04\xabP'
tRp7170
sa(dp7171
S'trial_loop.thisTrialN'
p7172
I54
sg6371
g6621
sS'block_loop.thisIndex'
p7173
g6365
sg38
S'right'
p7174
sg59
g63
sS'trial_loop.thisN'
p7175
I54
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p7176
g60
(g99
S'6\x00\x00\x00'
tRp7177
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7178
I0
sg6380
g6629
sS'block_loop.thisRepN'
p7179
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7180
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p7181
Nsg70
Vn
sS'block_loop.thisTrialN'
p7182
I0
sg39
F1.1333167785587648
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b\x10\x01\xe8H'
tRp7183
sa(dp7184
S'trial_loop.thisTrialN'
p7185
I55
sg6371
g6790
sS'block_loop.thisIndex'
p7186
g6365
sg38
S'right'
p7187
sg59
g63
sS'trial_loop.thisN'
p7188
I55
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p7189
g60
(g99
S'7\x00\x00\x00'
tRp7190
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7191
I0
sg6380
g6797
sS'block_loop.thisRepN'
p7192
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7193
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p7194
Nsg70
Vn
sS'block_loop.thisTrialN'
p7195
I0
sg39
F0.74992045725412027
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b\x16\x04\x9f\x98'
tRp7196
sa(dp7197
S'trial_loop.thisTrialN'
p7198
I56
sg6371
S'45-chewy_nougat_redo.png'
p7199
sS'block_loop.thisIndex'
p7200
g6365
sg38
S'right'
p7201
sg59
g63
sS'trial_loop.thisN'
p7202
I56
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7203
g60
(g99
S'8\x00\x00\x00'
tRp7204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7205
I0
sg6380
S'41-peanuts_redo.png'
p7206
sS'block_loop.thisRepN'
p7207
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7208
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7209
Nsg70
Vn
sS'block_loop.thisTrialN'
p7210
I0
sg39
F0.84990568910234288
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b\x1c\x01$\xf8'
tRp7211
sa(dp7212
S'trial_loop.thisTrialN'
p7213
I57
sg6371
S'36-fig_rolls.png'
p7214
sS'block_loop.thisIndex'
p7215
g6365
sg38
S'right'
p7216
sg59
g63
sS'trial_loop.thisN'
p7217
I57
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p7218
sg64
g65
sS'trial_loop.thisIndex'
p7219
g60
(g99
S'9\x00\x00\x00'
tRp7220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7221
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7222
sS'block_loop.thisRepN'
p7223
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7224
I2
sg6385
S'36-fig_rolls.png'
p7225
sg55
g11
sS'block_loop.thisTrial'
p7226
Nsg70
Vn
sS'block_loop.thisTrialN'
p7227
I0
sg39
F0.88324578879564797
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b!\x0e\x96`'
tRp7228
sa(dp7229
S'trial_loop.thisTrialN'
p7230
I58
sg6371
g6535
sS'block_loop.thisIndex'
p7231
g6365
sg38
S'right'
p7232
sg59
g63
sS'trial_loop.thisN'
p7233
I58
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p7234
g60
(g99
S':\x00\x00\x00'
tRp7235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7236
I0
sg6380
g6543
sS'block_loop.thisRepN'
p7237
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7238
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p7239
Nsg70
Vn
sS'block_loop.thisTrialN'
p7240
I0
sg39
F1.0500566207501834
sg34
g753
(S"\x07\xdf\x07\x0e\x0f\x1b'\r} "
tRp7241
sa(dp7242
S'trial_loop.thisTrialN'
p7243
I59
sg6371
g6443
sS'block_loop.thisIndex'
p7244
g6365
sg38
S'left'
p7245
sg59
g63
sS'trial_loop.thisN'
p7246
I59
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7247
g60
(g99
S';\x00\x00\x00'
tRp7248
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7249
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7250
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7251
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7252
Nsg70
Vn
sS'block_loop.thisTrialN'
p7253
I0
sg39
F0.94994708554168028
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b-\x0e\xc5@'
tRp7254
sa(dp7255
S'trial_loop.thisTrialN'
p7256
I60
sg6371
g7063
sS'block_loop.thisIndex'
p7257
g6365
sg38
S'right'
p7258
sg59
g63
sS'trial_loop.thisN'
p7259
I60
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p7260
g60
(g99
S'<\x00\x00\x00'
tRp7261
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7262
I0
sg6380
g7070
sS'block_loop.thisRepN'
p7263
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7264
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p7265
Nsg70
Vn
sS'block_loop.thisTrialN'
p7266
I0
sg39
F1.2166924016437406
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b3\x0ec\x98'
tRp7267
sa(dp7268
S'trial_loop.thisTrialN'
p7269
I61
sg6371
g7214
sS'block_loop.thisIndex'
p7270
g6365
sg38
S'right'
p7271
sg59
g63
sS'trial_loop.thisN'
p7272
I61
sg33
g7225
sg64
g65
sS'trial_loop.thisIndex'
p7273
g60
(g99
S'=\x00\x00\x00'
tRp7274
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7275
I0
sg6380
g7222
sS'block_loop.thisRepN'
p7276
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7277
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p7278
Nsg70
Vn
sS'block_loop.thisTrialN'
p7279
I0
sg39
F0.8832321040226816
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1b:\x03\tX'
tRp7280
sa(dp7281
S'trial_loop.thisTrialN'
p7282
I62
sg6371
S'21-nakd_banana_crunch.png'
p7283
sS'block_loop.thisIndex'
p7284
g6365
sg38
S'left'
p7285
sg59
g63
sS'trial_loop.thisN'
p7286
I62
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p7287
g60
(g99
S'>\x00\x00\x00'
tRp7288
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7289
I0
sg6380
S'1-treacle_cookies.png'
p7290
sS'block_loop.thisRepN'
p7291
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7292
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p7293
Nsg70
Vn
sS'block_loop.thisTrialN'
p7294
I0
sg39
F0.98326865377202921
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c\x04\x01\xb1\x98'
tRp7295
sa(dp7296
S'trial_loop.thisTrialN'
p7297
I63
sg6371
g6964
sS'block_loop.thisIndex'
p7298
g6365
sg38
S'right'
p7299
sg59
g63
sS'trial_loop.thisN'
p7300
I63
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p7301
g60
(g99
S'?\x00\x00\x00'
tRp7302
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7303
I0
sg6380
g6971
sS'block_loop.thisRepN'
p7304
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7305
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p7306
Nsg70
Vn
sS'block_loop.thisTrialN'
p7307
I0
sg39
F1.0166392591063413
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c\n\x02\x07\x88'
tRp7308
sa(dp7309
S'trial_loop.thisTrialN'
p7310
I64
sg6371
g7063
sS'block_loop.thisIndex'
p7311
g6365
sg38
S'right'
p7312
sg59
g63
sS'trial_loop.thisN'
p7313
I64
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p7314
g60
(g99
S'@\x00\x00\x00'
tRp7315
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7316
I0
sg6380
g7070
sS'block_loop.thisRepN'
p7317
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7318
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p7319
Nsg70
Vn
sS'block_loop.thisTrialN'
p7320
I0
sg39
F0.98331683557807992
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c\x10\x02\xd2\xa8'
tRp7321
sa(dp7322
S'trial_loop.thisTrialN'
p7323
I65
sg6371
S'35-raisins.png'
p7324
sS'block_loop.thisIndex'
p7325
g6365
sg38
S'left'
p7326
sg59
g63
sS'trial_loop.thisN'
p7327
I65
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7328
g60
(g99
S'A\x00\x00\x00'
tRp7329
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7330
I0
sg6380
S'49-yorkie.png'
p7331
sS'block_loop.thisRepN'
p7332
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7333
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p7334
Nsg70
Vn
sS'block_loop.thisTrialN'
p7335
I0
sg39
F0.89992524692479492
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c\x16\x02\xea\x18'
tRp7336
sa(dp7337
S'trial_loop.thisTrialN'
p7338
I66
sg6371
g6552
sS'block_loop.thisIndex'
p7339
g6365
sg38
S'left'
p7340
sg59
g63
sS'trial_loop.thisN'
p7341
I66
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p7342
g60
(g99
S'B\x00\x00\x00'
tRp7343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7344
I0
sg6380
g6560
sS'block_loop.thisRepN'
p7345
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7346
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7347
Nsg70
Vn
sS'block_loop.thisTrialN'
p7348
I0
sg39
F1.0332049625549189
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c\x1c\x02\x0fX'
tRp7349
sa(dp7350
S'trial_loop.thisTrialN'
p7351
I67
sg6371
g7214
sS'block_loop.thisIndex'
p7352
g6365
sg38
S'right'
p7353
sg59
g63
sS'trial_loop.thisN'
p7354
I67
sg33
g7218
sg64
g65
sS'trial_loop.thisIndex'
p7355
g60
(g99
S'C\x00\x00\x00'
tRp7356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7357
I0
sg6380
g7222
sS'block_loop.thisRepN'
p7358
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7359
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p7360
Nsg70
Vn
sS'block_loop.thisTrialN'
p7361
I0
sg39
F0.98312981033996039
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c"\x02\xde`'
tRp7362
sa(dp7363
S'trial_loop.thisTrialN'
p7364
I68
sg6371
g6443
sS'block_loop.thisIndex'
p7365
g6365
sg38
S'left'
p7366
sg59
g63
sS'trial_loop.thisN'
p7367
I68
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p7368
g60
(g99
S'D\x00\x00\x00'
tRp7369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7370
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7371
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7372
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7373
Nsg70
Vn
sS'block_loop.thisTrialN'
p7374
I0
sg39
F1.1332303934259471
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c(\x030h'
tRp7375
sa(dp7376
S'trial_loop.thisTrialN'
p7377
I69
sg6371
S'5-pineapple.png'
p7378
sS'block_loop.thisIndex'
p7379
g6365
sg38
S'left'
p7380
sg59
g63
sS'trial_loop.thisN'
p7381
I69
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7382
g60
(g99
S'E\x00\x00\x00'
tRp7383
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7384
I0
sg6380
S'40-sardines.png'
p7385
sS'block_loop.thisRepN'
p7386
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7387
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7388
Nsg70
Vn
sS'block_loop.thisTrialN'
p7389
I0
sg39
F0.8999933856930511
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c.\x05\xa98'
tRp7390
sa(dp7391
S'trial_loop.thisTrialN'
p7392
I70
sg6371
g6683
sS'block_loop.thisIndex'
p7393
g6365
sg38
S'right'
p7394
sg59
g63
sS'trial_loop.thisN'
p7395
I70
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p7396
g60
(g99
S'F\x00\x00\x00'
tRp7397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7398
I0
sg6380
g6691
sS'block_loop.thisRepN'
p7399
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7400
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p7401
Nsg70
Vn
sS'block_loop.thisTrialN'
p7402
I0
sg39
F0.91657591000966931
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c4\x04\xcex'
tRp7403
sa(dp7404
S'trial_loop.thisTrialN'
p7405
I71
sg6371
g6992
sS'block_loop.thisIndex'
p7406
g6365
sg38
S'right'
p7407
sg59
g63
sS'trial_loop.thisN'
p7408
I71
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7409
g60
(g99
S'G\x00\x00\x00'
tRp7410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7411
I0
sg6380
g6999
sS'block_loop.thisRepN'
p7412
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7413
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7414
Nsg70
Vn
sS'block_loop.thisTrialN'
p7415
I0
sg39
F1.5330832250911044
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1c:\x03\xf3\xb8'
tRp7416
sa(dp7417
S'trial_loop.thisTrialN'
p7418
I72
sg6371
g6392
sS'block_loop.thisIndex'
p7419
g6365
sg38
S'right'
p7420
sg59
g63
sS'trial_loop.thisN'
p7421
I72
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7422
g60
(g99
S'H\x00\x00\x00'
tRp7423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7424
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7425
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7426
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7427
Nsg70
Vn
sS'block_loop.thisTrialN'
p7428
I0
sg39
F0.85001117589854402
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d\x04\x0c\x9a\x90'
tRp7429
sa(dp7430
S'trial_loop.thisTrialN'
p7431
I73
sg6371
g7283
sS'block_loop.thisIndex'
p7432
g6365
sg38
S'left'
p7433
sg59
g63
sS'trial_loop.thisN'
p7434
I73
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p7435
g60
(g99
S'I\x00\x00\x00'
tRp7436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7437
I0
sg6380
g7290
sS'block_loop.thisRepN'
p7438
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7439
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p7440
Nsg70
Vn
sS'block_loop.thisTrialN'
p7441
I0
sg39
F0.88326403516020946
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d\n\n\xc9\xb8'
tRp7442
sa(dp7443
S'trial_loop.thisTrialN'
p7444
I74
sg6371
g7158
sS'block_loop.thisIndex'
p7445
g6365
sg38
S'left'
p7446
sg59
g63
sS'trial_loop.thisN'
p7447
I74
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p7448
g60
(g99
S'J\x00\x00\x00'
tRp7449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7450
I0
sg6380
g7165
sS'block_loop.thisRepN'
p7451
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7452
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p7453
Nsg70
Vn
sS'block_loop.thisTrialN'
p7454
I0
sg39
F2.2830148012226346
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d\x10\tu\xe0'
tRp7455
sa(dp7456
S'trial_loop.thisTrialN'
p7457
I75
sg6371
g7324
sS'block_loop.thisIndex'
p7458
g6365
sg38
S'left'
p7459
sg59
g63
sS'trial_loop.thisN'
p7460
I75
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7461
g60
(g99
S'K\x00\x00\x00'
tRp7462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7463
I0
sg6380
g7331
sS'block_loop.thisRepN'
p7464
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7465
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p7466
Nsg70
Vn
sS'block_loop.thisTrialN'
p7467
I0
sg39
F0.91706000887279515
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d\x17\x0eH@'
tRp7468
sa(dp7469
S'trial_loop.thisTrialN'
p7470
I76
sg6371
g6460
sS'block_loop.thisIndex'
p7471
g6365
sg38
S'right'
p7472
sg59
g63
sS'trial_loop.thisN'
p7473
I76
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7474
g60
(g99
S'L\x00\x00\x00'
tRp7475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7476
I0
sg6380
g6467
sS'block_loop.thisRepN'
p7477
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7478
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7479
Nsg70
Vn
sS'block_loop.thisTrialN'
p7480
I0
sg39
F1.0666736420998859
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d\x1d\r\xa8\x18'
tRp7481
sa(dp7482
S'trial_loop.thisTrialN'
p7483
I77
sg6371
g6923
sS'block_loop.thisIndex'
p7484
g6365
sg38
S'right'
p7485
sg59
g63
sS'trial_loop.thisN'
p7486
I77
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p7487
g60
(g99
S'M\x00\x00\x00'
tRp7488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7489
I0
sg6380
g6930
sS'block_loop.thisRepN'
p7490
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7491
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p7492
Nsg70
Vn
sS'block_loop.thisTrialN'
p7493
I0
sg39
F0.96658719994684361
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d#\x0f.\xb8'
tRp7494
sa(dp7495
S'trial_loop.thisTrialN'
p7496
I78
sg6371
g6535
sS'block_loop.thisIndex'
p7497
g6365
sg38
S'right'
p7498
sg59
g63
sS'trial_loop.thisN'
p7499
I78
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p7500
g60
(g99
S'N\x00\x00\x00'
tRp7501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7502
I0
sg6380
g6543
sS'block_loop.thisRepN'
p7503
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7504
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p7505
Nsg70
Vn
sS'block_loop.thisTrialN'
p7506
I0
sg39
F0.79991407102625089
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d*\x00\x03\xe8'
tRp7507
sa(dp7508
S'trial_loop.thisTrialN'
p7509
I79
sg6371
g6833
sS'block_loop.thisIndex'
p7510
g6365
sg38
S'left'
p7511
sg59
g63
sS'trial_loop.thisN'
p7512
I79
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p7513
g60
(g99
S'O\x00\x00\x00'
tRp7514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7515
I0
sg6380
g6841
sS'block_loop.thisRepN'
p7516
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7517
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p7518
Nsg70
Vn
sS'block_loop.thisTrialN'
p7519
I0
sg39
F1.9665692386815863
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d/\x0c\x83 '
tRp7520
sa(dp7521
S'trial_loop.thisTrialN'
p7522
I80
sg6371
g6775
sS'block_loop.thisIndex'
p7523
g6365
sg38
S'right'
p7524
sg59
g63
sS'trial_loop.thisN'
p7525
I80
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p7526
g60
(g99
S'P\x00\x00\x00'
tRp7527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7528
I0
sg6380
g6782
sS'block_loop.thisRepN'
p7529
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7530
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7531
Nsg70
Vn
sS'block_loop.thisTrialN'
p7532
I0
sg39
F0.98367463538670563
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1d6\x0c\x92\xc0'
tRp7533
sa(dp7534
S'trial_loop.thisTrialN'
p7535
I81
sg6371
g7063
sS'block_loop.thisIndex'
p7536
g6365
sg38
S'right'
p7537
sg59
g63
sS'trial_loop.thisN'
p7538
I81
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7539
g60
(g99
S'Q\x00\x00\x00'
tRp7540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7541
I0
sg6380
g7070
sS'block_loop.thisRepN'
p7542
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7543
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p7544
Nsg70
Vn
sS'block_loop.thisTrialN'
p7545
I0
sg39
F0.81666480401690933
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e\x00\x0c\xe8\xb0'
tRp7546
sa(dp7547
S'trial_loop.thisTrialN'
p7548
I82
sg6371
g7046
sS'block_loop.thisIndex'
p7549
g6365
sg38
S'right'
p7550
sg59
g63
sS'trial_loop.thisN'
p7551
I82
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p7552
g60
(g99
S'R\x00\x00\x00'
tRp7553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7554
I0
sg6380
g7054
sS'block_loop.thisRepN'
p7555
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7556
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p7557
Nsg70
Vn
sS'block_loop.thisTrialN'
p7558
I0
sg39
F0.73328262364429975
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e\x06\n\x9e\xc0'
tRp7559
sa(dp7560
S'trial_loop.thisTrialN'
p7561
I83
sg6371
S'10-bounty_redo.png'
p7562
sS'block_loop.thisIndex'
p7563
g6365
sg38
S'right'
p7564
sg59
g63
sS'trial_loop.thisN'
p7565
I83
sg33
S'4-corn.png'
p7566
sg64
g65
sS'trial_loop.thisIndex'
p7567
g60
(g99
S'S\x00\x00\x00'
tRp7568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7569
I0
sg6380
S'4-corn.png'
p7570
sS'block_loop.thisRepN'
p7571
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7572
I2
sg6385
S'10-bounty_redo.png'
p7573
sg55
g11
sS'block_loop.thisTrial'
p7574
Nsg70
Vn
sS'block_loop.thisTrialN'
p7575
I0
sg39
F1.1999182904974077
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e\x0c\x06\xe5\xa0'
tRp7576
sa(dp7577
S'trial_loop.thisTrialN'
p7578
I84
sg6371
g6728
sS'block_loop.thisIndex'
p7579
g6365
sg38
S'left'
p7580
sg59
g63
sS'trial_loop.thisN'
p7581
I84
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p7582
g60
(g99
S'T\x00\x00\x00'
tRp7583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7584
I0
sg6380
g6736
sS'block_loop.thisRepN'
p7585
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7586
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p7587
Nsg70
Vn
sS'block_loop.thisTrialN'
p7588
I0
sg39
F1.3998382915924594
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e\x12\n\x8f '
tRp7589
sa(dp7590
S'trial_loop.thisTrialN'
p7591
I85
sg6371
S'4-corn.png'
p7592
sS'block_loop.thisIndex'
p7593
g6365
sg38
S'left'
p7594
sg59
g63
sS'trial_loop.thisN'
p7595
I85
sg33
g7573
sg64
g65
sS'trial_loop.thisIndex'
p7596
g60
(g99
S'U\x00\x00\x00'
tRp7597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7598
I0
sg6380
S'10-bounty_redo.png'
p7599
sS'block_loop.thisRepN'
p7600
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7601
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p7602
Nsg70
Vn
sS'block_loop.thisTrialN'
p7603
I0
sg39
F1.4503539224560882
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e\x19\x01\xd4\xc0'
tRp7604
sa(dp7605
S'trial_loop.thisTrialN'
p7606
I86
sg6371
g6460
sS'block_loop.thisIndex'
p7607
g6365
sg38
S'right'
p7608
sg59
g63
sS'trial_loop.thisN'
p7609
I86
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7610
g60
(g99
S'V\x00\x00\x00'
tRp7611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7612
I0
sg6380
g6467
sS'block_loop.thisRepN'
p7613
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7614
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7615
Nsg70
Vn
sS'block_loop.thisTrialN'
p7616
I0
sg39
F0.86657973034198221
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e\x1f\tJ\xe8'
tRp7617
sa(dp7618
S'trial_loop.thisTrialN'
p7619
I87
sg6371
g6906
sS'block_loop.thisIndex'
p7620
g6365
sg38
S'left'
p7621
sg59
g63
sS'trial_loop.thisN'
p7622
I87
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p7623
g60
(g99
S'W\x00\x00\x00'
tRp7624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7625
I0
sg6380
g6914
sS'block_loop.thisRepN'
p7626
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7627
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p7628
Nsg70
Vn
sS'block_loop.thisTrialN'
p7629
I0
sg39
F0.83315410081377195
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e%\x07\xb8\x90'
tRp7630
sa(dp7631
S'trial_loop.thisTrialN'
p7632
I88
sg6371
g6745
sS'block_loop.thisIndex'
p7633
g6365
sg38
S'right'
p7634
sg59
g63
sS'trial_loop.thisN'
p7635
I88
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7636
g60
(g99
S'X\x00\x00\x00'
tRp7637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7638
I0
sg6380
g6753
sS'block_loop.thisRepN'
p7639
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7640
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p7641
Nsg70
Vn
sS'block_loop.thisTrialN'
p7642
I0
sg39
F0.75002337815476494
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e+\x05\xad '
tRp7643
sa(dp7644
S'trial_loop.thisTrialN'
p7645
I89
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7646
sS'block_loop.thisIndex'
p7647
g6365
sg38
S'left'
p7648
sg59
g63
sS'trial_loop.thisN'
p7649
I89
sg33
g7218
sg64
g65
sS'trial_loop.thisIndex'
p7650
g60
(g99
S'Y\x00\x00\x00'
tRp7651
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7652
I0
sg6380
S'36-fig_rolls.png'
p7653
sS'block_loop.thisRepN'
p7654
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vn
sS'block_loop.thisTrialN'
p7657
I0
sg39
F0.85002970736240968
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e1\x02m\x18'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g7324
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'left'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g7331
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vn
sS'block_loop.thisTrialN'
p7670
I0
sg39
F1.0167045468797369
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1e7\x00\x9c@'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g7283
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'left'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g7290
sS'block_loop.thisRepN'
p7680
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vn
sS'block_loop.thisTrialN'
p7683
I0
sg39
F0.96662711387034506
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f\x01\x01kH'
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g6805
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'left'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g6812
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vn
sS'block_loop.thisTrialN'
p7696
I0
sg39
F1.2166966781351221
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f\x07\x01\x82\xb8'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g6552
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'left'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g6560
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vn
sS'block_loop.thisTrialN'
p7709
I0
sg39
F1.3333434068472343
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f\r\x05,8'
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
g6713
sS'block_loop.thisIndex'
p7713
g6365
sg38
S'left'
p7714
sg59
g63
sS'trial_loop.thisN'
p7715
I94
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p7716
g60
(g99
S'^\x00\x00\x00'
tRp7717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7718
I0
sg6380
g6720
sS'block_loop.thisRepN'
p7719
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7720
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p7721
Nsg70
Vn
sS'block_loop.thisTrialN'
p7722
I0
sg39
F0.99985488438051107
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f\x13\n\xbe\x00'
tRp7723
sa(dp7724
S'trial_loop.thisTrialN'
p7725
I95
sg6371
g7562
sS'block_loop.thisIndex'
p7726
g6365
sg38
S'right'
p7727
sg59
g63
sS'trial_loop.thisN'
p7728
I95
sg33
g7566
sg64
g65
sS'trial_loop.thisIndex'
p7729
g60
(g99
S'_\x00\x00\x00'
tRp7730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7731
I0
sg6380
g7570
sS'block_loop.thisRepN'
p7732
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7733
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p7734
Nsg70
Vn
sS'block_loop.thisTrialN'
p7735
I0
sg39
F1.2166849890572848
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f\x19\x0bN\x88'
tRp7736
sa(dp7737
S'trial_loop.thisTrialN'
p7738
I96
sg6371
g6906
sS'block_loop.thisIndex'
p7739
g6365
sg38
S'left'
p7740
sg59
g63
sS'trial_loop.thisN'
p7741
I96
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p7742
g60
(g99
S'`\x00\x00\x00'
tRp7743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7744
I0
sg6380
g6914
sS'block_loop.thisRepN'
p7745
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7746
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p7747
Nsg70
Vn
sS'block_loop.thisTrialN'
p7748
I0
sg39
F0.78358699581622204
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f\x1f\x0f6\x88'
tRp7749
sa(dp7750
S'trial_loop.thisTrialN'
p7751
I97
sg6371
g6805
sS'block_loop.thisIndex'
p7752
g6365
sg38
S'left'
p7753
sg59
g63
sS'trial_loop.thisN'
p7754
I97
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p7755
g60
(g99
S'a\x00\x00\x00'
tRp7756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7757
I0
sg6380
g6812
sS'block_loop.thisRepN'
p7758
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7759
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p7760
Nsg70
Vn
sS'block_loop.thisTrialN'
p7761
I0
sg39
F0.89992211083063012
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f%\x0cs\x80'
tRp7762
sa(dp7763
S'trial_loop.thisTrialN'
p7764
I98
sg6371
g6460
sS'block_loop.thisIndex'
p7765
g6365
sg38
S'right'
p7766
sg59
g63
sS'trial_loop.thisN'
p7767
I98
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7768
g60
(g99
S'b\x00\x00\x00'
tRp7769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7770
I0
sg6380
g6467
sS'block_loop.thisRepN'
p7771
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7772
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7773
Nsg70
Vn
sS'block_loop.thisTrialN'
p7774
I0
sg39
F0.86660225319883466
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f+\x0bZ@'
tRp7775
sa(dp7776
S'trial_loop.thisTrialN'
p7777
I99
sg6371
g6775
sS'block_loop.thisIndex'
p7778
g6365
sg38
S'right'
p7779
sg59
g63
sS'trial_loop.thisN'
p7780
I99
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p7781
g60
(g99
S'c\x00\x00\x00'
tRp7782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7783
I0
sg6380
g6782
sS'block_loop.thisRepN'
p7784
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7785
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7786
Nsg70
Vn
sS'block_loop.thisTrialN'
p7787
I0
sg39
F1.0334376037053516
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f1\t\xc7\xe8'
tRp7788
sa(dp7789
S'trial_loop.thisTrialN'
p7790
I100
sg6371
g6833
sS'block_loop.thisIndex'
p7791
g6365
sg38
S'left'
p7792
sg59
g63
sS'trial_loop.thisN'
p7793
I100
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p7794
g60
(g99
S'd\x00\x00\x00'
tRp7795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7796
I0
sg6380
g6841
sS'block_loop.thisRepN'
p7797
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7798
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p7799
Nsg70
Vn
sS'block_loop.thisTrialN'
p7800
I0
sg39
F1.0166691945487401
sg34
g753
(S'\x07\xdf\x07\x0e\x0f\x1f7\n\xd1\x88'
tRp7801
sa(dp7802
S'trial_loop.thisTrialN'
p7803
I101
sg6371
S'2-steamed_puddings.png'
p7804
sS'block_loop.thisIndex'
p7805
g6365
sg38
S'left'
p7806
sg59
g63
sS'trial_loop.thisN'
p7807
I101
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7808
g60
(g99
S'e\x00\x00\x00'
tRp7809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7810
I0
sg6380
S'20-fruit_pastilles.png'
p7811
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vn
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.86666012838668394
sg34
g753
(S'\x07\xdf\x07\x0e\x0f \x01\x0b\xa0\x90'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6833
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'left'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6844
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6841
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vn
sS'block_loop.thisTrialN'
p7828
I0
sg39
F0.76666947964804422
sg34
g753
(S'\x07\xdf\x07\x0e\x0f \x07\n\x0e8'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6775
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'right'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6782
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vn
sS'block_loop.thisTrialN'
p7841
I0
sg39
F1.0166241488359447
sg34
g753
(S'\x07\xdf\x07\x0e\x0f \r\x07\x0c\xb0'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g7199
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'right'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g7206
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vn
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.81669787555347284
sg34
g753
(S'\x07\xdf\x07\x0e\x0f \x13\x07\xdb\xb8'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g6850
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'left'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g6858
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vn
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.78334694208024302
sg34
g753
(S'\x07\xdf\x07\x0e\x0f \x19\x05\x91\xc8'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g6409
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'left'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.89991697904042667
sg34
g753
(S'\x07\xdf\x07\x0e\x0f \x1f\x02\x90@'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g7378
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'left'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g7385
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.89993123401382036
sg34
g753
(S'\x07\xdf\x07\x0e\x0f %\x01\xb1\x98'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6992
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'right'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6999
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.90004955028416589
sg34
g753
(S'\x07\xdf\x07\x0e\x0f +\x00\x98X'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g7117
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g7124
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.99982295324207371
sg34
g753
(S'\x07\xdf\x07\x0e\x0f 0\x0e\xc1X'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g7324
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'left'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g7331
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vn
sS'block_loop.thisTrialN'
p7932
I0
sg39
F1.6998997590344516
sg34
g753
(S'\x07\xdf\x07\x0e\x0f 7\x00\x13\x88'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
S'18-mms.png'
p7936
sS'block_loop.thisIndex'
p7937
g6365
sg38
S'left'
p7938
sg59
g63
sS'trial_loop.thisN'
p7939
I111
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p7940
g60
(g99
S'o\x00\x00\x00'
tRp7941
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7942
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7943
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vn
sS'block_loop.thisTrialN'
p7947
I0
sg39
F1.0999624238929755
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!\x01\x0bZ@'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g7562
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'right'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g7566
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g7570
sS'block_loop.thisRepN'
p7957
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F1.2665939282942418
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!\x07\rY\xf8'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g7046
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g7054
sS'block_loop.thisRepN'
p7970
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F1.1333564073811431
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!\x0e\x02\xb3h'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g6923
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g6930
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F1.1165808707391989
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!\x14\x05,8'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g6683
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'right'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g6691
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F1.0331664741297573
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!\x1a\x07f\x88'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g7063
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'right'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g7070
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F1.0000062721883296
sg34
g753
(S'\x07\xdf\x07\x0e\x0f! \x08t\x10'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g7936
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g7943
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.73330571669976052
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!&\t\x04\x98'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6505
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F1.2166787168698647
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!,\x05\x89\xf8'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7646
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'left'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g7218
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7653
sS'block_loop.thisRepN'
p8048
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.1166059594906983
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!2\t3x'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6638
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6645
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.83337277209011518
sg34
g753
(S'\x07\xdf\x07\x0e\x0f!8\x0b\xacH'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7804
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'left'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7811
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.84985693709677435
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"\x02\t\xa0\xd8'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6409
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.7665289256201504
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"\x08\x07\xd0\x00'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g7158
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g7165
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.88306646124328836
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"\x0e\x04\xcex'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7592
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'left'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g7566
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7599
sS'block_loop.thisRepN'
p8113
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F1.7336598102147036
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"\x14\x03z\xa0'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g7804
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g7811
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.68366933253673778
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"\x1a\x0f:p'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6850
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'left'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6858
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.79989924585515837
sg34
g753
(S'\x07\xdf\x07\x0e\x0f" \n\xcd\xa0'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g7117
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6917
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g7124
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.99992159765224642
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"&\x08E0'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6372
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.74996977945829713
sg34
g753
(S'\x07\xdf\x07\x0e\x0f",\x08\xd5\xb8'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6805
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6812
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.99999714900513936
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"2\x05[\x18'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6850
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6858
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.78334124009143125
sg34
g753
(S'\x07\xdf\x07\x0e\x0f"8\x05\xeb\xa0'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7199
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7206
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F1.0999210844729532
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#\x02\x03(\x98'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6535
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'right'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6543
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.91659814776539861
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#\x08\x05(P'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7214
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g7218
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7222
sS'block_loop.thisRepN'
p8230
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F1.1668199551368161
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#\x0e\x04\x88('
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6713
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6720
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F1.0999156675834456
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#\x14\x07z\x10'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g7646
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'left'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g7218
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g7653
sS'block_loop.thisRepN'
p8256
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F1.4000184744445505
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#\x1a\ty\xc8'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7199
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7206
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.9499342560666264
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#!\x00\xfa\x00'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6409
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F1.0666562510332369
sg34
g753
(S"\x07\xdf\x07\x0e\x0f#'\x00\x98X"
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6805
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6812
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F1.1832493810488813
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#-\x02\x1e\xf8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7324
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7331
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F1.1166874979335262
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#3\x05\x89\xf8'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7378
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7385
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.3003616771602537
sg34
g753
(S'\x07\xdf\x07\x0e\x0f#9\x07\xc4H'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g7158
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g7165
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.94966968377957528
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$\x03\x0c\xdc\xf8'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7646
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g7218
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7653
sS'block_loop.thisRepN'
p8347
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.85002942226310552
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$\t\x0c{P'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6372
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.85000604410834057
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$\x0f\n\xaax'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6964
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6971
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.8666857873358822
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$\x15\t\x18 '
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6906
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6914
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.6669636452588747
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$\x1b\x07\x85\xc8'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6460
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.74995381388907845
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$"\x02\xd2\xa8'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7378
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7385
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.86659227471773193
sg34
g753
(S"\x07\xdf\x07\x0e\x0f$'\x0e\xd8\xc8"
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g7046
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g7054
sS'block_loop.thisRepN'
p8425
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.88328228152568045
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$-\rB\x88'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g7562
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g7566
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g7570
sS'block_loop.thisRepN'
p8438
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F1.4832321610419967
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$3\x0c)H'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6964
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6971
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.86669405522025045
sg34
g753
(S'\x07\xdf\x07\x0e\x0f$:\x04\x9f\x98'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6850
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6858
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.76666833924991806
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%\x04\x03\tX'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6906
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6914
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.1165817260380209
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%\n\x00\x0b\xb8'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6790
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6797
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.81670956463040056
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%\x10\x02F\x08'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6621
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6625
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6629
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6632
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F1.2166097228027866
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%\x15\x0f>X'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7199
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7206
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F1.0000136847729664
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%\x1c\x03\xe4\x18'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6552
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6560
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.81671697721594683
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%"\x04t\xa0'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g7046
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g7054
sS'block_loop.thisRepN'
p8542
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.75002166755803046
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%(\x02*\xb0'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g7117
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g7124
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.69992256698969868
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%-\x0e0\xd0'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6713
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6720
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.89993921679706546
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%3\t\xfe\x98'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7592
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g7566
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7599
sS'block_loop.thisRepN'
p8581
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.5165551547688665
sg34
g753
(S'\x07\xdf\x07\x0e\x0f%9\x08\xe5X'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6505
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F1.0003195964809493
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&\x04\x02\x0fX'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7646
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g7218
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7653
sS'block_loop.thisRepN'
p8607
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F2.0334230636335633
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&\n\x02\x9f\xe0'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7283
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g7057
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7290
sS'block_loop.thisRepN'
p8620
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.88334528850373317
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&\x11\x03\xa5\x98'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6923
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6930
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6861
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.79990266704771784
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&\x17\x02M\xd8'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g7936
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6670
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g7943
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.79993431308685103
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&\x1c\x0f\x0b\x90'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6992
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6999
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.0337036014898331
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&"\x0c\x83 '
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7214
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g7225
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7222
sS'block_loop.thisRepN'
p8672
I2
sg6383
g7218
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g7225
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F1.3332456177358836
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&(\r\x8c\xc0'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6638
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6539
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6645
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6539
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6546
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.1165649051708897
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&/\x03\xdcH'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7804
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7811
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F1.7665380488024311
sg34
g753
(S'\x07\xdf\x07\x0e\x0f&5\x06\x1a\x80'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7378
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7385
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.86665072010418953
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'\x00\x03\x11("
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6666
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6674
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.75043791275311378
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'\x06\x01~\xd0"
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6728
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6736
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.88327201794527355
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'\x0b\r\x84\xf0"
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7936
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7943
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.8832383762110112
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'\x11\x0c-0"
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6409
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.70000752662599552
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'\x17\x0b\x13\xf0"
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6775
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6782
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.78333040631241602
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'\x1d\x06\xe1\xb8"
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6992
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6999
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.85010240772135148
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'#\x04\x1e\xb0"
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6790
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6797
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.1166769492538151
sg34
g753
(S"\x07\xdf\x07\x0e\x0f')\x02M\xd8"
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6666
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6674
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F1.0166937131007217
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'/\x04\x8c\x10"
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6790
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6797
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6732
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6739
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.8165670149064681
sg34
g753
(S"\x07\xdf\x07\x0e\x0f'5\x05[\x18"
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6683
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6691
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6687
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6694
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F1.1166729578608283
sg34
g753
(S"\x07\xdf\x07\x0e\x0f';\x03\x11("
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6505
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.88333416962450428
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(\x05\x05Kx'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7936
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6676
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7943
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6676
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6670
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.89999737708512839
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(\x0b\x0428'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g7117
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6917
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g7124
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6910
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6917
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F1.0664757830827511
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(\x11\x03\x18\xf8'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6745
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6753
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.83327070648829249
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(\x17\x04\x9f\x98'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6488
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6496
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.98299638379830867
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(\x1d\x02\x90@'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g7804
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g7811
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.89992011513459147
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(#\x02\xe60'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7158
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7165
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6492
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.7830832250911044
sg34
g753
(S'\x07\xdf\x07\x0e\x0f()\x01\xcc\xf0'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6552
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6560
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F1.2500065572876338
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(.\x0eL('
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g7562
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g7573
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7570
sS'block_loop.thisRepN'
p8958
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F1.4666958228363001
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(5\x03g\x18'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6443
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'left'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F1.26657425643225
sg34
g753
(S'\x07\xdf\x07\x0e\x0f(;\n\xe1('
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6372
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.74992701454084454
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)\x06\x00:\x98'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g7592
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g7566
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g7599
sS'block_loop.thisRepN'
p8997
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F2.0999886530416916
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)\x0b\x0c@\xb8'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7283
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g7050
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7290
sS'block_loop.thisRepN'
p9010
I2
sg6383
g7050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g7057
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.96665134732302249
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)\x12\x0e8\xa0'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6443
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6451
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F1.0665741423927102
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)\x18\x0eP\x10'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g7592
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g7573
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g7599
sS'block_loop.thisRepN'
p9036
I2
sg6383
g7566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g7573
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F1.0834175327036064
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)\x1f\x00\x94p'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6505
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6513
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6509
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F1.0833456876434866
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)%\x02U\xa8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6392
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6400
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F1.5171113837923258
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)+\x04\x16\xe0'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6745
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6756
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6753
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6749
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6756
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.81672011331011163
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)1\x0c\x83 '
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6833
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6841
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6844
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.99999971489978634
sg34
g753
(S'\x07\xdf\x07\x0e\x0f)7\n90'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I46
sg56
g57
sg58
Vn
sg42
I554
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I46
sg55
g11
sg56
g57
sg45
F0.23999999999999999
sg42
I554
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g562
sg51
F30.300000000000001
sg46
F1.8200000000000001
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I210719056
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xe1z\x14@\\\x8f\x82?\xd7\xa3p?\xd7\xa3p?\xf6(\xdc?\xd7\xa3\xf0?{\x14\xee?R\xb8\xde?\n\xd7\x03@\xc3\xf5\xe8?\x00\x00\xc0?\\\x8f\x02@\n\xd7#@\x1f\x85\xeb?\x00\x00\x80?\xe1z\x94?{\x14\xee?\xa4p\xbd?\xaeG\x01@R\xb8\xde?\\\x8f\xc2?\xa4p=?333?\x14\xae\x07@\n\xd7\xa3?\xecQ\xb8?\x14\xae\x87?\xa4p\xfd?\x00\x00 @\xecQ8?R\xb8\xde?ff\x06@\xa4p\xfd?\xcd\xcc\x0c@=\n\xd7?ff&@)\\\xcf?\xb8\x1e\x05@\xaeGa?\xecQ\xf8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\xfe\xd4\xa4@\xfe\xd4\x9c@\x0e-2@\xfc\xa9i@\xa8\xc6[@\xbaI\xa4@\xc9vv@\xc9vf@\xbaI\x94@\xb6\xf3\xdd?\x87\x16Q@!\xb0:@1\x08\x80@\xaa\xf1\xa6@\xfe\xd4\x84@\xee|\xaf@\x87\x161@D\x8b\xe8@\x08\xac"A\xee|7@/\xddl@;\xdf\x1dA\xdb\xf9n@T\xe3\r@b\x100@!\xb0Z@!\xb0\x82@D\x8b\x98@\x7fj\x02A\xfe\xd4\xac@\x1dZ$@\x10X\xbd@\xee|w@\xc9vF@\x08\xac\x02Ad;\x83@T\xe3\x9d@\xfe\xd4\xa4@B`\x8d@\xc9v\x06@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xb0A\x00\x00\xa0A\x00\x00\xd8A\x00\x000A\x00\x00pA\x00\x00\xe0A\x00\x00\x80A\x00\x00@A\x00\x00\xe0@\x00\x00\x14B\x00\x00\xb8A\x00\x00\x10B\x00\x00\x0cB\x00\x00\xc8A\x00\x00@@\x00\x00\x88A\x00\x00\x90A\x00\x00\x80?\x00\x00\x08B\x00\x00 A\x00\x00\x00A\x00\x00\xc0@\x00\x00PA\x00\x00\x18B\x00\x00\x1cB\x00\x00\x00@\x00\x00\xc0A\x00\x00\xa8A\x00\x00\x10A\x00\x00\x04B\x00\x00`A\x00\x00\xf8A\x00\x00\x80@\x00\x00\xe8A\x00\x00\x00\x00\x00\x00\xd0A\x00\x00\xa0@\x00\x00\xf0A\x00\x00\x00B\x00\x00\x98A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\xcd\xcc\xcc?\xcd\xcc\x8c?\x9a\x99\xd9?ff\xa6?33\xb3?\xcd\xcc\xcc?\xcd\xcc\x8c?\x00\x00\xc0?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\x99?\x00\x00\xc0?ff\xe6?33\xf3?\x9a\x99\xd9?\x00\x00\x00@\x00\x00\xc0?33\xf3?\x00\x00\x80?\xcd\xcc\xcc?\xcd\xcc\xcc?33\xf3?33\xf3?33\xf3?33\xf3?\x9a\x99\xd9?\x00\x00\xc0?33\xb3?ff\xe6?ff\xa6?\xcd\xcc\xcc?\x00\x00\xc0?33\xb3?\x9a\x99\x99?\xcd\xcc\x8c?ff\xa6?\xcd\xcc\x8c?33\xf3?\x00\x00\x80?\xcd\xcc\xcc?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'"\x00\x00\x00\x11\x00\x00\x00\x19\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00$\x00\x00\x00\x15\x00\x00\x00\x08\x00\x00\x00\x14\x00\x00\x00\x1c\x00\x00\x00\x13\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x00\x16\x00\x00\x00\x1e\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x1a\x00\x00\x00\r\x00\x00\x00#\x00\x00\x00\x02\x00\x00\x00\x05\x00\x00\x00!\x00\x00\x00%\x00\x00\x00\x1f\x00\x00\x00&\x00\x00\x00\x1d\x00\x00\x00\x12\x00\x00\x00\x0c\x00\x00\x00\x0b\x00\x00\x00\t\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g257
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g243
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g292
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g180
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g208
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g299
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g215
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g187
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g152
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g362
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g264
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g355
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g348
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g278
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g124
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g222
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g229
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g110
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g341
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g173
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g159
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g145
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g194
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g369
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g376
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g117
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g271
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g250
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g166
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g334
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g201
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g320
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g131
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g306
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g103
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g285
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g138
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g313
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g327
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g236
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I210719056
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@\x00\x00\x00@\x00\x00\xa0@\x00\x00\xc0@33\x93@33\xa3@33\x13@\x00\x00\xc0?\x00\x00\x80@fff@\x9a\x99\x89@ff\xa6@333@\x00\x00\xc0@\xcd\xcc\xac@\x00\x00\xb0@\x00\x00@@33\xb3?ff\xa6@\x00\x00\xc0@\x00\x00\xc0@33\xb3?\x00\x00\xb0@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99Y@33\x83@\x00\x00 @ff\x06@\x00\x00\xc0@\x00\x00\x80@\x9a\x99\xa9@\x00\x00\x00@\x9a\x99\x19@ffF@ff\x86@\xcd\xcc\x0c@33\x13@ff&@\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\x89z\xd7?\x8e\x00\xd0@p\xf0\x8e?\xbf\x02\xa0?ss\x17@!\x02\xa0?ag\xb6@hD\x08A~\x00P@\x01\x14A@R\xbe;@\xa3G\xc4?\x11\xf0\x96@\xcc\x8c\x88?sl\xa6?/\xe4\x9d?u\xacj@$\xef\x96@\x19y\x97?\x01\x9c\x99?_As?ED\xcc@\x9a\xc3{?$\x01\x8f?1\xac\x8a?\x83\x97\xf9?\x08W\x95?w\x01\x10@qE\x84@\x95}w?E1\x13@iJ\x84?\x0e\x17\xd1?D\xc2\x9b?\xaa\x01\xa0?\x13\x01\x80?\x98\xabj@,\x8f\xc8?\xecE\x14@\tG4@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'33\x83@\x9a\x999@\x00\x00@@\x00\x00`@\x00\x00\x80@\xcd\xccL@\x00\x00@@333@\x00\x00@@\x9a\x99y@33s@33S@33S@\xcd\xcc,@ff\x86@33s@fff@\x00\x00@@\x00\x00\x80@\x00\x00\x80@\x00\x00\x80@33\x83@\xcd\xccL@33\x83@fff@33\x83@33S@\x00\x00@@33\x83@333@\x9a\x99y@\x00\x00@@\x00\x00`@\x00\x00@@33\x83@\x00\x00`@\x9a\x99y@\x00\x00`@\x00\x00@@333@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80\x1a\x16\r\x00\xeb\xa2\x0c`\xeb\xa2\x0c\x80\xe0\xa2\x0c c\xbd\x04\x80a\xbd\x04 `\xbd\x04\xc0`\xbd\x04\x00a\xbd\x04``\xbd\x04\xa0\xe9\xa2\x0c`a\xbd\x04\xe0\xe5\xa2\x0c@`\xbd\x04`\xe5\xa1\x0c`\xea\xa2\x0c`\xb6\xa4\x0c\x80\xb3\xa4\x0c\x00\xbc\xa4\x0c \xbc\xa4\x0c\xa0\xb6\xa4\x0c\x80\xb7\xa4\x0c\x80\xb6\xa4\x0c\xe0\xb5\xa4\x0c@\xbc\xa4\x0c\x00\xbd\xa4\x0c\x80%\xbf\x04\xe0\xb7\xa4\x0c`\xb8\xa4\x0c \xa9\x16\r \x1b\x16\r`\x1b\x16\r@\x10\x16\r\x00\x1c\x16\r`\x1a\x16\r\xc0\x15\x16\r@\x19\x16\r\xe0\x16\x16\r@\x16\x16\r\x80\x15\x16\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S"\xf8S\xf3?\xbaId@+\x87\xe6?\xc9v\x06@\xee|'@\x1dZ\xe4?\xbaI$@\x96C3@\xc9v\x16@\xcb\xa1\xa9@\xe9&\xd1?\xe9&\xf1?^\xba\xf9?\xc5 \xa0?b\x10\x00@\xe9&\xb1?\xee|7@/\xddl@\x83\xc0\xca?m\xe7{?m\xe7{?B`%@\xf8S\xd3?u\x93\x88?m\xe7{?\x83\xc0\xca?\x96C\x13@/\xddl@\x87\x16\x01@\x91\xed\xac?\x0e-\x12@\xdb\xf9\xee?\xdb\xf9\xae?+\x87\x86?\x96C\x03@B`\xd5?\x1dZ\xa4?\x83\xc0\n@+\x87\xe6?B`e@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I210719056
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\x08\xde?\r@\xdd?\rP\x860\rh\xdd?\r\x90\xdd?\r\xb8\xdd?\r\x80\x860\r\x18\xdd?\r\x80\x860\rP\x860\rh\xdd?\r\xb8\xdd?\r\x90\xdd?\r@\xdd?\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xc8#\xf3\x04\xc8,\xf3\x04(-\xf3\x04\x00.\xf3\x04\xe0#\xf3\x04P,\xf3\x040"\xf3\x04@:\x14\x05\xb8=\x14\x0586\x14\x05h?\x14\x05\xf89\x14\x05@=\x14\x0505\x14\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g789
sg83
g790
sg84
g794
sg85
g795
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g800
sg83
g801
sg84
g805
sg85
g806
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g811
sg83
g812
sg84
g816
sg85
g817
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g744
sg83
g822
sg84
g749
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g811
sg83
g831
sg84
g816
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g767
sg83
g840
sg84
g772
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g778
sg83
g849
sg84
g783
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g800
sg83
g858
sg84
g805
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g789
sg83
g867
sg84
g794
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g756
sg83
g876
sg84
g761
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I210719056
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I210719056
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\x80\xd5\x13\r\xa0\xfcA\r\xa8\xafA\r \x06B\r\xc8\xfcA\r\xa8\xafA\r@\xd5\x13\r`\x15\x16\r\xf0\xfcA\r\x00\xd5\x13\r  B\r\x18\xfdA\r@\xfdA\r\xa0\xfcA\r\xf0\xfcA\r\x18\xfdA\r\x80\xfeA\r\x80\xd1\x13\r \x06B\rP\x06B\r\xd0\xfeA\r\xc8\xfcA\r@\xd5\x13\r@\xd0\x13\r\x80\x06B\r@\xd5\x13\r  B\r\x18\xfdA\r\xf0\xfcA\rh\xfdA\r \x06B\r\x90\xfdA\r  B\r\xe0\xfdA\r \x06B\r\x80\x06B\r\x90\xfdA\r\x80\xd1\x13\r0\xfeA\r\x00\x08B\r\x80\xfeA\r\x80\xd5\x13\r\x00\xd5\x13\r\xb0\x06B\r\x80\xd1\x13\r\xc8\xfcA\r@\xd0\x13\rX B\r\x80\x06B\r \x06B\r\x00\xd5\x13\r\x80\xd5\x13\r \x06B\r\x80\xfeA\r\x80\x06B\r@\xfdA\r@\xd0\x13\r@\xd5\x13\r\xf0\xfcA\r\xd0\xfeA\rP\x06B\r\x80\x06B\r\xc8\xfcA\r\xa8\xafA\r@\xfdA\r@\xd5\x13\r\x00\xd5\x13\r\x00\x08B\rP\x06B\r\xd0\xfeA\r\xa0\xfcA\r@\xd0\x13\rh\xfdA\r\x90 B\r\xd0\x07B\r\xa8\xfeA\rh\xfdA\r\xa8\xafA\r\x90 B\r\x80\xd1\x13\r\xa8\xafA\r0\x08B\rp\x07B\r\x90\xfdA\r\x80\x06B\r\x80\xd1\x13\r@\xfdA\r\x80\xd5\x13\r\xf8\xfeA\rh\xfdA\r\xe0\xfdA\r\xf8\xfeA\r\xf0\xfcA\r\x80\x06B\r\xa0\xfcA\r\x00\xd5\x13\r0\xfeA\r0\x08B\r \x06B\r  B\r\xa0\xfcA\r  B\r \x06B\r\xc8 B\r\x00\x08B\r  B\r@\x07B\r@\xfdA\r\xb0\x06B\rP\x06B\r\xa8\xfeA\r@\xd5\x13\r@\xfdA\r\x80\xd1\x13\r\x90\xfdA\r@\xfdA\rX B\r@\xd0\x13\r\x90 B\rP\x06B\r`\x15\x16\r\x18\xfdA\r \x06B\r8!B\r\xb0\x06B\r@\x07B\r\x80\xd1\x13\rX B\r\x08\xfeA\r\x90 B\rX B\r@\xd0\x13\r\x00\xd5\x13\r\x80\xd1\x13\r\x90 B\r\xc8\xfcA\r@\xfdA\r\x80\xd5\x13\r  B\rP\x06B\r\xa0\xfcA\r\x18\xfdA\r\xb0\x06B\r\x18\xfdA\r\xc8\xfcA\r\xf0\xfcA\r\xa8\xafA\r\x00\xd5\x13\r\xe0\x06B\r\x90\xfdA\r  B\r\xf0\xfcA\rP\x06B\r\xc8\xfcA\r\xb0\x06B\rp\x07B\r\x90 B\r8!B\r\xf0\xfcA\r\x90\xfdA\r\x90 B\r \x06B\r@\xd5\x13\rP\x06B\r\xa8\xafA\rP\x06B\r@\xfdA\r0\xfeA\r\x00\xd5\x13\r\x80\x06B\r@\xd0\x13\r\x00\xd5\x13\rX B\rh\xfdA\r@\xd5\x13\r  B\rh\xfdA\r\xb0\x06B\r\xa8\xafA\r@\xfdA\r\xa0\xfcA\r\xb0\x06B\r\x80\xd5\x13\r@\xd5\x13\r\xa0\xfcA\r\xa8\xafA\rX B\r\x80\xd5\x13\rX B\r\x90\xfdA\r\x18\xfdA\r\x00\x08B\r\xb0\x06B\r@\xd0\x13\r\x80\xd5\x13\r@\x07B\r\x90\xfdA\r\xd0\x07B\r  B\rP\x06B\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xe0\xfa0\r\xe0\xf90\r\xe0\xf80\r\xa0\xf3\x14\r`\xf1\x14\r\xa0\xf1\x14\r\xe0\xf5\x14\r \xf80\r\x00\xfa0\r\xc0\xf90\r \xf90\r@\xfa0\r\xa0\xfb0\r\xa0\xfa0\r@\xf80\r@\xfb0\r\xc0\xfb0\r\x80\xfb0\r\x80\xfa0\r\x00\xfc0\r \xfb0\r\xa0\xf90\r`\xfc0\r@\xfc0\r`\xfb0\r\xc0\xfc0\r\xe0\xfc0\r\x00\xfb0\r \xfd0\r\x00N\x15\r\xe0N\x15\r\xc0\xab\x16\r\x80\xab\x16\r\x80\xaa\x16\r\xc0\xaa\x16\r@\xab\x16\r@\xad\x16\r\xc0\xac\x16\r\x00\xad\x16\r@\xac\x16\r@\xaf\x16\r\xa0\xa6\x16\r`\xd0\x13\r\x80\xac\x16\r`\xa7\x16\r`\xa5\x16\r\x80\xa9\x16\r\x00\xae\x16\r\x80\xad\x16\r@\xaa\x16\r\x00\xa6\x16\r@\xa6\x16\r@\xa9\x16\r\x00\xac\x16\r@\xa8\x16\r\xc0\xae\x16\r\xc0\xa7\x16\r\xc0\xa8\x16\r \xa7\x16\r\x80\xa8\x16\r`\xa0\x16\r@\xae\x16\r\x00\xa8\x16\r\xe0\xa6\x16\r\x80\xa6\x16\r\xa0\xa0\x16\r\xc0\xa0\x16\r \xa0\x16\r\x00\xa1\x16\r\xc0\xa9\x16\r\x00\xaf\x16\r\x00\xa9\x16\r\x00\xab\x16\r\xe0\xa0\x16\r\x80\xa0\x16\r\x80\xae\x16\r@\xa0\x16\r\xa0O\x15\r\xc0\xad\x16\r \x12\x16\r\xc0\x1e\x16\r@\x1e\x16\r \x1e\x16\r\xa0\x1b\x16\r`\x1e\x16\r\x00\x1f\x16\r\x00\x16\x16\r\x80\x1f\x16\r \x13\x16\r\xc0\x1f\x16\r\xe0\x1f\x16\r\xe0\x1e\x16\r@\x1f\x16\r`\x10\x16\r\x00\x11\x16\r`\x11\x16\r@\x13\x16\r \x1f\x16\r\x80\x11\x16\r\xa0\x11\x16\r\x80\x12\x16\r`\x12\x16\r\xa0\x12\x16\r\x00O\x15\r\x80\x13\x16\r\xe0\x12\x16\r\xa0\x1f\x16\r\xe0\x11\x16\r\xc0O\x15\r\xa0\x13\x16\r@\x11\x16\r\xc0\x13\x16\r\xa0\x1e\x16\r\xc0\x11\x16\r`M\x15\r\xa0s\xbe\x04\xa0`\xbd\x04\xc0p\xbe\x04`\xf5\x14\r`\xf0\x14\r {\xbe\x04\x00\xaa\x16\r`\x1f\x16\r \x11\x16\r\x00\x12\x16\r\x80\x1c\x16\r \x14\x16\r\x80\x1e\x16\r\xc0\x12\x16\r\xe0\x13\x16\r@\xf5\x14\r@\x12\x16\r\x80\xe3\xa1\x0c\x00\x14\x16\r`\xfd0\r\xc0\xfd0\r\xe0\xfb0\r\xe0\xfd0\r\xa0\xfc0\r@\xfd0\r\xa0\xf80\r\x80\xfc0\r`\xfe0\r@\xfe0\r \xfc0\r\xa0\xfe0\r\xc0\xfe0\r \xfa0\r\x00\xff0\r\xe0\xfe0\r\xa0\xff0\r`\xf80\r`\xf90\r\x80\xfe0\r`\xfa0\r\xc0\xfa0\r\x00\xfd0\r@\xff0\r\xc0\xff0\r \xfe0\r`\xff0\r \xff0\r\x80\xff0\r\xe0\xff0\r\x00\xfe0\r`\x13\x16\r\xa0\x01\x17\r\x80 \xde\x1a@\xf4\x14\r\x00"\xde\x1a\x00!\xde\x1a\xa0!\xde\x1a\xc0 \xde\x1a` \xde\x1a "\xde\x1a\xe0"\xde\x1a@ \xde\x1a@!\xde\x1a`"\xde\x1a\x80"\xde\x1a\xc0"\xde\x1a`#\xde\x1a\xc0#\xde\x1a`!\xde\x1a\xa0#\xde\x1a\x80!\xde\x1a@$\xde\x1a`$\xde\x1a\xc0!\xde\x1a\xe0!\xde\x1a\x80#\xde\x1a\x00%\xde\x1a\xa0$\xde\x1a $\xde\x1a\x80$\xde\x1a@x\xba\x0c\xc0}\xba\x0c\xc0x\xba\x0c\xe0\x7f\xba\x0c\x80y\xba\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\x97\xdb=@|\xbb\xdb?\x1f\xde\x9d?Q\xee\xce?g\x03\xa0?C\xdd\xbd?\xc4\xde\x9d?]\xfe\x0f@\x87f\xa6?W!\xe2?\xac\x02\xc0?\xef\xa8\xca?L\xcd\xcc?_\xaa\xaa?\xdcC\x14@\x97\xee\x8e?^\r\xd1?\xa0\xef\xce?\xd82\xb3?\x893\xd3?\x17\x99\xd9?\xedm\xd7?\t\xa7\xaa?\x91u\xb7?M\x00\xc0?\xd1D\xa4?5\x00\xc0?[\x12\x91?x3\x93?\xcfx\x97?If\xc6?\xda2\x13@\xd1O\xb5?\xef\x96\xf9?2>\x93?\x84/\xd3?\xa3ef@\xca\x87H@\x1b4s?8\x89\xc8?c/\xd3?\xfd\xa9\xea?mQ\x05@\x90U\xb5?\xd2\x99\xb9?\xc9\xb1\xbb?p\xb8\x9b?\xc3s\xb7?\xc9!\xc2?KV\x95?\xb3\xca\xac?\x91\xcd\x8c?\x8b\x00\x80?\x80\xd2\xdd?%\xab\x8a?\x97\xccL@\xcfu\xb7?\xb4\x86H@\rW\xf5?\xb4D\x04@\xd9\x98\xb9?\xf9\xc9\x8c?\x00\xa1\x8a?|\x12\x91?S\xf9\x8e?\x8b"\xa2?\xf0U\x95?\x15\x86\xa8?>\xdd\xbd?p\xcd\x8c?T$\xc2?\x1b4\x93?\xd1e\xa6?\x8atw?\xc8\xbc{?\xfaT\xd5?\xf92\xb3?\xab\xaa\x8a?\x0e\xcd\xac?>\x00\xa0?#\xbf{?\x08w\xd7?\xa9w\x97?,f\xa6?}\xb7\x8a?\x13\x99\x19@\xe12\x93?E\xee\xae?\x85x\xb7?)\xab\n@\x8cU\x95?\x9e!\x02@,3\xf3?""\xa2?\xd7<\xb3?\x99\x01\xa0?~=\x84?\x864\xd3?\xdc\xde\x9d?\xcd\xcc\x0c@\xbf\xf1n?C#\xa2?q!\x82?\xef\x11Q?\xabU\x95?*\xbc{?\x89aw?\xb5\x96\x99?-\xcd\x8c?l\x12\xf1?9\xbc\xfb?\x91\xa7\xca?\xbd%b?\x9e\xef\xae?\x1c`\xf5?\xf8\xcc\x8c?\x8cs\xd7?\nh\x86?\xde\xaa\x8a?D\xc7\xbb?\x1ea\x86?A\x0cQ?\x1d\xefn?P0\x93??f6@\xd8\xe5\x8e?\xebf\xe6?~\xa8Z@\x9b\xee\xee?qy\x97?\xff.\xd3?v\x8b\x88?^"\x82?\xd8T\x95?\xa5\x9f\t@\xae\xa6{?\xed\xean?IU\x95?#\xa7\xaa?\xbd\xca\xac?\xa38\x93?\xd9\x84\x88?C\x10\x91?\xb1\xc7L?*\xdcn?tx\xb7?\x9cD\x84?\n\x10\xb1?\xd8\r\x91?)\x89\x08@\xb5v\x97?\x0f"\x82?s\xee\xae?\x9e\xd8n?\x0c\x12\x91?\x1f\x10\x91?q\x10\x01@\xbc\x89\x88?Dy\x97?\xa2\x1c\xb1?\xea\xabj?Mhf?\x04\x89\x88?\xae\x85\x88?\xac\x83\xb7?\xe7v\'@\xaf\x1db?\x04\xcfL?zCU?y\x9b\x99?\t\xbc{?\xd4qw?\xdc\xb5\x9b?\x83\x85\xc8?\x8f;\x93?>\xefn?\xe4!b?\xe4\xfd\x7f?\x91\x86H?\x1a\xeen?;w\xb7?\xb7sw?\xe2ww?D\x99\xb9?\xb8\xbb\x9b?eWU?>\xec\x8e?\xf1\xacj?s\xd6]?<\xecn?\xd7\xebn?\xa3"b?\xadSU?r\x87H?\xa3\xee\x8e?\x8b"s?\x89\x9eY?*.s?\xdfxw?te\x86?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xe03\x14\x05\xc80\x14\x05\xd0\x11\xf2\x048\x13\xf2\x04\x88\x11\xf2\x04 \x1f\xf2\x04X\x11\xf2\x04\x80\x10\xf2\x04\x90\x1e\xf2\x04\xd8\x1b\xf2\x04\x18\x15\xf2\x04\xe0\x16\xf2\x04\xa8\x12\xf2\x04\xb0\x1c\xf2\x04\xa0\x1a\xf2\x048\x19\xf2\x04\xe8\x11\xf2\x04`\x12\xf2\x04\x90\x12\xf2\x04(\x1a\xf2\x048\x1c\xf2\x04\xe0\x1c\xf2\x04\x80\x19\xf2\x04\xd8\x12\xf2\x04\xa0\x17\xf2\x04\xc8\x1c\xf2\x04\xc0\x1e\xf2\x04\xf0\x1e\xf2\x04\x98\x16\xf2\x04\xe8Dd\x02\x88\x1d\xf2\x04\xe8\x1a\xf2\x04\x88\x17\xf2\x04\x98\x13\xf2\x04\x18\x1b\xf2\x04\xb0\x13\xf2\x04\x08\x19\xf2\x04\x18\x18\xf2\x04h\x13\xf2\x04`\x1b\xf2\x04x\x1b\xf2\x04 \x10\xf2\x04\x08\x1f\xf2\x04P\x1f\xf2\x04(\x17\xf2\x04\xe8\x14\xf2\x04\x88\x14\xf2\x04\x00\x1e\xf2\x04H\x1b\xf2\x04\x80\x1f\xf2\x04P\x16\xf2\x04\x98\x10\xf2\x04\xf8\x10\xf2\x04x\x18\xf2\x04\xb8\x1a\xf2\x04\x00\x1b\xf2\x04\xf8\x16\xf2\x04\x90\x1b\xf2\x04\x18\x12\xf2\x04\x88\x1a\xf2\x04p\x17\xf2\x04@\x14\xf2\x04\xe0\x19\xf2\x04\x10\x14\xf2\x04\xe0\x1f\xf2\x04h\x16\xf2\x04\xf0\x1b\xf2\x04\xb0\x1f\xf2\x04\x10\x1d\xf2\x04\xb8\x11\xf2\x04x\x1e\xf2\x04\xc8\x16\xf2\x04\xa8\x18\xf2\x04\xf0\x15\xf2\x04p\x1d\xf2\x04 \x19\xf2\x048\x10\xf2\x04\xe8\x1d\xf2\x04\xf8\x1c\xf2\x040\x15\xf2\x04x\x12\xf2\x04\x80\x16\xf2\x04\xc0\x1b\xf2\x04p\x14\xf2\x048\x1f\xf2\x04\xe8\x17\xf2\x04\xa8\x1e\xf2\x04\xb8\x1d\xf2\x04h\x10\xf2\x04@\x1a\xf2\x04\xc0\x12\xf2\x04\xb0\x10\xf2\x04h\x19\xf2\x04H\x18\xf2\x04\xc0\x18\xf2\x04\x98\x1c\xf2\x04\xc8\x1f\xf2\x04\xe0\x13\xf2\x04h\x1f\xf2\x04\xf8\x13\xf2\x04H\x1e\xf2\x040\x1e\xf2\x04\xf8\x19\xf2\x04X\x1a\xf2\x04\xc0\x15\xf2\x04\x18\x1e\xf2\x04P\x19\xf2\x04\x00\x12\xf2\x04X\xf7i\x03 \xfci\x03\xa0]\xf3\x04\xd0W\xf3\x04\xe0V\xf3\x04\xc8\\\xf3\x04@]\xf3\x04\xe8W\xf3\x04\xc0X\xf3\x04`U\xf3\x04\x88W\xf3\x04\x80Y\xf3\x04\xf0X\xf3\x04\xf8Y\xf3\x04@W\xf3\x04 S\xf3\x04\xc8V\xf3\x04\x10!\xf3\x04\x80&\xf3\x04x"\xf3\x04P&\xf3\x04\xd8+\xf3\x04\x10$\xf3\x04X$\xf3\x04\xd0!\xf3\x04\x18+\xf3\x04\xb8-\xf3\x048)\xf3\x04\x18%\xf3\x04\xe8\'\xf3\x04 #\xf3\x04H"\xf3\x04\x00%\xf3\x04 \xc6\xfa\x04x\xc8\xfa\x04\x98\xc3\xfa\x04\xb8\x17\xf2\x04 \x13\xf2\x04@\x11\xf2\x04h\x1c\xf2\x04p\x11\xf2\x04\x00\x15\xf2\x04`\x15\xf2\x04\x08\x16\xf2\x04P\x10\xf2\x048\x16\xf2\x04\xb8\x14\xf2\x04X\x17\xf2\x04P\x13\xf2\x04\xe0\x10\xf2\x04\xd0\x1a\xf2\x04P\x1c\xf2\x04(\x11\xf2\x04H\x12\xf2\x04`\x18\xf2\x04 \x16\xf2\x04\x08\x1c\xf2\x040\x12\xf2\x04\xd8\x18\xf2\x04\xa0\x11\xf2\x04H\x15\xf2\x04\x80\x13\xf2\x04\xc8\x10\xf2\x04\xc8\x13\xf2\x04 \x1c\xf2\x04\xa0\x14\xf2\x04\x90\x15\xf2\x04(\x14\xf2\x04\xd0\x14\xf2\x04\xf0\x12\xf2\x04\x08\x13\xf2\x04\xf0\x18\xf2\x04\x10\x1a\xf2\x04\x98\x19\xf2\x04\x10\x11\xf2\x04\xd8\x15\xf2\x04\xb0\x16\xf2\x04\xd0\x17\xf2\x040\x1b\xf2\x04p\x1a\xf2\x04\x10\x17\xf2\x04\xa8\x1b\xf2\x040\x18\xf2\x04\xa0\x1d\xf2\x04x\x15\xf2\x04\x00\x18\xf2\x04X\x14\xf2\x04\xc0%\xf3\x04\xa0!\xf3\x04h \xf3\x04\x10*\xf3\x04h&\xf3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g937
sg895
g984
sg909
g944
sg904
g991
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1003
sg895
g999
sg909
g1010
sg904
g1007
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g920
sg895
g1114
sg909
g927
sg904
g1121
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g954
sg895
g1191
sg909
g961
sg904
g1198
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1210
sg895
g1206
sg909
g1217
sg904
g1214
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1233
sg895
g1223
sg909
g1227
sg904
g1231
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1003
sg895
g1253
sg909
g1010
sg904
g1260
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1272
sg895
g1268
sg909
g1279
sg904
g1276
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1289
sg895
g1285
sg909
g1296
sg904
g1293
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1003
sg895
g1253
sg909
g1010
sg904
g1260
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1084
sg895
g1328
sg909
g1091
sg904
g1335
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1360
sg895
g1356
sg909
g1367
sg904
g1364
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g954
sg895
g1191
sg909
g961
sg904
g1198
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1390
sg895
g1386
sg909
g1397
sg904
g1394
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g954
sg895
g1191
sg909
g961
sg904
g1198
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1289
sg895
g1285
sg909
g1296
sg904
g1293
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1390
sg895
g1455
sg909
g1397
sg904
g1462
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1178
sg895
g1470
sg909
g1185
sg904
g1477
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1084
sg895
g1328
sg909
g1091
sg904
g1335
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1360
sg895
g1356
sg909
g1367
sg904
g1364
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g900
sg895
g1524
sg909
g910
sg904
g1531
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1178
sg895
g1470
sg909
g1185
sg904
g1477
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1272
sg895
g1595
sg909
g1279
sg904
g1602
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1289
sg895
g1623
sg909
g1296
sg904
g1630
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g900
sg895
g1524
sg909
g910
sg904
g1531
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1289
sg895
g1623
sg909
g1296
sg904
g1630
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1272
sg895
g1595
sg909
g1279
sg904
g1602
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1003
sg895
g1253
sg909
g1010
sg904
g1260
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1233
sg895
g1768
sg909
g1227
sg904
g1775
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1210
sg895
g1783
sg909
g1217
sg904
g1790
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1289
sg895
g1623
sg909
g1296
sg904
g1630
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g971
sg895
g1811
sg909
g978
sg904
g1818
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1101
sg895
g1839
sg909
g1108
sg904
g1846
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1003
sg895
g999
sg909
g1010
sg904
g1007
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1050
sg895
g1867
sg909
g1057
sg904
g1874
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1360
sg895
g1882
sg909
g1367
sg904
g1889
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1210
sg895
g1783
sg909
g1217
sg904
g1790
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1233
sg895
g1768
sg909
g1227
sg904
g1775
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g920
sg895
g1114
sg909
g927
sg904
g1121
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1272
sg895
g1595
sg909
g1279
sg904
g1602
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1360
sg895
g1882
sg909
g1367
sg904
g1889
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1233
sg895
g1768
sg909
g1227
sg904
g1775
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1289
sg895
g1285
sg909
g1296
sg904
g1293
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1178
sg895
g1470
sg909
g1185
sg904
g1477
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1360
sg895
g1356
sg909
g1367
sg904
g1364
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1233
sg895
g1223
sg909
g1227
sg904
g1231
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1178
sg895
g1470
sg909
g1185
sg904
g1477
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g937
sg895
g984
sg909
g944
sg904
g991
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1556
sg895
g2066
sg909
g1563
sg904
g2073
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1390
sg895
g1386
sg909
g1397
sg904
g1394
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1289
sg895
g1285
sg909
g1296
sg904
g1293
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g900
sg895
g1524
sg909
g910
sg904
g1531
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1390
sg895
g1386
sg909
g1397
sg904
g1394
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1360
sg895
g1882
sg909
g1367
sg904
g1889
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1390
sg895
g1455
sg909
g1397
sg904
g1462
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1289
sg895
g1623
sg909
g1296
sg904
g1630
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g920
sg895
g1114
sg909
g927
sg904
g1121
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1050
sg895
g1867
sg909
g1057
sg904
g1874
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1084
sg895
g1328
sg909
g1091
sg904
g1335
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g954
sg895
g1191
sg909
g961
sg904
g1198
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1067
sg895
g2302
sg909
g1074
sg904
g2309
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1067
sg895
g2302
sg909
g1074
sg904
g2309
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1050
sg895
g1867
sg909
g1057
sg904
g1874
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1360
sg895
g1882
sg909
g1367
sg904
g1889
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1067
sg895
g2302
sg909
g1074
sg904
g2309
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g971
sg895
g1811
sg909
g978
sg904
g1818
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1101
sg895
g1839
sg909
g1108
sg904
g1846
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1210
sg895
g1206
sg909
g1217
sg904
g1214
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1003
sg895
g1253
sg909
g1010
sg904
g1260
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1178
sg895
g1470
sg909
g1185
sg904
g1477
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1390
sg895
g1455
sg909
g1397
sg904
g1462
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1101
sg895
g1839
sg909
g1108
sg904
g1846
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1167
sg895
g2525
sg909
g1161
sg904
g2532
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1272
sg895
g1595
sg909
g1279
sg904
g1602
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1233
sg895
g1223
sg909
g1227
sg904
g1231
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1210
sg895
g1783
sg909
g1217
sg904
g1790
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g900
sg895
g1524
sg909
g910
sg904
g1531
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1272
sg895
g1595
sg909
g1279
sg904
g1602
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1167
sg895
g2525
sg909
g1161
sg904
g2532
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1003
sg895
g999
sg909
g1010
sg904
g1007
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1233
sg895
g1768
sg909
g1227
sg904
g1775
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1167
sg895
g2525
sg909
g1161
sg904
g2532
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1272
sg895
g1268
sg909
g1279
sg904
g1276
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1050
sg895
g1867
sg909
g1057
sg904
g1874
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1233
sg895
g1768
sg909
g1227
sg904
g1775
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g971
sg895
g1811
sg909
g978
sg904
g1818
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1101
sg895
g1839
sg909
g1108
sg904
g1846
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1067
sg895
g2302
sg909
g1074
sg904
g2309
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1210
sg895
g1783
sg909
g1217
sg904
g1790
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g920
sg895
g1114
sg909
g927
sg904
g1121
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1084
sg895
g1328
sg909
g1091
sg904
g1335
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1556
sg895
g2066
sg909
g1563
sg904
g2073
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g971
sg895
g1811
sg909
g978
sg904
g1818
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1390
sg895
g1455
sg909
g1397
sg904
g1462
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1210
sg895
g1206
sg909
g1217
sg904
g1214
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1233
sg895
g1223
sg909
g1227
sg904
g1231
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1272
sg895
g1268
sg909
g1279
sg904
g1276
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1390
sg895
g1386
sg909
g1397
sg904
g1394
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1233
sg895
g1223
sg909
g1227
sg904
g1231
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g954
sg895
g1191
sg909
g961
sg904
g1198
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1003
sg895
g999
sg909
g1010
sg904
g1007
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1210
sg895
g1783
sg909
g1217
sg904
g1790
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g937
sg895
g984
sg909
g944
sg904
g991
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1210
sg895
g1206
sg909
g1217
sg904
g1214
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1050
sg895
g1867
sg909
g1057
sg904
g1874
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1289
sg895
g1285
sg909
g1296
sg904
g1293
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1272
sg895
g1268
sg909
g1279
sg904
g1276
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1360
sg895
g1356
sg909
g1367
sg904
g1364
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1003
sg895
g999
sg909
g1010
sg904
g1007
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1067
sg895
g2302
sg909
g1074
sg904
g2309
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1360
sg895
g1882
sg909
g1367
sg904
g1889
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1556
sg895
g2066
sg909
g1563
sg904
g2073
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g937
sg895
g984
sg909
g944
sg904
g991
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1101
sg895
g1839
sg909
g1108
sg904
g1846
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1556
sg895
g2066
sg909
g1563
sg904
g2073
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1003
sg895
g1253
sg909
g1010
sg904
g1260
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g920
sg895
g1114
sg909
g927
sg904
g1121
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g937
sg895
g984
sg909
g944
sg904
g991
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1167
sg895
g2525
sg909
g1161
sg904
g2532
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1167
sg895
g2525
sg909
g1161
sg904
g2532
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1390
sg895
g1455
sg909
g1397
sg904
g1462
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1084
sg895
g1328
sg909
g1091
sg904
g1335
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1360
sg895
g1356
sg909
g1367
sg904
g1364
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1556
sg895
g2066
sg909
g1563
sg904
g2073
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1272
sg895
g1268
sg909
g1279
sg904
g1276
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g900
sg895
g1524
sg909
g910
sg904
g1531
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g971
sg895
g1811
sg909
g978
sg904
g1818
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1390
sg895
g1386
sg909
g1397
sg904
g1394
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1289
sg895
g1623
sg909
g1296
sg904
g1630
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1210
sg895
g1206
sg909
g1217
sg904
g1214
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I210719056
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'x]\xa4\x0c\x80\x1b\x16\r\x98\\\xa4\x0cx]\xa4\x0c\x80\x17\x16\r\xf0\x9c\xa3\x0cX\x99\xa3\x0c0\x99\xa3\x0c\x10\x14\xa4\x0c\xa0\x15\x16\r\xd0\\\xa4\x0c@\x18\x16\r`\x15\xa4\x0c\x00\x17\x16\r\x90\x98\xa3\x0c@\x18\x16\r\x00\x97\xa3\x0c\xb0\x96\xa3\x0c\x90\x15\xa4\x0c\xb8\x98\xa3\x0c\xf0\x15\xa4\x0c\xc0\x15\xa4\x0c\x08\x99\xa3\x0c\x80\x1b\x16\r\x98\\\xa4\x0cp\x14\xa4\x0c\x80\x1b\x16\r\xa0\x14\xa4\x0c\xf0\x15\xa4\x0c\x10\x14\xa4\x0cp\x14\xa4\x0c\xa0\x14\xa4\x0c\x10\x14\xa4\x0c\x98\\\xa4\x0cX\x99\xa3\x0c\xd0\\\xa4\x0c\xf0\x15\xa4\x0c@\x18\x16\r\xc8\x97\xa3\x0c\x80\x17\x16\r\xb8\x98\xa3\x0c\x08]\xa4\x0c@]\xa4\x0c`\x96\xa3\x0c\xc8\x97\xa3\x0c\xa0\x14\xa4\x0c\xe0\x98\xa3\x0c\xa0\x15\x16\r\xe0\x98\xa3\x0c@]\xa4\x0c\x80\x1b\x16\r\xe0\x98\xa3\x0cX\x99\xa3\x0c\x98\\\xa4\x0c\xc8\x97\xa3\x0c0\x99\xa3\x0c\x08]\xa4\x0c\x80\x17\x16\r@]\xa4\x0c\xa0\x14\xa4\x0c@\x18\x16\r0\x99\xa3\x0c@\x18\x16\r\xc8\x97\xa3\x0c\xf0\x15\xa4\x0c@]\xa4\x0c\x80\x1b\x16\r\xd0\\\xa4\x0c\x08\x99\xa3\x0c\xf0\x9c\xa3\x0cx\x97\xa3\x0c\x80\x17\x16\r\x00\x17\x16\r\xb8\x98\xa3\x0c\xe0\x98\xa3\x0c\xd0\\\xa4\x0c\xf0\x9c\xa3\x0c\xb8\x98\xa3\x0c\x80\x1b\x16\r@\x14\xa4\x0cX\x99\xa3\x0c\x00\x17\x16\r\xb8\x98\xa3\x0c\x80\x1b\x16\r\x08\x99\xa3\x0c\xc0\x15\xa4\x0c`\x15\xa4\x0c \x16\xa4\x0c\x80\x17\x16\r\xd8\x96\xa3\x0cp\x14\xa4\x0c\x80\x17\x16\r\xa0\x14\xa4\x0c\x90\x98\xa3\x0c`\x96\xa3\x0c\xe8]\xa4\x0c\x08\x99\xa3\x0c\x90\x98\xa3\x0c0\x99\xa3\x0c\x98\\\xa4\x0c\xc8\x97\xa3\x0c0\x99\xa3\x0c\xa0\x15\x16\r\xb8\x98\xa3\x0c\xa0\x14\xa4\x0c\xc8\x97\xa3\x0c\xa0\x15\x16\r\x08]\xa4\x0c\xa0\x15\x16\r@\x14\xa4\x0c\xe8]\xa4\x0c\xa0\x15\x16\rX\x99\xa3\x0c@\x14\xa4\x0c@]\xa4\x0c\x08\x99\xa3\x0c\x88\x96\xa3\x0c0\x15\xa4\x0c\xd0\\\xa4\x0c\x10\x14\xa4\x0c\x80\x17\x16\r@\x14\xa4\x0c\x00\x17\x16\r\xe0\x98\xa3\x0c`\x15\xa4\x0c0\x99\xa3\x0c\x00\x15\xa4\x0c\x08\x99\xa3\x0c\x80\x17\x16\r\x98\\\xa4\x0c\xb0]\xa4\x0c\xe8]\xa4\x0cX\x99\xa3\x0c\xb8\x98\xa3\x0c\x10\x14\xa4\x0c\xd0\\\xa4\x0c@\x18\x16\r\x80\x17\x16\r\x98\\\xa4\x0c\xc8\x97\xa3\x0c@]\xa4\x0c@\x14\xa4\x0c\xb0\x96\xa3\x0c\x80\x17\x16\r`\x96\xa3\x0cx\x97\xa3\x0c\xb0\x96\xa3\x0c\xa0\x14\xa4\x0c\x08]\xa4\x0c\xb0]\xa4\x0cp\x14\xa4\x0c\xd0\x14\xa4\x0cp\x14\xa4\x0c\xa0\x14\xa4\x0c\x10\x14\xa4\x0c\xf0\x9c\xa3\x0c\xa0\x15\x16\r\x08]\xa4\x0c\xb8\x98\xa3\x0c\xf0\x9c\xa3\x0c\x98\\\xa4\x0c\x00\x17\x16\r@\x14\xa4\x0c\xa0\x15\x16\r\xe0\x98\xa3\x0c\x10\x14\xa4\x0c\xe0\x98\xa3\x0c\x88\x96\xa3\x0c\x08]\xa4\x0c\xf0\x9c\xa3\x0c0\x99\xa3\x0cX\x99\xa3\x0c0\x99\xa3\x0c\xa0\x15\x16\r\xe8]\xa4\x0c\x90\x98\xa3\x0c@]\xa4\x0c@\x18\x16\r@]\xa4\x0c@\x14\xa4\x0cp\x14\xa4\x0c\x98\\\xa4\x0c\x80\x1b\x16\r\xd0\\\xa4\x0c\x00\x17\x16\r\xa0\x14\xa4\x0c8\x96\xa3\x0c\xc8\x97\xa3\x0cX\x99\xa3\x0cx]\xa4\x0c@\x14\xa4\x0c\x10\x14\xa4\x0c@\x14\xa4\x0cX\x99\xa3\x0c0\x99\xa3\x0c@]\xa4\x0c\x10\x14\xa4\x0c`\x96\xa3\x0c\x08\x99\xa3\x0c\xd0\\\xa4\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\x00&\xde\x1a\xa0\'\xde\x1a\x00\'\xde\x1a\xe0&\xde\x1a@#\xde\x1a\xa0&\xde\x1a@&\xde\x1a@(\xde\x1a`(\xde\x1a@\'\xde\x1a \'\xde\x1a\xe0%\xde\x1a\xe0\'\xde\x1a (\xde\x1a\x00)\xde\x1a\xa0(\xde\x1a &\xde\x1a`)\xde\x1a\xc0(\xde\x1a\xe0(\xde\x1a\xa0)\xde\x1a\x80&\xde\x1a\x80)\xde\x1a\xe0)\xde\x1a`\'\xde\x1a\x80*\xde\x1a\xa0"\xde\x1a\x00*\xde\x1a@)\xde\x1a\x80\'\xde\x1a`*\xde\x1a@+\xde\x1a\x00(\xde\x1a )\xde\x1a *\xde\x1a\xc0*\xde\x1a\xc0&\xde\x1a\xc0)\xde\x1a +\xde\x1a\xa0 \xde\x1a\xc0+\xde\x1a@*\xde\x1a`&\xde\x1a@,\xde\x1a\xa0*\xde\x1a\xa0,\xde\x1a\xc0,\xde\x1a\xa0+\xde\x1a`+\xde\x1a\xa0-\xde\x1a\x80,\xde\x1a\xc0%\xde\x1a -\xde\x1a\x80+\xde\x1a .\xde\x1a\xc0\'\xde\x1a@.\xde\x1a\x00,\xde\x1a@-\xde\x1a`.\xde\x1a`-\xde\x1a\x00-\xde\x1a\x80(\xde\x1a`,\xde\x1a\x00+\xde\x1a\xc0-\xde\x1a@/\xde\x1a\xc0.\xde\x1a ,\xde\x1a\xe0+\xde\x1a\xe0.\xde\x1a\xe0*\xde\x1a\x80-\xde\x1a\xa0.\xde\x1a\x00/\xde\x1a\xa0/\xde\x1a\xc0/\xde\x1a`/\xde\x1a\x80/\xde\x1a\x00.\xde\x1a\xe0-\xde\x1a`}\xba\x0c\x80.\xde\x1a\x80w\xba\x0c@\x02\x05\x1b \x02\x05\x1b\xc0\x00\x05\x1b@\x01\x05\x1b\x00\x02\x05\x1b\xe0\x00\x05\x1b`\x00\x05\x1b\xc0\x02\x05\x1b \x00\x05\x1b\x80\x02\x05\x1b\xa0\x02\x05\x1b\xe0\x02\x05\x1b\x00\x03\x05\x1b\xa0\x00\x05\x1b@\x00\x05\x1b`\x03\x05\x1b@\x03\x05\x1b \x01\x05\x1b\x80\x03\x05\x1b\xe0\x03\x05\x1b\xc0\x03\x05\x1b \x04\x05\x1b\x00\x04\x05\x1b`\x02\x05\x1b@\x04\x05\x1b\xa0\x04\x05\x1b\x80\x04\x05\x1b\xe0\x04\x05\x1b\x00\x05\x05\x1b\xc0\x01\x05\x1b@\x05\x05\x1b`\x05\x05\x1b\x80\x05\x05\x1b\x00\x01\x05\x1b`\x04\x05\x1b\xe0\x05\x05\x1b\x00\x06\x05\x1b\x80\x01\x05\x1b`\x01\x05\x1b \x06\x05\x1b@\x06\x05\x1b`\x06\x05\x1b\x80\x06\x05\x1b\xe0\x06\x05\x1b\xc0\x06\x05\x1b\xa0\x01\x05\x1b\x00\x07\x05\x1b \x07\x05\x1b@\x07\x05\x1b`\x07\x05\x1b\x80\x07\x05\x1b\xa0\x07\x05\x1b\x00\x08\x05\x1b\xe0\x07\x05\x1b\xc0\x04\x05\x1b`\x08\x05\x1b@\x08\x05\x1b\xa0\x03\x05\x1b\x80\x08\x05\x1b\xa0\x08\x05\x1b\xc0\x07\x05\x1b \t\x05\x1b\xe0\x01\x05\x1b`\t\x05\x1b\x80\t\x05\x1b \x03\x05\x1b\x80\x00\x05\x1b\xa0\t\x05\x1b\xc0\t\x05\x1b\xe0\t\x05\x1b@\n\x05\x1b`\n\x05\x1b\x00\t\x05\x1b\xc0\x05\x05\x1b\xc0\n\x05\x1b\xe0\n\x05\x1b\xc0\x08\x05\x1b\xa0\x06\x05\x1b@\x0b\x05\x1b`\x0b\x05\x1b\x80\x0b\x05\x1b@\t\x05\x1b\x00\n\x05\x1b\xa0\x0b\x05\x1b\x00\x0c\x05\x1b \x0c\x05\x1b \x05\x05\x1b\x00\x0b\x05\x1b\x80\x0c\x05\x1b`\x0c\x05\x1b\xc0\x0c\x05\x1b\xa0\x0c\x05\x1b\xa0\x05\x05\x1b\xe0\x0c\x05\x1b\x00\r\x05\x1b \r\x05\x1b@\r\x05\x1b\xa0\r\x05\x1b\x80\r\x05\x1b \x08\x05\x1b\xc0\r\x05\x1b \x0e\x05\x1b\x00\x0e\x05\x1b`\x0e\x05\x1b@\x0e\x05\x1b\xa0\x0e\x05\x1b\xc0\x0e\x05\x1b\xa0\n\x05\x1b`\r\x05\x1b\xe0\x0e\x05\x1b\xa0\x0f\x05\x1b \x0b\x05\x1b \x0f\x05\x1b@\x0c\x05\x1b \n\x05\x1b\xe0\x0b\x05\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\xf3\xda-@\xbf\xaa\x8a?H$b?\xbe\xabj?+\x00\x80?\t\xf1n?$\xf0n?W\x1ab?DA\x84?\xb9\xfb\x7f?\x82f\x86?=\x99\xb9?\x12\xf7\xbf?\x07\xb7{?[\xd6]?\x8b\x89H@\xd4\xbd;?\x11V\x95?\x0e\xdb\x9d?Ucf?\xb5*\x82?\xe8\xa7\x8a?\xd8\xb1\xbb?Z\x94Y?o-s?\xd5\xdb]?^4s?\xf3t\x97?\xf7A\x84?x\xedn?j\rQ?\xc7\nQ?\x92\xfb??\xe5t7?\x80\x1c\x82?^\r\x91?\x1c\xcfL?&rw?\xd9`f?\xbd\x12Q?#x\x97?A\x1e\x82?\xfe\xd7\xbd?O\xb7{?\x8a\xcc\x8c?\xb5\xde]?\xe5\xaa\xea?\x01{w?+\xfd\xbf?>\xa3\x8a?\xd4ww?\x9c\x91w?\x9b\x93Y?\x85rw?haf?\x08vw?c\xe2n?o[D?_PU?\xf4\x92Y?\x86\x13Q?\xe5\x02@?\n33?\xd6A\xb3?\xfa\x86\x88?z\x10Q?\xbc\xbb{?rw\x97?\xb2\xe7\x0e@F\xd9]?\xd8\rQ?\x1b#\x82?\x9e\xe9n?\x14\x0e\x91?)\x0f\x91?s4\x93?\xd4s\xb7?\xbc\xba\xdb?X\xf4]?Ze\xe6?\x1a\xaaj?\xd4\xe1]?\xb1\xca\x8c?\x1e\xf6n?\x14q\x17@\xab\x88\x88?\xaa\xf9P?\xa80\x93?\xca\xa1Y?\x13\xc9\xac?Fef?\x8ec\x86?\xdf\x10\x91?#\xf2n?\xd8ww?\xc8?D?\xcb\x90\xb9?\xb1\x00\x80?\xafE\x84?\xb5\xabj?7\xc8\xac?\x0f\xfc??\x0f\x11\xb1?6\xd4{?\x86\xe9n?x\x0e\x91?\xdc\xee\xae?}@\xe4?(\x88H@\x97\xdc\x9d?G\x89H?l0\x93?\xf0D\x84?h\x99\xb9?\rxw?\xf7\xe3\xce?\xe42\x93?hNU?\x13$\x82?+\x11Q?\xac\xeb\xce?\x8f\x94Y?\x80,s?\xbct\x97?4\xd8n?\x02\x01@?\xed23@\x81\x7f\x88?\xf3\xba;?t\xacj?\xd9\x86H?\xd6TU?F\x10Q?\xfaMU?\x06\xd0L?\x14A\x84?\n\x8cH?\xe0PU?3/\x93?\t\xf1\x8e?}V\x95?\x9fa\x86?\x13\xd8]?\x10\xf2.?\xa4q7?u>b?n\xfaP?\xd9+s?z\xc8\xcc?\xd5\xd9]?\x11\x94\xc8?7\xdd]?\xdfxw?\x8aPU?\xc8;D?N\x89\x88?\xf3\xbb\x9b?\x14\x07Q?=xw?\xee?D?\x12ef?\xb4D\x84?n\xcd\x8c?}\xfd\x9f?\xbd\xeen?\x08gf?i\xb6{?I\x89\xc8?z\xa4j?\x99\xe0]?\x82\xfc??\xa7\x00\x80?(\xa8j?\x85P\xe4?\x0b\xaej?7KD?\xfczw?\x7f\xff??\x94\xe0]?\x00"\xa2?\x06g\x86?Q7s?\xc3\x8bH?{=D?\x00\xd8]?AU\x95?\xec`f?I\x85\xa8?)\x00\x80?\x922s?X\xf0\x8e?\x0b@D?\xb6\x10\x91?T\x12\x91?C\xb6{?\xc1\xdf]?\x14jf?\x0f2\x93?B\xfb\x1f@\xf3\x9cY?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'0X\xf3\x04\xd8"\xf3\x04\xf05\x14\x0580\x14\x05P9\x14\x0508\x14\x05\xc8?\x14\x05P3\x14\x05h3\x14\x05\xe8=\x14\x05\x008\x14\x05\x88:\x14\x05\x986\x14\x05(1\x14\x05\x18;\x14\x05P0\x14\x05x2\x14\x05\xd04\x14\x05\x809\x14\x05\xb87\x14\x05`>\x14\x05\x002\x14\x05\xc86\x14\x05H8\x14\x05\xb81\x14\x05h9\x14\x05\x90>\x14\x05\x80<\x14\x05\x10=\x14\x05\x182\x14\x05\x185\x14\x05\xd0=\x14\x05p:\x14\x05\x00>\x14\x058<\x14\x05\x086\x14\x05\xd82\x14\x05\xd01\x14\x05 0\x14\x058?\x14\x05p7\x14\x05\x980\x14\x050;\x14\x05\x00;\x14\x05\xd88\x14\x05H2\x14\x05@1\x14\x05\xc89\x14\x05X4\x14\x05\xf0;\x14\x05\x90;\x14\x05\xe87\x14\x05H5\x14\x05 6\x14\x050>\x14\x05\x089\x14\x05p=\x14\x05\xb03\x14\x05\xd0:\x14\x05\x188\x14\x05\xb00\x14\x05@7\x14\x05\xa88\x14\x05\xb8\xc7\xfa\x04\x98\xc9\xfa\x04\x08\xc3\xfa\x04\xd8\xce\xfa\x04\xc0\xc5\xfa\x04\x18\xc2\xfa\x04\x90\xc5\xfa\x04p\xc7\xfa\x04\xe0\xcf\xfa\x04p\xcd\xfa\x04\xd0\xcd\xfa\x04\x10\xc1\xfa\x04\xa8\xcb\xfa\x04\xc0\xce\xfa\x04\xb8\xc1\xfa\x04\xd8\xc8\xfa\x04`\xcb\xfa\x04\x90\xc8\xfa\x04\xc8\xc6\xfa\x04\xe8\xca\xfa\x04\xb0\xc3\xfa\x04P\xcc\xfa\x04\xa8\xc2\xfa\x04(\xc4\xfa\x04\xf0\xc5\xfa\x040\xc2\xfa\x04\x18\xc5\xfa\x04\xc0\xcb\xfa\x04\xf8\xc6\xfa\x04\x88\xc1\xfa\x04\xf8\xcc\xfa\x04\x10\xc4\xfa\x04\xb8\xc4\xfa\x04X\xc1\xfa\x04\xb0\xc9\xfa\x04\x88\xc7\xfa\x04\x08\xc6\xfa\x04\xc8\xc3\xfa\x04H\xce\xfa\x04\x18\xcb\xfa\x04h\xc3\xfa\x048\xc9\xfa\x04\x80\xc3\xfa\x04@\xc4\xfa\x04\x10\xc7\xfa\x04X\xc4\xfa\x040\xc5\xfa\x04h\xc6\xfa\x04\xe0\xcc\xfa\x04h\xcc\xfa\x04P\xcf\xfa\x04 \xc9\xfa\x04\xb8\xca\xfa\x04\xd0\xc7\xfa\x04h\xcf\xfa\x04\x18\xce\xfa\x04X\xc7\xfa\x04\xf8\xc0\xfa\x04P\xc9\xfa\x048\xcc\xfa\x04(\xcd\xfa\x04x\xce\xfa\x04p\xc4\xfa\x04\xc8\xcc\xfa\x04\xa0\xc1\xfa\x04\xa0\xcd\xfa\x04\xc0\xc8\xfa\x04X\xcd\xfa\x04x\xcb\xfa\x04\xa0\xca\xfa\x04\x98\xc6\xfa\x04\xf8\xc9\xfa\x04`\xc8\xfa\x04\x00\xcb\xfa\x04x\xc5\xfa\x04\xe0\xc3\xfa\x04@\xc7\xfa\x04\xf0\xc8\xfa\x04X7\x14\x05`;\x14\x05x>\x14\x0583\x14\x05\xc8<\x14\x05\x005\x14\x05\x908\x14\x05\xc0;\x14\x05\xb0<\x14\x05x8\x14\x05 9\x14\x05\xf83\x14\x05\xa0:\x14\x05\xa85\x14\x05\xe06\x14\x05\xa8;\x14\x05\xb09\x14\x05\xd8;\x14\x05\xe0?\x14\x05\xc08\x14\x05\x10:\x14\x05x5\x14\x05\xf08\x14\x05\xa8>\x14\x05`5\x14\x05X=\x14\x05`8\x14\x05\xa0=\x14\x05H>\x14\x05\x806\x14\x05\xb84\x14\x05 <\x14\x05\xf86\x14\x05\x80?\x14\x05\xb8:\x14\x05\x905\x14\x0589\x14\x05P<\x14\x05(=\x14\x05\x08<\x14\x05\xe09\x14\x05\x884\x14\x05h<\x14\x05p4\x14\x05(:\x14\x05\x989\x14\x05X1\x14\x05\xe0<\x14\x05\xc05\x14\x05\xf8<\x14\x05\x98?\x14\x05\x18>\x14\x05\xb06\x14\x05(4\x14\x05P6\x14\x05\xf02\x14\x05\xe8:\x14\x05\x98<\x14\x0502\x14\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3648
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3646
sg3633
g3688
sg3648
g3638
sg3642
g3695
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3707
sg3633
g3703
sg3648
g3714
sg3642
g3711
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3724
sg3633
g3720
sg3648
g3731
sg3642
g3728
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3741
sg3633
g3737
sg3648
g3748
sg3642
g3745
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3758
sg3633
g3754
sg3648
g3765
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3775
sg3633
g3771
sg3648
g3782
sg3642
g3779
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3792
sg3633
g3788
sg3648
g3799
sg3642
g3796
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3809
sg3633
g3805
sg3648
g3816
sg3642
g3813
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3845
sg3633
g3835
sg3648
g3839
sg3642
g3843
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3856
sg3633
g3852
sg3648
g3863
sg3642
g3860
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3724
sg3633
g3869
sg3648
g3731
sg3642
g3876
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3646
sg3633
g3688
sg3648
g3638
sg3642
g3695
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3758
sg3633
g3754
sg3648
g3765
sg3642
g3762
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3920
sg3633
g3910
sg3648
g3914
sg3642
g3918
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3937
sg3633
g3927
sg3648
g3931
sg3642
g3935
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3948
sg3633
g3944
sg3648
g3955
sg3642
g3952
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3971
sg3633
g3961
sg3648
g3965
sg3642
g3969
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3948
sg3633
g3944
sg3648
g3955
sg3642
g3952
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3845
sg3633
g3991
sg3648
g3839
sg3642
g3998
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3675
sg3633
g4019
sg3648
g3682
sg3642
g4026
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3971
sg3633
g3961
sg3648
g3965
sg3642
g3969
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3658
sg3633
g4047
sg3648
g3665
sg3642
g4054
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4066
sg3633
g4062
sg3648
g4073
sg3642
g4070
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3971
sg3633
g4079
sg3648
g3965
sg3642
g4086
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3775
sg3633
g4094
sg3648
g3782
sg3642
g4101
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3971
sg3633
g3961
sg3648
g3965
sg3642
g3969
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g4066
sg3633
g4122
sg3648
g4073
sg3642
g4129
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3775
sg3633
g4094
sg3648
g3782
sg3642
g4101
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3675
sg3633
g3671
sg3648
g3682
sg3642
g3679
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3741
sg3633
g3737
sg3648
g3748
sg3642
g3745
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3809
sg3633
g3805
sg3648
g3816
sg3642
g3813
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3971
sg3633
g4079
sg3648
g3965
sg3642
g4086
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4219
sg3633
g4215
sg3648
g4226
sg3642
g4223
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3707
sg3633
g4232
sg3648
g3714
sg3642
g4239
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3948
sg3633
g3944
sg3648
g3955
sg3642
g3952
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g4264
sg3633
g4260
sg3648
g4271
sg3642
g4268
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g4281
sg3633
g4277
sg3648
g4288
sg3642
g4285
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g4264
sg3633
g4260
sg3648
g4271
sg3642
g4268
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g4219
sg3633
g4307
sg3648
g4226
sg3642
g4314
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4066
sg3633
g4122
sg3648
g4073
sg3642
g4129
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3920
sg3633
g3910
sg3648
g3914
sg3642
g3918
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3792
sg3633
g3788
sg3648
g3799
sg3642
g3796
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3920
sg3633
g3910
sg3648
g3914
sg3642
g3918
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g4281
sg3633
g4374
sg3648
g4288
sg3642
g4381
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3920
sg3633
g4402
sg3648
g3914
sg3642
g4409
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3741
sg3633
g4417
sg3648
g3748
sg3642
g4424
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3675
sg3633
g4019
sg3648
g3682
sg3642
g4026
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4219
sg3633
g4307
sg3648
g4226
sg3642
g4314
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3758
sg3633
g3754
sg3648
g3765
sg3642
g3762
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4264
sg3633
g4471
sg3648
g4271
sg3642
g4478
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3707
sg3633
g4232
sg3648
g3714
sg3642
g4239
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g4281
sg3633
g4277
sg3648
g4288
sg3642
g4285
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g4066
sg3633
g4122
sg3648
g4073
sg3642
g4129
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3646
sg3633
g3688
sg3648
g3638
sg3642
g3695
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3758
sg3633
g4538
sg3648
g3765
sg3642
g4545
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3646
sg3633
g3688
sg3648
g3638
sg3642
g3695
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4219
sg3633
g4307
sg3648
g4226
sg3642
g4314
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3971
sg3633
g4079
sg3648
g3965
sg3642
g4086
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g4281
sg3633
g4277
sg3648
g4288
sg3642
g4285
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3658
sg3633
g4047
sg3648
g3665
sg3642
g4054
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3809
sg3633
g4618
sg3648
g3816
sg3642
g4625
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3845
sg3633
g3835
sg3648
g3839
sg3642
g3843
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3724
sg3633
g3869
sg3648
g3731
sg3642
g3876
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3707
sg3633
g4232
sg3648
g3714
sg3642
g4239
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3856
sg3633
g3852
sg3648
g3863
sg3642
g3860
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3948
sg3633
g4698
sg3648
g3955
sg3642
g4705
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3920
sg3633
g4402
sg3648
g3914
sg3642
g4409
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3809
sg3633
g3805
sg3648
g3816
sg3642
g3813
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3724
sg3633
g3720
sg3648
g3731
sg3642
g3728
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3948
sg3633
g3944
sg3648
g3955
sg3642
g3952
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3658
sg3633
g4047
sg3648
g3665
sg3642
g4054
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3937
sg3633
g4778
sg3648
g3931
sg3642
g4785
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3741
sg3633
g4417
sg3648
g3748
sg3642
g4424
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3856
sg3633
g3852
sg3648
g3863
sg3642
g3860
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3948
sg3633
g4698
sg3648
g3955
sg3642
g4705
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3658
sg3633
g4047
sg3648
g3665
sg3642
g4054
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3845
sg3633
g3991
sg3648
g3839
sg3642
g3998
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3948
sg3633
g4698
sg3648
g3955
sg3642
g4705
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3845
sg3633
g3991
sg3648
g3839
sg3642
g3998
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4066
sg3633
g4122
sg3648
g4073
sg3642
g4129
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3707
sg3633
g3703
sg3648
g3714
sg3642
g3711
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3792
sg3633
g4910
sg3648
g3799
sg3642
g4917
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3971
sg3633
g3961
sg3648
g3965
sg3642
g3969
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3707
sg3633
g3703
sg3648
g3714
sg3642
g3711
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g4066
sg3633
g4062
sg3648
g4073
sg3642
g4070
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3724
sg3633
g3720
sg3648
g3731
sg3642
g3728
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4264
sg3633
g4471
sg3648
g4271
sg3642
g4478
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3856
sg3633
g4990
sg3648
g3863
sg3642
g4997
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3845
sg3633
g3991
sg3648
g3839
sg3642
g3998
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3724
sg3633
g3720
sg3648
g3731
sg3642
g3728
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3758
sg3633
g3754
sg3648
g3765
sg3642
g3762
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3675
sg3633
g4019
sg3648
g3682
sg3642
g4026
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4219
sg3633
g4215
sg3648
g4226
sg3642
g4223
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3758
sg3633
g4538
sg3648
g3765
sg3642
g4545
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3792
sg3633
g3788
sg3648
g3799
sg3642
g3796
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3948
sg3633
g4698
sg3648
g3955
sg3642
g4705
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g4066
sg3633
g4062
sg3648
g4073
sg3642
g4070
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4219
sg3633
g4307
sg3648
g4226
sg3642
g4314
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3792
sg3633
g4910
sg3648
g3799
sg3642
g4917
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g4264
sg3633
g4471
sg3648
g4271
sg3642
g4478
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3792
sg3633
g4910
sg3648
g3799
sg3642
g4917
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3937
sg3633
g4778
sg3648
g3931
sg3642
g4785
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3856
sg3633
g3852
sg3648
g3863
sg3642
g3860
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3792
sg3633
g3788
sg3648
g3799
sg3642
g3796
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3741
sg3633
g3737
sg3648
g3748
sg3642
g3745
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3937
sg3633
g4778
sg3648
g3931
sg3642
g4785
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g4281
sg3633
g4277
sg3648
g4288
sg3642
g4285
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3845
sg3633
g3835
sg3648
g3839
sg3642
g3843
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g4219
sg3633
g4215
sg3648
g4226
sg3642
g4223
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3775
sg3633
g3771
sg3648
g3782
sg3642
g3779
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3809
sg3633
g3805
sg3648
g3816
sg3642
g3813
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3775
sg3633
g3771
sg3648
g3782
sg3642
g3779
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3707
sg3633
g3703
sg3648
g3714
sg3642
g3711
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3937
sg3633
g4778
sg3648
g3931
sg3642
g4785
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3856
sg3633
g4990
sg3648
g3863
sg3642
g4997
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3920
sg3633
g4402
sg3648
g3914
sg3642
g4409
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3845
sg3633
g3991
sg3648
g3839
sg3642
g3998
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3758
sg3633
g4538
sg3648
g3765
sg3642
g4545
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3741
sg3633
g4417
sg3648
g3748
sg3642
g4424
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3845
sg3633
g3835
sg3648
g3839
sg3642
g3843
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3707
sg3633
g4232
sg3648
g3714
sg3642
g4239
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3675
sg3633
g3671
sg3648
g3682
sg3642
g3679
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3809
sg3633
g4618
sg3648
g3816
sg3642
g4625
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3856
sg3633
g4990
sg3648
g3863
sg3642
g4997
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3741
sg3633
g3737
sg3648
g3748
sg3642
g3745
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3948
sg3633
g4698
sg3648
g3955
sg3642
g4705
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3775
sg3633
g3771
sg3648
g3782
sg3642
g3779
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3809
sg3633
g3805
sg3648
g3816
sg3642
g3813
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3707
sg3633
g4232
sg3648
g3714
sg3642
g4239
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3675
sg3633
g4019
sg3648
g3682
sg3642
g4026
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g4219
sg3633
g4307
sg3648
g4226
sg3642
g4314
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g4281
sg3633
g4374
sg3648
g4288
sg3642
g4381
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3937
sg3633
g4778
sg3648
g3931
sg3642
g4785
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3920
sg3633
g3910
sg3648
g3914
sg3642
g3918
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3707
sg3633
g3703
sg3648
g3714
sg3642
g3711
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g4264
sg3633
g4471
sg3648
g4271
sg3642
g4478
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3658
sg3633
g4047
sg3648
g3665
sg3642
g4054
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3920
sg3633
g4402
sg3648
g3914
sg3642
g4409
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g4066
sg3633
g4062
sg3648
g4073
sg3642
g4070
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4264
sg3633
g4260
sg3648
g4271
sg3642
g4268
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3809
sg3633
g4618
sg3648
g3816
sg3642
g4625
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3971
sg3633
g4079
sg3648
g3965
sg3642
g4086
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3675
sg3633
g3671
sg3648
g3682
sg3642
g3679
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3971
sg3633
g3961
sg3648
g3965
sg3642
g3969
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4066
sg3633
g4122
sg3648
g4073
sg3642
g4129
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3775
sg3633
g4094
sg3648
g3782
sg3642
g4101
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3724
sg3633
g3869
sg3648
g3731
sg3642
g3876
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3792
sg3633
g4910
sg3648
g3799
sg3642
g4917
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4264
sg3633
g4260
sg3648
g4271
sg3642
g4268
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3948
sg3633
g3944
sg3648
g3955
sg3642
g3952
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3724
sg3633
g3869
sg3648
g3731
sg3642
g3876
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3675
sg3633
g3671
sg3648
g3682
sg3642
g3679
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3856
sg3633
g4990
sg3648
g3863
sg3642
g4997
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3937
sg3633
g3927
sg3648
g3931
sg3642
g3935
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3792
sg3633
g4910
sg3648
g3799
sg3642
g4917
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3920
sg3633
g4402
sg3648
g3914
sg3642
g4409
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3775
sg3633
g4094
sg3648
g3782
sg3642
g4101
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3920
sg3633
g3910
sg3648
g3914
sg3642
g3918
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4219
sg3633
g4215
sg3648
g4226
sg3642
g4223
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4264
sg3633
g4260
sg3648
g4271
sg3642
g4268
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3724
sg3633
g3869
sg3648
g3731
sg3642
g3876
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3758
sg3633
g4538
sg3648
g3765
sg3642
g4545
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3741
sg3633
g4417
sg3648
g3748
sg3642
g4424
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3758
sg3633
g4538
sg3648
g3765
sg3642
g4545
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3792
sg3633
g3788
sg3648
g3799
sg3642
g3796
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3856
sg3633
g4990
sg3648
g3863
sg3642
g4997
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3724
sg3633
g3720
sg3648
g3731
sg3642
g3728
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g4281
sg3633
g4374
sg3648
g4288
sg3642
g4381
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3646
sg3633
g3688
sg3648
g3638
sg3642
g3695
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4281
sg3633
g4374
sg3648
g4288
sg3642
g4381
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3937
sg3633
g3927
sg3648
g3931
sg3642
g3935
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3971
sg3633
g4079
sg3648
g3965
sg3642
g4086
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3675
sg3633
g4019
sg3648
g3682
sg3642
g4026
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3809
sg3633
g4618
sg3648
g3816
sg3642
g4625
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3856
sg3633
g3852
sg3648
g3863
sg3642
g3860
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g4066
sg3633
g4062
sg3648
g4073
sg3642
g4070
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g4281
sg3633
g4374
sg3648
g4288
sg3642
g4381
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g4219
sg3633
g4215
sg3648
g4226
sg3642
g4223
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3741
sg3633
g3737
sg3648
g3748
sg3642
g3745
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3937
sg3633
g3927
sg3648
g3931
sg3642
g3935
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3775
sg3633
g4094
sg3648
g3782
sg3642
g4101
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3937
sg3633
g3927
sg3648
g3931
sg3642
g3935
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3741
sg3633
g4417
sg3648
g3748
sg3642
g4424
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3758
sg3633
g3754
sg3648
g3765
sg3642
g3762
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4281
sg3633
g4277
sg3648
g4288
sg3642
g4285
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3775
sg3633
g3771
sg3648
g3782
sg3642
g3779
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4264
sg3633
g4471
sg3648
g4271
sg3642
g4478
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3845
sg3633
g3835
sg3648
g3839
sg3642
g3843
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3809
sg3633
g4618
sg3648
g3816
sg3642
g4625
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I210719056
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S"\x90}'\x1b`\xfb&\x1b \xd1'\x1b\xb8}'\x1b\xf8~'\x1b \xd1'\x1b\xb8}'\x1b\xe0}'\x1b\xb0\xfc&\x1b`\xfb&\x1b\x18\xc2'\x1b\xf8\xc2'\x1b\x18\xc2'\x1b\xe0}'\x1b\xb8}'\x1b\x80\xfc&\x1b\xc0\xfb&\x1b\x18\xc2'\x1b \xfc&\x1b0\xc3'\x1b\x08~'\x1b`\xd1'\x1b\x08~'\x1b0~'\x1bX~'\x1b\xc0\xfb&\x1bP\xc2'\x1bH\x7f'\x1b\xc0\xfb&\x1b\x90}'\x1b\x80\xd1'\x1b\x80~'\x1b\x08~'\x1b\xe0}'\x1b\x18\xc2'\x1b\x88\xc2'\x1b\x80~'\x1bX~'\x1b\x80~'\x1b\x80\xd1'\x1bP\xfc&\x1b@\xd1'\x1b\xe0\xfc&\x1b\xc0\xfb&\x1b0~'\x1b\xf0\xfb&\x1b\x90\xfb&\x1bH\x7f'\x1b`\xd1'\x1b \x7f'\x1b\x88\xc2'\x1b\xb8}'\x1b\x80\xd1'\x1b\xe0}'\x1b\xc0\xfb&\x1b0~'\x1b\xb8}'\x1b\xc0\xc2'\x1b\x18\xc2'\x1b\xf8~'\x1b\x90\xfb&\x1b\xc0\x7f'\x1b\xf0\xfb&\x1b\x80\xd1'\x1b\x90\xfb&\x1bX~'\x1bP\xc2'\x1b\xc0\xc2'\x1b@\xd1'\x1b\x90}'\x1b\x08~'\x1b\xf8~'\x1b`\xfb&\x1b\xf0\xfb&\x1b\xe0}'\x1bX~'\x1b\xc0\xd1'\x1b\x80~'\x1b\x18\xc2'\x1b\x80\xd1'\x1bP\xc2'\x1b\xb0\xfc&\x1b\xf0\xfb&\x1b\xa0\xd1'\x1b0~'\x1b \xe0'\x1b \xd1'\x1b\x88\xc2'\x1bX~'\x1b\xc0\xc2'\x1bX~'\x1b\xf0\xfb&\x1b\xc0\xfb&\x1b\xf8\xc2'\x1b\x08~'\x1b\xa0\xd1'\x1b\x88\xc2'\x1b\xc0\xfb&\x1b \xd1'\x1bP\xc2'\x1b\x80\xd1'\x1b`\xfb&\x1bh\xc3'\x1bP\xc2'\x1b\xb8}'\x1b\x80~'\x1b \xd1'\x1b\xd0~'\x1b@\xd1'\x1b\x88\xc2'\x1bX~'\x1b`\xd1'\x1b\xa0\xd1'\x1b\xf0\xfb&\x1b\x80~'\x1b\x08~'\x1b\x90\xfb&\x1b`\xd1'\x1b\xb0\xfc&\x1b\xc0\xc2'\x1b\x18\xc2'\x1b`\xfb&\x1b \xd1'\x1b\xe0}'\x1b\xa0\xd1'\x1b`\xfb&\x1b\x80~'\x1b\x98\x7f'\x1b\x90}'\x1b\xc0\xfb&\x1b\x80~'\x1b\xb8}'\x1b\x18\xc2'\x1b\xc0\xc2'\x1b\x08~'\x1b\xc0\xc2'\x1b\xb8}'\x1b \xd1'\x1b\xc0\xfb&\x1bX~'\x1b\xd0~'\x1b\xe0}'\x1b\xc0\xc2'\x1b\x90}'\x1b\x80\xd1'\x1b\x88\xc2'\x1b \xd1'\x1b\x90}'\x1b\xf0\xfb&\x1b\xa0\xd1'\x1b\x80\xd1'\x1b\x80~'\x1b\x88\xc2'\x1b0~'\x1b\xc0\xfb&\x1b\xb8}'\x1bP\xc2'\x1b\xf0\xfb&\x1b\x88\xc2'\x1b\x08~'\x1b\xa0\xd1'\x1b\x90\xfb&\x1b\xc0\xc2'\x1bp\xfd&\x1b\x80~'\x1b0\xc3'\x1b@\xd1'\x1b\xc0\x7f'\x1b\x18\xc2'\x1b`\xfb&\x1b\x90}'\x1b`\xd1'\x1b0~'\x1b`\xd1'\x1b \xd1'\x1bP\xc2'\x1b@\xd1'\x1b0~'\x1b`\xd1'\x1b0~'\x1b\x08~'\x1b\x90\xfb&\x1b`\xd1'\x1b\x98\x7f'\x1bX~'\x1b\xe0}'\x1b`\xfb&\x1b\xe0}'\x1b\xf8\xc2'\x1b \xe0'\x1b@\xd1'\x1b\xd0~'\x1b\xa0\xd1'\x1b\xf0\xfb&\x1b\xf8~'\x1b \xe0'\x1b\x90\xfb&\x1b`\xfb&\x1bp\x7f'\x1b\x80\xd1'\x1b"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S"@}\xba\x0c`\xd2'\x1b`\xd3'\x1b\xe0\xd3'\x1b\x00\xd2'\x1b\xe0\xd1'\x1b \xd3'\x1b\x80\xd2'\x1b\xc0\xd2'\x1b \xd4'\x1b\x00\xd4'\x1b@\xd2'\x1b\xa0\xd4'\x1b\x80\xd4'\x1b\x80\xd3'\x1b\xc0\xd4'\x1b \xd5'\x1b\x00\xd5'\x1b`\xd5'\x1b@\xd5'\x1b\xa0\xd5'\x1b\x80\xd5'\x1b\xe0\xd5'\x1b\xc0\xd5'\x1b`\xd4'\x1b\x00\xd6'\x1b \xd6'\x1b@\xd6'\x1b\xa0\xd6'\x1b\x80\xd6'\x1b\xe0\xd6'\x1b\x00\xd7'\x1b \xd7'\x1b@\xd7'\x1b`\xd7'\x1b\xa0\xd2'\x1b\xc0\xd3'\x1b\x80\xd7'\x1b\xa0\xd7'\x1b\xc0\xd7'\x1b\xe0\xd7'\x1b\x00\xd8'\x1b \xd8'\x1b\x80\xd8'\x1b`\xd8'\x1b\xc0\xd6'\x1b\xe0\xd8'\x1b\xc0\xd8'\x1b@\xd3'\x1b@\xd9'\x1b \xd9'\x1b`\xd6'\x1b\xa0\xd9'\x1b\x80\xd9'\x1b@\xd4'\x1b\x00\xda'\x1b \xda'\x1b@\xda'\x1b\xa0\xd3'\x1b\xa0\xd8'\x1b\xa0\xda'\x1b\xc0\xda'\x1b\xe0\xda'\x1b\x00\xdb'\x1b \xdb'\x1b\xe0\xd9'\x1b`\xdb'\x1b\x80\xdb'\x1b\xa0\xdb'\x1b\xe0\xd2'\x1b\xe0\xdb'\x1b\xe0/\xde\x1a\x80\xda'\x1b\xc0\xdb'\x1b \xdc'\x1b\xa0\xdc'\x1b\x00\xdd'\x1b\x00\xd9'\x1b \xd2'\x1b\x80\xdd'\x1b \xdd'\x1b\x80\xdc'\x1b\xc0\xdc'\x1b\xa0\xdd'\x1b\x00\xd3'\x1b`\xdd'\x1b@\xdc'\x1b\xc0\xdd'\x1b`\xd9'\x1b\xc0\xde'\x1b\x80\xde'\x1b`\xde'\x1b\xe0\xdd'\x1b\xe0\xd4'\x1b@\xd8'\x1b\x80\xdf'\x1b@\xdd'\x1b\x00\xde'\x1b`\xdf'\x1b\xe0\xde'\x1b\xc0\xd9'\x1b@\xdb'\x1b \xde'\x1b\xe0\xdf'\x1b\x00\xdf'\x1b\xe0\xdc'\x1b\xa0\xde'\x1b\x00\xdc'\x1b\xc0\xdf'\x1b`\xdc'\x1b@\xdf'\x1b\xe0,\xde\x1a\x80\x0e\x05\x1b@\xde'\x1b@\xa2V\x1b \xa2V\x1b\xc0\xa0V\x1b@\xa1V\x1b\x00\xa2V\x1b\xe0\xa0V\x1b`\xa0V\x1b\x00\xa1V\x1b\xa0\xa2V\x1b\x80\xa2V\x1b\x00\xa3V\x1b \xa1V\x1b`\xa2V\x1b\xe0\xa2V\x1b\x80\xa1V\x1b \xa3V\x1b\x80\xa3V\x1b`\xa3V\x1b\xc0\xa1V\x1b\xe0\xa3V\x1b\xc0\xa3V\x1b \xa4V\x1b\x00\xa4V\x1b`\xa4V\x1b\x80\xa4V\x1b\xa0\xa4V\x1b\xc0\xa4V\x1b\xa0\xa0V\x1b\x00\xa5V\x1b\xe0\xa4V\x1b@\xa5V\x1b \xa5V\x1b\xa0\xa3V\x1b`\xa5V\x1b\x80\xa5V\x1b\xa0\xa5V\x1b\xc0\xa5V\x1b\xe0\xa5V\x1b\x00\xa6V\x1b \xa6V\x1b@\xa6V\x1b`\xa6V\x1b\x80\xa6V\x1b\xa0\xa6V\x1b\xc0\xa6V\x1b \xa7V\x1b@\xa7V\x1b`\xa7V\x1b \xa0V\x1b`\xa1V\x1b\xc0\xa7V\x1b\xe0\xa7V\x1b\x00\xa8V\x1b\xc0\xa2V\x1b@\xa0V\x1b`\xa8V\x1b@\xa8V\x1b\xa0\xa8V\x1b\x80\xa8V\x1b\xe0\xa8V\x1b\xc0\xa8V\x1b\x80\xa7V\x1b\x00\xa9V\x1b \xa9V\x1b@\xa9V\x1b\xa0\xa9V\x1b\x80\xa9V\x1b\xe0\xa9V\x1b\xc0\xa9V\x1b \xaaV\x1b\x00\xaaV\x1b`\xaaV\x1b@\xaaV\x1b\x80\xa0V\x1b\xc0\xaaV\x1b\xe0\xaaV\x1b\x00\xabV\x1b\xa0\xa1V\x1b`\xa9V\x1b \xabV\x1b@\xabV\x1b`\xabV\x1b\x80\xabV\x1b\xa0\xabV\x1b\x00\xacV\x1b \xacV\x1b"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'%/\x93?\x01\tQ?\x1e\x99\x19?#\x88\x88?\xe7@D?\xb0]&?p\x99Y?f\x19\xa2?\x9f\xacj?\x93\xbe;?yff?\xc8xw?n\xeb.?t\x19\x82?\x80,s?\xd8\x97j?g!\xa2?k\xaaj?\x91\xceL?\r\x89\x88?\xa9\xb9{?\xabef?\xf7gf?g\x10\x91?\x97\x0eQ?\xb5w\x97?\xce&b?E\xf0n?\'w\x97?S\x82H?w\x99\xb9?\x85c\x86?yf\xa6?\xbb@U?\xea\xbc{?\x9a\x1ab?\x1b\x08Q?h\x03^?\xbc\x99Y?p\xdf]?\xf8\xadj?\xae\xe1]?\xeb@\xc4?d\xcd\x8c?\xb6!\xc2?\xf8\xa5j?\x08S\x95?0\xe9n??jU?\xea\xc7L?\xad\xe9\x8e?\x12\x98Y?:\xfc??\x82yH?\x86\x10\x91?\xc9\xfa??k\x93Y?e\x1cb?Ah\x86?\xbb/s?\x94\xbc\x9b?\x80\x1bb?\x7f\xb7{?<!\x82?\xa7\xba{?\x80af?\x0f@\x84?e\xae{?\xb2\r\x91?\xf7ef?\xb8\xa4j?\x12<\xc4?U\x9aY?\x98\x1db?\xea\x1c\x12@r\xc4j?\xc3\x88\x88?Brw?+\xc7L?\x8a\xb8\xfb?\x1a\xd2{?\xf2\x10Q?i\xb8;?\xec\x96\x99?\xe7-\xb3?3\xa5\xb9?+\xd8]?\x96IU?\x88\x01@?\x8c\x9bY?`#\x82?\xe0tw?\xb7\xbc\x9b?\xff\xaa\xaa?}\xf6\x7f?U\xbc\x9b?(\x99H?Laf?\xa5\xd9]?\xafG\x84?7"\x82?p\xdd]?sDD?\xbd \x82?\x1d\x13Q?m\x89H?\xf6`f?\xe5af?\xa6if?f\xf4\x7f?Q\x96\xd9?\x92\xcb\x8c?\xc0\x1f\xa2?\xd3\x11\x91?\x1f\xec\x8e?\xcd>\x84?5\x00\x80?\xec\xb9;?!\xbc\x9b?\xf2\xec\x8e?\xebWU?9\x90Y?=;D?\xa5\x10b?\x91\xe8\xdd?\xf4\x04/?2\xc6L?\xdd\xfa\x7f?\x05\xfe??\xd0\xff\x7f?\r\x89H?7\xca\x8c?-\xa6j?[Z\x95?\t\xca\x8c?\xce3\xb3?\xe4.s?1\x88\x88?\xb7t\x97?\x9e\xef\x8e?@r\xa6?\x8d\x1ds?\x87\x9bY?\xff\x99Y?\x1f\xdf]?\x11_\xd5?\xf9\xfc??\xfe\xd8]?\xca\x1eb?\x8d\xda\xbd?\xa9\xdf]?`DD?&\xec\x8e?\xe1\x13Q?\xde\xb9\x9b?s\x00\x80?]\x14Q?l\x01@? .3?kbf?{\x1e\xc2?y\n\x80?\x9a#\x02@\xeb"b?l\xc6L?\x7f\xc8L?fP\x84?\xcb\xa7\xaa?\x99\xeb\x8e?\xeb\x1d\xe2?\xd2\xdc]?\xb3\x1c@?\x1d\x1eb?\xe9\x1bb?\xb133?W\x88H?P\xa0Y?E\xef\x8e?\x05#\x82?\x89\nQ?$\xef\x8e?0"b?:ff?G\x82\x88?;QU?\xa7\xa5{?*af?$xH?7\x00\xa0?\xb0\xbc\xbb?\x1b\x1f\xa2?8\xfb??7f\x06@vvw?\x80\x85\x88?m\xad\x8a?\x12\xab\x8a?\xb50\xc2?\x92\x14Q?\xfb\xff\x7f?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\x80\xcf\xfa\x040\xc8\xfa\x04\xe0\xf9\xbf\x0c\xa8\xfb\xbf\x0c0\xf2\xbf\x0cP\xff\xbf\x0c\xb8\xf4\xbf\x0c(\xf1\xbf\x0c\xe8\xf7\xbf\x0c \xf6\xbf\x0c0\xfb\xbf\x0cP\xf9\xbf\x0c \xf9\xbf\x0c\xc8\xfc\xbf\x0c\x10\xfa\xbf\x0c\x90\xf5\xbf\x0c`\xfb\xbf\x0c\xc0\xf8\xbf\x0c\xb8\xf1\xbf\x0c\x10\xf7\xbf\x0c\xa8\xfe\xbf\x0c\xe0\xfc\xbf\x0cH\xf8\xbf\x0c\xf0\xf8\xbf\x0c0\x8e\xfa\x04h\x8c\xfa\x04X\x8d\xfa\x04\xa8\x82\xfa\x04 \x86\xfa\x04\xa0\x8a\xfa\x04H\x88\xfa\x04`\x85\xfa\x04\xc0\x82\xfa\x04h\x8f\xfa\x04@\x87\xfa\x04\x80\x83\xfa\x04h\x86\xfa\x04\xb0\x80\xfa\x04\xa0\x84\xfa\x04\x88\x84\xfa\x04\xc8\x89\xfa\x04\xa0\x87\xfa\x04\xe8\x81\xfa\x04\x80\x8c\xfa\x04\x08\x83\xfa\x04(\x87\xfa\x04x\x82\xfa\x04p\x8a\xfa\x04x\x8e\xfa\x04\x90\x8e\xfa\x04\xa8\x88\xfa\x04\x10\x8a\xfa\x04P\x8f\xfa\x04\xd8\x82\xfa\x04P\x86\xfa\x04\xd0\x87\xfa\x04\xc0\x85\xfa\x04\x80\x80\xfa\x04\xd0\x81\xfa\x04\x08\x86\xfa\x04\x98\x80\xfa\x04\x90\x85\xfa\x04H\x8e\xfa\x04\xb8\x84\xfa\x04`\x82\xfa\x04\x18\x85\xfa\x04\xc8\x80\xfa\x04x\x8b\xfa\x040\x88\xfa\x04\x98\x83\xfa\x04\x88\x8d\xfa\x04\xd8\x8b\xfa\x04\xb8\x87\xfa\x04\xe0\x86\xfa\x04\xf8\x86\xfa\x04P\x80\xfa\x04 \x80\xfa\x04\xe0\x8c\xfa\x04\xb8\x81\xfa\x04\xe8\x84\xfa\x04\xe0\x83\xfa\x04\x10\x84\xfa\x04\xd8\x88\xfa\x04X\x81\xfa\x04\x90\x8b\xfa\x04\xc8\x83\xfa\x04\x00\x8b\xfa\x04\x10\x81\xfa\x04(\x84\xfa\x04\xb8\x8a\xfa\x04\xd8\x85\xfa\x040\x82\xfa\x04@\x81\xfa\x04X\x8a\xfa\x04\xf0\x85\xfa\x048\x8f\xfa\x04\xa8\x8e\xfa\x04`\x8b\xfa\x04\xd0\x8d\xfa\x04H\x82\xfa\x04\x80\x8f\xfa\x04\xa0\x81\xfa\x04\x98\x8c\xfa\x04\x98\x86\xfa\x04\xe0\x80\xfa\x04\x18\x82\xfa\x04\xa8\x85\xfa\x04\xe8\x87\xfa\x04 \x8f\xfa\x04h\x89\xfa\x04\xf0\x8b\xfa\x04\x00\x82\xfa\x04\xe8\x8a\xfa\x04\xf8\x89\xfa\x04`\x8e\xfa\x04@\x84\xfa\x04\x00\x85\xfa\x04@\x8a\xfa\x04\xf8\x83\xfa\x04p\x87\xfa\x04\xa8\x8b\xfa\x04\x00\x88\xfa\x04x\x85\xfa\x04x\x88\xfa\x04X\x87\xfa\x04\xe0\x8f\xfa\x04\xd8\x8e\xfa\x04h\x83\xfa\x04\xc0\x8b\xfa\x04(\x8d\xfa\x04\xf8\x8c\xfa\x04\xf0\x8e\xfa\x04\x98\x8f\xfa\x04\x88\x8a\xfa\x04\xc8\x8c\xfa\x04\x90\x88\xfa\x04P\x8c\xfa\x04\xb8\x8d\xfa\x04H\x85\xfa\x04\x10\x8d\xfa\x04\x88\x87\xfa\x04(\x81\xfa\x04\x10\x87\xfa\x04 \x8c\xfa\x04\xb0\x8c\xfa\x04\x88\x81\xfa\x040\x8b\xfa\x04\xb0\x8f\xfa\x048\x83\xfa\x04\xc8\x8f\xfa\x048\x8c\xfa\x04\x08\x8f\xfa\x04p\x8d\xfa\x048\x86\xfa\x04\xb0\x86\xfa\x04H\x8b\xfa\x04\x18\x88\xfa\x04`\x88\xfa\x04 \x89\xfa\x048\x89\xfa\x04\x80\x89\xfa\x04\x98\x89\xfa\x04\x08\x89\xfa\x040\x85\xfa\x04\xf0\x82\xfa\x04\xc0\x8e\xfa\x04X\x84\xfa\x04\xc0\x88\xfa\x04@\x8d\xfa\x04\xb0\x83\xfa\x04\xc8\x86\xfa\x04\x08\x8c\xfa\x04p\x81\xfa\x04\xf0\x88\xfa\x04\xa0\x8d\xfa\x04\x18\x8e\xfa\x04\x18\x8b\xfa\x04P\x83\xfa\x04\xe8\x8d\xfa\x04(\x8a\xfa\x04(\x1d\xf2\x04\xa8\x15\xf2\x04\x90\x18\xf2\x04\x98\x1f\xf2\x04@\x17\xf2\x04\xd0\x1d\xf2\x04 \xf0\xbf\x0c\xa0\xf7\xbf\x0cX\xfa\xbf\x0c\x88\xfd\xbf\x0c8\xf9\xbf\x0cx\xfb\xbf\x0c\x98\xf6\xbf\x0c \xf3\xbf\x0c\xf8\xfc\xbf\x0c\xf0\xfe\xbf\x0c\x08\xf9\xbf\x0c\xa8\xf8\xbf\x0cX\xfd\xbf\x0c(\xf4\xbf\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6515
sg6371
g6505
sg6385
g6509
sg6380
g6513
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6539
sg6371
g6535
sg6385
g6546
sg6380
g6543
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6562
sg6371
g6552
sg6385
g6556
sg6380
g6560
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6539
sg6371
g6535
sg6385
g6546
sg6380
g6543
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6625
sg6371
g6621
sg6385
g6632
sg6380
g6629
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6539
sg6371
g6638
sg6385
g6546
sg6380
g6645
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6676
sg6371
g6666
sg6385
g6670
sg6380
g6674
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6687
sg6371
g6683
sg6385
g6694
sg6380
g6691
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6676
sg6371
g6666
sg6385
g6670
sg6380
g6674
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6687
sg6371
g6713
sg6385
g6694
sg6380
g6720
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6732
sg6371
g6728
sg6385
g6739
sg6380
g6736
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6749
sg6371
g6745
sg6385
g6756
sg6380
g6753
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6625
sg6371
g6621
sg6385
g6632
sg6380
g6629
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6562
sg6371
g6775
sg6385
g6556
sg6380
g6782
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6732
sg6371
g6790
sg6385
g6739
sg6380
g6797
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6625
sg6371
g6805
sg6385
g6632
sg6380
g6812
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6837
sg6371
g6833
sg6385
g6844
sg6380
g6841
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6854
sg6371
g6850
sg6385
g6861
sg6380
g6858
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6687
sg6371
g6683
sg6385
g6694
sg6380
g6691
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6539
sg6371
g6638
sg6385
g6546
sg6380
g6645
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6910
sg6371
g6906
sg6385
g6917
sg6380
g6914
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6854
sg6371
g6923
sg6385
g6861
sg6380
g6930
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6749
sg6371
g6745
sg6385
g6756
sg6380
g6753
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6854
sg6371
g6923
sg6385
g6861
sg6380
g6930
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6837
sg6371
g6964
sg6385
g6844
sg6380
g6971
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6453
sg6371
g6992
sg6385
g6447
sg6380
g6999
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6539
sg6371
g6638
sg6385
g6546
sg6380
g6645
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6625
sg6371
g6621
sg6385
g6632
sg6380
g6629
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6732
sg6371
g6728
sg6385
g6739
sg6380
g6736
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g7050
sg6371
g7046
sg6385
g7057
sg6380
g7054
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6515
sg6371
g7063
sg6385
g6509
sg6380
g7070
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6732
sg6371
g6728
sg6385
g6739
sg6380
g6736
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6676
sg6371
g6666
sg6385
g6670
sg6380
g6674
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6687
sg6371
g6713
sg6385
g6694
sg6380
g6720
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6910
sg6371
g7117
sg6385
g6917
sg6380
g7124
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6837
sg6371
g6964
sg6385
g6844
sg6380
g6971
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6492
sg6371
g7158
sg6385
g6499
sg6380
g7165
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6625
sg6371
g6621
sg6385
g6632
sg6380
g6629
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6732
sg6371
g6790
sg6385
g6739
sg6380
g6797
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6430
sg6371
g7199
sg6385
g6437
sg6380
g7206
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g7218
sg6371
g7214
sg6385
g7225
sg6380
g7222
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6539
sg6371
g6535
sg6385
g6546
sg6380
g6543
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6515
sg6371
g7063
sg6385
g6509
sg6380
g7070
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g7218
sg6371
g7214
sg6385
g7225
sg6380
g7222
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g7050
sg6371
g7283
sg6385
g7057
sg6380
g7290
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6837
sg6371
g6964
sg6385
g6844
sg6380
g6971
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6515
sg6371
g7063
sg6385
g6509
sg6380
g7070
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6749
sg6371
g7324
sg6385
g6756
sg6380
g7331
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6562
sg6371
g6552
sg6385
g6556
sg6380
g6560
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g7218
sg6371
g7214
sg6385
g7225
sg6380
g7222
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6376
sg6371
g7378
sg6385
g6386
sg6380
g7385
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6687
sg6371
g6683
sg6385
g6694
sg6380
g6691
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6453
sg6371
g6992
sg6385
g6447
sg6380
g6999
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g7050
sg6371
g7283
sg6385
g7057
sg6380
g7290
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6492
sg6371
g7158
sg6385
g6499
sg6380
g7165
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6749
sg6371
g7324
sg6385
g6756
sg6380
g7331
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6854
sg6371
g6923
sg6385
g6861
sg6380
g6930
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6539
sg6371
g6535
sg6385
g6546
sg6380
g6543
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6837
sg6371
g6833
sg6385
g6844
sg6380
g6841
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6562
sg6371
g6775
sg6385
g6556
sg6380
g6782
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6515
sg6371
g7063
sg6385
g6509
sg6380
g7070
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g7050
sg6371
g7046
sg6385
g7057
sg6380
g7054
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g7566
sg6371
g7562
sg6385
g7573
sg6380
g7570
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6732
sg6371
g6728
sg6385
g6739
sg6380
g6736
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g7566
sg6371
g7592
sg6385
g7573
sg6380
g7599
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6910
sg6371
g6906
sg6385
g6917
sg6380
g6914
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6749
sg6371
g6745
sg6385
g6756
sg6380
g6753
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g7218
sg6371
g7646
sg6385
g7225
sg6380
g7653
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6749
sg6371
g7324
sg6385
g6756
sg6380
g7331
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g7050
sg6371
g7283
sg6385
g7057
sg6380
g7290
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6625
sg6371
g6805
sg6385
g6632
sg6380
g6812
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6562
sg6371
g6552
sg6385
g6556
sg6380
g6560
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6687
sg6371
g6713
sg6385
g6694
sg6380
g6720
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g7566
sg6371
g7562
sg6385
g7573
sg6380
g7570
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6910
sg6371
g6906
sg6385
g6917
sg6380
g6914
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6625
sg6371
g6805
sg6385
g6632
sg6380
g6812
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6562
sg6371
g6775
sg6385
g6556
sg6380
g6782
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6837
sg6371
g6833
sg6385
g6844
sg6380
g6841
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6396
sg6371
g7804
sg6385
g6403
sg6380
g7811
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6837
sg6371
g6833
sg6385
g6844
sg6380
g6841
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6562
sg6371
g6775
sg6385
g6556
sg6380
g6782
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6430
sg6371
g7199
sg6385
g6437
sg6380
g7206
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6854
sg6371
g6850
sg6385
g6861
sg6380
g6858
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6376
sg6371
g7378
sg6385
g6386
sg6380
g7385
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6453
sg6371
g6992
sg6385
g6447
sg6380
g6999
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6910
sg6371
g7117
sg6385
g6917
sg6380
g7124
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6749
sg6371
g7324
sg6385
g6756
sg6380
g7331
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6676
sg6371
g7936
sg6385
g6670
sg6380
g7943
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g7566
sg6371
g7562
sg6385
g7573
sg6380
g7570
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g7050
sg6371
g7046
sg6385
g7057
sg6380
g7054
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6854
sg6371
g6923
sg6385
g6861
sg6380
g6930
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6687
sg6371
g6683
sg6385
g6694
sg6380
g6691
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6515
sg6371
g7063
sg6385
g6509
sg6380
g7070
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6676
sg6371
g7936
sg6385
g6670
sg6380
g7943
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6515
sg6371
g6505
sg6385
g6509
sg6380
g6513
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g7218
sg6371
g7646
sg6385
g7225
sg6380
g7653
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6539
sg6371
g6638
sg6385
g6546
sg6380
g6645
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6396
sg6371
g7804
sg6385
g6403
sg6380
g7811
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6492
sg6371
g7158
sg6385
g6499
sg6380
g7165
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g7566
sg6371
g7592
sg6385
g7573
sg6380
g7599
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6396
sg6371
g7804
sg6385
g6403
sg6380
g7811
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6854
sg6371
g6850
sg6385
g6861
sg6380
g6858
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6910
sg6371
g7117
sg6385
g6917
sg6380
g7124
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6625
sg6371
g6805
sg6385
g6632
sg6380
g6812
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6854
sg6371
g6850
sg6385
g6861
sg6380
g6858
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6430
sg6371
g7199
sg6385
g6437
sg6380
g7206
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6539
sg6371
g6535
sg6385
g6546
sg6380
g6543
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g7218
sg6371
g7214
sg6385
g7225
sg6380
g7222
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6687
sg6371
g6713
sg6385
g6694
sg6380
g6720
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g7218
sg6371
g7646
sg6385
g7225
sg6380
g7653
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6430
sg6371
g7199
sg6385
g6437
sg6380
g7206
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6625
sg6371
g6805
sg6385
g6632
sg6380
g6812
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6749
sg6371
g7324
sg6385
g6756
sg6380
g7331
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6376
sg6371
g7378
sg6385
g6386
sg6380
g7385
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6492
sg6371
g7158
sg6385
g6499
sg6380
g7165
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g7218
sg6371
g7646
sg6385
g7225
sg6380
g7653
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6837
sg6371
g6964
sg6385
g6844
sg6380
g6971
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6910
sg6371
g6906
sg6385
g6917
sg6380
g6914
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6376
sg6371
g7378
sg6385
g6386
sg6380
g7385
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g7050
sg6371
g7046
sg6385
g7057
sg6380
g7054
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g7566
sg6371
g7562
sg6385
g7573
sg6380
g7570
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6837
sg6371
g6964
sg6385
g6844
sg6380
g6971
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6854
sg6371
g6850
sg6385
g6861
sg6380
g6858
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6910
sg6371
g6906
sg6385
g6917
sg6380
g6914
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6732
sg6371
g6790
sg6385
g6739
sg6380
g6797
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6625
sg6371
g6621
sg6385
g6632
sg6380
g6629
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6430
sg6371
g7199
sg6385
g6437
sg6380
g7206
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6562
sg6371
g6552
sg6385
g6556
sg6380
g6560
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g7050
sg6371
g7046
sg6385
g7057
sg6380
g7054
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6910
sg6371
g7117
sg6385
g6917
sg6380
g7124
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6687
sg6371
g6713
sg6385
g6694
sg6380
g6720
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g7566
sg6371
g7592
sg6385
g7573
sg6380
g7599
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6515
sg6371
g6505
sg6385
g6509
sg6380
g6513
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g7218
sg6371
g7646
sg6385
g7225
sg6380
g7653
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g7050
sg6371
g7283
sg6385
g7057
sg6380
g7290
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6854
sg6371
g6923
sg6385
g6861
sg6380
g6930
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6676
sg6371
g7936
sg6385
g6670
sg6380
g7943
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6453
sg6371
g6992
sg6385
g6447
sg6380
g6999
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g7218
sg6371
g7214
sg6385
g7225
sg6380
g7222
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6539
sg6371
g6638
sg6385
g6546
sg6380
g6645
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6396
sg6371
g7804
sg6385
g6403
sg6380
g7811
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6376
sg6371
g7378
sg6385
g6386
sg6380
g7385
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6676
sg6371
g6666
sg6385
g6670
sg6380
g6674
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6732
sg6371
g6728
sg6385
g6739
sg6380
g6736
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6676
sg6371
g7936
sg6385
g6670
sg6380
g7943
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6562
sg6371
g6775
sg6385
g6556
sg6380
g6782
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6453
sg6371
g6992
sg6385
g6447
sg6380
g6999
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6732
sg6371
g6790
sg6385
g6739
sg6380
g6797
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6676
sg6371
g6666
sg6385
g6670
sg6380
g6674
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6732
sg6371
g6790
sg6385
g6739
sg6380
g6797
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6687
sg6371
g6683
sg6385
g6694
sg6380
g6691
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6515
sg6371
g6505
sg6385
g6509
sg6380
g6513
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6676
sg6371
g7936
sg6385
g6670
sg6380
g7943
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6910
sg6371
g7117
sg6385
g6917
sg6380
g7124
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6749
sg6371
g6745
sg6385
g6756
sg6380
g6753
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6396
sg6371
g7804
sg6385
g6403
sg6380
g7811
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6492
sg6371
g7158
sg6385
g6499
sg6380
g7165
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6562
sg6371
g6552
sg6385
g6556
sg6380
g6560
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g7566
sg6371
g7562
sg6385
g7573
sg6380
g7570
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g7566
sg6371
g7592
sg6385
g7573
sg6380
g7599
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g7050
sg6371
g7283
sg6385
g7057
sg6380
g7290
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g7566
sg6371
g7592
sg6385
g7573
sg6380
g7599
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6515
sg6371
g6505
sg6385
g6509
sg6380
g6513
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6749
sg6371
g6745
sg6385
g6756
sg6380
g6753
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6837
sg6371
g6833
sg6385
g6844
sg6380
g6841
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.