ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E2_infer_design1_2015_Jul_01_1415
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vleft
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'g\x80\x1a+i\xfcM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_01_1415
p67
sVparticipant
p68
VE2
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F6.5001251579451491
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F31.016127128539665
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P10'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F14.050000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.69999999999999907
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'!\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V44-crunch.png
p103
sg21
F1.8
sg70
Vn
sa(dp104
g64
g65
sg20
F8.5169999999999995
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.75999999999999979
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x15\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V29-beans.png
p110
sg21
F1.1000000000000001
sg70
Vn
sa(dp111
g64
g65
sg20
F4.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x05\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p117
sg21
F1.3
sg70
Vn
sa(dp118
g64
g65
sg20
F5.2510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.57999999999999896
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S"'\x00\x00\x00"
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V51-mars.png
p124
sg21
F1.8
sg70
Vn
sa(dp125
g64
g65
sg20
F5.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S' \x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p131
sg21
F1.3
sg70
Vn
sa(dp132
g64
g65
sg20
F5.367
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'"\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p138
sg21
F1.7
sg70
Vn
sa(dp139
g64
g65
sg20
F6.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.099999999999998507
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'%\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p145
sg21
F2
sg70
Vn
sa(dp146
g64
g65
sg20
F10.433999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.85999999999999921
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x1f\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p152
sg21
F1.7
sg70
Vn
sa(dp153
g64
g65
sg20
F3.0009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x11\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p159
sg21
F1.6000000000000001
sg70
Vn
sa(dp160
g64
g65
sg20
F5.4669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.11999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x03\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V4-corn.png
p166
sg21
F1.5
sg70
Vn
sa(dp167
g64
g65
sg20
F3.5840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x1a\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V35-raisins.png
p173
sg21
F1
sg70
Vn
sa(dp174
g64
g65
sg20
F18.783999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.39999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x19\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p180
sg21
F1.2
sg70
Vn
sa(dp181
g64
g65
sg20
F5.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.059999999999998499
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x01\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p187
sg21
F2
sg70
Vn
sa(dp188
g64
g65
sg20
F5.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.57999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'&\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V50-polo.png
p194
sg21
F1.6000000000000001
sg70
Vn
sa(dp195
g64
g65
sg20
F4.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.65999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'#\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p201
sg21
F1.3
sg70
Vn
sa(dp202
g64
g65
sg20
F9.6500000000000004
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.1999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x0b\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p208
sg21
F1.5
sg70
Vn
sa(dp209
g64
g65
sg20
F3.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x16\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p215
sg21
F1.7
sg70
Vn
sa(dp216
g64
g65
sg20
F8.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F1.4800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x1c\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p222
sg21
F1
sg70
Vn
sa(dp223
g64
g65
sg20
F2.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x07\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p229
sg21
F1.3999999999999999
sg70
Vn
sa(dp230
g64
g65
sg20
F4.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.11999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x06\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V7-olives.png
p236
sg21
F2
sg70
Vn
sa(dp237
g64
g65
sg20
F5.9509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x02\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p243
sg21
F1.6000000000000001
sg70
Vn
sa(dp244
g64
g65
sg20
F2.7010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x00\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p250
sg21
F1.3
sg70
Vn
sa(dp251
g64
g65
sg20
F9.9339999999999993
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.13999999999999896
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x13\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p257
sg21
F1.6000000000000001
sg70
Vn
sa(dp258
g64
g65
sg20
F5.2009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x14\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p264
sg21
F1.1000000000000001
sg70
Vn
sa(dp265
g64
g65
sg20
F10.967000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.71999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x04\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p271
sg21
F1.8
sg70
Vn
sa(dp272
g64
g65
sg20
F6.0510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.65999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x0f\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p278
sg21
F1.6000000000000001
sg70
Vn
sa(dp279
g64
g65
sg20
F2.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x1d\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V40-sardines.png
p285
sg21
F2
sg70
Vn
sa(dp286
g64
g65
sg20
F4.4669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x0e\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p292
sg21
F1.8
sg70
Vn
sa(dp293
g64
g65
sg20
F4.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\r\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p299
sg21
F1.3999999999999999
sg70
Vn
sa(dp300
g64
g65
sg20
F2.351
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x08\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p306
sg21
F1.6000000000000001
sg70
Vn
sa(dp307
g64
g65
sg20
F6.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.55999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x17\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p313
sg21
F2
sg70
Vn
sa(dp314
g64
g65
sg20
F5.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.61999999999999944
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'$\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V48-twix.png
p320
sg21
F1.2
sg70
Vn
sa(dp321
g64
g65
sg20
F4.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.0799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\n\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p327
sg21
F1.3
sg70
Vn
sa(dp328
g64
g65
sg20
F4.9509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.53999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x0c\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V18-mms.png
p334
sg21
F1.7
sg70
Vn
sa(dp335
g64
g65
sg20
F4.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.67999999999999883
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x12\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p341
sg21
F1.8999999999999999
sg70
Vn
sa(dp342
g64
g65
sg20
F9.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.8199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x1b\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p348
sg21
F1.3999999999999999
sg70
Vn
sa(dp349
g64
g65
sg20
F2.8340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x10\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V22-daim.png
p355
sg21
F1.8999999999999999
sg70
Vn
sa(dp356
g64
g65
sg20
F5.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\t\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p362
sg21
F1.3999999999999999
sg70
Vn
sa(dp363
g64
g65
sg20
F4.0510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x18\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p369
sg21
F1.2
sg70
Vn
sa(dp370
g64
g65
sg20
F5.0510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.23999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x1e\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p376
sg21
F1.6000000000000001
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F10.416555573548976
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'38-maltesers.png'
p381
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F0.99978503624151926
sg27
F4.851
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'50-polo.png'
p390
sg26
F3.4000000000000004
sg28
F3
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F3.2500259439038928
sg27
F12.734
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p399
sg26
F2.3999999999999995
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F4.4999811835441506
sg27
F3.5009999999999999
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'35-raisins.png'
p408
sg26
F4.6000000000000014
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.2000092371672508
sg27
F9.0839999999999996
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'29-beans.png'
p417
sg26
F4.3000000000000007
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F3.6000399707154429
sg27
F4.4169999999999998
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p426
sg26
F5.4999999999999991
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F1.1666949863829359
sg27
F6.8339999999999996
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p435
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F1.3164508856280008
sg27
F1.351
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'44-crunch.png'
p444
sg26
F4
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F4.9167674012314819
sg27
F6.0670000000000002
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p453
sg26
F5.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F2.4999780474645377
sg27
F2.7509999999999999
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'48-twix.png'
p462
sg26
F4.2999999999999998
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.9665600210719276
sg27
F2.867
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p471
sg26
F5.0000000000000009
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F3.5334713396878215
sg27
F3.734
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p480
sg26
F4.9000000000000004
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F2.56666984075855
sg27
F4.0510000000000002
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p489
sg26
F5.0000000000000018
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F1.4334165438849595
sg27
F4.4009999999999998
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'5-pineapple.png'
p498
sg26
F5.5999999999999996
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.5833389402578177
sg27
F5.3010000000000002
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p507
sg26
F4.6000000000000005
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.3168083982964163
sg27
F2.9009999999999998
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'22-daim.png'
p516
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.7333933369191072
sg27
F2.8170000000000002
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p525
sg26
F4.6000000000000005
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F4.2500173909684236
sg27
F7.2670000000000003
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p534
sg26
F3.6999999999999997
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F5.4171163609644282
sg27
F5.2510000000000003
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p543
sg26
F4.9000000000000021
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'left'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.6666832973714918
sg27
F2.1669999999999998
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'49-yorkie.png'
p552
sg26
F5.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.4833414491185977
sg27
F2.4340000000000002
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p561
sg26
F3.2999999999999994
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F3.5666815297663561
sg27
F2.4169999999999998
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'7-olives.png'
p570
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.2335344603416161
sg27
F1.2010000000000001
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'18-mms.png'
p579
sg26
F5.799999999999998
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.5000806826828921
sg27
F4.5170000000000003
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p588
sg26
F2.5999999999999996
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'right'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F5.1832201114848431
sg27
F5.8840000000000003
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p597
sg26
F5.4000000000000004
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.6666941310904804
sg27
F1.784
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'31-hobnobs.png'
p606
sg26
F5.8999999999999986
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.0833953896253661
sg27
F3.6339999999999999
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p615
sg26
F5.2000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F2.1500800554676971
sg27
F3.5339999999999998
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p624
sg26
F2.7999999999999989
sg28
F4
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F3.7499991447039065
sg27
F3.7170000000000001
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p633
sg26
F3.4000000000000004
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F9.5832502748344268
sg27
F3.9009999999999998
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'46-pistachios.png'
p642
sg26
F5.4999999999999991
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F3.4166430985824263
sg27
F4.117
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p651
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.2501066265867848
sg27
F1.151
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p660
sg26
F1.8999999999999992
sg28
F3
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F6.3499458884361957
sg27
F1.6839999999999999
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p669
sg26
F5.799999999999998
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.1999801571910211
sg27
F1.617
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'4-corn.png'
p678
sg26
F4.5000000000000018
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.366750694498478
sg27
F3.7669999999999999
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'51-mars.png'
p687
sg26
F3.6000000000000005
sg28
F3
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.8000834196245705
sg27
F1.9510000000000001
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'40-sardines.png'
p696
sg26
F5.799999999999998
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.8667036533552164
sg27
F1.534
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p705
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.2167011444980744
sg27
F1.101
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'25-kitkat.png'
p714
sg26
F5.5999999999999988
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.383380735598621
sg27
F5.5010000000000003
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p723
sg26
F4.8000000000000007
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F2.700002965015301
sg27
F5.4340000000000002
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p732
sg26
F4.2999999999999998
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F4.0833315277159272
sg27
F2.2669999999999999
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F324.87497833256566
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F3.1001859407988377
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'53-cheestrings.png'
p744
sg83
S'53-cheestrings.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'47-picnic.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x01\x0e %\x00}\x00'
tRp754
sa(dp755
g64
g65
sg82
S'12-topic.png'
p756
sg83
S'12-topic.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'39-mackerel.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x01\x0e ,\x08-\xc0'
tRp765
sa(dp766
g64
g65
sg82
g744
sg83
S'47-picnic.png'
p767
sg56
g57
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p770
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p771
sS'practice_loop.thisIndex'
p772
g60
(g99
S'\x02\x00\x00\x00'
tRp773
sg34
g753
(S'\x07\xdf\x07\x01\x0e 3\x03@\x08'
tRp774
sa(dp775
g64
g65
sg82
S'52-aero_mousse.png'
p776
sg83
S'14-discos_salt_vinegar.png'
p777
sg56
g57
sS'practice_loop.thisN'
p778
I3
sS'practice_loop.thisTrialN'
p779
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p780
I0
sg84
S'14-discos_salt_vinegar.png'
p781
sg33
g776
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S'\x07\xdf\x07\x01\x0e 9\x05;\xd8'
tRp785
sa(dp786
g64
g65
sg82
S'11-snickers.png'
p787
sg83
S'11-snickers.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'54-frubes_yogurt.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x01\x0e!\x04\x06A\x90'
tRp796
sa(dp797
g64
g65
sg82
S'32-hovis_crackers.png'
p798
sg83
S'24-food_doctor_apple_walnut_bar.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\x01\x0e!\x0b\tj('
tRp807
sa(dp808
g64
g65
sg82
g756
sg83
S'39-mackerel.png'
p809
sg56
g57
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p812
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\x01\x0e!\x12\no\xe0'
tRp816
sa(dp817
g64
g65
sg82
g798
sg83
S'32-hovis_crackers.png'
p818
sg56
g57
sS'practice_loop.thisN'
p819
I7
sS'practice_loop.thisTrialN'
p820
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p821
I0
sg84
g803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p822
sS'practice_loop.thisIndex'
p823
g60
(g99
S'\x07\x00\x00\x00'
tRp824
sg34
g753
(S"\x07\xdf\x07\x01\x0e!\x18\r'0"
tRp825
sa(dp826
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p827
sg83
S'9-yu_mango_pieces.png'
p828
sg56
g57
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p831
I0
sg84
S'9-yu_mango_pieces.png'
p832
sg33
g827
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\x01\x0e!\x1f\x0e\xa6\x00'
tRp836
sa(dp837
g64
g65
sg82
S'15-walnut_whip.png'
p838
sg83
S'28-maple_pecan.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'28-maple_pecan.png'
p843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x01\x0e!&\x07V\xe8'
tRp847
sa(dp848
g64
g65
sg82
g787
sg83
S'54-frubes_yogurt.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x01\x0e!.\n\xb60'
tRp856
sa(dp857
g64
g65
sg82
g827
sg83
S'37-nakd_cashew_cookie.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g832
sg33
g827
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x01\x0e!5\x026h'
tRp865
sa(dp866
g64
g65
sg82
g838
sg83
S'15-walnut_whip.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x01\x0e!;\x06\x93\x98'
tRp874
sa(dp875
g64
g65
sg82
g776
sg83
S'52-aero_mousse.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g781
sg33
g776
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x01\x0e"\x05\x08\x93P'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F123.7966944618056
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'27-hartleys_raspberries_jelly.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'27-hartleys_raspberries_jelly.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'51-mars.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'51-mars.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.7831651446249452
sg34
g753
(S"\x07\xdf\x07\x01\x0e'\x03\x02\x07\x88"
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'23-crunchie_redo.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'33-ambrosia_rice.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'33-ambrosia_rice.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'23-crunchie_redo.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.1332875086118293
sg34
g753
(S"\x07\xdf\x07\x01\x0e'\t\x0e~\xf0"
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'38-maltesers.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'38-maltesers.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'6-sour_patch_kids.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'6-sour_patch_kids.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.0330927297763992
sg34
g753
(S"\x07\xdf\x07\x01\x0e'\x10\x01\xb5\x80"
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'20-fruit_pastilles.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'left'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'20-fruit_pastilles.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'2-steamed_puddings.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'2-steamed_puddings.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.1998943427497579
sg34
g753
(S"\x07\xdf\x07\x01\x0e'\x16\x02\xbf "
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'48-twix.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'48-twix.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'50-polo.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'50-polo.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.249921027902019
sg34
g753
(S"\x07\xdf\x07\x01\x0e'\x1c\x06.\x08"
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'19-caramello_redo.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'19-caramello_redo.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'30-spaghetti_hoops.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'30-spaghetti_hoops.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.4333338655160333
sg34
g753
(S'\x07\xdf\x07\x01\x0e\'"\n\x8f '
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
g967
sS'block_loop.thisIndex'
p1001
g889
sg38
S'left'
p1002
sg59
g63
sS'trial_loop.thisN'
p1003
I6
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1004
g60
(g99
S'\x06\x00\x00\x00'
tRp1005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1006
I0
sg904
g975
sS'block_loop.thisRepN'
p1007
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1008
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1009
Nsg70
Vn
sS'block_loop.thisTrialN'
p1010
I0
sg39
F1.0331973606771498
sg34
g753
(S"\x07\xdf\x07\x01\x0e')\x02\x88p"
tRp1011
sa(dp1012
S'trial_loop.thisTrialN'
p1013
I7
sg895
S'13-mccoys_steak_crisps.png'
p1014
sS'block_loop.thisIndex'
p1015
g889
sg38
S'left'
p1016
sg59
g63
sS'trial_loop.thisN'
p1017
I7
sg33
S'3-ellas_strawberries_apples.png'
p1018
sg64
g65
sS'trial_loop.thisIndex'
p1019
g60
(g99
S'\x07\x00\x00\x00'
tRp1020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1021
I0
sg904
S'3-ellas_strawberries_apples.png'
p1022
sS'block_loop.thisRepN'
p1023
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1024
I0
sg909
S'13-mccoys_steak_crisps.png'
p1025
sg55
g11
sS'block_loop.thisTrial'
p1026
Nsg70
Vn
sS'block_loop.thisTrialN'
p1027
I0
sg39
F1.5665572271173005
sg34
g753
(S"\x07\xdf\x07\x01\x0e'/\x03S\x90"
tRp1028
sa(dp1029
S'trial_loop.thisTrialN'
p1030
I8
sg895
S'1-treacle_cookies.png'
p1031
sS'block_loop.thisIndex'
p1032
g889
sg38
S'right'
p1033
sg59
g63
sS'trial_loop.thisN'
p1034
I8
sg33
S'1-treacle_cookies.png'
p1035
sg64
g65
sS'trial_loop.thisIndex'
p1036
g60
(g99
S'\x08\x00\x00\x00'
tRp1037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1038
I0
sg904
S'21-nakd_banana_crunch.png'
p1039
sS'block_loop.thisRepN'
p1040
I0
sg907
S'21-nakd_banana_crunch.png'
p1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1042
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1043
Nsg70
Vn
sS'block_loop.thisTrialN'
p1044
I0
sg39
F1.1832469106811914
sg34
g753
(S"\x07\xdf\x07\x01\x0e'5\x0c\xb5\xe8"
tRp1045
sa(dp1046
S'trial_loop.thisTrialN'
p1047
I9
sg895
S'31-hobnobs.png'
p1048
sS'block_loop.thisIndex'
p1049
g889
sg38
S'right'
p1050
sg59
g63
sS'trial_loop.thisN'
p1051
I9
sg33
S'25-kitkat.png'
p1052
sg64
g65
sS'trial_loop.thisIndex'
p1053
g60
(g99
S'\t\x00\x00\x00'
tRp1054
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1055
I0
sg904
S'25-kitkat.png'
p1056
sS'block_loop.thisRepN'
p1057
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1058
I0
sg909
S'31-hobnobs.png'
p1059
sg55
g11
sS'block_loop.thisTrial'
p1060
Nsg70
Vn
sS'block_loop.thisTrialN'
p1061
I0
sg39
F1.1832309452038317
sg34
g753
(S'\x07\xdf\x07\x01\x0e(\x00\x00\xa4\x10'
tRp1062
sa(dp1063
S'trial_loop.thisTrialN'
p1064
I10
sg895
S'26-walkers_smoky_bacon.png'
p1065
sS'block_loop.thisIndex'
p1066
g889
sg38
S'right'
p1067
sg59
g63
sS'trial_loop.thisN'
p1068
I10
sg33
S'26-walkers_smoky_bacon.png'
p1069
sg64
g65
sS'trial_loop.thisIndex'
p1070
g60
(g99
S'\n\x00\x00\x00'
tRp1071
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1072
I0
sg904
S'44-crunch.png'
p1073
sS'block_loop.thisRepN'
p1074
I0
sg907
S'44-crunch.png'
p1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1076
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vn
sS'block_loop.thisTrialN'
p1078
I0
sg39
F1.1666373966218089
sg34
g753
(S'\x07\xdf\x07\x01\x0e(\x06\x04\x0f\x10'
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
S'3-ellas_strawberries_apples.png'
p1082
sS'block_loop.thisIndex'
p1083
g889
sg38
S'left'
p1084
sg59
g63
sS'trial_loop.thisN'
p1085
I11
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p1086
g60
(g99
S'\x0b\x00\x00\x00'
tRp1087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1088
I0
sg904
S'13-mccoys_steak_crisps.png'
p1089
sS'block_loop.thisRepN'
p1090
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1091
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vn
sS'block_loop.thisTrialN'
p1093
I0
sg39
F1.066641901168623
sg34
g753
(S'\x07\xdf\x07\x01\x0e(\x0c\x07\x00\xf8'
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'50-polo.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'right'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1101
g60
(g99
S'\x0c\x00\x00\x00'
tRp1102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1103
I0
sg904
S'48-twix.png'
p1104
sS'block_loop.thisRepN'
p1105
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1106
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1107
Nsg70
Vn
sS'block_loop.thisTrialN'
p1108
I0
sg39
F1.2998841362423263
sg34
g753
(S'\x07\xdf\x07\x01\x0e(\x12\x08\x87\x98'
tRp1109
sa(dp1110
S'trial_loop.thisTrialN'
p1111
I13
sg895
g1082
sS'block_loop.thisIndex'
p1112
g889
sg38
S'right'
p1113
sg59
g63
sS'trial_loop.thisN'
p1114
I13
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1115
g60
(g99
S'\r\x00\x00\x00'
tRp1116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1117
I0
sg904
g1089
sS'block_loop.thisRepN'
p1118
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1119
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1120
Nsg70
Vn
sS'block_loop.thisTrialN'
p1121
I0
sg39
F1.4167012585385237
sg34
g753
(S'\x07\xdf\x07\x01\x0e(\x18\r\xa0H'
tRp1122
sa(dp1123
S'trial_loop.thisTrialN'
p1124
I14
sg895
S'36-fig_rolls.png'
p1125
sS'block_loop.thisIndex'
p1126
g889
sg38
S'right'
p1127
sg59
g63
sS'trial_loop.thisN'
p1128
I14
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1129
sg64
g65
sS'trial_loop.thisIndex'
p1130
g60
(g99
S'\x0e\x00\x00\x00'
tRp1131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1132
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1133
sS'block_loop.thisRepN'
p1134
I0
sg907
S'36-fig_rolls.png'
p1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1136
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1137
Nsg70
Vn
sS'block_loop.thisTrialN'
p1138
I0
sg39
F1.1332396121761121
sg34
g753
(S'\x07\xdf\x07\x01\x0e(\x1f\x05\x1c\x98'
tRp1139
sa(dp1140
S'trial_loop.thisTrialN'
p1141
I15
sg895
S'16-skips_prawn.png'
p1142
sS'block_loop.thisIndex'
p1143
g889
sg38
S'left'
p1144
sg59
g63
sS'trial_loop.thisN'
p1145
I15
sg33
S'42-mrkipling_lemon_slices.png'
p1146
sg64
g65
sS'trial_loop.thisIndex'
p1147
g60
(g99
S'\x0f\x00\x00\x00'
tRp1148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1149
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1150
sS'block_loop.thisRepN'
p1151
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1152
I0
sg909
S'16-skips_prawn.png'
p1153
sg55
g11
sS'block_loop.thisTrial'
p1154
Nsg70
Vn
sS'block_loop.thisTrialN'
p1155
I0
sg39
F1.3665536919033912
sg34
g753
(S'\x07\xdf\x07\x01\x0e(%\x07\xd3\xe8'
tRp1156
sa(dp1157
S'trial_loop.thisTrialN'
p1158
I16
sg895
S'30-spaghetti_hoops.png'
p1159
sS'block_loop.thisIndex'
p1160
g889
sg38
S'right'
p1161
sg59
g63
sS'trial_loop.thisN'
p1162
I16
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1163
g60
(g99
S'\x10\x00\x00\x00'
tRp1164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1165
I0
sg904
S'19-caramello_redo.png'
p1166
sS'block_loop.thisRepN'
p1167
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1168
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vn
sS'block_loop.thisTrialN'
p1170
I0
sg39
F1.1999901356175542
sg34
g753
(S'\x07\xdf\x07\x01\x0e(+\r\xde\xc8'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
S'4-corn.png'
p1174
sS'block_loop.thisIndex'
p1175
g889
sg38
S'right'
p1176
sg59
g63
sS'trial_loop.thisN'
p1177
I17
sg33
S'4-corn.png'
p1178
sg64
g65
sS'trial_loop.thisIndex'
p1179
g60
(g99
S'\x11\x00\x00\x00'
tRp1180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1181
I0
sg904
S'10-bounty_redo.png'
p1182
sS'block_loop.thisRepN'
p1183
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1184
I0
sg909
S'10-bounty_redo.png'
p1185
sg55
g11
sS'block_loop.thisTrial'
p1186
Nsg70
Vn
sS'block_loop.thisTrialN'
p1187
I0
sg39
F1.4998879565573588
sg34
g753
(S'\x07\xdf\x07\x01\x0e(2\x02F\x08'
tRp1188
sa(dp1189
S'trial_loop.thisTrialN'
p1190
I18
sg895
S'51-mars.png'
p1191
sS'block_loop.thisIndex'
p1192
g889
sg38
S'right'
p1193
sg59
g63
sS'trial_loop.thisN'
p1194
I18
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1195
g60
(g99
S'\x12\x00\x00\x00'
tRp1196
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1197
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1198
sS'block_loop.thisRepN'
p1199
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1200
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1201
Nsg70
Vn
sS'block_loop.thisTrialN'
p1202
I0
sg39
F0.89969944987387862
sg34
g753
(S'\x07\xdf\x07\x01\x0e(8\n90'
tRp1203
sa(dp1204
S'trial_loop.thisTrialN'
p1205
I19
sg895
g1031
sS'block_loop.thisIndex'
p1206
g889
sg38
S'left'
p1207
sg59
g63
sS'trial_loop.thisN'
p1208
I19
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p1209
g60
(g99
S'\x13\x00\x00\x00'
tRp1210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1211
I0
sg904
g1039
sS'block_loop.thisRepN'
p1212
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1213
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vn
sS'block_loop.thisTrialN'
p1215
I0
sg39
F1.4165316253311175
sg34
g753
(S'\x07\xdf\x07\x01\x0e)\x02\tZ\x88'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
g933
sS'block_loop.thisIndex'
p1219
g889
sg38
S'left'
p1220
sg59
g63
sS'trial_loop.thisN'
p1221
I20
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1222
g60
(g99
S'\x14\x00\x00\x00'
tRp1223
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1224
I0
sg904
g941
sS'block_loop.thisRepN'
p1225
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1226
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1227
Nsg70
Vn
sS'block_loop.thisTrialN'
p1228
I0
sg39
F0.7832372743760061
sg34
g753
(S'\x07\xdf\x07\x01\x0e)\t\x00\xda\xc0'
tRp1229
sa(dp1230
S'trial_loop.thisTrialN'
p1231
I21
sg895
S'40-sardines.png'
p1232
sS'block_loop.thisIndex'
p1233
g889
sg38
S'right'
p1234
sg59
g63
sS'trial_loop.thisN'
p1235
I21
sg33
S'5-pineapple.png'
p1236
sg64
g65
sS'trial_loop.thisIndex'
p1237
g60
(g99
S'\x15\x00\x00\x00'
tRp1238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1239
I0
sg904
S'5-pineapple.png'
p1240
sS'block_loop.thisRepN'
p1241
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1242
I0
sg909
S'40-sardines.png'
p1243
sg55
g11
sS'block_loop.thisTrial'
p1244
Nsg70
Vn
sS'block_loop.thisTrialN'
p1245
I0
sg39
F1.2998390907887369
sg34
g753
(S'\x07\xdf\x07\x01\x0e)\x0e\rY\xf8'
tRp1246
sa(dp1247
S'trial_loop.thisTrialN'
p1248
I22
sg895
g896
sS'block_loop.thisIndex'
p1249
g889
sg38
S'right'
p1250
sg59
g63
sS'trial_loop.thisN'
p1251
I22
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1252
g60
(g99
S'\x16\x00\x00\x00'
tRp1253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1254
I0
sg904
g905
sS'block_loop.thisRepN'
p1255
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1256
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1257
Nsg70
Vn
sS'block_loop.thisTrialN'
p1258
I0
sg39
F1.8165375553653575
sg34
g753
(S'\x07\xdf\x07\x01\x0e)\x15\x030h'
tRp1259
sa(dp1260
S'trial_loop.thisTrialN'
p1261
I23
sg895
g1031
sS'block_loop.thisIndex'
p1262
g889
sg38
S'right'
p1263
sg59
g63
sS'trial_loop.thisN'
p1264
I23
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p1265
g60
(g99
S'\x17\x00\x00\x00'
tRp1266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1267
I0
sg904
g1039
sS'block_loop.thisRepN'
p1268
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1269
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1270
Nsg70
Vn
sS'block_loop.thisTrialN'
p1271
I0
sg39
F0.78325038887487608
sg34
g753
(S'\x07\xdf\x07\x01\x0e)\x1c\x00\xde\xa8'
tRp1272
sa(dp1273
S'trial_loop.thisTrialN'
p1274
I24
sg895
g1174
sS'block_loop.thisIndex'
p1275
g889
sg38
S'right'
p1276
sg59
g63
sS'trial_loop.thisN'
p1277
I24
sg33
g1185
sg64
g65
sS'trial_loop.thisIndex'
p1278
g60
(g99
S'\x18\x00\x00\x00'
tRp1279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1280
I0
sg904
g1182
sS'block_loop.thisRepN'
p1281
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1282
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p1283
Nsg70
Vn
sS'block_loop.thisTrialN'
p1284
I0
sg39
F1.583194680759334
sg34
g753
(S'\x07\xdf\x07\x01\x0e)!\r]\xe0'
tRp1285
sa(dp1286
S'trial_loop.thisTrialN'
p1287
I25
sg895
S'45-chewy_nougat_redo.png'
p1288
sS'block_loop.thisIndex'
p1289
g889
sg38
S'right'
p1290
sg59
g63
sS'trial_loop.thisN'
p1291
I25
sg33
S'41-peanuts_redo.png'
p1292
sg64
g65
sS'trial_loop.thisIndex'
p1293
g60
(g99
S'\x19\x00\x00\x00'
tRp1294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1295
I0
sg904
S'41-peanuts_redo.png'
p1296
sS'block_loop.thisRepN'
p1297
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1298
I0
sg909
S'45-chewy_nougat_redo.png'
p1299
sg55
g11
sS'block_loop.thisTrial'
p1300
Nsg70
Vn
sS'block_loop.thisTrialN'
p1301
I0
sg39
F2.4666484013978334
sg34
g753
(S'\x07\xdf\x07\x01\x0e)(\x07z\x10'
tRp1302
sa(dp1303
S'trial_loop.thisTrialN'
p1304
I26
sg895
g1082
sS'block_loop.thisIndex'
p1305
g889
sg38
S'left'
p1306
sg59
g63
sS'trial_loop.thisN'
p1307
I26
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1308
g60
(g99
S'\x1a\x00\x00\x00'
tRp1309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1310
I0
sg904
g1089
sS'block_loop.thisRepN'
p1311
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1312
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1313
Nsg70
Vn
sS'block_loop.thisTrialN'
p1314
I0
sg39
F1.6165297436855326
sg34
g753
(S'\x07\xdf\x07\x01\x0e)/\x0f*\xd0'
tRp1315
sa(dp1316
S'trial_loop.thisTrialN'
p1317
I27
sg895
g1125
sS'block_loop.thisIndex'
p1318
g889
sg38
S'right'
p1319
sg59
g63
sS'trial_loop.thisN'
p1320
I27
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p1321
g60
(g99
S'\x1b\x00\x00\x00'
tRp1322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1323
I0
sg904
g1133
sS'block_loop.thisRepN'
p1324
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1325
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1326
Nsg70
Vn
sS'block_loop.thisTrialN'
p1327
I0
sg39
F1.0665677757351659
sg34
g753
(S'\x07\xdf\x07\x01\x0e)6\t\xc0\x18'
tRp1328
sa(dp1329
S'trial_loop.thisTrialN'
p1330
I28
sg895
S'6-sour_patch_kids.png'
p1331
sS'block_loop.thisIndex'
p1332
g889
sg38
S'right'
p1333
sg59
g63
sS'trial_loop.thisN'
p1334
I28
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1335
g60
(g99
S'\x1c\x00\x00\x00'
tRp1336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1337
I0
sg904
S'38-maltesers.png'
p1338
sS'block_loop.thisRepN'
p1339
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1340
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1341
Nsg70
Vn
sS'block_loop.thisTrialN'
p1342
I0
sg39
F0.9163360482234566
sg34
g753
(S'\x07\xdf\x07\x01\x0e*\x00\x0bF\xb8'
tRp1343
sa(dp1344
S'trial_loop.thisTrialN'
p1345
I29
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1346
sS'block_loop.thisIndex'
p1347
g889
sg38
S'left'
p1348
sg59
g63
sS'trial_loop.thisN'
p1349
I29
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p1350
g60
(g99
S'\x1d\x00\x00\x00'
tRp1351
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1352
I0
sg904
S'36-fig_rolls.png'
p1353
sS'block_loop.thisRepN'
p1354
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1355
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1356
Nsg70
Vn
sS'block_loop.thisTrialN'
p1357
I0
sg39
F1.0166103693482
sg34
g753
(S'\x07\xdf\x07\x01\x0e*\x06\n\xa6\x90'
tRp1358
sa(dp1359
S'trial_loop.thisTrialN'
p1360
I30
sg895
S'41-peanuts_redo.png'
p1361
sS'block_loop.thisIndex'
p1362
g889
sg38
S'left'
p1363
sg59
g63
sS'trial_loop.thisN'
p1364
I30
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p1365
g60
(g99
S'\x1e\x00\x00\x00'
tRp1366
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1367
I0
sg904
S'45-chewy_nougat_redo.png'
p1368
sS'block_loop.thisRepN'
p1369
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1370
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p1371
Nsg70
Vn
sS'block_loop.thisTrialN'
p1372
I0
sg39
F1.1832637314510066
sg34
g753
(S'\x07\xdf\x07\x01\x0e*\x0c\x0b;\x00'
tRp1373
sa(dp1374
S'trial_loop.thisTrialN'
p1375
I31
sg895
S'21-nakd_banana_crunch.png'
p1376
sS'block_loop.thisIndex'
p1377
g889
sg38
S'left'
p1378
sg59
g63
sS'trial_loop.thisN'
p1379
I31
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p1380
g60
(g99
S'\x1f\x00\x00\x00'
tRp1381
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1382
I0
sg904
S'1-treacle_cookies.png'
p1383
sS'block_loop.thisRepN'
p1384
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1385
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1386
Nsg70
Vn
sS'block_loop.thisTrialN'
p1387
I0
sg39
F1.750006557249435
sg34
g753
(S'\x07\xdf\x07\x01\x0e*\x12\x0e\xa6\x00'
tRp1388
sa(dp1389
S'trial_loop.thisTrialN'
p1390
I32
sg895
g984
sS'block_loop.thisIndex'
p1391
g889
sg38
S'left'
p1392
sg59
g63
sS'trial_loop.thisN'
p1393
I32
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p1394
g60
(g99
S' \x00\x00\x00'
tRp1395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1396
I0
sg904
g992
sS'block_loop.thisRepN'
p1397
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1398
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1399
Nsg70
Vn
sS'block_loop.thisTrialN'
p1400
I0
sg39
F2.0998940006320481
sg34
g753
(S'\x07\xdf\x07\x01\x0e*\x19\x0bb\x10'
tRp1401
sa(dp1402
S'trial_loop.thisTrialN'
p1403
I33
sg895
g933
sS'block_loop.thisIndex'
p1404
g889
sg38
S'left'
p1405
sg59
g63
sS'trial_loop.thisN'
p1406
I33
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1407
g60
(g99
S'!\x00\x00\x00'
tRp1408
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1409
I0
sg904
g941
sS'block_loop.thisRepN'
p1410
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1411
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1412
Nsg70
Vn
sS'block_loop.thisTrialN'
p1413
I0
sg39
F1.0495588396297535
sg34
g753
(S'\x07\xdf\x07\x01\x0e* \rY\xf8'
tRp1414
sa(dp1415
S'trial_loop.thisTrialN'
p1416
I34
sg895
S'33-ambrosia_rice.png'
p1417
sS'block_loop.thisIndex'
p1418
g889
sg38
S'right'
p1419
sg59
g63
sS'trial_loop.thisN'
p1420
I34
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1421
g60
(g99
S'"\x00\x00\x00'
tRp1422
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1423
I0
sg904
S'23-crunchie_redo.png'
p1424
sS'block_loop.thisRepN'
p1425
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1426
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1427
Nsg70
Vn
sS'block_loop.thisTrialN'
p1428
I0
sg39
F1.6832853988853458
sg34
g753
(S'\x07\xdf\x07\x01\x0e*&\x0e\xa2\x18'
tRp1429
sa(dp1430
S'trial_loop.thisTrialN'
p1431
I35
sg895
S'29-beans.png'
p1432
sS'block_loop.thisIndex'
p1433
g889
sg38
S'left'
p1434
sg59
g63
sS'trial_loop.thisN'
p1435
I35
sg33
S'46-pistachios.png'
p1436
sg64
g65
sS'trial_loop.thisIndex'
p1437
g60
(g99
S'#\x00\x00\x00'
tRp1438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1439
I0
sg904
S'46-pistachios.png'
p1440
sS'block_loop.thisRepN'
p1441
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1442
I0
sg909
S'29-beans.png'
p1443
sg55
g11
sS'block_loop.thisTrial'
p1444
Nsg70
Vn
sS'block_loop.thisTrialN'
p1445
I0
sg39
F1.733384783987276
sg34
g753
(S'\x07\xdf\x07\x01\x0e*-\n-x'
tRp1446
sa(dp1447
S'trial_loop.thisTrialN'
p1448
I36
sg895
S'5-pineapple.png'
p1449
sS'block_loop.thisIndex'
p1450
g889
sg38
S'left'
p1451
sg59
g63
sS'trial_loop.thisN'
p1452
I36
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p1453
g60
(g99
S'$\x00\x00\x00'
tRp1454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1455
I0
sg904
S'40-sardines.png'
p1456
sS'block_loop.thisRepN'
p1457
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1458
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1459
Nsg70
Vn
sS'block_loop.thisTrialN'
p1460
I0
sg39
F0.89990871167901787
sg34
g753
(S'\x07\xdf\x07\x01\x0e*4\x06\xae\xf0'
tRp1461
sa(dp1462
S'trial_loop.thisTrialN'
p1463
I37
sg895
g1125
sS'block_loop.thisIndex'
p1464
g889
sg38
S'right'
p1465
sg59
g63
sS'trial_loop.thisN'
p1466
I37
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p1467
g60
(g99
S'%\x00\x00\x00'
tRp1468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1469
I0
sg904
g1133
sS'block_loop.thisRepN'
p1470
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1471
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1472
Nsg70
Vn
sS'block_loop.thisTrialN'
p1473
I0
sg39
F1.3998571089723555
sg34
g753
(S'\x07\xdf\x07\x01\x0e*:\x05\xd0H'
tRp1474
sa(dp1475
S'trial_loop.thisTrialN'
p1476
I38
sg895
g1288
sS'block_loop.thisIndex'
p1477
g889
sg38
S'right'
p1478
sg59
g63
sS'trial_loop.thisN'
p1479
I38
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p1480
g60
(g99
S'&\x00\x00\x00'
tRp1481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1482
I0
sg904
g1296
sS'block_loop.thisRepN'
p1483
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1484
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p1485
Nsg70
Vn
sS'block_loop.thisTrialN'
p1486
I0
sg39
F1.666558709624951
sg34
g753
(S'\x07\xdf\x07\x01\x0e+\x04\x0cT@'
tRp1487
sa(dp1488
S'trial_loop.thisTrialN'
p1489
I39
sg895
g1191
sS'block_loop.thisIndex'
p1490
g889
sg38
S'right'
p1491
sg59
g63
sS'trial_loop.thisN'
p1492
I39
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1493
g60
(g99
S"'\x00\x00\x00"
tRp1494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1495
I0
sg904
g1198
sS'block_loop.thisRepN'
p1496
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1497
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1498
Nsg70
Vn
sS'block_loop.thisTrialN'
p1499
I0
sg39
F1.7832324277114822
sg34
g753
(S'\x07\xdf\x07\x01\x0e+\x0b\x07\xa5\x08'
tRp1500
sa(dp1501
S'trial_loop.thisTrialN'
p1502
I40
sg895
g1174
sS'block_loop.thisIndex'
p1503
g889
sg38
S'right'
p1504
sg59
g63
sS'trial_loop.thisN'
p1505
I40
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p1506
g60
(g99
S'(\x00\x00\x00'
tRp1507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1508
I0
sg904
g1182
sS'block_loop.thisRepN'
p1509
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1510
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p1511
Nsg70
Vn
sS'block_loop.thisTrialN'
p1512
I0
sg39
F1.5833554759337858
sg34
g753
(S'\x07\xdf\x07\x01\x0e+\x12\x04\xda0'
tRp1513
sa(dp1514
S'trial_loop.thisTrialN'
p1515
I41
sg895
g896
sS'block_loop.thisIndex'
p1516
g889
sg38
S'left'
p1517
sg59
g63
sS'trial_loop.thisN'
p1518
I41
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1519
g60
(g99
S')\x00\x00\x00'
tRp1520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1521
I0
sg904
g905
sS'block_loop.thisRepN'
p1522
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1523
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1524
Nsg70
Vn
sS'block_loop.thisTrialN'
p1525
I0
sg39
F1.1665384676816757
sg34
g753
(S'\x07\xdf\x07\x01\x0e+\x18\x0ew '
tRp1526
sa(dp1527
S'trial_loop.thisTrialN'
p1528
I42
sg895
g1331
sS'block_loop.thisIndex'
p1529
g889
sg38
S'right'
p1530
sg59
g63
sS'trial_loop.thisN'
p1531
I42
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1532
g60
(g99
S'*\x00\x00\x00'
tRp1533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1534
I0
sg904
g1338
sS'block_loop.thisRepN'
p1535
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1536
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg70
Vn
sS'block_loop.thisTrialN'
p1538
I0
sg39
F0.79964180309616495
sg34
g753
(S'\x07\xdf\x07\x01\x0e+\x1f\x02&\xc8'
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I43
sg895
S'42-mrkipling_lemon_slices.png'
p1542
sS'block_loop.thisIndex'
p1543
g889
sg38
S'left'
p1544
sg59
g63
sS'trial_loop.thisN'
p1545
I43
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1546
g60
(g99
S'+\x00\x00\x00'
tRp1547
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1548
I0
sg904
S'16-skips_prawn.png'
p1549
sS'block_loop.thisRepN'
p1550
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1551
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1552
Nsg70
Vn
sS'block_loop.thisTrialN'
p1553
I0
sg39
F2.0497179242156562
sg34
g753
(S'\x07\xdf\x07\x01\x0e+$\x0e\xe4\x80'
tRp1554
sa(dp1555
S'trial_loop.thisTrialN'
p1556
I44
sg895
g950
sS'block_loop.thisIndex'
p1557
g889
sg38
S'left'
p1558
sg59
g63
sS'trial_loop.thisN'
p1559
I44
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1560
g60
(g99
S',\x00\x00\x00'
tRp1561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1562
I0
sg904
g958
sS'block_loop.thisRepN'
p1563
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1564
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg70
Vn
sS'block_loop.thisTrialN'
p1566
I0
sg39
F1.0999607135199767
sg34
g753
(S'\x07\xdf\x07\x01\x0e+,\x00\xe2\x90'
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I45
sg895
g1449
sS'block_loop.thisIndex'
p1570
g889
sg38
S'left'
p1571
sg59
g63
sS'trial_loop.thisN'
p1572
I45
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p1573
g60
(g99
S'-\x00\x00\x00'
tRp1574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1575
I0
sg904
g1456
sS'block_loop.thisRepN'
p1576
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1577
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg70
Vn
sS'block_loop.thisTrialN'
p1579
I0
sg39
F1.2337040935453842
sg34
g753
(S'\x07\xdf\x07\x01\x0e+2\x02\xe2H'
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I46
sg895
S'43-mrporky_pork_crackles_redo.png'
p1583
sS'block_loop.thisIndex'
p1584
g889
sg38
S'right'
p1585
sg59
g63
sS'trial_loop.thisN'
p1586
I46
sg33
S'18-mms.png'
p1587
sg64
g65
sS'trial_loop.thisIndex'
p1588
g60
(g99
S'.\x00\x00\x00'
tRp1589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1590
I0
sg904
S'18-mms.png'
p1591
sS'block_loop.thisRepN'
p1592
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1593
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1594
sg55
g11
sS'block_loop.thisTrial'
p1595
Nsg70
Vn
sS'block_loop.thisTrialN'
p1596
I0
sg39
F1.1999120188120287
sg34
g753
(S'\x07\xdf\x07\x01\x0e+8\x07\x04\xe0'
tRp1597
sa(dp1598
S'trial_loop.thisTrialN'
p1599
I47
sg895
g1142
sS'block_loop.thisIndex'
p1600
g889
sg38
S'right'
p1601
sg59
g63
sS'trial_loop.thisN'
p1602
I47
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1603
g60
(g99
S'/\x00\x00\x00'
tRp1604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1605
I0
sg904
g1150
sS'block_loop.thisRepN'
p1606
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1607
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1608
Nsg70
Vn
sS'block_loop.thisTrialN'
p1609
I0
sg39
F1.1662647737684892
sg34
g753
(S'\x07\xdf\x07\x01\x0e,\x02\no\xe0'
tRp1610
sa(dp1611
S'trial_loop.thisTrialN'
p1612
I48
sg895
g1449
sS'block_loop.thisIndex'
p1613
g889
sg38
S'left'
p1614
sg59
g63
sS'trial_loop.thisN'
p1615
I48
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p1616
g60
(g99
S'0\x00\x00\x00'
tRp1617
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1618
I0
sg904
g1456
sS'block_loop.thisRepN'
p1619
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1620
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1621
Nsg70
Vn
sS'block_loop.thisTrialN'
p1622
I0
sg39
F0.84984239792174776
sg34
g753
(S'\x07\xdf\x07\x01\x0e,\x08\r\xa0H'
tRp1623
sa(dp1624
S'trial_loop.thisTrialN'
p1625
I49
sg895
g1288
sS'block_loop.thisIndex'
p1626
g889
sg38
S'right'
p1627
sg59
g63
sS'trial_loop.thisN'
p1628
I49
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p1629
g60
(g99
S'1\x00\x00\x00'
tRp1630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1631
I0
sg904
g1296
sS'block_loop.thisRepN'
p1632
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1633
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg70
Vn
sS'block_loop.thisTrialN'
p1635
I0
sg39
F1.0499377346350229
sg34
g753
(S'\x07\xdf\x07\x01\x0e,\x0e\x0b\xd3X'
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I50
sg895
g1417
sS'block_loop.thisIndex'
p1639
g889
sg38
S'right'
p1640
sg59
g63
sS'trial_loop.thisN'
p1641
I50
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1642
g60
(g99
S'2\x00\x00\x00'
tRp1643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1644
I0
sg904
g1424
sS'block_loop.thisRepN'
p1645
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1646
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1647
Nsg70
Vn
sS'block_loop.thisTrialN'
p1648
I0
sg39
F1.3000152812419401
sg34
g753
(S'\x07\xdf\x07\x01\x0e,\x14\r\x1bx'
tRp1649
sa(dp1650
S'trial_loop.thisTrialN'
p1651
I51
sg895
S'44-crunch.png'
p1652
sS'block_loop.thisIndex'
p1653
g889
sg38
S'right'
p1654
sg59
g63
sS'trial_loop.thisN'
p1655
I51
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p1656
g60
(g99
S'3\x00\x00\x00'
tRp1657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1658
I0
sg904
S'26-walkers_smoky_bacon.png'
p1659
sS'block_loop.thisRepN'
p1660
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1661
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p1662
Nsg70
Vn
sS'block_loop.thisTrialN'
p1663
I0
sg39
F0.96650841836526524
sg34
g753
(S'\x07\xdf\x07\x01\x0e,\x1b\x02\xee\x00'
tRp1664
sa(dp1665
S'trial_loop.thisTrialN'
p1666
I52
sg895
g1159
sS'block_loop.thisIndex'
p1667
g889
sg38
S'right'
p1668
sg59
g63
sS'trial_loop.thisN'
p1669
I52
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1670
g60
(g99
S'4\x00\x00\x00'
tRp1671
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1672
I0
sg904
g1166
sS'block_loop.thisRepN'
p1673
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1674
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1675
Nsg70
Vn
sS'block_loop.thisTrialN'
p1676
I0
sg39
F1.349818164606404
sg34
g753
(S'\x07\xdf\x07\x01\x0e,!\x02\xca\xd8'
tRp1677
sa(dp1678
S'trial_loop.thisTrialN'
p1679
I53
sg895
g967
sS'block_loop.thisIndex'
p1680
g889
sg38
S'left'
p1681
sg59
g63
sS'trial_loop.thisN'
p1682
I53
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1683
g60
(g99
S'5\x00\x00\x00'
tRp1684
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1685
I0
sg904
g975
sS'block_loop.thisRepN'
p1686
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1687
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg70
Vn
sS'block_loop.thisTrialN'
p1689
I0
sg39
F1.8166627133105067
sg34
g753
(S"\x07\xdf\x07\x01\x0e,'\x08\xd5\xb8"
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I54
sg895
S'35-raisins.png'
p1693
sS'block_loop.thisIndex'
p1694
g889
sg38
S'right'
p1695
sg59
g63
sS'trial_loop.thisN'
p1696
I54
sg33
S'49-yorkie.png'
p1697
sg64
g65
sS'trial_loop.thisIndex'
p1698
g60
(g99
S'6\x00\x00\x00'
tRp1699
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1700
I0
sg904
S'49-yorkie.png'
p1701
sS'block_loop.thisRepN'
p1702
I0
sg907
S'35-raisins.png'
p1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1704
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p1705
Nsg70
Vn
sS'block_loop.thisTrialN'
p1706
I0
sg39
F1.8666628843675426
sg34
g753
(S'\x07\xdf\x07\x01\x0e,.\x06\x83\xf8'
tRp1707
sa(dp1708
S'trial_loop.thisTrialN'
p1709
I55
sg895
S'18-mms.png'
p1710
sS'block_loop.thisIndex'
p1711
g889
sg38
S'left'
p1712
sg59
g63
sS'trial_loop.thisN'
p1713
I55
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p1714
g60
(g99
S'7\x00\x00\x00'
tRp1715
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1716
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1717
sS'block_loop.thisRepN'
p1718
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1719
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p1720
Nsg70
Vn
sS'block_loop.thisTrialN'
p1721
I0
sg39
F0.93334127805792377
sg34
g753
(S'\x07\xdf\x07\x01\x0e,5\x04\xe9\xd0'
tRp1722
sa(dp1723
S'trial_loop.thisTrialN'
p1724
I56
sg895
S'2-steamed_puddings.png'
p1725
sS'block_loop.thisIndex'
p1726
g889
sg38
S'right'
p1727
sg59
g63
sS'trial_loop.thisN'
p1728
I56
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1729
g60
(g99
S'8\x00\x00\x00'
tRp1730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1731
I0
sg904
S'20-fruit_pastilles.png'
p1732
sS'block_loop.thisRepN'
p1733
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1734
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1735
Nsg70
Vn
sS'block_loop.thisTrialN'
p1736
I0
sg39
F1.2831580171769019
sg34
g753
(S'\x07\xdf\x07\x01\x0e,;\x04\x88('
tRp1737
sa(dp1738
S'trial_loop.thisTrialN'
p1739
I57
sg895
g933
sS'block_loop.thisIndex'
p1740
g889
sg38
S'left'
p1741
sg59
g63
sS'trial_loop.thisN'
p1742
I57
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1743
g60
(g99
S'9\x00\x00\x00'
tRp1744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1745
I0
sg904
g941
sS'block_loop.thisRepN'
p1746
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1747
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1748
Nsg70
Vn
sS'block_loop.thisTrialN'
p1749
I0
sg39
F0.84963570200125105
sg34
g753
(S'\x07\xdf\x07\x01\x0e-\x05\t#\xd8'
tRp1750
sa(dp1751
S'trial_loop.thisTrialN'
p1752
I58
sg895
g1159
sS'block_loop.thisIndex'
p1753
g889
sg38
S'right'
p1754
sg59
g63
sS'trial_loop.thisN'
p1755
I58
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1756
g60
(g99
S':\x00\x00\x00'
tRp1757
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1758
I0
sg904
g1166
sS'block_loop.thisRepN'
p1759
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1760
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1761
Nsg70
Vn
sS'block_loop.thisTrialN'
p1762
I0
sg39
F1.233226839791314
sg34
g753
(S'\x07\xdf\x07\x01\x0e-\x0b\x07\x91\x80'
tRp1763
sa(dp1764
S'trial_loop.thisTrialN'
p1765
I59
sg895
g1710
sS'block_loop.thisIndex'
p1766
g889
sg38
S'left'
p1767
sg59
g63
sS'trial_loop.thisN'
p1768
I59
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p1769
g60
(g99
S';\x00\x00\x00'
tRp1770
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1771
I0
sg904
g1717
sS'block_loop.thisRepN'
p1772
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1773
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p1774
Nsg70
Vn
sS'block_loop.thisTrialN'
p1775
I0
sg39
F0.81659457493151422
sg34
g753
(S'\x07\xdf\x07\x01\x0e-\x11\x0by\x80'
tRp1776
sa(dp1777
S'trial_loop.thisTrialN'
p1778
I60
sg895
g1417
sS'block_loop.thisIndex'
p1779
g889
sg38
S'left'
p1780
sg59
g63
sS'trial_loop.thisN'
p1781
I60
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1782
g60
(g99
S'<\x00\x00\x00'
tRp1783
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1784
I0
sg904
g1424
sS'block_loop.thisRepN'
p1785
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1786
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1787
Nsg70
Vn
sS'block_loop.thisTrialN'
p1788
I0
sg39
F1.3833339795564825
sg34
g753
(S'\x07\xdf\x07\x01\x0e-\x17\t/\x90'
tRp1789
sa(dp1790
S'trial_loop.thisTrialN'
p1791
I61
sg895
g1174
sS'block_loop.thisIndex'
p1792
g889
sg38
S'left'
p1793
sg59
g63
sS'trial_loop.thisN'
p1794
I61
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p1795
g60
(g99
S'=\x00\x00\x00'
tRp1796
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1797
I0
sg904
g1182
sS'block_loop.thisRepN'
p1798
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1799
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p1800
Nsg70
Vn
sS'block_loop.thisTrialN'
p1801
I0
sg39
F1.3665163440891774
sg34
g753
(S'\x07\xdf\x07\x01\x0e-\x1e\x00qH'
tRp1802
sa(dp1803
S'trial_loop.thisTrialN'
p1804
I62
sg895
S'7-olives.png'
p1805
sS'block_loop.thisIndex'
p1806
g889
sg38
S'right'
p1807
sg59
g63
sS'trial_loop.thisN'
p1808
I62
sg33
S'7-olives.png'
p1809
sg64
g65
sS'trial_loop.thisIndex'
p1810
g60
(g99
S'>\x00\x00\x00'
tRp1811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1812
I0
sg904
S'22-daim.png'
p1813
sS'block_loop.thisRepN'
p1814
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1815
I0
sg909
S'22-daim.png'
p1816
sg55
g11
sS'block_loop.thisTrial'
p1817
Nsg70
Vn
sS'block_loop.thisTrialN'
p1818
I0
sg39
F1.6165394370109425
sg34
g753
(S'\x07\xdf\x07\x01\x0e-$\x06|('
tRp1819
sa(dp1820
S'trial_loop.thisTrialN'
p1821
I63
sg895
g1125
sS'block_loop.thisIndex'
p1822
g889
sg38
S'right'
p1823
sg59
g63
sS'trial_loop.thisN'
p1824
I63
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p1825
g60
(g99
S'?\x00\x00\x00'
tRp1826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1827
I0
sg904
g1133
sS'block_loop.thisRepN'
p1828
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1829
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p1830
Nsg70
Vn
sS'block_loop.thisTrialN'
p1831
I0
sg39
F2.1998806580522796
sg34
g753
(S'\x07\xdf\x07\x01\x0e-+\x01\x15X'
tRp1832
sa(dp1833
S'trial_loop.thisTrialN'
p1834
I64
sg895
S'46-pistachios.png'
p1835
sS'block_loop.thisIndex'
p1836
g889
sg38
S'left'
p1837
sg59
g63
sS'trial_loop.thisN'
p1838
I64
sg33
g1436
sg64
g65
sS'trial_loop.thisIndex'
p1839
g60
(g99
S'@\x00\x00\x00'
tRp1840
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1841
I0
sg904
S'29-beans.png'
p1842
sS'block_loop.thisRepN'
p1843
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1844
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p1845
Nsg70
Vn
sS'block_loop.thisTrialN'
p1846
I0
sg39
F1.4666549586509063
sg34
g753
(S'\x07\xdf\x07\x01\x0e-2\x04\xb7\x08'
tRp1847
sa(dp1848
S'trial_loop.thisTrialN'
p1849
I65
sg895
g1361
sS'block_loop.thisIndex'
p1850
g889
sg38
S'left'
p1851
sg59
g63
sS'trial_loop.thisN'
p1852
I65
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p1853
g60
(g99
S'A\x00\x00\x00'
tRp1854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1855
I0
sg904
g1368
sS'block_loop.thisRepN'
p1856
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1857
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p1858
Nsg70
Vn
sS'block_loop.thisTrialN'
p1859
I0
sg39
F1.0333344927312282
sg34
g753
(S'\x07\xdf\x07\x01\x0e-8\x0c1\x18'
tRp1860
sa(dp1861
S'trial_loop.thisTrialN'
p1862
I66
sg895
g916
sS'block_loop.thisIndex'
p1863
g889
sg38
S'right'
p1864
sg59
g63
sS'trial_loop.thisN'
p1865
I66
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1866
g60
(g99
S'B\x00\x00\x00'
tRp1867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1868
I0
sg904
g924
sS'block_loop.thisRepN'
p1869
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1870
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1871
Nsg70
Vn
sS'block_loop.thisTrialN'
p1872
I0
sg39
F2.8166273611786892
sg34
g753
(S'\x07\xdf\x07\x01\x0e.\x02\r:\xb8'
tRp1873
sa(dp1874
S'trial_loop.thisTrialN'
p1875
I67
sg895
g1097
sS'block_loop.thisIndex'
p1876
g889
sg38
S'right'
p1877
sg59
g63
sS'trial_loop.thisN'
p1878
I67
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1879
g60
(g99
S'C\x00\x00\x00'
tRp1880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1881
I0
sg904
g1104
sS'block_loop.thisRepN'
p1882
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1883
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1884
Nsg70
Vn
sS'block_loop.thisTrialN'
p1885
I0
sg39
F1.3499632794009813
sg34
g753
(S'\x07\xdf\x07\x01\x0e.\n\x0b#\x90'
tRp1886
sa(dp1887
S'trial_loop.thisTrialN'
p1888
I68
sg895
g1693
sS'block_loop.thisIndex'
p1889
g889
sg38
S'left'
p1890
sg59
g63
sS'trial_loop.thisN'
p1891
I68
sg33
g1703
sg64
g65
sS'trial_loop.thisIndex'
p1892
g60
(g99
S'D\x00\x00\x00'
tRp1893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1894
I0
sg904
g1701
sS'block_loop.thisRepN'
p1895
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1896
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p1897
Nsg70
Vn
sS'block_loop.thisTrialN'
p1898
I0
sg39
F1.4164486618647061
sg34
g753
(S'\x07\xdf\x07\x01\x0e.\x11\x01\xad\xb0'
tRp1899
sa(dp1900
S'trial_loop.thisTrialN'
p1901
I69
sg895
g1835
sS'block_loop.thisIndex'
p1902
g889
sg38
S'left'
p1903
sg59
g63
sS'trial_loop.thisN'
p1904
I69
sg33
g1443
sg64
g65
sS'trial_loop.thisIndex'
p1905
g60
(g99
S'E\x00\x00\x00'
tRp1906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1907
I0
sg904
g1842
sS'block_loop.thisRepN'
p1908
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1909
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p1910
Nsg70
Vn
sS'block_loop.thisTrialN'
p1911
I0
sg39
F1.1498950269815396
sg34
g753
(S'\x07\xdf\x07\x01\x0e.\x17\x08p('
tRp1912
sa(dp1913
S'trial_loop.thisTrialN'
p1914
I70
sg895
g1449
sS'block_loop.thisIndex'
p1915
g889
sg38
S'left'
p1916
sg59
g63
sS'trial_loop.thisN'
p1917
I70
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p1918
g60
(g99
S'F\x00\x00\x00'
tRp1919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1920
I0
sg904
g1456
sS'block_loop.thisRepN'
p1921
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1922
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1923
Nsg70
Vn
sS'block_loop.thisTrialN'
p1924
I0
sg39
F1.0499622530478518
sg34
g753
(S'\x07\xdf\x07\x01\x0e.\x1d\x0bb\x10'
tRp1925
sa(dp1926
S'trial_loop.thisTrialN'
p1927
I71
sg895
S'22-daim.png'
p1928
sS'block_loop.thisIndex'
p1929
g889
sg38
S'right'
p1930
sg59
g63
sS'trial_loop.thisN'
p1931
I71
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p1932
g60
(g99
S'G\x00\x00\x00'
tRp1933
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1934
I0
sg904
S'7-olives.png'
p1935
sS'block_loop.thisRepN'
p1936
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1937
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p1938
Nsg70
Vn
sS'block_loop.thisTrialN'
p1939
I0
sg39
F0.99992045770704863
sg34
g753
(S'\x07\xdf\x07\x01\x0e.#\x0ck\xb0'
tRp1940
sa(dp1941
S'trial_loop.thisTrialN'
p1942
I72
sg895
g1835
sS'block_loop.thisIndex'
p1943
g889
sg38
S'left'
p1944
sg59
g63
sS'trial_loop.thisN'
p1945
I72
sg33
g1436
sg64
g65
sS'trial_loop.thisIndex'
p1946
g60
(g99
S'H\x00\x00\x00'
tRp1947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1948
I0
sg904
g1842
sS'block_loop.thisRepN'
p1949
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1950
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p1951
Nsg70
Vn
sS'block_loop.thisTrialN'
p1952
I0
sg39
F2.1331563636122155
sg34
g753
(S'\x07\xdf\x07\x01\x0e.)\r\x00 '
tRp1953
sa(dp1954
S'trial_loop.thisTrialN'
p1955
I73
sg895
g1232
sS'block_loop.thisIndex'
p1956
g889
sg38
S'right'
p1957
sg59
g63
sS'trial_loop.thisN'
p1958
I73
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p1959
g60
(g99
S'I\x00\x00\x00'
tRp1960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1961
I0
sg904
g1240
sS'block_loop.thisRepN'
p1962
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1963
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1964
Nsg70
Vn
sS'block_loop.thisTrialN'
p1965
I0
sg39
F1.1499395022437966
sg34
g753
(S'\x07\xdf\x07\x01\x0e.1\x00m`'
tRp1966
sa(dp1967
S'trial_loop.thisTrialN'
p1968
I74
sg895
g984
sS'block_loop.thisIndex'
p1969
g889
sg38
S'left'
p1970
sg59
g63
sS'trial_loop.thisN'
p1971
I74
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p1972
g60
(g99
S'J\x00\x00\x00'
tRp1973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1974
I0
sg904
g992
sS'block_loop.thisRepN'
p1975
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1976
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1977
Nsg70
Vn
sS'block_loop.thisTrialN'
p1978
I0
sg39
F1.0830259028480214
sg34
g753
(S'\x07\xdf\x07\x01\x0e.7\x03 \xc8'
tRp1979
sa(dp1980
S'trial_loop.thisTrialN'
p1981
I75
sg895
S'8-liquorice_catherine_wheels.png'
p1982
sS'block_loop.thisIndex'
p1983
g889
sg38
S'right'
p1984
sg59
g63
sS'trial_loop.thisN'
p1985
I75
sg33
S'8-liquorice_catherine_wheels.png'
p1986
sg64
g65
sS'trial_loop.thisIndex'
p1987
g60
(g99
S'K\x00\x00\x00'
tRp1988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1989
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1990
sS'block_loop.thisRepN'
p1991
I0
sg907
S'17-jacobs_mini_cheddars_redo.png'
p1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1993
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p1994
Nsg70
Vn
sS'block_loop.thisTrialN'
p1995
I0
sg39
F1.4333310145375435
sg34
g753
(S'\x07\xdf\x07\x01\x0e/\x01\x04\xe2\x00'
tRp1996
sa(dp1997
S'trial_loop.thisTrialN'
p1998
I76
sg895
g1048
sS'block_loop.thisIndex'
p1999
g889
sg38
S'right'
p2000
sg59
g63
sS'trial_loop.thisN'
p2001
I76
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2002
g60
(g99
S'L\x00\x00\x00'
tRp2003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2004
I0
sg904
g1056
sS'block_loop.thisRepN'
p2005
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2006
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2007
Nsg70
Vn
sS'block_loop.thisTrialN'
p2008
I0
sg39
F1.2333303303021239
sg34
g753
(S'\x07\xdf\x07\x01\x0e/\x07\x0c\x1d\x90'
tRp2009
sa(dp2010
S'trial_loop.thisTrialN'
p2011
I77
sg895
g1361
sS'block_loop.thisIndex'
p2012
g889
sg38
S'left'
p2013
sg59
g63
sS'trial_loop.thisN'
p2014
I77
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p2015
g60
(g99
S'M\x00\x00\x00'
tRp2016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2017
I0
sg904
g1368
sS'block_loop.thisRepN'
p2018
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2019
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p2020
Nsg70
Vn
sS'block_loop.thisTrialN'
p2021
I0
sg39
F1.0499083695576701
sg34
g753
(S'\x07\xdf\x07\x01\x0e/\x0e\x00\xc3P'
tRp2022
sa(dp2023
S'trial_loop.thisTrialN'
p2024
I78
sg895
g967
sS'block_loop.thisIndex'
p2025
g889
sg38
S'left'
p2026
sg59
g63
sS'trial_loop.thisN'
p2027
I78
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2028
g60
(g99
S'N\x00\x00\x00'
tRp2029
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2030
I0
sg904
g975
sS'block_loop.thisRepN'
p2031
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2032
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2033
Nsg70
Vn
sS'block_loop.thisTrialN'
p2034
I0
sg39
F1.1998273447570682
sg34
g753
(S'\x07\xdf\x07\x01\x0e/\x14\x02\x0bp'
tRp2035
sa(dp2036
S'trial_loop.thisTrialN'
p2037
I79
sg895
S'25-kitkat.png'
p2038
sS'block_loop.thisIndex'
p2039
g889
sg38
S'left'
p2040
sg59
g63
sS'trial_loop.thisN'
p2041
I79
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2042
g60
(g99
S'O\x00\x00\x00'
tRp2043
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2044
I0
sg904
S'31-hobnobs.png'
p2045
sS'block_loop.thisRepN'
p2046
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2047
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F0.93322780912421877
sg34
g753
(S'\x07\xdf\x07\x01\x0e/\x1a\x05\xb4\xf0'
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g1232
sS'block_loop.thisIndex'
p2053
g889
sg38
S'right'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g1240
sS'block_loop.thisRepN'
p2059
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F1.1666758848296013
sg34
g753
(S'\x07\xdf\x07\x01\x0e/ \x05\x14\xc8'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g1725
sS'block_loop.thisIndex'
p2066
g889
sg38
S'right'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g1732
sS'block_loop.thisRepN'
p2072
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2073
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F1.0332421210368921
sg34
g753
(S'\x07\xdf\x07\x01\x0e/&\x08E0'
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
g1652
sS'block_loop.thisIndex'
p2079
g889
sg38
S'right'
p2080
sg59
g63
sS'trial_loop.thisN'
p2081
I82
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p2082
g60
(g99
S'R\x00\x00\x00'
tRp2083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2084
I0
sg904
g1659
sS'block_loop.thisRepN'
p2085
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2086
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p2087
Nsg70
Vn
sS'block_loop.thisTrialN'
p2088
I0
sg39
F1.1665857939187845
sg34
g753
(S'\x07\xdf\x07\x01\x0e/,\tN\xd0'
tRp2089
sa(dp2090
S'trial_loop.thisTrialN'
p2091
I83
sg895
g1725
sS'block_loop.thisIndex'
p2092
g889
sg38
S'right'
p2093
sg59
g63
sS'trial_loop.thisN'
p2094
I83
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2095
g60
(g99
S'S\x00\x00\x00'
tRp2096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2097
I0
sg904
g1732
sS'block_loop.thisRepN'
p2098
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2099
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2100
Nsg70
Vn
sS'block_loop.thisTrialN'
p2101
I0
sg39
F0.80001100477602449
sg34
g753
(S'\x07\xdf\x07\x01\x0e/2\x0cD\xa0'
tRp2102
sa(dp2103
S'trial_loop.thisTrialN'
p2104
I84
sg895
g1159
sS'block_loop.thisIndex'
p2105
g889
sg38
S'right'
p2106
sg59
g63
sS'trial_loop.thisN'
p2107
I84
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2108
g60
(g99
S'T\x00\x00\x00'
tRp2109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2110
I0
sg904
g1166
sS'block_loop.thisRepN'
p2111
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2112
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2113
Nsg70
Vn
sS'block_loop.thisTrialN'
p2114
I0
sg39
F1.9998500385445368
sg34
g753
(S'\x07\xdf\x07\x01\x0e/8\t\xbc0'
tRp2115
sa(dp2116
S'trial_loop.thisTrialN'
p2117
I85
sg895
S'10-bounty_redo.png'
p2118
sS'block_loop.thisIndex'
p2119
g889
sg38
S'right'
p2120
sg59
g63
sS'trial_loop.thisN'
p2121
I85
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2122
g60
(g99
S'U\x00\x00\x00'
tRp2123
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2124
I0
sg904
S'4-corn.png'
p2125
sS'block_loop.thisRepN'
p2126
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F2.1498970226675738
sg34
g753
(S'\x07\xdf\x07\x01\x0e0\x03\nH\xd0'
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g1432
sS'block_loop.thisIndex'
p2133
g889
sg38
S'right'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g1436
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g1440
sS'block_loop.thisRepN'
p2139
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2140
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vn
sS'block_loop.thisTrialN'
p2142
I0
sg39
F1.0332395551558875
sg34
g753
(S'\x07\xdf\x07\x01\x0e0\n\x0c\xf8P'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
g1449
sS'block_loop.thisIndex'
p2146
g889
sg38
S'left'
p2147
sg59
g63
sS'trial_loop.thisN'
p2148
I87
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p2149
g60
(g99
S'W\x00\x00\x00'
tRp2150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2151
I0
sg904
g1456
sS'block_loop.thisRepN'
p2152
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2153
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2154
Nsg70
Vn
sS'block_loop.thisTrialN'
p2155
I0
sg39
F1.0499938989050861
sg34
g753
(S'\x07\xdf\x07\x01\x0e0\x10\x0e\x01\xf0'
tRp2156
sa(dp2157
S'trial_loop.thisTrialN'
p2158
I88
sg895
g1361
sS'block_loop.thisIndex'
p2159
g889
sg38
S'left'
p2160
sg59
g63
sS'trial_loop.thisN'
p2161
I88
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p2162
g60
(g99
S'X\x00\x00\x00'
tRp2163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2164
I0
sg904
g1368
sS'block_loop.thisRepN'
p2165
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2166
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p2167
Nsg70
Vn
sS'block_loop.thisTrialN'
p2168
I0
sg39
F0.91660204448999139
sg34
g753
(S'\x07\xdf\x07\x01\x0e0\x17\x00\x07\xd0'
tRp2169
sa(dp2170
S'trial_loop.thisTrialN'
p2171
I89
sg895
S'49-yorkie.png'
p2172
sS'block_loop.thisIndex'
p2173
g889
sg38
S'left'
p2174
sg59
g63
sS'trial_loop.thisN'
p2175
I89
sg33
g1703
sg64
g65
sS'trial_loop.thisIndex'
p2176
g60
(g99
S'Y\x00\x00\x00'
tRp2177
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2178
I0
sg904
S'35-raisins.png'
p2179
sS'block_loop.thisRepN'
p2180
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vn
sS'block_loop.thisTrialN'
p2183
I0
sg39
F1.4331764915150416
sg34
g753
(S'\x07\xdf\x07\x01\x0e0\x1c\x0e\xa9\xe8'
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g1065
sS'block_loop.thisIndex'
p2187
g889
sg38
S'left'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g1073
sS'block_loop.thisRepN'
p2193
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vn
sS'block_loop.thisTrialN'
p2196
I0
sg39
F0.93332103611464845
sg34
g753
(S'\x07\xdf\x07\x01\x0e0#\x06h\xa0'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g1583
sS'block_loop.thisIndex'
p2200
g889
sg38
S'right'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g1591
sS'block_loop.thisRepN'
p2206
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vn
sS'block_loop.thisTrialN'
p2209
I0
sg39
F0.88327553450289997
sg34
g753
(S'\x07\xdf\x07\x01\x0e0)\x06\x06\xf8'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g1097
sS'block_loop.thisIndex'
p2213
g889
sg38
S'right'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g1104
sS'block_loop.thisRepN'
p2219
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vn
sS'block_loop.thisTrialN'
p2222
I0
sg39
F1.2165973688897793
sg34
g753
(S'\x07\xdf\x07\x01\x0e0/\x04\xaf8'
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
g1174
sS'block_loop.thisIndex'
p2226
g889
sg38
S'left'
p2227
sg59
g63
sS'trial_loop.thisN'
p2228
I93
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2229
g60
(g99
S']\x00\x00\x00'
tRp2230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2231
I0
sg904
g1182
sS'block_loop.thisRepN'
p2232
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2233
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2234
Nsg70
Vn
sS'block_loop.thisTrialN'
p2235
I0
sg39
F1.349908540618344
sg34
g753
(S'\x07\xdf\x07\x01\x0e05\x08X\xb8'
tRp2236
sa(dp2237
S'trial_loop.thisTrialN'
p2238
I94
sg895
S'17-jacobs_mini_cheddars_redo.png'
p2239
sS'block_loop.thisIndex'
p2240
g889
sg38
S'right'
p2241
sg59
g63
sS'trial_loop.thisN'
p2242
I94
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p2243
g60
(g99
S'^\x00\x00\x00'
tRp2244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2245
I0
sg904
S'8-liquorice_catherine_wheels.png'
p2246
sS'block_loop.thisRepN'
p2247
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2248
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vn
sS'block_loop.thisTrialN'
p2250
I0
sg39
F1.8998938865879609
sg34
g753
(S'\x07\xdf\x07\x01\x0e0;\x0ec\x98'
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g1542
sS'block_loop.thisIndex'
p2254
g889
sg38
S'left'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g1549
sS'block_loop.thisRepN'
p2260
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2261
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vn
sS'block_loop.thisTrialN'
p2263
I0
sg39
F1.3336425694396894
sg34
g753
(S'\x07\xdf\x07\x01\x0e1\x06\rB\x88'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1065
sS'block_loop.thisIndex'
p2267
g889
sg38
S'left'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1073
sS'block_loop.thisRepN'
p2273
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2274
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vn
sS'block_loop.thisTrialN'
p2276
I0
sg39
F0.94993140546284849
sg34
g753
(S'\x07\xdf\x07\x01\x0e1\r\x03\x92\x10'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g2172
sS'block_loop.thisIndex'
p2280
g889
sg38
S'left'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g1703
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g2179
sS'block_loop.thisRepN'
p2286
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2287
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vn
sS'block_loop.thisTrialN'
p2289
I0
sg39
F0.99992501927044941
sg34
g753
(S'\x07\xdf\x07\x01\x0e1\x13\x03n\xe8'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g1065
sS'block_loop.thisIndex'
p2293
g889
sg38
S'left'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g1073
sS'block_loop.thisRepN'
p2299
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2300
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vn
sS'block_loop.thisTrialN'
p2302
I0
sg39
F0.96638097964387271
sg34
g753
(S'\x07\xdf\x07\x01\x0e1\x19\x03\xc0\xf0'
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g2172
sS'block_loop.thisIndex'
p2306
g889
sg38
S'left'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g1697
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g2179
sS'block_loop.thisRepN'
p2312
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2313
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vn
sS'block_loop.thisTrialN'
p2315
I0
sg39
F1.8498663461432443
sg34
g753
(S'\x07\xdf\x07\x01\x0e1\x1f\x03\xd8`'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1082
sS'block_loop.thisIndex'
p2319
g889
sg38
S'left'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1089
sS'block_loop.thisRepN'
p2325
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2326
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vn
sS'block_loop.thisTrialN'
p2328
I0
sg39
F1.4668536718309042
sg34
g753
(S'\x07\xdf\x07\x01\x0e1&\x02\x03\xa0'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g1376
sS'block_loop.thisIndex'
p2332
g889
sg38
S'right'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g1383
sS'block_loop.thisRepN'
p2338
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2339
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vn
sS'block_loop.thisTrialN'
p2341
I0
sg39
F1.9998813993042859
sg34
g753
(S'\x07\xdf\x07\x01\x0e1,\t\xb8H'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1142
sS'block_loop.thisIndex'
p2345
g889
sg38
S'right'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1150
sS'block_loop.thisRepN'
p2351
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2352
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vn
sS'block_loop.thisTrialN'
p2354
I0
sg39
F0.83309489652310731
sg34
g753
(S'\x07\xdf\x07\x01\x0e13\nD\xe8'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g1982
sS'block_loop.thisIndex'
p2358
g889
sg38
S'right'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1990
sS'block_loop.thisRepN'
p2364
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2365
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vn
sS'block_loop.thisTrialN'
p2367
I0
sg39
F1.1499109924588993
sg34
g753
(S'\x07\xdf\x07\x01\x0e19\x085\x90'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g1159
sS'block_loop.thisIndex'
p2371
g889
sg38
S'right'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g1166
sS'block_loop.thisRepN'
p2377
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2378
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vn
sS'block_loop.thisTrialN'
p2380
I0
sg39
F3.6664609210711205
sg34
g753
(S'\x07\xdf\x07\x01\x0e2\x03\n\xec\xe0'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g933
sS'block_loop.thisIndex'
p2384
g889
sg38
S'left'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g941
sS'block_loop.thisRepN'
p2390
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2391
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vn
sS'block_loop.thisTrialN'
p2393
I0
sg39
F0.75007212975106086
sg34
g753
(S'\x07\xdf\x07\x01\x0e2\x0c\x06l\x88'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g2239
sS'block_loop.thisIndex'
p2397
g889
sg38
S'left'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g2246
sS'block_loop.thisRepN'
p2403
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2404
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vn
sS'block_loop.thisTrialN'
p2406
I0
sg39
F2.166481448115519
sg34
g753
(S'\x07\xdf\x07\x01\x0e2\x12\x03,\x80'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g1288
sS'block_loop.thisIndex'
p2410
g889
sg38
S'right'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g1299
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g1296
sS'block_loop.thisRepN'
p2416
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2417
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vn
sS'block_loop.thisTrialN'
p2419
I0
sg39
F0.86663095341282315
sg34
g753
(S'\x07\xdf\x07\x01\x0e2\x19\x06\x1a\x80'
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g1376
sS'block_loop.thisIndex'
p2423
g889
sg38
S'right'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g1383
sS'block_loop.thisRepN'
p2429
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2430
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vn
sS'block_loop.thisTrialN'
p2432
I0
sg39
F2.8332471387584519
sg34
g753
(S'\x07\xdf\x07\x01\x0e2\x1f\x04\x88('
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g1191
sS'block_loop.thisIndex'
p2436
g889
sg38
S'right'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g1198
sS'block_loop.thisRepN'
p2442
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vn
sS'block_loop.thisTrialN'
p2445
I0
sg39
F0.94996590230221045
sg34
g753
(S"\x07\xdf\x07\x01\x0e2'\x02\xab\x98"
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g1346
sS'block_loop.thisIndex'
p2449
g889
sg38
S'right'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g1353
sS'block_loop.thisRepN'
p2455
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vn
sS'block_loop.thisTrialN'
p2458
I0
sg39
F1.6000003421177098
sg34
g753
(S'\x07\xdf\x07\x01\x0e2-\x02I\xf0'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1583
sS'block_loop.thisIndex'
p2462
g889
sg38
S'right'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1591
sS'block_loop.thisRepN'
p2468
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vn
sS'block_loop.thisTrialN'
p2471
I0
sg39
F0.74989964556880295
sg34
g753
(S'\x07\xdf\x07\x01\x0e23\x0b\xe6\xe0'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1014
sS'block_loop.thisIndex'
p2475
g889
sg38
S'right'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1022
sS'block_loop.thisRepN'
p2481
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vn
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.0499035228967841
sg34
g753
(S'\x07\xdf\x07\x01\x0e29\x08\xa6\xd8'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1125
sS'block_loop.thisIndex'
p2488
g889
sg38
S'left'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1133
sS'block_loop.thisRepN'
p2494
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vn
sS'block_loop.thisTrialN'
p2497
I0
sg39
F1.6831830487681145
sg34
g753
(S'\x07\xdf\x07\x01\x0e3\x03\t\xee\xf8'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g1014
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g1022
sS'block_loop.thisRepN'
p2507
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vn
sS'block_loop.thisTrialN'
p2510
I0
sg39
F0.74992359378302353
sg34
g753
(S'\x07\xdf\x07\x01\x0e3\n\x05\xb8\xd8'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1097
sS'block_loop.thisIndex'
p2514
g889
sg38
S'right'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1104
sS'block_loop.thisRepN'
p2520
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vn
sS'block_loop.thisTrialN'
p2523
I0
sg39
F1.1332889340992551
sg34
g753
(S'\x07\xdf\x07\x01\x0e3\x10\x02>8'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1432
sS'block_loop.thisIndex'
p2527
g889
sg38
S'right'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1436
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1440
sS'block_loop.thisRepN'
p2533
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.1332321996305836
sg34
g753
(S'\x07\xdf\x07\x01\x0e3\x16\x04\xf1\xa0'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g950
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g958
sS'block_loop.thisRepN'
p2546
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.86657051267320639
sg34
g753
(S'\x07\xdf\x07\x01\x0e3\x1c\x07jp'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1710
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1594
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1717
sS'block_loop.thisRepN'
p2559
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.7498765526433999
sg34
g753
(S'\x07\xdf\x07\x01\x0e3"\x05\xd8\x18'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1542
sS'block_loop.thisIndex'
p2566
g889
sg38
S'left'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1549
sS'block_loop.thisRepN'
p2572
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F0.99981040995044168
sg34
g753
(S'\x07\xdf\x07\x01\x0e3)\x02\x94('
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g2038
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g2045
sS'block_loop.thisRepN'
p2585
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F0.89994862537059817
sg34
g753
(S'\x07\xdf\x07\x01\x0e3/\x03(\x98'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1652
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1659
sS'block_loop.thisRepN'
p2598
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.26656760467813
sg34
g753
(S'\x07\xdf\x07\x01\x0e35\x02\x0fX'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1805
sS'block_loop.thisIndex'
p2605
g889
sg38
S'left'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1813
sS'block_loop.thisRepN'
p2611
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.0165812893719703
sg34
g753
(S'\x07\xdf\x07\x01\x0e3;\x06\xab\x08'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1142
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1150
sS'block_loop.thisRepN'
p2624
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F0.71644569684576709
sg34
g753
(S'\x07\xdf\x07\x01\x0e4\x05\x07z\x10'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g950
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g958
sS'block_loop.thisRepN'
p2637
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F0.79990437818923965
sg34
g753
(S'\x07\xdf\x07\x01\x0e4\x0b\x03\x86X'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1417
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1424
sS'block_loop.thisRepN'
p2650
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.433328448656539
sg34
g753
(S'\x07\xdf\x07\x01\x0e4\x11\x00\xfd\xe8'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1710
sS'block_loop.thisIndex'
p2657
g889
sg38
S'left'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1717
sS'block_loop.thisRepN'
p2663
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.64996658653399209
sg34
g753
(S'\x07\xdf\x07\x01\x0e4\x17\x089x'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g984
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g992
sS'block_loop.thisRepN'
p2676
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F2.4498435953355511
sg34
g753
(S'\x07\xdf\x07\x01\x0e4\x1d\x03O\xa8'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1417
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1424
sS'block_loop.thisRepN'
p2689
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.6166494847711874
sg34
g753
(S'\x07\xdf\x07\x01\x0e4$\n\xc1\xe8'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1805
sS'block_loop.thisIndex'
p2696
g889
sg38
S'left'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1813
sS'block_loop.thisRepN'
p2702
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.2666491426534776
sg34
g753
(S'\x07\xdf\x07\x01\x0e4+\x05[\x18'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1583
sS'block_loop.thisIndex'
p2709
g889
sg38
S'right'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1591
sS'block_loop.thisRepN'
p2715
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F0.85035728459115489
sg34
g753
(S'\x07\xdf\x07\x01\x0e41\t\xf6\xc8'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1376
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1383
sS'block_loop.thisRepN'
p2728
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.7832463975064456
sg34
g753
(S'\x07\xdf\x07\x01\x0e47\x08)\xd8'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1346
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1353
sS'block_loop.thisRepN'
p2741
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.84990027278399793
sg34
g753
(S'\x07\xdf\x07\x01\x0e5\x02\x05_\x00'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1014
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1022
sS'block_loop.thisRepN'
p2754
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F0.89991156265386962
sg34
g753
(S'\x07\xdf\x07\x01\x0e5\x08\x03\x8e('
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1432
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1436
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1440
sS'block_loop.thisRepN'
p2767
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.98317723277432378
sg34
g753
(S'\x07\xdf\x07\x01\x0e5\x0e\x02t\xe8'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1048
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1059
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1056
sS'block_loop.thisRepN'
p2780
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.73334857656300301
sg34
g753
(S'\x07\xdf\x07\x01\x0e5\x14\x02\xca\xd8'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1725
sS'block_loop.thisIndex'
p2787
g889
sg38
S'right'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1732
sS'block_loop.thisRepN'
p2793
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F0.8999503359591472
sg34
g753
(S'\x07\xdf\x07\x01\x0e5\x19\x0e\x92x'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1693
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1703
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1701
sS'block_loop.thisRepN'
p2806
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F2.7331632629793603
sg34
g753
(S'\x07\xdf\x07\x01\x0e5\x1f\ry8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g2038
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g2045
sS'block_loop.thisRepN'
p2819
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.94994851133378688
sg34
g753
(S"\x07\xdf\x07\x01\x0e5'\t\xf2\xe0"
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1982
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1990
sS'block_loop.thisRepN'
p2832
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F3.0331739826578996
sg34
g753
(S'\x07\xdf\x07\x01\x0e5-\t\xcb\xd0'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1928
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1935
sS'block_loop.thisRepN'
p2845
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.0000205270443985
sg34
g753
(S'\x07\xdf\x07\x01\x0e55\n\xc9\xb8'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1432
sS'block_loop.thisIndex'
p2852
g889
sg38
S'right'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1443
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1440
sS'block_loop.thisRepN'
p2858
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.74963222381120431
sg34
g753
(S'\x07\xdf\x07\x01\x0e5;\x0b\x1f\xa8'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g896
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g905
sS'block_loop.thisRepN'
p2871
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.93324063852560357
sg34
g753
(S'\x07\xdf\x07\x01\x0e6\x05\x07\xdf\xa0'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1982
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1990
sS'block_loop.thisRepN'
p2884
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F2.6831750660276157
sg34
g753
(S'\x07\xdf\x07\x01\x0e6\x0b\x07}\xf8'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1835
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1436
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1842
sS'block_loop.thisRepN'
p2897
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F1.049919773471629
sg34
g753
(S'\x07\xdf\x07\x01\x0e6\x13\x03\x05p'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1652
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1659
sS'block_loop.thisRepN'
p2910
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.3833299881844141
sg34
g753
(S'\x07\xdf\x07\x01\x0e6\x19\x04M\x90'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g2038
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g2045
sS'block_loop.thisRepN'
p2923
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.91660346998469322
sg34
g753
(S'\x07\xdf\x07\x01\x0e6\x1f\n\x93\x08'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1928
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1935
sS'block_loop.thisRepN'
p2936
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.89991726461084909
sg34
g753
(S'\x07\xdf\x07\x01\x0e6%\t\xf2\xe0'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1048
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1056
sS'block_loop.thisRepN'
p2949
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.76660837366216583
sg34
g753
(S'\x07\xdf\x07\x01\x0e6+\x08\xd9\xa0'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g2118
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g2125
sS'block_loop.thisRepN'
p2962
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.6831699342656066
sg34
g753
(S'\x07\xdf\x07\x01\x0e61\x05\xdc\x00'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1652
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1659
sS'block_loop.thisRepN'
p2975
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F2.4666415590545512
sg34
g753
(S'\x07\xdf\x07\x01\x0e68\x01\xa1\xf8'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1031
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1039
sS'block_loop.thisRepN'
p2988
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.99976650488315499
sg34
g753
(S'\x07\xdf\x07\x01\x0e7\x03\t\x148'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g967
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g975
sS'block_loop.thisRepN'
p3001
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.0164943345371285
sg34
g753
(S'\x07\xdf\x07\x01\x0e7\t\t\xa4\xc0'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g916
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g924
sS'block_loop.thisRepN'
p3014
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.1499152689248149
sg34
g753
(S'\x07\xdf\x07\x01\x0e7\x0f\ns\xc8'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1065
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1073
sS'block_loop.thisRepN'
p3027
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1069
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.6998969086271245
sg34
g753
(S'\x07\xdf\x07\x01\x0e7\x15\r+\x18'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g2172
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1703
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g2179
sS'block_loop.thisRepN'
p3040
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.1333485195464164
sg34
g753
(S'\x07\xdf\x07\x01\x0e7\x1c\t/\x90'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g2038
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g2045
sS'block_loop.thisRepN'
p3053
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.88325415216240799
sg34
g753
(S'\x07\xdf\x07\x01\x0e7"\x0b\xa8`'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1097
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1104
sS'block_loop.thisRepN'
p3066
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.2332362480228767
sg34
g753
(S'\x07\xdf\x07\x01\x0e7(\nT\x88'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1928
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1816
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1935
sS'block_loop.thisRepN'
p3079
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.0332218790936167
sg34
g753
(S'\x07\xdf\x07\x01\x0e7.\x0ew '
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1191
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1198
sS'block_loop.thisRepN'
p3092
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.86653487544390373
sg34
g753
(S'\x07\xdf\x07\x01\x0e75\x00>\x80'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1542
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1549
sS'block_loop.thisRepN'
p3105
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.0499636785389157
sg34
g753
(S'\x07\xdf\x07\x01\x0e7:\r\xeeh'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1082
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1089
sS'block_loop.thisRepN'
p3118
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.79995883187439176
sg34
g753
(S'\x07\xdf\x07\x01\x0e8\x04\x0f6\x88'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1583
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1591
sS'block_loop.thisRepN'
p3131
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.76660523758619092
sg34
g753
(S'\x07\xdf\x07\x01\x0e8\n\x0c\xae\x18'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1331
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1338
sS'block_loop.thisRepN'
p3144
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.93292189916246571
sg34
g753
(S'\x07\xdf\x07\x01\x0e8\x10\t\xb0x'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g2239
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g2246
sS'block_loop.thisRepN'
p3157
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.6665550033540057
sg34
g753
(S'\x07\xdf\x07\x01\x0e8\x16\t\x10P'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1331
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1338
sS'block_loop.thisRepN'
p3170
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.66635001801842009
sg34
g753
(S'\x07\xdf\x07\x01\x0e8\x1d\x04\x9b\xb0'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1693
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1703
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1701
sS'block_loop.thisRepN'
p3183
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F1.4832328268494166
sg34
g753
(S'\x07\xdf\x07\x01\x0e8"\x0f2\xa0'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1361
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1368
sS'block_loop.thisRepN'
p3196
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.0498904083942762
sg34
g753
(S'\x07\xdf\x07\x01\x0e8)\x07\xe3\x88'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1542
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1549
sS'block_loop.thisRepN'
p3209
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.7997669610413141
sg34
g753
(S'\x07\xdf\x07\x01\x0e8/\t+\xa8'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1031
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1039
sS'block_loop.thisRepN'
p3222
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.1500050747417845
sg34
g753
(S'\x07\xdf\x07\x01\x0e86\x06\x9bh'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1725
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1732
sS'block_loop.thisRepN'
p3235
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.0337159536175022
sg34
g753
(S'\x07\xdf\x07\x01\x0e9\x00\tR\xb8'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g2118
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g2125
sS'block_loop.thisRepN'
p3248
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.0665686310276214
sg34
g753
(S'\x07\xdf\x07\x01\x0e9\x06\n\\X'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1014
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1022
sS'block_loop.thisRepN'
p3261
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.79991293112470885
sg34
g753
(S'\x07\xdf\x07\x01\x0e9\x0c\x0b\xe2\xf8'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1982
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1990
sS'block_loop.thisRepN'
p3274
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.4998682848054159
sg34
g753
(S'\x07\xdf\x07\x01\x0e9\x12\tZ\x88'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1805
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1813
sS'block_loop.thisRepN'
p3287
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.2333015354233794
sg34
g753
(S'\x07\xdf\x07\x01\x0e9\x19\x02I\xf0'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g2118
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g2125
sS'block_loop.thisRepN'
p3300
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.88328636821825057
sg34
g753
(S'\x07\xdf\x07\x01\x0e9\x1f\x06l\x88'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1288
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1292
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1296
sS'block_loop.thisRepN'
p3313
I0
sg907
g1292
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1299
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.84995444136802689
sg34
g753
(S'\x07\xdf\x07\x01\x0e9%\x05\x18\xb0'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1710
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1587
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1717
sS'block_loop.thisRepN'
p3326
I0
sg907
g1587
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1594
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F1.2498608722598874
sg34
g753
(S'\x07\xdf\x07\x01\x0e9+\x03G\xd8'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1048
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1056
sS'block_loop.thisRepN'
p3339
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.5165590517426608
sg34
g753
(S'\x07\xdf\x07\x01\x0e91\x07\xa8\xf0'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g916
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g924
sS'block_loop.thisRepN'
p3352
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F4.5164986110030441
sg34
g753
(S'\x07\xdf\x07\x01\x0e98\x00\xd2\xf0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1142
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1150
sS'block_loop.thisRepN'
p3365
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.85027432112474344
sg34
g753
(S'\x07\xdf\x07\x01\x0e:\x05\t+\xa8'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1346
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1353
sS'block_loop.thisRepN'
p3378
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.81657290749353706
sg34
g753
(S'\x07\xdf\x07\x01\x0e:\x0b\x07Z\xd0'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1805
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1813
sS'block_loop.thisRepN'
p3391
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.86663779575974331
sg34
g753
(S'\x07\xdf\x07\x01\x0e:\x11\x05\x10\xe0'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g2118
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1178
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g2125
sS'block_loop.thisRepN'
p3404
I0
sg907
g1178
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1185
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.88318373300353414
sg34
g753
(S'\x07\xdf\x07\x01\x0e:\x17\x03~\x88'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g984
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g992
sS'block_loop.thisRepN'
p3417
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.7665348184273171
sg34
g753
(S'\x07\xdf\x07\x01\x0e:\x1d\x02&\xc8'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g2239
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1992
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g2246
sS'block_loop.thisRepN'
p3430
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.0164581271092175
sg34
g753
(S'\x07\xdf\x07\x01\x0e:#\x0ec\x98'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g950
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g958
sS'block_loop.thisRepN'
p3443
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.81660255767201306
sg34
g753
(S'\x07\xdf\x07\x01\x0e:)\x0f2\xa0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g2172
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1703
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g2179
sS'block_loop.thisRepN'
p3456
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.79989725074483431
sg34
g753
(S'\x07\xdf\x07\x01\x0e:/\x0c\xe8\xb0'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1232
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1240
sS'block_loop.thisRepN'
p3469
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.84988516259545577
sg34
g753
(S'\x07\xdf\x07\x01\x0e:5\n`@'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1376
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1383
sS'block_loop.thisRepN'
p3482
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F1.0166203477747331
sg34
g753
(S'\x07\xdf\x07\x01\x0e:;\x08\x8fh'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1232
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1240
sS'block_loop.thisRepN'
p3495
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F1.1499925304378849
sg34
g753
(S'\x07\xdf\x07\x01\x0e;\x05\t^p'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g2239
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1986
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g2246
sS'block_loop.thisRepN'
p3508
I0
sg907
g1992
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1986
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F1.450149220199819
sg34
g753
(S'\x07\xdf\x07\x01\x0e;\x0b\x0c\x15\xc0'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1346
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1353
sS'block_loop.thisRepN'
p3521
I0
sg907
g1135
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1129
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.86670935531583382
sg34
g753
(S'\x07\xdf\x07\x01\x0e;\x12\x04I\xa8'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1331
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1338
sS'block_loop.thisRepN'
p3534
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.64964442599739414
sg34
g753
(S'\x07\xdf\x07\x01\x0e;\x18\x02\xb7P'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g896
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g905
sS'block_loop.thisRepN'
p3547
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.69997188935303711
sg34
g753
(S'\x07\xdf\x07\x01\x0e;\x1d\r\x13\xa8'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1835
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1443
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1842
sS'block_loop.thisRepN'
p3560
I0
sg907
g1436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1443
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.2498608722598874
sg34
g753
(S'\x07\xdf\x07\x01\x0e;#\t\x1c\x08'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1928
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1809
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1935
sS'block_loop.thisRepN'
p3573
I0
sg907
g1809
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1816
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.0999148127702938
sg34
g753
(S'\x07\xdf\x07\x01\x0e;)\r} '
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1191
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1198
sS'block_loop.thisRepN'
p3586
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.6500016535683244
sg34
g753
(S'\x07\xdf\x07\x01\x0e;0\x00:\x98'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g916
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g924
sS'block_loop.thisRepN'
p3599
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.9165179406372772
sg34
g753
(S'\x07\xdf\x07\x01\x0e;5\n\x93\x08'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1693
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1697
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1701
sS'block_loop.thisRepN'
p3612
I0
sg907
g1703
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1697
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.71657256537946523
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x00\x00\t\xee\xf8'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F126.99668801859298
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'25-kitkat.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'25-kitkat.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'31-hobnobs.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'31-hobnobs.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.0331865269617992
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x03\x0b\x06x@'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'5-pineapple.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'5-pineapple.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'40-sardines.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'40-sardines.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.81665301998509676
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x03\x11\x07GH'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'43-mrporky_pork_crackles_redo.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'18-mms.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'18-mms.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.83318555762889446
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x03\x17\x04\xfdX'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'26-walkers_smoky_bacon.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'26-walkers_smoky_bacon.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'44-crunch.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
S'44-crunch.png'
p3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3699
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.5832434324875067
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x03\x1d\x02\xee\x00'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'33-ambrosia_rice.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'33-ambrosia_rice.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'23-crunchie_redo.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'23-crunchie_redo.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F1.7163527549564606
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x03#\x0cPX'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'1-treacle_cookies.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'21-nakd_banana_crunch.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'21-nakd_banana_crunch.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3732
I1
sg3647
S'1-treacle_cookies.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vn
sS'block_loop.thisTrialN'
p3735
I0
sg39
F0.78373419987838133
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x03*\x08\x8fh'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'18-mms.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'left'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3743
g60
(g99
S'\x06\x00\x00\x00'
tRp3744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3745
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3748
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vn
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.93320899266836932
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x030\x05\xcc`'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'20-fruit_pastilles.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'left'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'20-fruit_pastilles.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'2-steamed_puddings.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3764
I1
sg3647
S'2-steamed_puddings.png'
p3765
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vn
sS'block_loop.thisTrialN'
p3767
I0
sg39
F0.89989730776505894
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x036\x05,8'
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'36-fig_rolls.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'left'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
S'36-fig_rolls.png'
p3775
sg64
g65
sS'trial_loop.thisIndex'
p3776
g60
(g99
S'\x08\x00\x00\x00'
tRp3777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3778
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3779
sS'block_loop.thisRepN'
p3780
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3781
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3782
sg55
g11
sS'block_loop.thisTrial'
p3783
Nsg70
Vn
sS'block_loop.thisTrialN'
p3784
I0
sg39
F0.81654838908434613
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04\x00\x04Qx'
tRp3785
sa(dp3786
S'trial_loop.thisTrialN'
p3787
I9
sg3633
S'27-hartleys_raspberries_jelly.png'
p3788
sS'block_loop.thisIndex'
p3789
g3627
sg38
S'left'
p3790
sg59
g63
sS'trial_loop.thisN'
p3791
I9
sg33
S'27-hartleys_raspberries_jelly.png'
p3792
sg64
g65
sS'trial_loop.thisIndex'
p3793
g60
(g99
S'\t\x00\x00\x00'
tRp3794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3795
I0
sg3642
S'51-mars.png'
p3796
sS'block_loop.thisRepN'
p3797
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3798
I1
sg3647
S'51-mars.png'
p3799
sg55
g11
sS'block_loop.thisTrial'
p3800
Nsg70
Vn
sS'block_loop.thisTrialN'
p3801
I0
sg39
F0.70001037756082951
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04\x06\x02\x07\x88'
tRp3802
sa(dp3803
S'trial_loop.thisTrialN'
p3804
I10
sg3633
g3688
sS'block_loop.thisIndex'
p3805
g3627
sg38
S'right'
p3806
sg59
g63
sS'trial_loop.thisN'
p3807
I10
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p3808
g60
(g99
S'\n\x00\x00\x00'
tRp3809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3810
I0
sg3642
g3696
sS'block_loop.thisRepN'
p3811
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3812
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3813
Nsg70
Vn
sS'block_loop.thisTrialN'
p3814
I0
sg39
F1.7832637884675933
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04\x0b\r\x17\x90'
tRp3815
sa(dp3816
S'trial_loop.thisTrialN'
p3817
I11
sg3633
S'23-crunchie_redo.png'
p3818
sS'block_loop.thisIndex'
p3819
g3627
sg38
S'right'
p3820
sg59
g63
sS'trial_loop.thisN'
p3821
I11
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p3822
g60
(g99
S'\x0b\x00\x00\x00'
tRp3823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3824
I0
sg3642
S'33-ambrosia_rice.png'
p3825
sS'block_loop.thisRepN'
p3826
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3827
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vn
sS'block_loop.thisTrialN'
p3829
I0
sg39
F0.89994634459071676
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04\x12\nL\xb8'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
g3634
sS'block_loop.thisIndex'
p3833
g3627
sg38
S'left'
p3834
sg59
g63
sS'trial_loop.thisN'
p3835
I12
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3836
g60
(g99
S'\x0c\x00\x00\x00'
tRp3837
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3838
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3839
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3840
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3841
Nsg70
Vn
sS'block_loop.thisTrialN'
p3842
I0
sg39
F0.80000416242546635
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04\x18\t3x'
tRp3843
sa(dp3844
S'trial_loop.thisTrialN'
p3845
I13
sg3633
S'8-liquorice_catherine_wheels.png'
p3846
sS'block_loop.thisIndex'
p3847
g3627
sg38
S'right'
p3848
sg59
g63
sS'trial_loop.thisN'
p3849
I13
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3850
sg64
g65
sS'trial_loop.thisIndex'
p3851
g60
(g99
S'\r\x00\x00\x00'
tRp3852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3853
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3854
sS'block_loop.thisRepN'
p3855
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3856
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3857
sg55
g11
sS'block_loop.thisTrial'
p3858
Nsg70
Vn
sS'block_loop.thisTrialN'
p3859
I0
sg39
F1.8498865880865196
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04\x1e\x06\xae\xf0'
tRp3860
sa(dp3861
S'trial_loop.thisTrialN'
p3862
I14
sg3633
S'48-twix.png'
p3863
sS'block_loop.thisIndex'
p3864
g3627
sg38
S'left'
p3865
sg59
g63
sS'trial_loop.thisN'
p3866
I14
sg33
S'50-polo.png'
p3867
sg64
g65
sS'trial_loop.thisIndex'
p3868
g60
(g99
S'\x0e\x00\x00\x00'
tRp3869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3870
I0
sg3642
S'50-polo.png'
p3871
sS'block_loop.thisRepN'
p3872
I1
sg3645
S'48-twix.png'
p3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vn
sS'block_loop.thisTrialN'
p3876
I0
sg39
F1.3165677757351659
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04%\x05\x14\xc8'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'16-skips_prawn.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'right'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
S'42-mrkipling_lemon_slices.png'
p3884
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3888
sS'block_loop.thisRepN'
p3889
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3890
I1
sg3647
S'16-skips_prawn.png'
p3891
sg55
g11
sS'block_loop.thisTrial'
p3892
Nsg70
Vn
sS'block_loop.thisTrialN'
p3893
I0
sg39
F0.99984633227359154
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x04+\nh\x10'
tRp3894
sa(dp3895
S'trial_loop.thisTrialN'
p3896
I16
sg3633
S'35-raisins.png'
p3897
sS'block_loop.thisIndex'
p3898
g3627
sg38
S'left'
p3899
sg59
g63
sS'trial_loop.thisN'
p3900
I16
sg33
S'35-raisins.png'
p3901
sg64
g65
sS'trial_loop.thisIndex'
p3902
g60
(g99
S'\x10\x00\x00\x00'
tRp3903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3904
I0
sg3642
S'49-yorkie.png'
p3905
sS'block_loop.thisRepN'
p3906
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3907
I1
sg3647
S'49-yorkie.png'
p3908
sg55
g11
sS'block_loop.thisTrial'
p3909
Nsg70
Vn
sS'block_loop.thisTrialN'
p3910
I0
sg39
F0.74996635845673154
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x041\n\xbe\x00'
tRp3911
sa(dp3912
S'trial_loop.thisTrialN'
p3913
I17
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3914
sS'block_loop.thisIndex'
p3915
g3627
sg38
S'right'
p3916
sg59
g63
sS'trial_loop.thisN'
p3917
I17
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p3918
g60
(g99
S'\x11\x00\x00\x00'
tRp3919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3920
I0
sg3642
S'36-fig_rolls.png'
p3921
sS'block_loop.thisRepN'
p3922
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3923
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p3924
Nsg70
Vn
sS'block_loop.thisTrialN'
p3925
I0
sg39
F0.7166886001941748
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x047\x07}\xf8'
tRp3926
sa(dp3927
S'trial_loop.thisTrialN'
p3928
I18
sg3633
g3880
sS'block_loop.thisIndex'
p3929
g3627
sg38
S'right'
p3930
sg59
g63
sS'trial_loop.thisN'
p3931
I18
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p3932
g60
(g99
S'\x12\x00\x00\x00'
tRp3933
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3934
I0
sg3642
g3888
sS'block_loop.thisRepN'
p3935
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3936
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p3937
Nsg70
Vn
sS'block_loop.thisTrialN'
p3938
I0
sg39
F0.71648275956613361
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05\x01\x03\xc8\xc0'
tRp3939
sa(dp3940
S'trial_loop.thisTrialN'
p3941
I19
sg3633
g3818
sS'block_loop.thisIndex'
p3942
g3627
sg38
S'right'
p3943
sg59
g63
sS'trial_loop.thisN'
p3944
I19
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p3945
g60
(g99
S'\x13\x00\x00\x00'
tRp3946
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3947
I0
sg3642
g3825
sS'block_loop.thisRepN'
p3948
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3949
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3950
Nsg70
Vn
sS'block_loop.thisTrialN'
p3951
I0
sg39
F0.99985602559900144
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05\x06\x0f\x17H'
tRp3952
sa(dp3953
S'trial_loop.thisTrialN'
p3954
I20
sg3633
S'2-steamed_puddings.png'
p3955
sS'block_loop.thisIndex'
p3956
g3627
sg38
S'right'
p3957
sg59
g63
sS'trial_loop.thisN'
p3958
I20
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p3959
g60
(g99
S'\x14\x00\x00\x00'
tRp3960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3961
I0
sg3642
S'20-fruit_pastilles.png'
p3962
sS'block_loop.thisRepN'
p3963
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3964
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p3965
Nsg70
Vn
sS'block_loop.thisTrialN'
p3966
I0
sg39
F1.2831756932428107
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05\r\x00e\x90'
tRp3967
sa(dp3968
S'trial_loop.thisTrialN'
p3969
I21
sg3633
g3897
sS'block_loop.thisIndex'
p3970
g3627
sg38
S'left'
p3971
sg59
g63
sS'trial_loop.thisN'
p3972
I21
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p3973
g60
(g99
S'\x15\x00\x00\x00'
tRp3974
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3975
I0
sg3642
g3905
sS'block_loop.thisRepN'
p3976
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3977
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p3978
Nsg70
Vn
sS'block_loop.thisTrialN'
p3979
I0
sg39
F0.78329628962455899
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05\x13\x05?\xc0'
tRp3980
sa(dp3981
S'trial_loop.thisTrialN'
p3982
I22
sg3633
g3788
sS'block_loop.thisIndex'
p3983
g3627
sg38
S'left'
p3984
sg59
g63
sS'trial_loop.thisN'
p3985
I22
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p3986
g60
(g99
S'\x16\x00\x00\x00'
tRp3987
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3988
I0
sg3642
g3796
sS'block_loop.thisRepN'
p3989
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3990
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p3991
Nsg70
Vn
sS'block_loop.thisTrialN'
p3992
I0
sg39
F0.71655831048701657
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05\x19\x02|\xb8'
tRp3993
sa(dp3994
S'trial_loop.thisTrialN'
p3995
I23
sg3633
S'30-spaghetti_hoops.png'
p3996
sS'block_loop.thisIndex'
p3997
g3627
sg38
S'right'
p3998
sg59
g63
sS'trial_loop.thisN'
p3999
I23
sg33
S'19-caramello_redo.png'
p4000
sg64
g65
sS'trial_loop.thisIndex'
p4001
g60
(g99
S'\x17\x00\x00\x00'
tRp4002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4003
I0
sg3642
S'19-caramello_redo.png'
p4004
sS'block_loop.thisRepN'
p4005
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4006
I1
sg3647
S'30-spaghetti_hoops.png'
p4007
sg55
g11
sS'block_loop.thisTrial'
p4008
Nsg70
Vn
sS'block_loop.thisTrialN'
p4009
I0
sg39
F1.1998892109877488
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05\x1e\r\xcb@'
tRp4010
sa(dp4011
S'trial_loop.thisTrialN'
p4012
I24
sg3633
g3863
sS'block_loop.thisIndex'
p4013
g3627
sg38
S'left'
p4014
sg59
g63
sS'trial_loop.thisN'
p4015
I24
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p4016
g60
(g99
S'\x18\x00\x00\x00'
tRp4017
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4018
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4019
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4020
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4021
Nsg70
Vn
sS'block_loop.thisTrialN'
p4022
I0
sg39
F0.7832406955458282
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05%\x022\x80'
tRp4023
sa(dp4024
S'trial_loop.thisTrialN'
p4025
I25
sg3633
S'51-mars.png'
p4026
sS'block_loop.thisIndex'
p4027
g3627
sg38
S'right'
p4028
sg59
g63
sS'trial_loop.thisN'
p4029
I25
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p4030
g60
(g99
S'\x19\x00\x00\x00'
tRp4031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4032
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4033
sS'block_loop.thisRepN'
p4034
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4035
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4036
Nsg70
Vn
sS'block_loop.thisTrialN'
p4037
I0
sg39
F0.69999583757089567
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x05*\x0e\xad\xd0'
tRp4038
sa(dp4039
S'trial_loop.thisTrialN'
p4040
I26
sg3633
g3722
sS'block_loop.thisIndex'
p4041
g3627
sg38
S'right'
p4042
sg59
g63
sS'trial_loop.thisN'
p4043
I26
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4044
g60
(g99
S'\x1a\x00\x00\x00'
tRp4045
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4046
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4047
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4048
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4049
Nsg70
Vn
sS'block_loop.thisTrialN'
p4050
I0
sg39
F0.73321942724942346
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x050\n\x7f\x80'
tRp4051
sa(dp4052
S'trial_loop.thisTrialN'
p4053
I27
sg3633
g3739
sS'block_loop.thisIndex'
p4054
g3627
sg38
S'left'
p4055
sg59
g63
sS'trial_loop.thisN'
p4056
I27
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4057
g60
(g99
S'\x1b\x00\x00\x00'
tRp4058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4059
I0
sg3642
g3746
sS'block_loop.thisRepN'
p4060
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4061
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4062
Nsg70
Vn
sS'block_loop.thisTrialN'
p4063
I0
sg39
F0.68335866902634734
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x056\x07\x04\xe0'
tRp4064
sa(dp4065
S'trial_loop.thisTrialN'
p4066
I28
sg3633
S'6-sour_patch_kids.png'
p4067
sS'block_loop.thisIndex'
p4068
g3627
sg38
S'right'
p4069
sg59
g63
sS'trial_loop.thisN'
p4070
I28
sg33
S'38-maltesers.png'
p4071
sg64
g65
sS'trial_loop.thisIndex'
p4072
g60
(g99
S'\x1c\x00\x00\x00'
tRp4073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4074
I0
sg3642
S'38-maltesers.png'
p4075
sS'block_loop.thisRepN'
p4076
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4077
I1
sg3647
S'6-sour_patch_kids.png'
p4078
sg55
g11
sS'block_loop.thisTrial'
p4079
Nsg70
Vn
sS'block_loop.thisTrialN'
p4080
I0
sg39
F0.63294197004870512
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06\x00\x02\x94('
tRp4081
sa(dp4082
S'trial_loop.thisTrialN'
p4083
I29
sg3633
g3754
sS'block_loop.thisIndex'
p4084
g3627
sg38
S'left'
p4085
sg59
g63
sS'trial_loop.thisN'
p4086
I29
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4087
g60
(g99
S'\x1d\x00\x00\x00'
tRp4088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4089
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4090
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4091
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4092
Nsg70
Vn
sS'block_loop.thisTrialN'
p4093
I0
sg39
F0.66657838137325598
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06\x05\x0c\xf0\x80'
tRp4094
sa(dp4095
S'trial_loop.thisTrialN'
p4096
I30
sg3633
g3846
sS'block_loop.thisIndex'
p4097
g3627
sg38
S'right'
p4098
sg59
g63
sS'trial_loop.thisN'
p4099
I30
sg33
g3857
sg64
g65
sS'trial_loop.thisIndex'
p4100
g60
(g99
S'\x1e\x00\x00\x00'
tRp4101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4102
I0
sg3642
g3854
sS'block_loop.thisRepN'
p4103
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4104
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4105
Nsg70
Vn
sS'block_loop.thisTrialN'
p4106
I0
sg39
F1.3665562577807577
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06\x0b\x08E0'
tRp4107
sa(dp4108
S'trial_loop.thisTrialN'
p4109
I31
sg3633
S'19-caramello_redo.png'
p4110
sS'block_loop.thisIndex'
p4111
g3627
sg38
S'left'
p4112
sg59
g63
sS'trial_loop.thisN'
p4113
I31
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p4114
g60
(g99
S'\x1f\x00\x00\x00'
tRp4115
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4116
I0
sg3642
S'30-spaghetti_hoops.png'
p4117
sS'block_loop.thisRepN'
p4118
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4119
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p4120
Nsg70
Vn
sS'block_loop.thisTrialN'
p4121
I0
sg39
F0.76664030462052324
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06\x11\x0eP\x10'
tRp4122
sa(dp4123
S'trial_loop.thisTrialN'
p4124
I32
sg3633
S'21-nakd_banana_crunch.png'
p4125
sS'block_loop.thisIndex'
p4126
g3627
sg38
S'left'
p4127
sg59
g63
sS'trial_loop.thisN'
p4128
I32
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4129
g60
(g99
S' \x00\x00\x00'
tRp4130
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4131
I0
sg3642
S'1-treacle_cookies.png'
p4132
sS'block_loop.thisRepN'
p4133
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4134
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4135
Nsg70
Vn
sS'block_loop.thisTrialN'
p4136
I0
sg39
F0.93332645297414274
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06\x17\x0bN\x88'
tRp4137
sa(dp4138
S'trial_loop.thisTrialN'
p4139
I33
sg3633
S'3-ellas_strawberries_apples.png'
p4140
sS'block_loop.thisIndex'
p4141
g3627
sg38
S'left'
p4142
sg59
g63
sS'trial_loop.thisN'
p4143
I33
sg33
S'13-mccoys_steak_crisps.png'
p4144
sg64
g65
sS'trial_loop.thisIndex'
p4145
g60
(g99
S'!\x00\x00\x00'
tRp4146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4147
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4148
sS'block_loop.thisRepN'
p4149
I1
sg3645
S'3-ellas_strawberries_apples.png'
p4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4151
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p4152
Nsg70
Vn
sS'block_loop.thisTrialN'
p4153
I0
sg39
F0.90004755431800731
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06\x1d\n\xec\xe0'
tRp4154
sa(dp4155
S'trial_loop.thisTrialN'
p4156
I34
sg3633
g3996
sS'block_loop.thisIndex'
p4157
g3627
sg38
S'right'
p4158
sg59
g63
sS'trial_loop.thisN'
p4159
I34
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p4160
g60
(g99
S'"\x00\x00\x00'
tRp4161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4162
I0
sg3642
g4004
sS'block_loop.thisRepN'
p4163
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4164
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p4165
Nsg70
Vn
sS'block_loop.thisTrialN'
p4166
I0
sg39
F1.2165634422490257
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06#\t\xd3\xa0'
tRp4167
sa(dp4168
S'trial_loop.thisTrialN'
p4169
I35
sg3633
g4125
sS'block_loop.thisIndex'
p4170
g3627
sg38
S'left'
p4171
sg59
g63
sS'trial_loop.thisN'
p4172
I35
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p4173
g60
(g99
S'#\x00\x00\x00'
tRp4174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4175
I0
sg3642
g4132
sS'block_loop.thisRepN'
p4176
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4177
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4178
Nsg70
Vn
sS'block_loop.thisTrialN'
p4179
I0
sg39
F0.69988578981065075
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06)\r\xb7\xb8'
tRp4180
sa(dp4181
S'trial_loop.thisTrialN'
p4182
I36
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4183
sS'block_loop.thisIndex'
p4184
g3627
sg38
S'left'
p4185
sg59
g63
sS'trial_loop.thisN'
p4186
I36
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4187
g60
(g99
S'$\x00\x00\x00'
tRp4188
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4189
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4190
sS'block_loop.thisRepN'
p4191
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4192
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4193
Nsg70
Vn
sS'block_loop.thisTrialN'
p4194
I0
sg39
F1.3499105363007402
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x06/\t\x85\x80'
tRp4195
sa(dp4196
S'trial_loop.thisTrialN'
p4197
I37
sg3633
S'44-crunch.png'
p4198
sS'block_loop.thisIndex'
p4199
g3627
sg38
S'left'
p4200
sg59
g63
sS'trial_loop.thisN'
p4201
I37
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4202
g60
(g99
S'%\x00\x00\x00'
tRp4203
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4204
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4205
sS'block_loop.thisRepN'
p4206
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4207
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4208
Nsg70
Vn
sS'block_loop.thisTrialN'
p4209
I0
sg39
F1.7998821405599301
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x066\x00\x13\x88'
tRp4210
sa(dp4211
S'trial_loop.thisTrialN'
p4212
I38
sg3633
S'29-beans.png'
p4213
sS'block_loop.thisIndex'
p4214
g3627
sg38
S'right'
p4215
sg59
g63
sS'trial_loop.thisN'
p4216
I38
sg33
S'46-pistachios.png'
p4217
sg64
g65
sS'trial_loop.thisIndex'
p4218
g60
(g99
S'&\x00\x00\x00'
tRp4219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4220
I0
sg3642
S'46-pistachios.png'
p4221
sS'block_loop.thisRepN'
p4222
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4223
I1
sg3647
S'29-beans.png'
p4224
sg55
g11
sS'block_loop.thisTrial'
p4225
Nsg70
Vn
sS'block_loop.thisTrialN'
p4226
I0
sg39
F1.1665478759096004
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07\x00\x0c\xc9p'
tRp4227
sa(dp4228
S'trial_loop.thisTrialN'
p4229
I39
sg3633
S'31-hobnobs.png'
p4230
sS'block_loop.thisIndex'
p4231
g3627
sg38
S'right'
p4232
sg59
g63
sS'trial_loop.thisN'
p4233
I39
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4234
g60
(g99
S"'\x00\x00\x00"
tRp4235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4236
I0
sg3642
S'25-kitkat.png'
p4237
sS'block_loop.thisRepN'
p4238
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4239
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4240
Nsg70
Vn
sS'block_loop.thisTrialN'
p4241
I0
sg39
F0.71667491549669649
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07\x07\x00\xb7\x98'
tRp4242
sa(dp4243
S'trial_loop.thisTrialN'
p4244
I40
sg3633
g4183
sS'block_loop.thisIndex'
p4245
g3627
sg38
S'left'
p4246
sg59
g63
sS'trial_loop.thisN'
p4247
I40
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4248
g60
(g99
S'(\x00\x00\x00'
tRp4249
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4250
I0
sg3642
g4190
sS'block_loop.thisRepN'
p4251
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4252
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4253
Nsg70
Vn
sS'block_loop.thisTrialN'
p4254
I0
sg39
F1.7165745610618615
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07\x0c\x0c\x028'
tRp4255
sa(dp4256
S'trial_loop.thisTrialN'
p4257
I41
sg3633
S'42-mrkipling_lemon_slices.png'
p4258
sS'block_loop.thisIndex'
p4259
g3627
sg38
S'left'
p4260
sg59
g63
sS'trial_loop.thisN'
p4261
I41
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4262
g60
(g99
S')\x00\x00\x00'
tRp4263
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4264
I0
sg3642
S'16-skips_prawn.png'
p4265
sS'block_loop.thisRepN'
p4266
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4267
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4268
Nsg70
Vn
sS'block_loop.thisTrialN'
p4269
I0
sg39
F0.91647432067111367
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07\x13\x08E0'
tRp4270
sa(dp4271
S'trial_loop.thisTrialN'
p4272
I42
sg3633
g3634
sS'block_loop.thisIndex'
p4273
g3627
sg38
S'left'
p4274
sg59
g63
sS'trial_loop.thisN'
p4275
I42
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4276
g60
(g99
S'*\x00\x00\x00'
tRp4277
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4278
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4279
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4280
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4281
Nsg70
Vn
sS'block_loop.thisTrialN'
p4282
I0
sg39
F0.83317073254511342
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07\x19\x07jp'
tRp4283
sa(dp4284
S'trial_loop.thisTrialN'
p4285
I43
sg3633
g4110
sS'block_loop.thisIndex'
p4286
g3627
sg38
S'left'
p4287
sg59
g63
sS'trial_loop.thisN'
p4288
I43
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p4289
g60
(g99
S'+\x00\x00\x00'
tRp4290
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4291
I0
sg3642
g4117
sS'block_loop.thisRepN'
p4292
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4293
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p4294
Nsg70
Vn
sS'block_loop.thisTrialN'
p4295
I0
sg39
F1.1834185395673558
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07\x1f\x05\x99\x98'
tRp4296
sa(dp4297
S'trial_loop.thisTrialN'
p4298
I44
sg3633
g4230
sS'block_loop.thisIndex'
p4299
g3627
sg38
S'right'
p4300
sg59
g63
sS'trial_loop.thisN'
p4301
I44
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4302
g60
(g99
S',\x00\x00\x00'
tRp4303
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4304
I0
sg3642
g4237
sS'block_loop.thisRepN'
p4305
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4306
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4307
Nsg70
Vn
sS'block_loop.thisTrialN'
p4308
I0
sg39
F1.0165678897756152
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07%\x08\xca\x00'
tRp4309
sa(dp4310
S'trial_loop.thisTrialN'
p4311
I45
sg3633
S'13-mccoys_steak_crisps.png'
p4312
sS'block_loop.thisIndex'
p4313
g3627
sg38
S'right'
p4314
sg59
g63
sS'trial_loop.thisN'
p4315
I45
sg33
g4150
sg64
g65
sS'trial_loop.thisIndex'
p4316
g60
(g99
S'-\x00\x00\x00'
tRp4317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4318
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4319
sS'block_loop.thisRepN'
p4320
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4321
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p4322
Nsg70
Vn
sS'block_loop.thisTrialN'
p4323
I0
sg39
F1.0332495335787826
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x07+\t\x99\x08'
tRp4324
sa(dp4325
S'trial_loop.thisTrialN'
p4326
I46
sg3633
g3771
sS'block_loop.thisIndex'
p4327
g3627
sg38
S'left'
p4328
sg59
g63
sS'trial_loop.thisN'
p4329
I46
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4330
g60
(g99
S'.\x00\x00\x00'
tRp4331
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4332
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4333
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4334
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4335
Nsg70
Vn
sS'block_loop.thisTrialN'
p4336
I0
sg39
F0.86669994708790909
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x071\n\xa2\xa8'
tRp4337
sa(dp4338
S'trial_loop.thisTrialN'
p4339
I47
sg3633
S'45-chewy_nougat_redo.png'
p4340
sS'block_loop.thisIndex'
p4341
g3627
sg38
S'right'
p4342
sg59
g63
sS'trial_loop.thisN'
p4343
I47
sg33
S'45-chewy_nougat_redo.png'
p4344
sg64
g65
sS'trial_loop.thisIndex'
p4345
g60
(g99
S'/\x00\x00\x00'
tRp4346
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4347
I0
sg3642
S'41-peanuts_redo.png'
p4348
sS'block_loop.thisRepN'
p4349
I1
sg3645
S'41-peanuts_redo.png'
p4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4351
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p4352
Nsg70
Vn
sS'block_loop.thisTrialN'
p4353
I0
sg39
F0.89994662968820194
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x077\t\x10P'
tRp4354
sa(dp4355
S'trial_loop.thisTrialN'
p4356
I48
sg3633
g4258
sS'block_loop.thisIndex'
p4357
g3627
sg38
S'left'
p4358
sg59
g63
sS'trial_loop.thisN'
p4359
I48
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4360
g60
(g99
S'0\x00\x00\x00'
tRp4361
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4362
I0
sg3642
g4265
sS'block_loop.thisRepN'
p4363
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4364
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4365
Nsg70
Vn
sS'block_loop.thisTrialN'
p4366
I0
sg39
F0.76644871888493071
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08\x01\x07\xf7\x10'
tRp4367
sa(dp4368
S'trial_loop.thisTrialN'
p4369
I49
sg3633
g3705
sS'block_loop.thisIndex'
p4370
g3627
sg38
S'right'
p4371
sg59
g63
sS'trial_loop.thisN'
p4372
I49
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4373
g60
(g99
S'1\x00\x00\x00'
tRp4374
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4375
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4376
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4377
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4378
Nsg70
Vn
sS'block_loop.thisTrialN'
p4379
I0
sg39
F2.8332411517039873
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08\x07\x04\xf5\x88'
tRp4380
sa(dp4381
S'trial_loop.thisTrialN'
p4382
I50
sg3633
g4230
sS'block_loop.thisIndex'
p4383
g3627
sg38
S'right'
p4384
sg59
g63
sS'trial_loop.thisN'
p4385
I50
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4386
g60
(g99
S'2\x00\x00\x00'
tRp4387
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4388
I0
sg3642
g4237
sS'block_loop.thisRepN'
p4389
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4390
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4391
Nsg70
Vn
sS'block_loop.thisTrialN'
p4392
I0
sg39
F0.71656173166047665
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08\x0f\x02\xdax'
tRp4393
sa(dp4394
S'trial_loop.thisTrialN'
p4395
I51
sg3633
g3996
sS'block_loop.thisIndex'
p4396
g3627
sg38
S'right'
p4397
sg59
g63
sS'trial_loop.thisN'
p4398
I51
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p4399
g60
(g99
S'3\x00\x00\x00'
tRp4400
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4401
I0
sg3642
g4004
sS'block_loop.thisRepN'
p4402
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4403
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p4404
Nsg70
Vn
sS'block_loop.thisTrialN'
p4405
I0
sg39
F0.88318601378705353
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08\x14\x0eg\x80'
tRp4406
sa(dp4407
S'trial_loop.thisTrialN'
p4408
I52
sg3633
g3739
sS'block_loop.thisIndex'
p4409
g3627
sg38
S'left'
p4410
sg59
g63
sS'trial_loop.thisN'
p4411
I52
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4412
g60
(g99
S'4\x00\x00\x00'
tRp4413
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4414
I0
sg3642
g3746
sS'block_loop.thisRepN'
p4415
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4416
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4417
Nsg70
Vn
sS'block_loop.thisTrialN'
p4418
I0
sg39
F0.86659303540363908
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08\x1a\r\x0f\xc0'
tRp4419
sa(dp4420
S'trial_loop.thisTrialN'
p4421
I53
sg3633
g4183
sS'block_loop.thisIndex'
p4422
g3627
sg38
S'left'
p4423
sg59
g63
sS'trial_loop.thisN'
p4424
I53
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4425
g60
(g99
S'5\x00\x00\x00'
tRp4426
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4427
I0
sg3642
g4190
sS'block_loop.thisRepN'
p4428
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4429
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4430
Nsg70
Vn
sS'block_loop.thisTrialN'
p4431
I0
sg39
F2.2497528201893147
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08 \x0b}h'
tRp4432
sa(dp4433
S'trial_loop.thisTrialN'
p4434
I54
sg3633
S'50-polo.png'
p4435
sS'block_loop.thisIndex'
p4436
g3627
sg38
S'right'
p4437
sg59
g63
sS'trial_loop.thisN'
p4438
I54
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4439
g60
(g99
S'6\x00\x00\x00'
tRp4440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4441
I0
sg3642
S'48-twix.png'
p4442
sS'block_loop.thisRepN'
p4443
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4444
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4445
Nsg70
Vn
sS'block_loop.thisTrialN'
p4446
I0
sg39
F0.93329594750321121
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08(\x00\x94p'
tRp4447
sa(dp4448
S'trial_loop.thisTrialN'
p4449
I55
sg3633
g3654
sS'block_loop.thisIndex'
p4450
g3627
sg38
S'left'
p4451
sg59
g63
sS'trial_loop.thisN'
p4452
I55
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4453
g60
(g99
S'7\x00\x00\x00'
tRp4454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4455
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4456
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4457
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4458
Nsg70
Vn
sS'block_loop.thisTrialN'
p4459
I0
sg39
F0.89990899677650305
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08.\x002\xc8'
tRp4460
sa(dp4461
S'trial_loop.thisTrialN'
p4462
I56
sg3633
S'10-bounty_redo.png'
p4463
sS'block_loop.thisIndex'
p4464
g3627
sg38
S'right'
p4465
sg59
g63
sS'trial_loop.thisN'
p4466
I56
sg33
S'4-corn.png'
p4467
sg64
g65
sS'trial_loop.thisIndex'
p4468
g60
(g99
S'8\x00\x00\x00'
tRp4469
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4470
I0
sg3642
S'4-corn.png'
p4471
sS'block_loop.thisRepN'
p4472
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4473
I1
sg3647
S'10-bounty_redo.png'
p4474
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vn
sS'block_loop.thisTrialN'
p4476
I0
sg39
F1.050048067492753
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x083\x0e[\xc8'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g3880
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'right'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4486
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4487
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vn
sS'block_loop.thisTrialN'
p4489
I0
sg39
F1.4997918785920774
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x08:\x00a\xa8'
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
S'41-peanuts_redo.png'
p4493
sS'block_loop.thisIndex'
p4494
g3627
sg38
S'left'
p4495
sg59
g63
sS'trial_loop.thisN'
p4496
I58
sg33
g4350
sg64
g65
sS'trial_loop.thisIndex'
p4497
g60
(g99
S':\x00\x00\x00'
tRp4498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4499
I0
sg3642
S'45-chewy_nougat_redo.png'
p4500
sS'block_loop.thisRepN'
p4501
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4502
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg70
Vn
sS'block_loop.thisTrialN'
p4504
I0
sg39
F1.1832412087242119
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t\x04\x08\x93P'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I59
sg3633
g3654
sS'block_loop.thisIndex'
p4508
g3627
sg38
S'left'
p4509
sg59
g63
sS'trial_loop.thisN'
p4510
I59
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4511
g60
(g99
S';\x00\x00\x00'
tRp4512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4513
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4514
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4515
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4516
Nsg70
Vn
sS'block_loop.thisTrialN'
p4517
I0
sg39
F0.75010349051080993
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t\n\x0b\xbf\xd0'
tRp4518
sa(dp4519
S'trial_loop.thisTrialN'
p4520
I60
sg3633
g4312
sS'block_loop.thisIndex'
p4521
g3627
sg38
S'right'
p4522
sg59
g63
sS'trial_loop.thisN'
p4523
I60
sg33
g4144
sg64
g65
sS'trial_loop.thisIndex'
p4524
g60
(g99
S'<\x00\x00\x00'
tRp4525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4526
I0
sg3642
g4319
sS'block_loop.thisRepN'
p4527
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4528
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p4529
Nsg70
Vn
sS'block_loop.thisTrialN'
p4530
I0
sg39
F0.74982209895824781
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t\x10\x08\x83\xb0'
tRp4531
sa(dp4532
S'trial_loop.thisTrialN'
p4533
I61
sg3633
g3863
sS'block_loop.thisIndex'
p4534
g3627
sg38
S'left'
p4535
sg59
g63
sS'trial_loop.thisN'
p4536
I61
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p4537
g60
(g99
S'=\x00\x00\x00'
tRp4538
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4539
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4540
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4541
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4542
Nsg70
Vn
sS'block_loop.thisTrialN'
p4543
I0
sg39
F1.0165288313728524
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t\x16\x05G\x90'
tRp4544
sa(dp4545
S'trial_loop.thisTrialN'
p4546
I62
sg3633
g4026
sS'block_loop.thisIndex'
p4547
g3627
sg38
S'right'
p4548
sg59
g63
sS'trial_loop.thisN'
p4549
I62
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4550
g60
(g99
S'>\x00\x00\x00'
tRp4551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4552
I0
sg3642
g4033
sS'block_loop.thisRepN'
p4553
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4554
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4555
Nsg70
Vn
sS'block_loop.thisTrialN'
p4556
I0
sg39
F0.64988732933852589
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t\x1c\x06\x12\xb0'
tRp4557
sa(dp4558
S'trial_loop.thisTrialN'
p4559
I63
sg3633
g4213
sS'block_loop.thisIndex'
p4560
g3627
sg38
S'right'
p4561
sg59
g63
sS'trial_loop.thisN'
p4562
I63
sg33
g4217
sg64
g65
sS'trial_loop.thisIndex'
p4563
g60
(g99
S'?\x00\x00\x00'
tRp4564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4565
I0
sg3642
g4221
sS'block_loop.thisRepN'
p4566
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4567
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p4568
Nsg70
Vn
sS'block_loop.thisTrialN'
p4569
I0
sg39
F0.76660865876328899
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t"\x01,\xc8'
tRp4570
sa(dp4571
S'trial_loop.thisTrialN'
p4572
I64
sg3633
S'4-corn.png'
p4573
sS'block_loop.thisIndex'
p4574
g3627
sg38
S'left'
p4575
sg59
g63
sS'trial_loop.thisN'
p4576
I64
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p4577
g60
(g99
S'@\x00\x00\x00'
tRp4578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4579
I0
sg3642
S'10-bounty_redo.png'
p4580
sS'block_loop.thisRepN'
p4581
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4582
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p4583
Nsg70
Vn
sS'block_loop.thisTrialN'
p4584
I0
sg39
F0.66660575076457462
sg34
g753
(S"\x07\xdf\x07\x01\x0f\t'\rm\x80"
tRp4585
sa(dp4586
S'trial_loop.thisTrialN'
p4587
I65
sg3633
g4258
sS'block_loop.thisIndex'
p4588
g3627
sg38
S'left'
p4589
sg59
g63
sS'trial_loop.thisN'
p4590
I65
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4591
g60
(g99
S'A\x00\x00\x00'
tRp4592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4593
I0
sg3642
g4265
sS'block_loop.thisRepN'
p4594
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4595
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4596
Nsg70
Vn
sS'block_loop.thisTrialN'
p4597
I0
sg39
F0.8502791677856294
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t-\x08\xc20'
tRp4598
sa(dp4599
S'trial_loop.thisTrialN'
p4600
I66
sg3633
g4340
sS'block_loop.thisIndex'
p4601
g3627
sg38
S'right'
p4602
sg59
g63
sS'trial_loop.thisN'
p4603
I66
sg33
g4350
sg64
g65
sS'trial_loop.thisIndex'
p4604
g60
(g99
S'B\x00\x00\x00'
tRp4605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4606
I0
sg3642
g4348
sS'block_loop.thisRepN'
p4607
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4608
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p4609
Nsg70
Vn
sS'block_loop.thisTrialN'
p4610
I0
sg39
F1.0499231946487271
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t3\x06\xf1X'
tRp4611
sa(dp4612
S'trial_loop.thisTrialN'
p4613
I67
sg3633
g4573
sS'block_loop.thisIndex'
p4614
g3627
sg38
S'left'
p4615
sg59
g63
sS'trial_loop.thisN'
p4616
I67
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p4617
g60
(g99
S'C\x00\x00\x00'
tRp4618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4619
I0
sg3642
g4580
sS'block_loop.thisRepN'
p4620
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4621
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p4622
Nsg70
Vn
sS'block_loop.thisTrialN'
p4623
I0
sg39
F0.74987826322831097
sg34
g753
(S'\x07\xdf\x07\x01\x0f\t9\x089x'
tRp4624
sa(dp4625
S'trial_loop.thisTrialN'
p4626
I68
sg3633
g3846
sS'block_loop.thisIndex'
p4627
g3627
sg38
S'right'
p4628
sg59
g63
sS'trial_loop.thisN'
p4629
I68
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4630
g60
(g99
S'D\x00\x00\x00'
tRp4631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4632
I0
sg3642
g3854
sS'block_loop.thisRepN'
p4633
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4634
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4635
Nsg70
Vn
sS'block_loop.thisTrialN'
p4636
I0
sg39
F0.93324434480018681
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n\x03\x04\xfdX'
tRp4637
sa(dp4638
S'trial_loop.thisTrialN'
p4639
I69
sg3633
g4340
sS'block_loop.thisIndex'
p4640
g3627
sg38
S'right'
p4641
sg59
g63
sS'trial_loop.thisN'
p4642
I69
sg33
g4350
sg64
g65
sS'trial_loop.thisIndex'
p4643
g60
(g99
S'E\x00\x00\x00'
tRp4644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4645
I0
sg3642
g4348
sS'block_loop.thisRepN'
p4646
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4647
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p4648
Nsg70
Vn
sS'block_loop.thisTrialN'
p4649
I0
sg39
F0.81652757694246247
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n\t\x04]0'
tRp4650
sa(dp4651
S'trial_loop.thisTrialN'
p4652
I70
sg3633
g4125
sS'block_loop.thisIndex'
p4653
g3627
sg38
S'left'
p4654
sg59
g63
sS'trial_loop.thisN'
p4655
I70
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4656
g60
(g99
S'F\x00\x00\x00'
tRp4657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4658
I0
sg3642
g4132
sS'block_loop.thisRepN'
p4659
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4660
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4661
Nsg70
Vn
sS'block_loop.thisTrialN'
p4662
I0
sg39
F0.98316810964388424
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n\x0f\x02\x13@'
tRp4663
sa(dp4664
S'trial_loop.thisTrialN'
p4665
I71
sg3633
g4312
sS'block_loop.thisIndex'
p4666
g3627
sg38
S'right'
p4667
sg59
g63
sS'trial_loop.thisN'
p4668
I71
sg33
g4150
sg64
g65
sS'trial_loop.thisIndex'
p4669
g60
(g99
S'G\x00\x00\x00'
tRp4670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4671
I0
sg3642
g4319
sS'block_loop.thisRepN'
p4672
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4673
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p4674
Nsg70
Vn
sS'block_loop.thisTrialN'
p4675
I0
sg39
F1.000021382336854
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n\x15\x02i0'
tRp4676
sa(dp4677
S'trial_loop.thisTrialN'
p4678
I72
sg3633
g3671
sS'block_loop.thisIndex'
p4679
g3627
sg38
S'right'
p4680
sg59
g63
sS'trial_loop.thisN'
p4681
I72
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4682
g60
(g99
S'H\x00\x00\x00'
tRp4683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4684
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4685
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4686
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4687
Nsg70
Vn
sS'block_loop.thisTrialN'
p4688
I0
sg39
F0.86664264242426725
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n\x1b\x02\xf9\xb8'
tRp4689
sa(dp4690
S'trial_loop.thisTrialN'
p4691
I73
sg3633
g4110
sS'block_loop.thisIndex'
p4692
g3627
sg38
S'left'
p4693
sg59
g63
sS'trial_loop.thisN'
p4694
I73
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p4695
g60
(g99
S'I\x00\x00\x00'
tRp4696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4697
I0
sg3642
g4117
sS'block_loop.thisRepN'
p4698
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4699
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p4700
Nsg70
Vn
sS'block_loop.thisTrialN'
p4701
I0
sg39
F0.7332448009547079
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n!\x01g`'
tRp4702
sa(dp4703
S'trial_loop.thisTrialN'
p4704
I74
sg3633
g3688
sS'block_loop.thisIndex'
p4705
g3627
sg38
S'right'
p4706
sg59
g63
sS'trial_loop.thisN'
p4707
I74
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4708
g60
(g99
S'J\x00\x00\x00'
tRp4709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4710
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4711
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4712
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4713
Nsg70
Vn
sS'block_loop.thisTrialN'
p4714
I0
sg39
F0.91662456722042407
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n&\r/\x00'
tRp4715
sa(dp4716
S'trial_loop.thisTrialN'
p4717
I75
sg3633
g4340
sS'block_loop.thisIndex'
p4718
g3627
sg38
S'right'
p4719
sg59
g63
sS'trial_loop.thisN'
p4720
I75
sg33
g4350
sg64
g65
sS'trial_loop.thisIndex'
p4721
g60
(g99
S'K\x00\x00\x00'
tRp4722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4723
I0
sg3642
g4348
sS'block_loop.thisRepN'
p4724
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4725
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p4726
Nsg70
Vn
sS'block_loop.thisTrialN'
p4727
I0
sg39
F1.0666293568647234
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n,\x0cPX'
tRp4728
sa(dp4729
S'trial_loop.thisTrialN'
p4730
I76
sg3633
g3634
sS'block_loop.thisIndex'
p4731
g3627
sg38
S'left'
p4732
sg59
g63
sS'trial_loop.thisN'
p4733
I76
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4734
g60
(g99
S'L\x00\x00\x00'
tRp4735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4736
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4737
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4738
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4739
Nsg70
Vn
sS'block_loop.thisTrialN'
p4740
I0
sg39
F1.1499109924588993
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n2\r\xd6\xf8'
tRp4741
sa(dp4742
S'trial_loop.thisTrialN'
p4743
I77
sg3633
S'7-olives.png'
p4744
sS'block_loop.thisIndex'
p4745
g3627
sg38
S'left'
p4746
sg59
g63
sS'trial_loop.thisN'
p4747
I77
sg33
S'7-olives.png'
p4748
sg64
g65
sS'trial_loop.thisIndex'
p4749
g60
(g99
S'M\x00\x00\x00'
tRp4750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4751
I0
sg3642
S'22-daim.png'
p4752
sS'block_loop.thisRepN'
p4753
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4754
I1
sg3647
S'22-daim.png'
p4755
sg55
g11
sS'block_loop.thisTrial'
p4756
Nsg70
Vn
sS'block_loop.thisTrialN'
p4757
I0
sg39
F1.4165769558858301
sg34
g753
(S'\x07\xdf\x07\x01\x0f\n9\x01L\x08'
tRp4758
sa(dp4759
S'trial_loop.thisTrialN'
p4760
I78
sg3633
S'46-pistachios.png'
p4761
sS'block_loop.thisIndex'
p4762
g3627
sg38
S'left'
p4763
sg59
g63
sS'trial_loop.thisN'
p4764
I78
sg33
g4217
sg64
g65
sS'trial_loop.thisIndex'
p4765
g60
(g99
S'N\x00\x00\x00'
tRp4766
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4767
I0
sg3642
S'29-beans.png'
p4768
sS'block_loop.thisRepN'
p4769
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4770
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p4771
Nsg70
Vn
sS'block_loop.thisTrialN'
p4772
I0
sg39
F0.78327661787261604
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b\x03\x08I\x18'
tRp4773
sa(dp4774
S'trial_loop.thisTrialN'
p4775
I79
sg3633
g4026
sS'block_loop.thisIndex'
p4776
g3627
sg38
S'right'
p4777
sg59
g63
sS'trial_loop.thisN'
p4778
I79
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4779
g60
(g99
S'O\x00\x00\x00'
tRp4780
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4781
I0
sg3642
g4033
sS'block_loop.thisRepN'
p4782
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4783
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4784
Nsg70
Vn
sS'block_loop.thisTrialN'
p4785
I0
sg39
F0.84990198336890899
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b\t\x05\x86\x10'
tRp4786
sa(dp4787
S'trial_loop.thisTrialN'
p4788
I80
sg3633
S'22-daim.png'
p4789
sS'block_loop.thisIndex'
p4790
g3627
sg38
S'right'
p4791
sg59
g63
sS'trial_loop.thisN'
p4792
I80
sg33
g4755
sg64
g65
sS'trial_loop.thisIndex'
p4793
g60
(g99
S'P\x00\x00\x00'
tRp4794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4795
I0
sg3642
S'7-olives.png'
p4796
sS'block_loop.thisRepN'
p4797
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4798
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p4799
Nsg70
Vn
sS'block_loop.thisTrialN'
p4800
I0
sg39
F0.99985574050151627
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b\x0f\x03\xb58'
tRp4801
sa(dp4802
S'trial_loop.thisTrialN'
p4803
I81
sg3633
g3846
sS'block_loop.thisIndex'
p4804
g3627
sg38
S'right'
p4805
sg59
g63
sS'trial_loop.thisN'
p4806
I81
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4807
g60
(g99
S'Q\x00\x00\x00'
tRp4808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4809
I0
sg3642
g3854
sS'block_loop.thisRepN'
p4810
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4811
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vn
sS'block_loop.thisTrialN'
p4813
I0
sg39
F0.93323379617868341
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b\x15\x04E\xc0'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
g3754
sS'block_loop.thisIndex'
p4817
g3627
sg38
S'left'
p4818
sg59
g63
sS'trial_loop.thisN'
p4819
I82
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4820
g60
(g99
S'R\x00\x00\x00'
tRp4821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4822
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4823
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4824
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4825
Nsg70
Vn
sS'block_loop.thisTrialN'
p4826
I0
sg39
F0.8332408666065021
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b\x1b\x03\xa5\x98'
tRp4827
sa(dp4828
S'trial_loop.thisTrialN'
p4829
I83
sg3633
g3914
sS'block_loop.thisIndex'
p4830
g3627
sg38
S'right'
p4831
sg59
g63
sS'trial_loop.thisN'
p4832
I83
sg33
g3782
sg64
g65
sS'trial_loop.thisIndex'
p4833
g60
(g99
S'S\x00\x00\x00'
tRp4834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4835
I0
sg3642
g3921
sS'block_loop.thisRepN'
p4836
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4837
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4838
Nsg70
Vn
sS'block_loop.thisTrialN'
p4839
I0
sg39
F0.99982352444931166
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b!\x01\x9a('
tRp4840
sa(dp4841
S'trial_loop.thisTrialN'
p4842
I84
sg3633
g3996
sS'block_loop.thisIndex'
p4843
g3627
sg38
S'right'
p4844
sg59
g63
sS'trial_loop.thisN'
p4845
I84
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p4846
g60
(g99
S'T\x00\x00\x00'
tRp4847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4848
I0
sg3642
g4004
sS'block_loop.thisRepN'
p4849
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4850
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p4851
Nsg70
Vn
sS'block_loop.thisTrialN'
p4852
I0
sg39
F0.94984188474700204
sg34
g753
(S"\x07\xdf\x07\x01\x0f\x0b'\x02*\xb0"
tRp4853
sa(dp4854
S'trial_loop.thisTrialN'
p4855
I85
sg3633
g4744
sS'block_loop.thisIndex'
p4856
g3627
sg38
S'left'
p4857
sg59
g63
sS'trial_loop.thisN'
p4858
I85
sg33
g4755
sg64
g65
sS'trial_loop.thisIndex'
p4859
g60
(g99
S'U\x00\x00\x00'
tRp4860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4861
I0
sg3642
g4752
sS'block_loop.thisRepN'
p4862
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4863
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p4864
Nsg70
Vn
sS'block_loop.thisTrialN'
p4865
I0
sg39
F1.2499560949363513
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b-\x01\xc9\x08'
tRp4866
sa(dp4867
S'trial_loop.thisTrialN'
p4868
I86
sg3633
g3654
sS'block_loop.thisIndex'
p4869
g3627
sg38
S'left'
p4870
sg59
g63
sS'trial_loop.thisN'
p4871
I86
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4872
g60
(g99
S'V\x00\x00\x00'
tRp4873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4874
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4875
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4876
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vn
sS'block_loop.thisTrialN'
p4878
I0
sg39
F0.96659252222525538
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b3\x06* '
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g4463
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'right'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g4474
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g4471
sS'block_loop.thisRepN'
p4888
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4889
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vn
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.88308936562316376
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0b9\x06A\x90'
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
g4789
sS'block_loop.thisIndex'
p4895
g3627
sg38
S'right'
p4896
sg59
g63
sS'trial_loop.thisN'
p4897
I88
sg33
g4748
sg64
g65
sS'trial_loop.thisIndex'
p4898
g60
(g99
S'X\x00\x00\x00'
tRp4899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4900
I0
sg3642
g4796
sS'block_loop.thisRepN'
p4901
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4902
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p4903
Nsg70
Vn
sS'block_loop.thisTrialN'
p4904
I0
sg39
F0.78323157241538865
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c\x03\x04\xe9\xd0'
tRp4905
sa(dp4906
S'trial_loop.thisTrialN'
p4907
I89
sg3633
g3897
sS'block_loop.thisIndex'
p4908
g3627
sg38
S'left'
p4909
sg59
g63
sS'trial_loop.thisN'
p4910
I89
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p4911
g60
(g99
S'Y\x00\x00\x00'
tRp4912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4913
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4914
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4915
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4916
Nsg70
Vn
sS'block_loop.thisTrialN'
p4917
I0
sg39
F1.1999875697365496
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c\t\x02&\xc8'
tRp4918
sa(dp4919
S'trial_loop.thisTrialN'
p4920
I90
sg3633
S'40-sardines.png'
p4921
sS'block_loop.thisIndex'
p4922
g3627
sg38
S'right'
p4923
sg59
g63
sS'trial_loop.thisN'
p4924
I90
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4925
g60
(g99
S'Z\x00\x00\x00'
tRp4926
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4927
I0
sg3642
S'5-pineapple.png'
p4928
sS'block_loop.thisRepN'
p4929
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4930
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4931
Nsg70
Vn
sS'block_loop.thisTrialN'
p4932
I0
sg39
F0.74983464326214744
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c\x0f\x05\x91\xc8'
tRp4933
sa(dp4934
S'trial_loop.thisTrialN'
p4935
I91
sg3633
g3955
sS'block_loop.thisIndex'
p4936
g3627
sg38
S'right'
p4937
sg59
g63
sS'trial_loop.thisN'
p4938
I91
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4939
g60
(g99
S'[\x00\x00\x00'
tRp4940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4941
I0
sg3642
g3962
sS'block_loop.thisRepN'
p4942
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4943
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4944
Nsg70
Vn
sS'block_loop.thisTrialN'
p4945
I0
sg39
F1.0999307782512915
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c\x15\x02U\xa8'
tRp4946
sa(dp4947
S'trial_loop.thisTrialN'
p4948
I92
sg3633
g3897
sS'block_loop.thisIndex'
p4949
g3627
sg38
S'left'
p4950
sg59
g63
sS'trial_loop.thisN'
p4951
I92
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p4952
g60
(g99
S'\\\x00\x00\x00'
tRp4953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4954
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4955
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4956
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4957
Nsg70
Vn
sS'block_loop.thisTrialN'
p4958
I0
sg39
F0.98325135820778087
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c\x1b\x04U`'
tRp4959
sa(dp4960
S'trial_loop.thisTrialN'
p4961
I93
sg3633
g4312
sS'block_loop.thisIndex'
p4962
g3627
sg38
S'right'
p4963
sg59
g63
sS'trial_loop.thisN'
p4964
I93
sg33
g4150
sg64
g65
sS'trial_loop.thisIndex'
p4965
g60
(g99
S']\x00\x00\x00'
tRp4966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4967
I0
sg3642
g4319
sS'block_loop.thisRepN'
p4968
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4969
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p4970
Nsg70
Vn
sS'block_loop.thisTrialN'
p4971
I0
sg39
F0.91657610059337458
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c!\x04\xa7h'
tRp4972
sa(dp4973
S'trial_loop.thisTrialN'
p4974
I94
sg3633
g3955
sS'block_loop.thisIndex'
p4975
g3627
sg38
S'right'
p4976
sg59
g63
sS'trial_loop.thisN'
p4977
I94
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4978
g60
(g99
S'^\x00\x00\x00'
tRp4979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4980
I0
sg3642
g3962
sS'block_loop.thisRepN'
p4981
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4982
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vn
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.71659309242386371
sg34
g753
(S"\x07\xdf\x07\x01\x0f\x0c'\x03\xcc\xa8"
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g3705
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'right'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4994
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vn
sS'block_loop.thisTrialN'
p4997
I0
sg39
F1.9665580253895314
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c-\x00\x17p'
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g3722
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'right'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5007
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5008
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vn
sS'block_loop.thisTrialN'
p5010
I0
sg39
F0.71656971439733752
sg34
g753
(S"\x07\xdf\x07\x01\x0f\x0c4\x00'\x10"
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
S'49-yorkie.png'
p5014
sS'block_loop.thisIndex'
p5015
g3627
sg38
S'right'
p5016
sg59
g63
sS'trial_loop.thisN'
p5017
I97
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5018
g60
(g99
S'a\x00\x00\x00'
tRp5019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5020
I0
sg3642
S'35-raisins.png'
p5021
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F1.0332489633838122
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0c9\x0bu\x98'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g3818
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'right'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g3825
sS'block_loop.thisRepN'
p5035
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F1.2165568849995907
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r\x03\x0c\x7f8'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g3788
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'left'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g3796
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F0.66658379823275027
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r\n\x01$\xf8'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g4258
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'left'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g4265
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.84979678226955002
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r\x0f\x0b\xbb\xe8'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
S'38-maltesers.png'
p5068
sS'block_loop.thisIndex'
p5069
g3627
sg38
S'left'
p5070
sg59
g63
sS'trial_loop.thisN'
p5071
I101
sg33
g4071
sg64
g65
sS'trial_loop.thisIndex'
p5072
g60
(g99
S'e\x00\x00\x00'
tRp5073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5074
I0
sg3642
S'6-sour_patch_kids.png'
p5075
sS'block_loop.thisRepN'
p5076
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5077
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p5078
Nsg70
Vn
sS'block_loop.thisTrialN'
p5079
I0
sg39
F0.93291705250157975
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r\x15\t\xeb\x10'
tRp5080
sa(dp5081
S'trial_loop.thisTrialN'
p5082
I102
sg3633
g3688
sS'block_loop.thisIndex'
p5083
g3627
sg38
S'right'
p5084
sg59
g63
sS'trial_loop.thisN'
p5085
I102
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5086
g60
(g99
S'f\x00\x00\x00'
tRp5087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5088
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5089
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5090
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5091
Nsg70
Vn
sS'block_loop.thisTrialN'
p5092
I0
sg39
F0.83318698311632033
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r\x1b\t\x89h'
tRp5093
sa(dp5094
S'trial_loop.thisTrialN'
p5095
I103
sg3633
g3654
sS'block_loop.thisIndex'
p5096
g3627
sg38
S'left'
p5097
sg59
g63
sS'trial_loop.thisN'
p5098
I103
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5099
g60
(g99
S'g\x00\x00\x00'
tRp5100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5101
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5102
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5103
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5104
Nsg70
Vn
sS'block_loop.thisTrialN'
p5105
I0
sg39
F0.83353822363642394
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r!\x07z\x10'
tRp5106
sa(dp5107
S'trial_loop.thisTrialN'
p5108
I104
sg3633
g3897
sS'block_loop.thisIndex'
p5109
g3627
sg38
S'left'
p5110
sg59
g63
sS'trial_loop.thisN'
p5111
I104
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5112
g60
(g99
S'h\x00\x00\x00'
tRp5113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5114
I0
sg3642
g3905
sS'block_loop.thisRepN'
p5115
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5116
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5117
Nsg70
Vn
sS'block_loop.thisTrialN'
p5118
I0
sg39
F0.98332206246777787
sg34
g753
(S"\x07\xdf\x07\x01\x0f\r'\x05n\xa0"
tRp5119
sa(dp5120
S'trial_loop.thisTrialN'
p5121
I105
sg3633
g4435
sS'block_loop.thisIndex'
p5122
g3627
sg38
S'right'
p5123
sg59
g63
sS'trial_loop.thisN'
p5124
I105
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5125
g60
(g99
S'i\x00\x00\x00'
tRp5126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5127
I0
sg3642
g4442
sS'block_loop.thisRepN'
p5128
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5129
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p5130
Nsg70
Vn
sS'block_loop.thisTrialN'
p5131
I0
sg39
F0.83322490112914238
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r-\x05\xc4\x90'
tRp5132
sa(dp5133
S'trial_loop.thisTrialN'
p5134
I106
sg3633
g4744
sS'block_loop.thisIndex'
p5135
g3627
sg38
S'left'
p5136
sg59
g63
sS'trial_loop.thisN'
p5137
I106
sg33
g4755
sg64
g65
sS'trial_loop.thisIndex'
p5138
g60
(g99
S'j\x00\x00\x00'
tRp5139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5140
I0
sg3642
g4752
sS'block_loop.thisRepN'
p5141
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5142
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p5143
Nsg70
Vn
sS'block_loop.thisTrialN'
p5144
I0
sg39
F0.9165136641713616
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r3\x03\xb58'
tRp5145
sa(dp5146
S'trial_loop.thisTrialN'
p5147
I107
sg3633
g4435
sS'block_loop.thisIndex'
p5148
g3627
sg38
S'right'
p5149
sg59
g63
sS'trial_loop.thisN'
p5150
I107
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p5151
g60
(g99
S'k\x00\x00\x00'
tRp5152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5153
I0
sg3642
g4442
sS'block_loop.thisRepN'
p5154
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5155
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p5156
Nsg70
Vn
sS'block_loop.thisTrialN'
p5157
I0
sg39
F2.4831832198251504
sg34
g753
(S'\x07\xdf\x07\x01\x0f\r9\x02\xdax'
tRp5158
sa(dp5159
S'trial_loop.thisTrialN'
p5160
I108
sg3633
g4125
sS'block_loop.thisIndex'
p5161
g3627
sg38
S'left'
p5162
sg59
g63
sS'trial_loop.thisN'
p5163
I108
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p5164
g60
(g99
S'l\x00\x00\x00'
tRp5165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5166
I0
sg3642
g4132
sS'block_loop.thisRepN'
p5167
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5168
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vn
sS'block_loop.thisTrialN'
p5170
I0
sg39
F0.93331533415766899
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e\x04\n\xc5\xd0'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g4140
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'left'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g4150
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g4148
sS'block_loop.thisRepN'
p5180
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5181
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vn
sS'block_loop.thisTrialN'
p5183
I0
sg39
F0.73336967380237184
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e\n\n%\xa8'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g3914
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'right'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g3921
sS'block_loop.thisRepN'
p5193
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5194
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vn
sS'block_loop.thisTrialN'
p5196
I0
sg39
F0.69993140546648647
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e\x10\x06\xab\x08'
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g5014
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'right'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g5021
sS'block_loop.thisRepN'
p5206
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vn
sS'block_loop.thisTrialN'
p5209
I0
sg39
F0.76659012740128674
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e\x16\x02\xb7P'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g3634
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'left'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5219
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vn
sS'block_loop.thisTrialN'
p5222
I0
sg39
F0.83322775210399413
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e\x1b\x0e\xbdp'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g3955
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'right'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g3962
sS'block_loop.thisRepN'
p5232
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vn
sS'block_loop.thisTrialN'
p5235
I0
sg39
F0.966448832921742
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e!\x0c\xae\x18'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g4140
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'left'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g4150
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g4148
sS'block_loop.thisRepN'
p5245
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vn
sS'block_loop.thisTrialN'
p5248
I0
sg39
F0.66671494323236402
sg34
g753
(S"\x07\xdf\x07\x01\x0f\x0e'\x0c\xc5\x88"
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g3771
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'left'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vn
sS'block_loop.thisTrialN'
p5261
I0
sg39
F0.91663768172293203
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e-\x08\x1a8'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g5068
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'left'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g4071
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g5075
sS'block_loop.thisRepN'
p5271
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vn
sS'block_loop.thisTrialN'
p5274
I0
sg39
F0.69966797507368028
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e3\x07}\xf8'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g3914
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'right'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g3921
sS'block_loop.thisRepN'
p5284
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vn
sS'block_loop.thisTrialN'
p5287
I0
sg39
F0.78331368058934459
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0e9\x03K\xc0'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g4213
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'right'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g4224
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g4221
sS'block_loop.thisRepN'
p5297
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F1.1165807761935866
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f\x03\x00\x88\xb8'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4573
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'left'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g4474
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5310
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F1.0665709118111408
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f\t\x02\xc3\x08'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3880
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'right'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.68317563622258604
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f\x0f\x04I\xa8'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g3722
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'right'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.66656840295036091
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f\x15\x00\x17p'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g3996
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4004
sS'block_loop.thisRepN'
p5349
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.83322974779366632
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f\x1a\n\xae`'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4435
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'right'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4442
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.64990956696783542
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f \x08\x9f\x08'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4198
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4205
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.85007304206010303
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f&\x03\xf3\xb8'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g3914
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g3921
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.94989890431315871
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f,\x02&\xc8'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4067
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'right'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4071
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4075
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.74981810758617939
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f2\x01\xc18'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4573
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'left'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5414
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.74986885500402423
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x0f7\r\xc7X'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4140
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4150
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4148
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.81656007809579023
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10\x01\n\x8b8'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4258
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4265
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.88307682131926413
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10\x07\x08AH'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g4744
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g4748
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g4752
sS'block_loop.thisRepN'
p5453
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.99985089384063031
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10\r\x06\xe9\x88'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4761
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g4217
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4768
sS'block_loop.thisRepN'
p5466
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.78324782299387152
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10\x13\x07z\x10'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4198
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4205
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F1.4333618051023223
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10\x19\x04\xb7\x08'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g5068
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g4071
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g5075
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.64965012795073562
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10\x1f\x0b\xb8\x00'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3705
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.88317147379711969
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10%\x06\xce0'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g5068
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'left'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g4071
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g5075
sS'block_loop.thisRepN'
p5518
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.66643355167980189
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x10+\x05\xb4\xf0'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g5014
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g5021
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F1.1499223963728582
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x101\x01\t\xa0'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4761
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g4217
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4768
sS'block_loop.thisRepN'
p5544
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.7665946889683255
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x107\x03\xfb\x88'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4493
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g4350
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4500
sS'block_loop.thisRepN'
p5557
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F1.2000041054088797
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11\x01\x00\xbfh'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4463
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4471
sS'block_loop.thisRepN'
p5570
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.63318515849096002
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11\x07\x04h\xe8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g3671
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F1.0999173786512983
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11\x0c\x0e\x86\xc0'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3818
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3825
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.71658254380236031
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11\x13\x01@P'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g4198
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g4205
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F1.8166250803951698
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11\x18\x0c\xcdX'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4183
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4190
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.1167010874778498
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11\x1f\n{\x98'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4789
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'right'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g4755
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4796
sS'block_loop.thisRepN'
p5635
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.8166889423118846
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11%\x0c\xb9\xd0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g3671
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F1.0330311486468418
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x11+\no\xe0'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4921
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4928
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.98324508605219307
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x111\x0by\x80'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4463
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4471
sS'block_loop.thisRepN'
p5674
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.68326116557364003
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x117\x0b\xcfp'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g3846
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g3854
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.399984547697386
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12\x01\x07^\xb8'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g3771
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.71667463039921131
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12\x07\x0e!0'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3788
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3796
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.71660221555430326
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12\r\n-x'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4493
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g4344
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4500
sS'block_loop.thisRepN'
p5726
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F1.0832317434760625
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12\x13\x06tX'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3754
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.79983852059376659
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12\x19\x089x'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3863
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3871
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.4998791185244045
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12\x1f\x05\xb1\x08'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4463
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4471
sS'block_loop.thisRepN'
p5765
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.69998357836448122
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12%\r\xde\xc8'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3880
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.69979598399731913
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x12+\t\xb0x'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4789
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g4748
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4796
sS'block_loop.thisRepN'
p5791
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F1.083237445433042
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x121\x05\xb8\xd8'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4493
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4344
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4500
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.9166476601458271
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x127\x07}\xf8'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4573
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4580
sS'block_loop.thisRepN'
p5817
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.66664965582822333
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13\x01\x06\x9fP'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4067
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4078
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4075
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.63313441108039115
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13\x07\x01\xf4\x00'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3771
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3782
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.64992866852480802
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13\x0c\x0cPX'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g3739
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g3746
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.91653305081854342
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13\x12\x07f\x88'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4183
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4190
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.86653202446905198
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13\x18\x06\x8b\xc8'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4921
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4928
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.81657376278963056
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13\x1e\x054\x08'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4312
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g4144
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4319
sS'block_loop.thisRepN'
p5895
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F1.1663733960413083
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13$\x02\xea\x18'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3671
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.66660888684054953
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x13*\x05\xdc\x00'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g5014
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g5021
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.2832529547522427
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x130\x010\xb0'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3705
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.81661196589629981
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x136\x06\n\xe0'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g5068
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4071
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g5075
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.74947399451411911
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14\x00\x03\xc0\xf0'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4110
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4117
sS'block_loop.thisRepN'
p5960
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.0833038732234854
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14\x06\x00\x84\xd0'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4213
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4217
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4221
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.83325341091040173
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14\x0c\x02F\x08'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4125
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4132
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.8832076812213927
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14\x12\x00:\x98'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4789
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g4748
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4796
sS'block_loop.thisRepN'
p5999
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.96654576618311694
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14\x17\x0ec\x98'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4230
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4237
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.76659012740492471
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14\x1d\x0e<\x88'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g5014
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g5021
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.69989092157265986
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14#\x0b;\x00'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4493
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g4350
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4500
sS'block_loop.thisRepN'
p6038
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.78325266965475748
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14)\x07\x0c\xb0'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4067
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g4078
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4075
sS'block_loop.thisRepN'
p6051
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.68301797712774714
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14/\x04E\xc0'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4340
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g4350
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4348
sS'block_loop.thisRepN'
p6064
I1
sg3645
g4350
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g4344
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F1.383290359586681
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x145\x00\x17p'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4921
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4928
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.68323579186471761
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x14;\x06\\\xe8'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4026
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4033
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.99990392203108058
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15\x05\x02*\xb0'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3739
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3746
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.64993265989687643
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15\x0b\x02\x80\xa0'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4230
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4237
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.59044329290190944
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15\x10\r\x17\x90'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4744
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4748
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4752
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4748
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g4755
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F1.0500272553508694
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15\x16\x07;\x90'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4067
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g4078
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4075
sS'block_loop.thisRepN'
p6142
I1
sg3645
g4071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g4078
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.68297093598812353
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15\x1c\x08\x83\xb0'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3688
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.2665359588172578
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15"\x04\x16\xe0'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3955
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3962
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.71655659989846754
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15(\x08\xb2\x90'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4026
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4033
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.71659622849983862
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x15.\x04\xbe\xd8'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4213
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g4217
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4221
sS'block_loop.thisRepN'
p6194
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.71654205991217168
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x154\x01\x05\xb8'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g3863
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g3871
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.3666842667043966
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x159\x0c\x92\xc0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4198
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4205
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F1.0665800349415804
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16\x04\x03[`'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3818
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3825
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.0499083695576701
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16\n\x04\xde\x18'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g3754
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g3762
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.83314849491216592
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16\x10\x06&8'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3722
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3730
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.73323225665444625
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16\x16\x04\x1a\xc8'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4110
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g4000
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4117
sS'block_loop.thisRepN'
p6272
I1
sg3645
g4000
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g4007
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F1.3999936708278256
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16\x1c\x00\xa0('
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3788
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3796
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.71658197360375198
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16"\x07$ '
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4435
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4442
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.98329953973734519
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16(\x03n\xe8'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4761
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g4224
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4768
sS'block_loop.thisRepN'
p6311
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.64989303129914333
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x16.\x03\x86X'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4921
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4928
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.79990694407024421
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x163\r\xde\xc8'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4761
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'left'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4217
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4768
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g4224
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F1.0832471387584519
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x169\x0bVX'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4140
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4150
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4148
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g4144
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.86665262084716232
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x17\x03\rV\x10'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F27.416169265998178
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'21-nakd_banana_crunch.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'21-nakd_banana_crunch.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'1-treacle_cookies.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'1-treacle_cookies.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.79987415781943128
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x18\x1f\x02\xde`'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'6-sour_patch_kids.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'38-maltesers.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'38-maltesers.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'6-sour_patch_kids.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.61625633487346931
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x18%\x00U\xf0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'16-skips_prawn.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'42-mrkipling_lemon_slices.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'16-skips_prawn.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.78307562390909879
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x18*\n5H'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'27-hartleys_raspberries_jelly.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'27-hartleys_raspberries_jelly.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'51-mars.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'51-mars.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.94987353060787427
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x180\x07r@'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'22-daim.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'7-olives.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'7-olives.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6385
S'22-daim.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.93327713105099974
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x186\x07\x10\x98'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'43-mrporky_pork_crackles_redo.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'18-mms.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
S'18-mms.png'
p6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6471
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vn
sS'block_loop.thisTrialN'
p6473
I0
sg39
F0.63329121488277451
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19\x00\x06\xae\xf0'
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
S'45-chewy_nougat_redo.png'
p6477
sS'block_loop.thisIndex'
p6478
g6365
sg38
S'right'
p6479
sg59
g63
sS'trial_loop.thisN'
p6480
I6
sg33
S'41-peanuts_redo.png'
p6481
sg64
g65
sS'trial_loop.thisIndex'
p6482
g60
(g99
S'\x06\x00\x00\x00'
tRp6483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6484
I0
sg6380
S'41-peanuts_redo.png'
p6485
sS'block_loop.thisRepN'
p6486
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6487
I2
sg6385
S'45-chewy_nougat_redo.png'
p6488
sg55
g11
sS'block_loop.thisTrial'
p6489
Nsg70
Vn
sS'block_loop.thisTrialN'
p6490
I0
sg39
F0.84991424257532344
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19\x06\x01\x86\xa0'
tRp6491
sa(dp6492
S'trial_loop.thisTrialN'
p6493
I7
sg6371
S'1-treacle_cookies.png'
p6494
sS'block_loop.thisIndex'
p6495
g6365
sg38
S'right'
p6496
sg59
g63
sS'trial_loop.thisN'
p6497
I7
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6498
g60
(g99
S'\x07\x00\x00\x00'
tRp6499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6500
I0
sg6380
S'21-nakd_banana_crunch.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6503
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6504
Nsg70
Vn
sS'block_loop.thisTrialN'
p6505
I0
sg39
F0.69986355218134122
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19\x0b\x0e\xfb\xf0'
tRp6506
sa(dp6507
S'trial_loop.thisTrialN'
p6508
I8
sg6371
S'33-ambrosia_rice.png'
p6509
sS'block_loop.thisIndex'
p6510
g6365
sg38
S'left'
p6511
sg59
g63
sS'trial_loop.thisN'
p6512
I8
sg33
S'33-ambrosia_rice.png'
p6513
sg64
g65
sS'trial_loop.thisIndex'
p6514
g60
(g99
S'\x08\x00\x00\x00'
tRp6515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6516
I0
sg6380
S'23-crunchie_redo.png'
p6517
sS'block_loop.thisRepN'
p6518
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6519
I2
sg6385
S'23-crunchie_redo.png'
p6520
sg55
g11
sS'block_loop.thisTrial'
p6521
Nsg70
Vn
sS'block_loop.thisTrialN'
p6522
I0
sg39
F1.0166166415001499
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19\x11\x0b\x04P'
tRp6523
sa(dp6524
S'trial_loop.thisTrialN'
p6525
I9
sg6371
S'50-polo.png'
p6526
sS'block_loop.thisIndex'
p6527
g6365
sg38
S'right'
p6528
sg59
g63
sS'trial_loop.thisN'
p6529
I9
sg33
S'48-twix.png'
p6530
sg64
g65
sS'trial_loop.thisIndex'
p6531
g60
(g99
S'\t\x00\x00\x00'
tRp6532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6533
I0
sg6380
S'48-twix.png'
p6534
sS'block_loop.thisRepN'
p6535
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6536
I2
sg6385
S'50-polo.png'
p6537
sg55
g11
sS'block_loop.thisTrial'
p6538
Nsg70
Vn
sS'block_loop.thisTrialN'
p6539
I0
sg39
F0.71661504495568806
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19\x17\x0b\x98\xc0'
tRp6540
sa(dp6541
S'trial_loop.thisTrialN'
p6542
I10
sg6371
S'7-olives.png'
p6543
sS'block_loop.thisIndex'
p6544
g6365
sg38
S'left'
p6545
sg59
g63
sS'trial_loop.thisN'
p6546
I10
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6547
g60
(g99
S'\n\x00\x00\x00'
tRp6548
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6549
I0
sg6380
S'22-daim.png'
p6550
sS'block_loop.thisRepN'
p6551
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6552
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6553
Nsg70
Vn
sS'block_loop.thisTrialN'
p6554
I0
sg39
F1.216583684192301
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19\x1d\x07\xdf\xa0'
tRp6555
sa(dp6556
S'trial_loop.thisTrialN'
p6557
I11
sg6371
S'4-corn.png'
p6558
sS'block_loop.thisIndex'
p6559
g6365
sg38
S'left'
p6560
sg59
g63
sS'trial_loop.thisN'
p6561
I11
sg33
S'10-bounty_redo.png'
p6562
sg64
g65
sS'trial_loop.thisIndex'
p6563
g60
(g99
S'\x0b\x00\x00\x00'
tRp6564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6565
I0
sg6380
S'10-bounty_redo.png'
p6566
sS'block_loop.thisRepN'
p6567
I2
sg6383
S'4-corn.png'
p6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6569
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p6570
Nsg70
Vn
sS'block_loop.thisTrialN'
p6571
I0
sg39
F0.90000906611021492
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19#\x0b\xc7\xa0'
tRp6572
sa(dp6573
S'trial_loop.thisTrialN'
p6574
I12
sg6371
S'23-crunchie_redo.png'
p6575
sS'block_loop.thisIndex'
p6576
g6365
sg38
S'right'
p6577
sg59
g63
sS'trial_loop.thisN'
p6578
I12
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6579
g60
(g99
S'\x0c\x00\x00\x00'
tRp6580
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6581
I0
sg6380
S'33-ambrosia_rice.png'
p6582
sS'block_loop.thisRepN'
p6583
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6584
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p6585
Nsg70
Vn
sS'block_loop.thisTrialN'
p6586
I0
sg39
F0.69993967330083251
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19)\n\xae`'
tRp6587
sa(dp6588
S'trial_loop.thisTrialN'
p6589
I13
sg6371
g6558
sS'block_loop.thisIndex'
p6590
g6365
sg38
S'left'
p6591
sg59
g63
sS'trial_loop.thisN'
p6592
I13
sg33
g6562
sg64
g65
sS'trial_loop.thisIndex'
p6593
g60
(g99
S'\r\x00\x00\x00'
tRp6594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6595
I0
sg6380
g6566
sS'block_loop.thisRepN'
p6596
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6597
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p6598
Nsg70
Vn
sS'block_loop.thisTrialN'
p6599
I0
sg39
F1.2832022073416738
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19/\x06|('
tRp6600
sa(dp6601
S'trial_loop.thisTrialN'
p6602
I14
sg6371
S'18-mms.png'
p6603
sS'block_loop.thisIndex'
p6604
g6365
sg38
S'left'
p6605
sg59
g63
sS'trial_loop.thisN'
p6606
I14
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6607
g60
(g99
S'\x0e\x00\x00\x00'
tRp6608
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6609
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6610
sS'block_loop.thisRepN'
p6611
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6612
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p6613
Nsg70
Vn
sS'block_loop.thisTrialN'
p6614
I0
sg39
F0.71655945087695727
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x195\x0bVX'
tRp6615
sa(dp6616
S'trial_loop.thisTrialN'
p6617
I15
sg6371
g6392
sS'block_loop.thisIndex'
p6618
g6365
sg38
S'right'
p6619
sg59
g63
sS'trial_loop.thisN'
p6620
I15
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6621
g60
(g99
S'\x0f\x00\x00\x00'
tRp6622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6623
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6624
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6625
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6626
Nsg70
Vn
sS'block_loop.thisTrialN'
p6627
I0
sg39
F0.69965001391028636
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x19;\x07\x9d8'
tRp6628
sa(dp6629
S'trial_loop.thisTrialN'
p6630
I16
sg6371
g6477
sS'block_loop.thisIndex'
p6631
g6365
sg38
S'right'
p6632
sg59
g63
sS'trial_loop.thisN'
p6633
I16
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6634
g60
(g99
S'\x10\x00\x00\x00'
tRp6635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6636
I0
sg6380
g6485
sS'block_loop.thisRepN'
p6637
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6638
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p6639
Nsg70
Vn
sS'block_loop.thisTrialN'
p6640
I0
sg39
F0.79988442133981152
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a\x05\x03n\xe8'
tRp6641
sa(dp6642
S'trial_loop.thisTrialN'
p6643
I17
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6644
sS'block_loop.thisIndex'
p6645
g6365
sg38
S'left'
p6646
sg59
g63
sS'trial_loop.thisN'
p6647
I17
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6648
sg64
g65
sS'trial_loop.thisIndex'
p6649
g60
(g99
S'\x11\x00\x00\x00'
tRp6650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6651
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6652
sS'block_loop.thisRepN'
p6653
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6654
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6655
sg55
g11
sS'block_loop.thisTrial'
p6656
Nsg70
Vn
sS'block_loop.thisTrialN'
p6657
I0
sg39
F0.96682744283316424
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a\x0b\x00\xe6x'
tRp6658
sa(dp6659
S'trial_loop.thisTrialN'
p6660
I18
sg6371
S'51-mars.png'
p6661
sS'block_loop.thisIndex'
p6662
g6365
sg38
S'right'
p6663
sg59
g63
sS'trial_loop.thisN'
p6664
I18
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6665
g60
(g99
S'\x12\x00\x00\x00'
tRp6666
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6667
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6668
sS'block_loop.thisRepN'
p6669
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6670
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6671
Nsg70
Vn
sS'block_loop.thisTrialN'
p6672
I0
sg39
F0.74990762830566382
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a\x11\x00\xfd\xe8'
tRp6673
sa(dp6674
S'trial_loop.thisTrialN'
p6675
I19
sg6371
S'35-raisins.png'
p6676
sS'block_loop.thisIndex'
p6677
g6365
sg38
S'left'
p6678
sg59
g63
sS'trial_loop.thisN'
p6679
I19
sg33
S'35-raisins.png'
p6680
sg64
g65
sS'trial_loop.thisIndex'
p6681
g60
(g99
S'\x13\x00\x00\x00'
tRp6682
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6683
I0
sg6380
S'49-yorkie.png'
p6684
sS'block_loop.thisRepN'
p6685
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6686
I2
sg6385
S'49-yorkie.png'
p6687
sg55
g11
sS'block_loop.thisTrial'
p6688
Nsg70
Vn
sS'block_loop.thisTrialN'
p6689
I0
sg39
F0.83328990343215992
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a\x16\r\x04\x08'
tRp6690
sa(dp6691
S'trial_loop.thisTrialN'
p6692
I20
sg6371
g6372
sS'block_loop.thisIndex'
p6693
g6365
sg38
S'left'
p6694
sg59
g63
sS'trial_loop.thisN'
p6695
I20
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6696
g60
(g99
S'\x14\x00\x00\x00'
tRp6697
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6698
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6699
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6700
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6701
Nsg70
Vn
sS'block_loop.thisTrialN'
p6702
I0
sg39
F0.88323391021913267
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a\x1c\n\xf4\xb0'
tRp6703
sa(dp6704
S'trial_loop.thisTrialN'
p6705
I21
sg6371
g6460
sS'block_loop.thisIndex'
p6706
g6365
sg38
S'right'
p6707
sg59
g63
sS'trial_loop.thisN'
p6708
I21
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p6709
g60
(g99
S'\x15\x00\x00\x00'
tRp6710
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6711
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6712
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6713
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p6714
Nsg70
Vn
sS'block_loop.thisTrialN'
p6715
I0
sg39
F1.3499416119666421
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a"\t\xa0\xd8'
tRp6716
sa(dp6717
S'trial_loop.thisTrialN'
p6718
I22
sg6371
S'20-fruit_pastilles.png'
p6719
sS'block_loop.thisIndex'
p6720
g6365
sg38
S'left'
p6721
sg59
g63
sS'trial_loop.thisN'
p6722
I22
sg33
S'20-fruit_pastilles.png'
p6723
sg64
g65
sS'trial_loop.thisIndex'
p6724
g60
(g99
S'\x16\x00\x00\x00'
tRp6725
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6726
I0
sg6380
S'2-steamed_puddings.png'
p6727
sS'block_loop.thisRepN'
p6728
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6729
I2
sg6385
S'2-steamed_puddings.png'
p6730
sg55
g11
sS'block_loop.thisTrial'
p6731
Nsg70
Vn
sS'block_loop.thisTrialN'
p6732
I0
sg39
F0.63323191453673644
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a)\x00*\xf8'
tRp6733
sa(dp6734
S'trial_loop.thisTrialN'
p6735
I23
sg6371
S'46-pistachios.png'
p6736
sS'block_loop.thisIndex'
p6737
g6365
sg38
S'left'
p6738
sg59
g63
sS'trial_loop.thisN'
p6739
I23
sg33
S'29-beans.png'
p6740
sg64
g65
sS'trial_loop.thisIndex'
p6741
g60
(g99
S'\x17\x00\x00\x00'
tRp6742
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6743
I0
sg6380
S'29-beans.png'
p6744
sS'block_loop.thisRepN'
p6745
I2
sg6383
S'46-pistachios.png'
p6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6747
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p6748
Nsg70
Vn
sS'block_loop.thisTrialN'
p6749
I0
sg39
F0.96652381365129258
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a.\nH\xd0'
tRp6750
sa(dp6751
S'trial_loop.thisTrialN'
p6752
I24
sg6371
S'5-pineapple.png'
p6753
sS'block_loop.thisIndex'
p6754
g6365
sg38
S'left'
p6755
sg59
g63
sS'trial_loop.thisN'
p6756
I24
sg33
S'5-pineapple.png'
p6757
sg64
g65
sS'trial_loop.thisIndex'
p6758
g60
(g99
S'\x18\x00\x00\x00'
tRp6759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6760
I0
sg6380
S'40-sardines.png'
p6761
sS'block_loop.thisRepN'
p6762
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6763
I2
sg6385
S'40-sardines.png'
p6764
sg55
g11
sS'block_loop.thisTrial'
p6765
Nsg70
Vn
sS'block_loop.thisTrialN'
p6766
I0
sg39
F1.0332435465279559
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a4\n`@'
tRp6767
sa(dp6768
S'trial_loop.thisTrialN'
p6769
I25
sg6371
S'44-crunch.png'
p6770
sS'block_loop.thisIndex'
p6771
g6365
sg38
S'left'
p6772
sg59
g63
sS'trial_loop.thisN'
p6773
I25
sg33
S'44-crunch.png'
p6774
sg64
g65
sS'trial_loop.thisIndex'
p6775
g60
(g99
S'\x19\x00\x00\x00'
tRp6776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6777
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6778
sS'block_loop.thisRepN'
p6779
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6780
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6781
sg55
g11
sS'block_loop.thisTrial'
p6782
Nsg70
Vn
sS'block_loop.thisTrialN'
p6783
I0
sg39
F1.0832804952042352
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1a:\x0bi\xe0'
tRp6784
sa(dp6785
S'trial_loop.thisTrialN'
p6786
I26
sg6371
g6676
sS'block_loop.thisIndex'
p6787
g6365
sg38
S'left'
p6788
sg59
g63
sS'trial_loop.thisN'
p6789
I26
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p6790
g60
(g99
S'\x1a\x00\x00\x00'
tRp6791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6792
I0
sg6380
g6684
sS'block_loop.thisRepN'
p6793
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6794
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p6795
Nsg70
Vn
sS'block_loop.thisTrialN'
p6796
I0
sg39
F0.74991047928415355
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b\x04\r+\x18'
tRp6797
sa(dp6798
S'trial_loop.thisTrialN'
p6799
I27
sg6371
g6575
sS'block_loop.thisIndex'
p6800
g6365
sg38
S'right'
p6801
sg59
g63
sS'trial_loop.thisN'
p6802
I27
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6803
g60
(g99
S'\x1b\x00\x00\x00'
tRp6804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6805
I0
sg6380
g6582
sS'block_loop.thisRepN'
p6806
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6807
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p6808
Nsg70
Vn
sS'block_loop.thisTrialN'
p6809
I0
sg39
F0.64993237479575328
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b\n\t\xee\xf8'
tRp6810
sa(dp6811
S'trial_loop.thisTrialN'
p6812
I28
sg6371
S'13-mccoys_steak_crisps.png'
p6813
sS'block_loop.thisIndex'
p6814
g6365
sg38
S'right'
p6815
sg59
g63
sS'trial_loop.thisN'
p6816
I28
sg33
S'3-ellas_strawberries_apples.png'
p6817
sg64
g65
sS'trial_loop.thisIndex'
p6818
g60
(g99
S'\x1c\x00\x00\x00'
tRp6819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6820
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6821
sS'block_loop.thisRepN'
p6822
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6823
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6824
sg55
g11
sS'block_loop.thisTrial'
p6825
Nsg70
Vn
sS'block_loop.thisTrialN'
p6826
I0
sg39
F0.69990061489806976
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b\x10\x05\x05('
tRp6827
sa(dp6828
S'trial_loop.thisTrialN'
p6829
I29
sg6371
g6558
sS'block_loop.thisIndex'
p6830
g6365
sg38
S'left'
p6831
sg59
g63
sS'trial_loop.thisN'
p6832
I29
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p6833
g60
(g99
S'\x1d\x00\x00\x00'
tRp6834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6835
I0
sg6380
g6566
sS'block_loop.thisRepN'
p6836
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6837
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p6838
Nsg70
Vn
sS'block_loop.thisTrialN'
p6839
I0
sg39
F0.93327313968256931
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b\x16\x01\x11p'
tRp6840
sa(dp6841
S'trial_loop.thisTrialN'
p6842
I30
sg6371
S'25-kitkat.png'
p6843
sS'block_loop.thisIndex'
p6844
g6365
sg38
S'left'
p6845
sg59
g63
sS'trial_loop.thisN'
p6846
I30
sg33
S'25-kitkat.png'
p6847
sg64
g65
sS'trial_loop.thisIndex'
p6848
g60
(g99
S'\x1e\x00\x00\x00'
tRp6849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6850
I0
sg6380
S'31-hobnobs.png'
p6851
sS'block_loop.thisRepN'
p6852
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6853
I2
sg6385
S'31-hobnobs.png'
p6854
sg55
g11
sS'block_loop.thisTrial'
p6855
Nsg70
Vn
sS'block_loop.thisTrialN'
p6856
I0
sg39
F0.78322187908997876
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b\x1c\x00qH'
tRp6857
sa(dp6858
S'trial_loop.thisTrialN'
p6859
I31
sg6371
g6558
sS'block_loop.thisIndex'
p6860
g6365
sg38
S'left'
p6861
sg59
g63
sS'trial_loop.thisN'
p6862
I31
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p6863
g60
(g99
S'\x1f\x00\x00\x00'
tRp6864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6865
I0
sg6380
g6566
sS'block_loop.thisRepN'
p6866
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6867
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p6868
Nsg70
Vn
sS'block_loop.thisTrialN'
p6869
I0
sg39
F1.1165873334430216
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b!\x0c\xf0\x80'
tRp6870
sa(dp6871
S'trial_loop.thisTrialN'
p6872
I32
sg6371
S'31-hobnobs.png'
p6873
sS'block_loop.thisIndex'
p6874
g6365
sg38
S'right'
p6875
sg59
g63
sS'trial_loop.thisN'
p6876
I32
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p6877
g60
(g99
S' \x00\x00\x00'
tRp6878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6879
I0
sg6380
S'25-kitkat.png'
p6880
sS'block_loop.thisRepN'
p6881
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6882
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p6883
Nsg70
Vn
sS'block_loop.thisTrialN'
p6884
I0
sg39
F1.266653134021908
sg34
g753
(S"\x07\xdf\x07\x01\x0f\x1b'\x0f.\xb8"
tRp6885
sa(dp6886
S'trial_loop.thisTrialN'
p6887
I33
sg6371
S'42-mrkipling_lemon_slices.png'
p6888
sS'block_loop.thisIndex'
p6889
g6365
sg38
S'left'
p6890
sg59
g63
sS'trial_loop.thisN'
p6891
I33
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6892
g60
(g99
S'!\x00\x00\x00'
tRp6893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6894
I0
sg6380
S'16-skips_prawn.png'
p6895
sS'block_loop.thisRepN'
p6896
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6897
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6898
Nsg70
Vn
sS'block_loop.thisTrialN'
p6899
I0
sg39
F0.73307003598893061
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b.\x04\x88('
tRp6900
sa(dp6901
S'trial_loop.thisTrialN'
p6902
I34
sg6371
g6543
sS'block_loop.thisIndex'
p6903
g6365
sg38
S'left'
p6904
sg59
g63
sS'trial_loop.thisN'
p6905
I34
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6906
g60
(g99
S'"\x00\x00\x00'
tRp6907
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6908
I0
sg6380
g6550
sS'block_loop.thisRepN'
p6909
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6910
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6911
Nsg70
Vn
sS'block_loop.thisTrialN'
p6912
I0
sg39
F0.83323544974700781
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b4\x01\r\x88'
tRp6913
sa(dp6914
S'trial_loop.thisTrialN'
p6915
I35
sg6371
g6843
sS'block_loop.thisIndex'
p6916
g6365
sg38
S'left'
p6917
sg59
g63
sS'trial_loop.thisN'
p6918
I35
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p6919
g60
(g99
S'#\x00\x00\x00'
tRp6920
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6921
I0
sg6380
g6851
sS'block_loop.thisRepN'
p6922
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6923
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p6924
Nsg70
Vn
sS'block_loop.thisTrialN'
p6925
I0
sg39
F0.69997673601756105
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1b9\x0eDX'
tRp6926
sa(dp6927
S'trial_loop.thisTrialN'
p6928
I36
sg6371
S'2-steamed_puddings.png'
p6929
sS'block_loop.thisIndex'
p6930
g6365
sg38
S'right'
p6931
sg59
g63
sS'trial_loop.thisN'
p6932
I36
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p6933
g60
(g99
S'$\x00\x00\x00'
tRp6934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6935
I0
sg6380
S'20-fruit_pastilles.png'
p6936
sS'block_loop.thisRepN'
p6937
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6938
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p6939
Nsg70
Vn
sS'block_loop.thisTrialN'
p6940
I0
sg39
F0.66653305081854342
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c\x03\n\x12 '
tRp6941
sa(dp6942
S'trial_loop.thisTrialN'
p6943
I37
sg6371
g6477
sS'block_loop.thisIndex'
p6944
g6365
sg38
S'right'
p6945
sg59
g63
sS'trial_loop.thisN'
p6946
I37
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6947
g60
(g99
S'%\x00\x00\x00'
tRp6948
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6949
I0
sg6380
g6485
sS'block_loop.thisRepN'
p6950
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6951
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p6952
Nsg70
Vn
sS'block_loop.thisTrialN'
p6953
I0
sg39
F0.88332713720592437
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c\t\x05\xa5P'
tRp6954
sa(dp6955
S'trial_loop.thisTrialN'
p6956
I38
sg6371
g6409
sS'block_loop.thisIndex'
p6957
g6365
sg38
S'right'
p6958
sg59
g63
sS'trial_loop.thisN'
p6959
I38
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6960
g60
(g99
S'&\x00\x00\x00'
tRp6961
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6962
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6963
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6964
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6965
Nsg70
Vn
sS'block_loop.thisTrialN'
p6966
I0
sg39
F0.76641963890506304
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c\x0f\x04M\x90'
tRp6967
sa(dp6968
S'trial_loop.thisTrialN'
p6969
I39
sg6371
S'40-sardines.png'
p6970
sS'block_loop.thisIndex'
p6971
g6365
sg38
S'right'
p6972
sg59
g63
sS'trial_loop.thisN'
p6973
I39
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p6974
g60
(g99
S"'\x00\x00\x00"
tRp6975
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6976
I0
sg6380
S'5-pineapple.png'
p6977
sS'block_loop.thisRepN'
p6978
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6979
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p6980
Nsg70
Vn
sS'block_loop.thisTrialN'
p6981
I0
sg39
F0.70004601479013218
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c\x15\x01L\x08'
tRp6982
sa(dp6983
S'trial_loop.thisTrialN'
p6984
I40
sg6371
g6888
sS'block_loop.thisIndex'
p6985
g6365
sg38
S'left'
p6986
sg59
g63
sS'trial_loop.thisN'
p6987
I40
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6988
g60
(g99
S'(\x00\x00\x00'
tRp6989
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6990
I0
sg6380
g6895
sS'block_loop.thisRepN'
p6991
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6992
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6993
Nsg70
Vn
sS'block_loop.thisTrialN'
p6994
I0
sg39
F1.0831470694211021
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c\x1a\x0c\\\x10'
tRp6995
sa(dp6996
S'trial_loop.thisTrialN'
p6997
I41
sg6371
S'10-bounty_redo.png'
p6998
sS'block_loop.thisIndex'
p6999
g6365
sg38
S'right'
p7000
sg59
g63
sS'trial_loop.thisN'
p7001
I41
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p7002
g60
(g99
S')\x00\x00\x00'
tRp7003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7004
I0
sg6380
S'4-corn.png'
p7005
sS'block_loop.thisRepN'
p7006
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7007
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p7008
Nsg70
Vn
sS'block_loop.thisTrialN'
p7009
I0
sg39
F0.79990608877778868
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c \x0e!0'
tRp7010
sa(dp7011
S'trial_loop.thisTrialN'
p7012
I42
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7013
sS'block_loop.thisIndex'
p7014
g6365
sg38
S'right'
p7015
sg59
g63
sS'trial_loop.thisN'
p7016
I42
sg33
S'36-fig_rolls.png'
p7017
sg64
g65
sS'trial_loop.thisIndex'
p7018
g60
(g99
S'*\x00\x00\x00'
tRp7019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7020
I0
sg6380
S'36-fig_rolls.png'
p7021
sS'block_loop.thisRepN'
p7022
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7023
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p7024
sg55
g11
sS'block_loop.thisTrial'
p7025
Nsg70
Vn
sS'block_loop.thisTrialN'
p7026
I0
sg39
F0.74991247497018776
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c&\x0b\x98\xc0'
tRp7027
sa(dp7028
S'trial_loop.thisTrialN'
p7029
I43
sg6371
g6603
sS'block_loop.thisIndex'
p7030
g6365
sg38
S'left'
p7031
sg59
g63
sS'trial_loop.thisN'
p7032
I43
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p7033
g60
(g99
S'+\x00\x00\x00'
tRp7034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7035
I0
sg6380
g6610
sS'block_loop.thisRepN'
p7036
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7037
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7038
Nsg70
Vn
sS'block_loop.thisTrialN'
p7039
I0
sg39
F0.96657570145544014
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c,\x08\\\xa0'
tRp7040
sa(dp7041
S'trial_loop.thisTrialN'
p7042
I44
sg6371
S'19-caramello_redo.png'
p7043
sS'block_loop.thisIndex'
p7044
g6365
sg38
S'left'
p7045
sg59
g63
sS'trial_loop.thisN'
p7046
I44
sg33
S'19-caramello_redo.png'
p7047
sg64
g65
sS'trial_loop.thisIndex'
p7048
g60
(g99
S',\x00\x00\x00'
tRp7049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7050
I0
sg6380
S'30-spaghetti_hoops.png'
p7051
sS'block_loop.thisRepN'
p7052
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7053
I2
sg6385
S'30-spaghetti_hoops.png'
p7054
sg55
g11
sS'block_loop.thisTrial'
p7055
Nsg70
Vn
sS'block_loop.thisTrialN'
p7056
I0
sg39
F1.1832474808761617
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c2\x08t\x10'
tRp7057
sa(dp7058
S'trial_loop.thisTrialN'
p7059
I45
sg6371
g6603
sS'block_loop.thisIndex'
p7060
g6365
sg38
S'left'
p7061
sg59
g63
sS'trial_loop.thisN'
p7062
I45
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p7063
g60
(g99
S'-\x00\x00\x00'
tRp7064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7065
I0
sg6380
g6610
sS'block_loop.thisRepN'
p7066
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7067
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7068
Nsg70
Vn
sS'block_loop.thisTrialN'
p7069
I0
sg39
F0.74987683774088509
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1c8\x0b\xa0\x90'
tRp7070
sa(dp7071
S'trial_loop.thisTrialN'
p7072
I46
sg6371
g6753
sS'block_loop.thisIndex'
p7073
g6365
sg38
S'left'
p7074
sg59
g63
sS'trial_loop.thisN'
p7075
I46
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p7076
g60
(g99
S'.\x00\x00\x00'
tRp7077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7078
I0
sg6380
g6761
sS'block_loop.thisRepN'
p7079
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7080
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p7081
Nsg70
Vn
sS'block_loop.thisTrialN'
p7082
I0
sg39
F1.0665640694642207
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d\x02\x08dp'
tRp7083
sa(dp7084
S'trial_loop.thisTrialN'
p7085
I47
sg6371
S'49-yorkie.png'
p7086
sS'block_loop.thisIndex'
p7087
g6365
sg38
S'right'
p7088
sg59
g63
sS'trial_loop.thisN'
p7089
I47
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p7090
g60
(g99
S'/\x00\x00\x00'
tRp7091
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7092
I0
sg6380
S'35-raisins.png'
p7093
sS'block_loop.thisRepN'
p7094
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7095
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p7096
Nsg70
Vn
sS'block_loop.thisTrialN'
p7097
I0
sg39
F0.81659543022396974
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d\x08\t\xeb\x10'
tRp7098
sa(dp7099
S'trial_loop.thisTrialN'
p7100
I48
sg6371
S'29-beans.png'
p7101
sS'block_loop.thisIndex'
p7102
g6365
sg38
S'right'
p7103
sg59
g63
sS'trial_loop.thisN'
p7104
I48
sg33
g6746
sg64
g65
sS'trial_loop.thisIndex'
p7105
g60
(g99
S'0\x00\x00\x00'
tRp7106
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7107
I0
sg6380
S'46-pistachios.png'
p7108
sS'block_loop.thisRepN'
p7109
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7110
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p7111
Nsg70
Vn
sS'block_loop.thisTrialN'
p7112
I0
sg39
F0.76651343609046307
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d\x0e\x07\xa1 '
tRp7113
sa(dp7114
S'trial_loop.thisTrialN'
p7115
I49
sg6371
g6719
sS'block_loop.thisIndex'
p7116
g6365
sg38
S'left'
p7117
sg59
g63
sS'trial_loop.thisN'
p7118
I49
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7119
g60
(g99
S'1\x00\x00\x00'
tRp7120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7121
I0
sg6380
g6727
sS'block_loop.thisRepN'
p7122
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7123
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7124
Nsg70
Vn
sS'block_loop.thisTrialN'
p7125
I0
sg39
F0.98332206246777787
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d\x14\x04\x9f\x98'
tRp7126
sa(dp7127
S'trial_loop.thisTrialN'
p7128
I50
sg6371
g6661
sS'block_loop.thisIndex'
p7129
g6365
sg38
S'right'
p7130
sg59
g63
sS'trial_loop.thisN'
p7131
I50
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7132
g60
(g99
S'2\x00\x00\x00'
tRp7133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7134
I0
sg6380
g6668
sS'block_loop.thisRepN'
p7135
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7136
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7137
Nsg70
Vn
sS'block_loop.thisTrialN'
p7138
I0
sg39
F0.58329161401707097
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d\x1a\x04\xb7\x08'
tRp7139
sa(dp7140
S'trial_loop.thisTrialN'
p7141
I51
sg6371
S'48-twix.png'
p7142
sS'block_loop.thisIndex'
p7143
g6365
sg38
S'left'
p7144
sg59
g63
sS'trial_loop.thisN'
p7145
I51
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7146
g60
(g99
S'3\x00\x00\x00'
tRp7147
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7148
I0
sg6380
S'50-polo.png'
p7149
sS'block_loop.thisRepN'
p7150
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7151
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7152
Nsg70
Vn
sS'block_loop.thisTrialN'
p7153
I0
sg39
F0.96656201675796183
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d\x1f\x0e\x1dH'
tRp7154
sa(dp7155
S'trial_loop.thisTrialN'
p7156
I52
sg6371
g6477
sS'block_loop.thisIndex'
p7157
g6365
sg38
S'right'
p7158
sg59
g63
sS'trial_loop.thisN'
p7159
I52
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7160
g60
(g99
S'4\x00\x00\x00'
tRp7161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7162
I0
sg6380
g6485
sS'block_loop.thisRepN'
p7163
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7164
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7165
Nsg70
Vn
sS'block_loop.thisTrialN'
p7166
I0
sg39
F0.93327827144094044
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d%\x0e4\xb8'
tRp7167
sa(dp7168
S'trial_loop.thisTrialN'
p7169
I53
sg6371
g6460
sS'block_loop.thisIndex'
p7170
g6365
sg38
S'right'
p7171
sg59
g63
sS'trial_loop.thisN'
p7172
I53
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p7173
g60
(g99
S'5\x00\x00\x00'
tRp7174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7175
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7176
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7177
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7178
Nsg70
Vn
sS'block_loop.thisTrialN'
p7179
I0
sg39
F0.73326333231307217
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d+\r\x94\x90'
tRp7180
sa(dp7181
S'trial_loop.thisTrialN'
p7182
I54
sg6371
g7086
sS'block_loop.thisIndex'
p7183
g6365
sg38
S'right'
p7184
sg59
g63
sS'trial_loop.thisN'
p7185
I54
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p7186
g60
(g99
S'6\x00\x00\x00'
tRp7187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7188
I0
sg6380
g7093
sS'block_loop.thisRepN'
p7189
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7190
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p7191
Nsg70
Vn
sS'block_loop.thisTrialN'
p7192
I0
sg39
F0.73324394566225237
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d1\n\x19\xf0'
tRp7193
sa(dp7194
S'trial_loop.thisTrialN'
p7195
I55
sg6371
g6770
sS'block_loop.thisIndex'
p7196
g6365
sg38
S'left'
p7197
sg59
g63
sS'trial_loop.thisN'
p7198
I55
sg33
g6774
sg64
g65
sS'trial_loop.thisIndex'
p7199
g60
(g99
S'7\x00\x00\x00'
tRp7200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7201
I0
sg6380
g6778
sS'block_loop.thisRepN'
p7202
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7203
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p7204
Nsg70
Vn
sS'block_loop.thisTrialN'
p7205
I0
sg39
F0.84990711512728012
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1d7\x06\x9fP'
tRp7206
sa(dp7207
S'trial_loop.thisTrialN'
p7208
I56
sg6371
g6719
sS'block_loop.thisIndex'
p7209
g6365
sg38
S'left'
p7210
sg59
g63
sS'trial_loop.thisN'
p7211
I56
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7212
g60
(g99
S'8\x00\x00\x00'
tRp7213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7214
I0
sg6380
g6727
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7216
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vn
sS'block_loop.thisTrialN'
p7218
I0
sg39
F0.63310989266756224
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e\x01\x04\xcex'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
S'38-maltesers.png'
p7222
sS'block_loop.thisIndex'
p7223
g6365
sg38
S'left'
p7224
sg59
g63
sS'trial_loop.thisN'
p7225
I57
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7226
g60
(g99
S'9\x00\x00\x00'
tRp7227
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7228
I0
sg6380
S'6-sour_patch_kids.png'
p7229
sS'block_loop.thisRepN'
p7230
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7231
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7232
Nsg70
Vn
sS'block_loop.thisTrialN'
p7233
I0
sg39
F0.76633781583223026
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e\x06\x0e\xecP'
tRp7234
sa(dp7235
S'trial_loop.thisTrialN'
p7236
I58
sg6371
S'36-fig_rolls.png'
p7237
sS'block_loop.thisIndex'
p7238
g6365
sg38
S'left'
p7239
sg59
g63
sS'trial_loop.thisN'
p7240
I58
sg33
g7024
sg64
g65
sS'trial_loop.thisIndex'
p7241
g60
(g99
S':\x00\x00\x00'
tRp7242
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7243
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7244
sS'block_loop.thisRepN'
p7245
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7246
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7247
Nsg70
Vn
sS'block_loop.thisTrialN'
p7248
I0
sg39
F1.033245257112867
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e\x0c\x0b\xea\xc8'
tRp7249
sa(dp7250
S'trial_loop.thisTrialN'
p7251
I59
sg6371
g6813
sS'block_loop.thisIndex'
p7252
g6365
sg38
S'right'
p7253
sg59
g63
sS'trial_loop.thisN'
p7254
I59
sg33
g6824
sg64
g65
sS'trial_loop.thisIndex'
p7255
g60
(g99
S';\x00\x00\x00'
tRp7256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7257
I0
sg6380
g6821
sS'block_loop.thisRepN'
p7258
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vn
sS'block_loop.thisTrialN'
p7261
I0
sg39
F0.68330250475628418
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e\x12\x0c\xf8P'
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
g7237
sS'block_loop.thisIndex'
p7265
g6365
sg38
S'left'
p7266
sg59
g63
sS'trial_loop.thisN'
p7267
I60
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p7268
g60
(g99
S'<\x00\x00\x00'
tRp7269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7270
I0
sg6380
g7244
sS'block_loop.thisRepN'
p7271
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vn
sS'block_loop.thisTrialN'
p7274
I0
sg39
F0.71667805157630937
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e\x18\x08\x87\x98'
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
g7142
sS'block_loop.thisIndex'
p7278
g6365
sg38
S'left'
p7279
sg59
g63
sS'trial_loop.thisN'
p7280
I61
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7281
g60
(g99
S'=\x00\x00\x00'
tRp7282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7283
I0
sg6380
g7149
sS'block_loop.thisRepN'
p7284
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vn
sS'block_loop.thisTrialN'
p7287
I0
sg39
F1.0665104710715241
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e\x1e\x04\xd2`'
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6929
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'right'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6936
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vn
sS'block_loop.thisTrialN'
p7300
I0
sg39
F1.0499967498835758
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e$\x06U\x18'
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
g6575
sS'block_loop.thisIndex'
p7304
g6365
sg38
S'right'
p7305
sg59
g63
sS'trial_loop.thisN'
p7306
I63
sg33
g6520
sg64
g65
sS'trial_loop.thisIndex'
p7307
g60
(g99
S'?\x00\x00\x00'
tRp7308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7309
I0
sg6380
g6582
sS'block_loop.thisRepN'
p7310
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7311
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7312
Nsg70
Vn
sS'block_loop.thisTrialN'
p7313
I0
sg39
F0.76661635640630266
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e*\x07\x9d8'
tRp7314
sa(dp7315
S'trial_loop.thisTrialN'
p7316
I64
sg6371
S'26-walkers_smoky_bacon.png'
p7317
sS'block_loop.thisIndex'
p7318
g6365
sg38
S'right'
p7319
sg59
g63
sS'trial_loop.thisN'
p7320
I64
sg33
g6781
sg64
g65
sS'trial_loop.thisIndex'
p7321
g60
(g99
S'@\x00\x00\x00'
tRp7322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7323
I0
sg6380
S'44-crunch.png'
p7324
sS'block_loop.thisRepN'
p7325
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7326
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p7327
Nsg70
Vn
sS'block_loop.thisTrialN'
p7328
I0
sg39
F0.70002178147115046
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e0\x04\x9f\x98'
tRp7329
sa(dp7330
S'trial_loop.thisTrialN'
p7331
I65
sg6371
g6603
sS'block_loop.thisIndex'
p7332
g6365
sg38
S'left'
p7333
sg59
g63
sS'trial_loop.thisN'
p7334
I65
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7335
g60
(g99
S'A\x00\x00\x00'
tRp7336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7337
I0
sg6380
g6610
sS'block_loop.thisRepN'
p7338
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7339
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7340
Nsg70
Vn
sS'block_loop.thisTrialN'
p7341
I0
sg39
F0.73330923306639306
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e6\x00m`'
tRp7342
sa(dp7343
S'trial_loop.thisTrialN'
p7344
I66
sg6371
g6998
sS'block_loop.thisIndex'
p7345
g6365
sg38
S'right'
p7346
sg59
g63
sS'trial_loop.thisN'
p7347
I66
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p7348
g60
(g99
S'B\x00\x00\x00'
tRp7349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7350
I0
sg6380
g7005
sS'block_loop.thisRepN'
p7351
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7352
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p7353
Nsg70
Vn
sS'block_loop.thisTrialN'
p7354
I0
sg39
F0.76651372118794825
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1e;\x0c5\x00'
tRp7355
sa(dp7356
S'trial_loop.thisTrialN'
p7357
I67
sg6371
g6888
sS'block_loop.thisIndex'
p7358
g6365
sg38
S'left'
p7359
sg59
g63
sS'trial_loop.thisN'
p7360
I67
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7361
g60
(g99
S'C\x00\x00\x00'
tRp7362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7363
I0
sg6380
g6895
sS'block_loop.thisRepN'
p7364
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7365
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7366
Nsg70
Vn
sS'block_loop.thisTrialN'
p7367
I0
sg39
F0.9831053881207481
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f\x05\x08\xf4\xf8'
tRp7368
sa(dp7369
S'trial_loop.thisTrialN'
p7370
I68
sg6371
g7237
sS'block_loop.thisIndex'
p7371
g6365
sg38
S'left'
p7372
sg59
g63
sS'trial_loop.thisN'
p7373
I68
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p7374
g60
(g99
S'D\x00\x00\x00'
tRp7375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7376
I0
sg6380
g7244
sS'block_loop.thisRepN'
p7377
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7378
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7379
Nsg70
Vn
sS'block_loop.thisTrialN'
p7380
I0
sg39
F1.5166636826434114
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f\x0b\tJ\xe8'
tRp7381
sa(dp7382
S'trial_loop.thisTrialN'
p7383
I69
sg6371
g6998
sS'block_loop.thisIndex'
p7384
g6365
sg38
S'right'
p7385
sg59
g63
sS'trial_loop.thisN'
p7386
I69
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p7387
g60
(g99
S'E\x00\x00\x00'
tRp7388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7389
I0
sg6380
g7005
sS'block_loop.thisRepN'
p7390
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7391
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p7392
Nsg70
Vn
sS'block_loop.thisTrialN'
p7393
I0
sg39
F0.81656093338824576
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f\x12\x02t\xe8'
tRp7394
sa(dp7395
S'trial_loop.thisTrialN'
p7396
I70
sg6371
g6813
sS'block_loop.thisIndex'
p7397
g6365
sg38
S'right'
p7398
sg59
g63
sS'trial_loop.thisN'
p7399
I70
sg33
g6817
sg64
g65
sS'trial_loop.thisIndex'
p7400
g60
(g99
S'F\x00\x00\x00'
tRp7401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7402
I0
sg6380
g6821
sS'block_loop.thisRepN'
p7403
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7404
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p7405
Nsg70
Vn
sS'block_loop.thisTrialN'
p7406
I0
sg39
F0.71667006883581053
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f\x18\x00*\xf8'
tRp7407
sa(dp7408
S'trial_loop.thisTrialN'
p7409
I71
sg6371
g6888
sS'block_loop.thisIndex'
p7410
g6365
sg38
S'left'
p7411
sg59
g63
sS'trial_loop.thisN'
p7412
I71
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7413
g60
(g99
S'G\x00\x00\x00'
tRp7414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7415
I0
sg6380
g6895
sS'block_loop.thisRepN'
p7416
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7417
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vn
sS'block_loop.thisTrialN'
p7419
I0
sg39
F0.66658636411375483
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f\x1d\x0b\xb4\x18'
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
S'8-liquorice_catherine_wheels.png'
p7423
sS'block_loop.thisIndex'
p7424
g6365
sg38
S'right'
p7425
sg59
g63
sS'trial_loop.thisN'
p7426
I72
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p7427
g60
(g99
S'H\x00\x00\x00'
tRp7428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7429
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p7430
sS'block_loop.thisRepN'
p7431
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7432
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p7433
Nsg70
Vn
sS'block_loop.thisTrialN'
p7434
I0
sg39
F1.2999528448199271
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f#\x07\x0c\xb0'
tRp7435
sa(dp7436
S'trial_loop.thisTrialN'
p7437
I73
sg6371
g6526
sS'block_loop.thisIndex'
p7438
g6365
sg38
S'right'
p7439
sg59
g63
sS'trial_loop.thisN'
p7440
I73
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7441
g60
(g99
S'I\x00\x00\x00'
tRp7442
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7443
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7444
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7445
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7446
Nsg70
Vn
sS'block_loop.thisTrialN'
p7447
I0
sg39
F0.7832084794936236
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f)\x0c!x'
tRp7448
sa(dp7449
S'trial_loop.thisTrialN'
p7450
I74
sg6371
g6998
sS'block_loop.thisIndex'
p7451
g6365
sg38
S'right'
p7452
sg59
g63
sS'trial_loop.thisN'
p7453
I74
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p7454
g60
(g99
S'J\x00\x00\x00'
tRp7455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7456
I0
sg6380
g7005
sS'block_loop.thisRepN'
p7457
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7458
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p7459
Nsg70
Vn
sS'block_loop.thisTrialN'
p7460
I0
sg39
F0.70003147480019834
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f/\t^p'
tRp7461
sa(dp7462
S'trial_loop.thisTrialN'
p7463
I75
sg6371
g7222
sS'block_loop.thisIndex'
p7464
g6365
sg38
S'left'
p7465
sg59
g63
sS'trial_loop.thisN'
p7466
I75
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7467
g60
(g99
S'K\x00\x00\x00'
tRp7468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7469
I0
sg6380
g7229
sS'block_loop.thisRepN'
p7470
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7471
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7472
Nsg70
Vn
sS'block_loop.thisTrialN'
p7473
I0
sg39
F0.63304574565336225
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f5\x05,8'
tRp7474
sa(dp7475
S'trial_loop.thisTrialN'
p7476
I76
sg6371
g6843
sS'block_loop.thisIndex'
p7477
g6365
sg38
S'left'
p7478
sg59
g63
sS'trial_loop.thisN'
p7479
I76
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p7480
g60
(g99
S'L\x00\x00\x00'
tRp7481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7482
I0
sg6380
g6851
sS'block_loop.thisRepN'
p7483
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7484
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p7485
Nsg70
Vn
sS'block_loop.thisTrialN'
p7486
I0
sg39
F1.2833199527449324
sg34
g753
(S'\x07\xdf\x07\x01\x0f\x1f;\x00FP'
tRp7487
sa(dp7488
S'trial_loop.thisTrialN'
p7489
I77
sg6371
g6661
sS'block_loop.thisIndex'
p7490
g6365
sg38
S'right'
p7491
sg59
g63
sS'trial_loop.thisN'
p7492
I77
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7493
g60
(g99
S'M\x00\x00\x00'
tRp7494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7495
I0
sg6380
g6668
sS'block_loop.thisRepN'
p7496
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7497
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7498
Nsg70
Vn
sS'block_loop.thisTrialN'
p7499
I0
sg39
F0.63318972005799878
sg34
g753
(S'\x07\xdf\x07\x01\x0f \x05\x05 \x80'
tRp7500
sa(dp7501
S'trial_loop.thisTrialN'
p7502
I78
sg6371
g6929
sS'block_loop.thisIndex'
p7503
g6365
sg38
S'right'
p7504
sg59
g63
sS'trial_loop.thisN'
p7505
I78
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7506
g60
(g99
S'N\x00\x00\x00'
tRp7507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7508
I0
sg6380
g6936
sS'block_loop.thisRepN'
p7509
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7510
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7511
Nsg70
Vn
sS'block_loop.thisTrialN'
p7512
I0
sg39
F1.0165390948932327
sg34
g753
(S'\x07\xdf\x07\x01\x0f \n\x0f:p'
tRp7513
sa(dp7514
S'trial_loop.thisTrialN'
p7515
I79
sg6371
g7222
sS'block_loop.thisIndex'
p7516
g6365
sg38
S'left'
p7517
sg59
g63
sS'trial_loop.thisN'
p7518
I79
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7519
g60
(g99
S'O\x00\x00\x00'
tRp7520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7521
I0
sg6380
g7229
sS'block_loop.thisRepN'
p7522
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7523
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7524
Nsg70
Vn
sS'block_loop.thisTrialN'
p7525
I0
sg39
F0.69945643249229761
sg34
g753
(S'\x07\xdf\x07\x01\x0f \x11\x00\xc78'
tRp7526
sa(dp7527
S'trial_loop.thisTrialN'
p7528
I80
sg6371
g6526
sS'block_loop.thisIndex'
p7529
g6365
sg38
S'right'
p7530
sg59
g63
sS'trial_loop.thisN'
p7531
I80
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7532
g60
(g99
S'P\x00\x00\x00'
tRp7533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7534
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7535
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7536
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7537
Nsg70
Vn
sS'block_loop.thisTrialN'
p7538
I0
sg39
F0.80002240868634544
sg34
g753
(S'\x07\xdf\x07\x01\x0f \x16\x0b\xd7@'
tRp7539
sa(dp7540
S'trial_loop.thisTrialN'
p7541
I81
sg6371
g6460
sS'block_loop.thisIndex'
p7542
g6365
sg38
S'right'
p7543
sg59
g63
sS'trial_loop.thisN'
p7544
I81
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p7545
g60
(g99
S'Q\x00\x00\x00'
tRp7546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7547
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7548
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7549
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7550
Nsg70
Vn
sS'block_loop.thisTrialN'
p7551
I0
sg39
F1.0999162382577197
sg34
g753
(S'\x07\xdf\x07\x01\x0f \x1c\tR\xb8'
tRp7552
sa(dp7553
S'trial_loop.thisTrialN'
p7554
I82
sg6371
g7423
sS'block_loop.thisIndex'
p7555
g6365
sg38
S'right'
p7556
sg59
g63
sS'trial_loop.thisN'
p7557
I82
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p7558
g60
(g99
S'R\x00\x00\x00'
tRp7559
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7560
I0
sg6380
g7430
sS'block_loop.thisRepN'
p7561
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7562
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vn
sS'block_loop.thisTrialN'
p7564
I0
sg39
F1.4665135501272744
sg34
g753
(S'\x07\xdf\x07\x01\x0f "\x0bRp'
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
g7101
sS'block_loop.thisIndex'
p7568
g6365
sg38
S'right'
p7569
sg59
g63
sS'trial_loop.thisN'
p7570
I83
sg33
g6746
sg64
g65
sS'trial_loop.thisIndex'
p7571
g60
(g99
S'S\x00\x00\x00'
tRp7572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7573
I0
sg6380
g7108
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7575
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vn
sS'block_loop.thisTrialN'
p7577
I0
sg39
F0.78323014692796278
sg34
g753
(S'\x07\xdf\x07\x01\x0f )\x03\xc4\xd8'
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g6843
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'left'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6854
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g6851
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7588
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vn
sS'block_loop.thisTrialN'
p7590
I0
sg39
F1.0165847105454304
sg34
g753
(S'\x07\xdf\x07\x01\x0f /\x01\x01\xd0'
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
g7086
sS'block_loop.thisIndex'
p7594
g6365
sg38
S'right'
p7595
sg59
g63
sS'trial_loop.thisN'
p7596
I85
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p7597
g60
(g99
S'U\x00\x00\x00'
tRp7598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7599
I0
sg6380
g7093
sS'block_loop.thisRepN'
p7600
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7601
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p7602
Nsg70
Vn
sS'block_loop.thisTrialN'
p7603
I0
sg39
F0.68340285918748123
sg34
g753
(S'\x07\xdf\x07\x01\x0f 5\x01\xcc\xf0'
tRp7604
sa(dp7605
S'trial_loop.thisTrialN'
p7606
I86
sg6371
S'30-spaghetti_hoops.png'
p7607
sS'block_loop.thisIndex'
p7608
g6365
sg38
S'right'
p7609
sg59
g63
sS'trial_loop.thisN'
p7610
I86
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p7611
g60
(g99
S'V\x00\x00\x00'
tRp7612
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7613
I0
sg6380
S'19-caramello_redo.png'
p7614
sS'block_loop.thisRepN'
p7615
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7616
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p7617
Nsg70
Vn
sS'block_loop.thisTrialN'
p7618
I0
sg39
F1.0498841362459643
sg34
g753
(S'\x07\xdf\x07\x01\x0f :\x0c\xa2`'
tRp7619
sa(dp7620
S'trial_loop.thisTrialN'
p7621
I87
sg6371
g6494
sS'block_loop.thisIndex'
p7622
g6365
sg38
S'right'
p7623
sg59
g63
sS'trial_loop.thisN'
p7624
I87
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7625
g60
(g99
S'W\x00\x00\x00'
tRp7626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7627
I0
sg6380
g6501
sS'block_loop.thisRepN'
p7628
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7629
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7630
Nsg70
Vn
sS'block_loop.thisTrialN'
p7631
I0
sg39
F0.79981343198232935
sg34
g753
(S'\x07\xdf\x07\x01\x0f!\x04\r\xea\x80'
tRp7632
sa(dp7633
S'trial_loop.thisTrialN'
p7634
I88
sg6371
g6813
sS'block_loop.thisIndex'
p7635
g6365
sg38
S'right'
p7636
sg59
g63
sS'trial_loop.thisN'
p7637
I88
sg33
g6817
sg64
g65
sS'trial_loop.thisIndex'
p7638
g60
(g99
S'X\x00\x00\x00'
tRp7639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7640
I0
sg6380
g6821
sS'block_loop.thisRepN'
p7641
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7642
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p7643
Nsg70
Vn
sS'block_loop.thisTrialN'
p7644
I0
sg39
F0.66651337907023844
sg34
g753
(S'\x07\xdf\x07\x01\x0f!\n\x0bb\x10'
tRp7645
sa(dp7646
S'trial_loop.thisTrialN'
p7647
I89
sg6371
g6998
sS'block_loop.thisIndex'
p7648
g6365
sg38
S'right'
p7649
sg59
g63
sS'trial_loop.thisN'
p7650
I89
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p7651
g60
(g99
S'Y\x00\x00\x00'
tRp7652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7653
I0
sg6380
g7005
sS'block_loop.thisRepN'
p7654
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vn
sS'block_loop.thisTrialN'
p7657
I0
sg39
F0.7832481080913567
sg34
g753
(S'\x07\xdf\x07\x01\x0f!\x10\x06\xb6\xc0'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g7222
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'left'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g7229
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vn
sS'block_loop.thisTrialN'
p7670
I0
sg39
F0.74972687628542189
sg34
g753
(S'\x07\xdf\x07\x01\x0f!\x16\x03\xf3\xb8'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g7607
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'right'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g7614
sS'block_loop.thisRepN'
p7680
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vn
sS'block_loop.thisTrialN'
p7683
I0
sg39
F0.98335256793507142
sg34
g753
(S'\x07\xdf\x07\x01\x0f!\x1c\x00\xb7\x98'
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g7237
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'left'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g7244
sS'block_loop.thisRepN'
p7693
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vn
sS'block_loop.thisTrialN'
p7696
I0
sg39
F0.69996704269215115
sg34
g753
(S'\x07\xdf\x07\x01\x0f!"\x00\xcf\x08'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g7317
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'right'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6774
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g7324
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vn
sS'block_loop.thisTrialN'
p7709
I0
sg39
F0.68323978323678602
sg34
g753
(S"\x07\xdf\x07\x01\x0f!'\x0c\x1d\x90"
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
g6736
sS'block_loop.thisIndex'
p7713
g6365
sg38
S'left'
p7714
sg59
g63
sS'trial_loop.thisN'
p7715
I94
sg33
g6740
sg64
g65
sS'trial_loop.thisIndex'
p7716
g60
(g99
S'^\x00\x00\x00'
tRp7717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7718
I0
sg6380
g6744
sS'block_loop.thisRepN'
p7719
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7720
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p7721
Nsg70
Vn
sS'block_loop.thisTrialN'
p7722
I0
sg39
F0.66668443776507047
sg34
g753
(S'\x07\xdf\x07\x01\x0f!-\x07\xac\xd8'
tRp7723
sa(dp7724
S'trial_loop.thisTrialN'
p7725
I95
sg6371
g6372
sS'block_loop.thisIndex'
p7726
g6365
sg38
S'left'
p7727
sg59
g63
sS'trial_loop.thisN'
p7728
I95
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7729
g60
(g99
S'_\x00\x00\x00'
tRp7730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7731
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7732
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7733
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7734
Nsg70
Vn
sS'block_loop.thisTrialN'
p7735
I0
sg39
F0.88334595366177382
sg34
g753
(S'\x07\xdf\x07\x01\x0f!3\x03@\x08'
tRp7736
sa(dp7737
S'trial_loop.thisTrialN'
p7738
I96
sg6371
g7317
sS'block_loop.thisIndex'
p7739
g6365
sg38
S'right'
p7740
sg59
g63
sS'trial_loop.thisN'
p7741
I96
sg33
g6774
sg64
g65
sS'trial_loop.thisIndex'
p7742
g60
(g99
S'`\x00\x00\x00'
tRp7743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7744
I0
sg6380
g7324
sS'block_loop.thisRepN'
p7745
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7746
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p7747
Nsg70
Vn
sS'block_loop.thisTrialN'
p7748
I0
sg39
F0.71657684184538084
sg34
g753
(S'\x07\xdf\x07\x01\x0f!9\x01\xe8H'
tRp7749
sa(dp7750
S'trial_loop.thisTrialN'
p7751
I97
sg6371
g7423
sS'block_loop.thisIndex'
p7752
g6365
sg38
S'right'
p7753
sg59
g63
sS'trial_loop.thisN'
p7754
I97
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p7755
g60
(g99
S'a\x00\x00\x00'
tRp7756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7757
I0
sg6380
g7430
sS'block_loop.thisRepN'
p7758
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7759
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p7760
Nsg70
Vn
sS'block_loop.thisTrialN'
p7761
I0
sg39
F0.81690533155779121
sg34
g753
(S'\x07\xdf\x07\x01\x0f"\x02\ruP'
tRp7762
sa(dp7763
S'trial_loop.thisTrialN'
p7764
I98
sg6371
S'41-peanuts_redo.png'
p7765
sS'block_loop.thisIndex'
p7766
g6365
sg38
S'left'
p7767
sg59
g63
sS'trial_loop.thisN'
p7768
I98
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7769
g60
(g99
S'b\x00\x00\x00'
tRp7770
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7771
I0
sg6380
S'45-chewy_nougat_redo.png'
p7772
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vn
sS'block_loop.thisTrialN'
p7776
I0
sg39
F1.1499186901019129
sg34
g753
(S'\x07\xdf\x07\x01\x0f"\x08\x0b+`'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6409
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'right'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vn
sS'block_loop.thisTrialN'
p7789
I0
sg39
F0.71642631019494729
sg34
g753
(S'\x07\xdf\x07\x01\x0f"\x0e\r\xde\xc8'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g6644
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'left'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g6652
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vn
sS'block_loop.thisTrialN'
p7802
I0
sg39
F0.79990608877778868
sg34
g753
(S'\x07\xdf\x07\x01\x0f"\x14\n)\x90'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
S'3-ellas_strawberries_apples.png'
p7806
sS'block_loop.thisIndex'
p7807
g6365
sg38
S'left'
p7808
sg59
g63
sS'trial_loop.thisN'
p7809
I101
sg33
g6817
sg64
g65
sS'trial_loop.thisIndex'
p7810
g60
(g99
S'e\x00\x00\x00'
tRp7811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7812
I0
sg6380
S'13-mccoys_steak_crisps.png'
p7813
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7815
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vn
sS'block_loop.thisTrialN'
p7817
I0
sg39
F1.016544511752727
sg34
g753
(S'\x07\xdf\x07\x01\x0f"\x1a\x07\xa1 '
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g6753
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'left'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g6761
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7828
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vn
sS'block_loop.thisTrialN'
p7830
I0
sg39
F1.4500086669722805
sg34
g753
(S'\x07\xdf\x07\x01\x0f" \x081\xa8'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g7101
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6746
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g7108
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7841
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vn
sS'block_loop.thisTrialN'
p7843
I0
sg39
F1.0332318575128738
sg34
g753
(S'\x07\xdf\x07\x01\x0f"\'\x00ix'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6526
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'right'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7854
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vn
sS'block_loop.thisTrialN'
p7856
I0
sg39
F0.69995164740612381
sg34
g753
(S'\x07\xdf\x07\x01\x0f"-\x01s\x18'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g7043
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'left'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g7054
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g7051
sS'block_loop.thisRepN'
p7866
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7867
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vn
sS'block_loop.thisTrialN'
p7869
I0
sg39
F0.91656241589589627
sg34
g753
(S'\x07\xdf\x07\x01\x0f"2\x0c\x87\x08'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g7222
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'left'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g7229
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7880
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vn
sS'block_loop.thisTrialN'
p7882
I0
sg39
F0.61632732423458947
sg34
g753
(S'\x07\xdf\x07\x01\x0f"8\x0b\xe6\xe0'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g6543
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'left'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g6550
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7893
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vn
sS'block_loop.thisTrialN'
p7895
I0
sg39
F1.0832240458330489
sg34
g753
(S'\x07\xdf\x07\x01\x0f#\x02\x06\x83\xf8'
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g6873
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g6880
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7906
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vn
sS'block_loop.thisTrialN'
p7908
I0
sg39
F1.0833731519960565
sg34
g753
(S'\x07\xdf\x07\x01\x0f#\x08\x08E0'
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g6603
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'left'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g6610
sS'block_loop.thisRepN'
p7918
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7919
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vn
sS'block_loop.thisTrialN'
p7921
I0
sg39
F0.7832275810505962
sg34
g753
(S'\x07\xdf\x07\x01\x0f#\x0e\n\x06h'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g6929
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'right'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g6936
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vn
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.91662228644054267
sg34
g753
(S'\x07\xdf\x07\x01\x0f#\x14\x07C`'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g6575
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'right'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6520
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g6582
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vn
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.76661692659763503
sg34
g753
(S'\x07\xdf\x07\x01\x0f#\x1a\x06h\xa0'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g6443
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'right'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.9499151548880036
sg34
g753
(S'\x07\xdf\x07\x01\x0f# \x03g\x18'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6509
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'left'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F0.96665210767241661
sg34
g753
(S'\x07\xdf\x07\x01\x0f#&\x03C\xf0'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g7013
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g7024
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g7021
sS'block_loop.thisRepN'
p7983
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.74997690707823494
sg34
g753
(S'\x07\xdf\x07\x01\x0f#,\x03\x1c\xe0'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7317
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'right'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6781
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7324
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.75000427646591561
sg34
g753
(S'\x07\xdf\x07\x01\x0f#1\x0f#\x00'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g7043
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g7051
sS'block_loop.thisRepN'
p8009
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F1.0331862418643141
sg34
g753
(S'\x07\xdf\x07\x01\x0f#7\x0b\xe2\xf8'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6813
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'right'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6817
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6821
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.78327348179664114
sg34
g753
(S'\x07\xdf\x07\x01\x0f$\x01\x0c\xf0\x80'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6575
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'right'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6582
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.766552779590711
sg34
g753
(S'\x07\xdf\x07\x01\x0f$\x07\n)\x90'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g6644
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'left'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g6652
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.1500076406191511
sg34
g753
(S'\x07\xdf\x07\x01\x0f$\r\x06\xedp'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6873
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'right'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6880
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.80002782554947771
sg34
g753
(S'\x07\xdf\x07\x01\x0f$\x13\t\xdfX'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7142
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'left'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7149
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F1.2499791878581163
sg34
g753
(S'\x07\xdf\x07\x01\x0f$\x19\x07Z\xd0'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6509
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F1.2167362115287688
sg34
g753
(S'\x07\xdf\x07\x01\x0f$\x1f\x0b}h'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6409
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.68321497972283396
sg34
g753
(S'\x07\xdf\x07\x01\x0f$&\x00\x1f@'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7806
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'left'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6824
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7813
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F1.0833523398541729
sg34
g753
(S'\x07\xdf\x07\x01\x0f$+\n\xf4\xb0'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6494
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'right'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6501
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.68380627260921756
sg34
g753
(S'\x07\xdf\x07\x01\x0f$1\x0c\xf4h'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g7013
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8139
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.76657159604656044
sg34
g753
(S'\x07\xdf\x07\x01\x0f$7\x08\x83\xb0'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g7765
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g7772
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F1.0499040930917545
sg34
g753
(S'\x07\xdf\x07\x01\x0f%\x01\x05\x86\x10'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g7043
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g7051
sS'block_loop.thisRepN'
p8165
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.0499508491338929
sg34
g753
(S'\x07\xdf\x07\x01\x0f%\x07\x06\xce0'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6753
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6761
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.7832803241435613
sg34
g753
(S'\x07\xdf\x07\x01\x0f%\r\x08\x16P'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6644
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6652
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.8832550074585015
sg34
g753
(S'\x07\xdf\x07\x01\x0f%\x13\x05SH'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7013
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8204
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.65035945133422501
sg34
g753
(S'\x07\xdf\x07\x01\x0f%\x19\x03\xfb\x88'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g7142
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g7149
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F1.3499051194448839
sg34
g753
(S'\x07\xdf\x07\x01\x0f%\x1e\x0eS\xf8'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6543
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6550
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.99977904918705462
sg34
g753
(S'\x07\xdf\x07\x01\x0f%%\x04\xe2\x00'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6929
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6936
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F1.4999395592603832
sg34
g753
(S'\x07\xdf\x07\x01\x0f%+\x05r\x88'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g7086
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g7093
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.69991800586649333
sg34
g753
(S'\x07\xdf\x07\x01\x0f%1\r\xa0H'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6526
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.80002183849137509
sg34
g753
(S'\x07\xdf\x07\x01\x0f%7\tq\xf8'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6392
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.66638479995162925
sg34
g753
(S'\x07\xdf\x07\x01\x0f&\x01\x06\xe9\x88'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6494
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6501
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.68323237068761955
sg34
g753
(S'\x07\xdf\x07\x01\x0f&\x07\x02|\xb8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6558
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6568
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6566
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6568
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6562
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F1.0332865962955111
sg34
g753
(S'\x07\xdf\x07\x01\x0f&\x0c\rN@'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6970
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6977
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.1833036451462249
sg34
g753
(S'\x07\xdf\x07\x01\x0f&\x12\x0e[\xc8'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6676
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6684
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.81644917504308978
sg34
g753
(S'\x07\xdf\x07\x01\x0f&\x19\x02\x84\x88'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6736
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6740
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6744
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.91662798839752213
sg34
g753
(S'\x07\xdf\x07\x01\x0f&\x1f\x00:\x98'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6443
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.79989839113477501
sg34
g753
(S'\x07\xdf\x07\x01\x0f&$\x0e\xa2\x18'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6843
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6851
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.88323362512164749
sg34
g753
(S'\x07\xdf\x07\x01\x0f&*\x0c\x19\xa8'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6543
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6550
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.0499334581654693
sg34
g753
(S'\x07\xdf\x07\x01\x0f&0\n\xc1\xe8'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7142
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7149
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6530
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F1.4665648677364516
sg34
g753
(S'\x07\xdf\x07\x01\x0f&6\x0c\n\x08'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6970
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6977
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.98332462834878243
sg34
g753
(S"\x07\xdf\x07\x01\x0f'\x01\x04\x80X"
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6873
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6880
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.76649148355863872
sg34
g753
(S"\x07\xdf\x07\x01\x0f'\x07\x04\x97\xc8"
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6719
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6727
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.84992079982475843
sg34
g753
(S"\x07\xdf\x07\x01\x0f'\r\x01\x96@"
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g7765
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g7772
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F1.2498517491330858
sg34
g753
(S"\x07\xdf\x07\x01\x0f'\x12\x0f\x07\xa8"
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7607
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7614
sS'block_loop.thisRepN'
p8464
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F1.2165848245858797
sg34
g753
(S"\x07\xdf\x07\x01\x0f'\x19\x04&\x80"
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6676
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6684
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.74990506242465926
sg34
g753
(S"\x07\xdf\x07\x01\x0f'\x1f\x08\x0e\x80"
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6426
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.81659628551642527
sg34
g753
(S"\x07\xdf\x07\x01\x0f'%\x04\x93\xe0"
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6644
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6652
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.96642545489885379
sg34
g753
(S"\x07\xdf\x07\x01\x0f'+\x02I\xf0"
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6873
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6847
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6880
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6847
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6854
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.99990335183611023
sg34
g753
(S"\x07\xdf\x07\x01\x0f'1\x02a`"
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6509
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6520
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.99991390045761364
sg34
g753
(S"\x07\xdf\x07\x01\x0f'7\x02\xf1\xe8"
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g7101
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6746
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g7108
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.73324879232677631
sg34
g753
(S'\x07\xdf\x07\x01\x0f(\x01\x03\x82p'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g7806
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6817
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g7813
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.71669002568160067
sg34
g753
(S'\x07\xdf\x07\x01\x0f(\x06\x0f\x0b\x90'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6736
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6746
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6744
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F1.0165855658415239
sg34
g753
(S'\x07\xdf\x07\x01\x0f(\x0c\x0bVX'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6426
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.69999498227844015
sg34
g753
(S'\x07\xdf\x07\x01\x0f(\x12\x0c%`'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6494
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6501
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.74990477732717409
sg34
g753
(S'\x07\xdf\x07\x01\x0f(\x18\x07\xf3('
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6443
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.75000912313043955
sg34
g753
(S'\x07\xdf\x07\x01\x0f(\x1e\x04\xb3 '
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7806
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6817
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7813
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.71658140340878163
sg34
g753
(S'\x07\xdf\x07\x01\x0f($\x01w\x00'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g7423
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F1.0833221194843645
sg34
g753
(S'\x07\xdf\x07\x01\x0f()\x0c\xc5\x88'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6409
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.7664758031751262
sg34
g753
(S'\x07\xdf\x07\x01\x0f(/\x0e\x86\xc0'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g7086
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g7093
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.83326167874838575
sg34
g753
(S'\x07\xdf\x07\x01\x0f(5\x0b\x858'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6719
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6730
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6727
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.86660928597848397
sg34
g753
(S'\x07\xdf\x07\x01\x0f(;\ty\xc8'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6970
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6977
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.1998578502279997
sg34
g753
(S'\x07\xdf\x07\x01\x0f)\x05\x07\xe7p'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6661
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6668
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.79990865465879324
sg34
g753
(S'\x07\xdf\x07\x01\x0f)\x0b\x0b\x90\xf0'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6970
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6977
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.0666758278093766
sg34
g753
(S'\x07\xdf\x07\x01\x0f)\x11\t\x08\x80'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6770
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6774
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6778
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.93321070325691835
sg34
g753
(S'\x07\xdf\x07\x01\x0f)\x17\n\x8f '
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7607
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7614
sS'block_loop.thisRepN'
p8737
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.84991139159683371
sg34
g753
(S'\x07\xdf\x07\x01\x0f)\x1d\t\xee\xf8'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6661
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6668
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.64992724303738214
sg34
g753
(S'\x07\xdf\x07\x01\x0f)#\x08\x1e '
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g7607
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7614
sS'block_loop.thisRepN'
p8763
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.73323339704438695
sg34
g753
(S'\x07\xdf\x07\x01\x0f))\x03r\xd0'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6443
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F1.2332539240851474
sg34
g753
(S'\x07\xdf\x07\x01\x0f).\x0e\xff\xd8'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6426
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.76668164380680537
sg34
g753
(S'\x07\xdf\x07\x01\x0f)5\x03\xe00'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6888
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6895
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.0664622895383218
sg34
g753
(S'\x07\xdf\x07\x01\x0f);\x00\xde\xa8'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6770
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6774
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6778
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.98339590280374978
sg34
g753
(S'\x07\xdf\x07\x01\x0f*\x05\x02eH'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7013
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8828
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.95001123285328504
sg34
g753
(S'\x07\xdf\x07\x01\x0f*\x0b\x02\xb7P'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6753
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6761
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6757
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6764
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.83327051678134012
sg34
g753
(S'\x07\xdf\x07\x01\x0f*\x11\x02U\xa8'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6736
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6746
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6744
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.76674322493636282
sg34
g753
(S'\x07\xdf\x07\x01\x0f*\x17\x00J8'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6426
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.5502938218160125
sg34
g753
(S'\x07\xdf\x07\x01\x0f*\x1c\x0c\x8a\xf0'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6372
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.84992963785771281
sg34
g753
(S'\x07\xdf\x07\x01\x0f*#\x06.\x08'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6509
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6520
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.93321469462898676
sg34
g753
(S'\x07\xdf\x07\x01\x0f*)\x04]0'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6392
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.68312431861704681
sg34
g753
(S'\x07\xdf\x07\x01\x0f*/\x03\xfb\x88'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6372
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.78316514462494524
sg34
g753
(S'\x07\xdf\x07\x01\x0f*4\x0e\xd0\xf8'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7765
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7772
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F1.2666078034708335
sg34
g753
(S'\x07\xdf\x07\x01\x0f*:\x0c\r\xf0'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g7237
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g7024
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g7244
sS'block_loop.thisRepN'
p8945
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.88339641597485752
sg34
g753
(S'\x07\xdf\x07\x01\x0f+\x05\x01g`'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6460
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6468
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.69994936662624241
sg34
g753
(S'\x07\xdf\x07\x01\x0f+\x0b\x00\x0f\xa0'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7317
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6774
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7324
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F1.283240410448343
sg34
g753
(S'\x07\xdf\x07\x01\x0f+\x10\x0b^('
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7765
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7772
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.86665205065219197
sg34
g753
(S'\x07\xdf\x07\x01\x0f+\x17\x00\xbb\x80'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6392
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.81635993942109053
sg34
g753
(S'\x07\xdf\x07\x01\x0f+\x1c\x0e\xa6\x00'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6477
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6485
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.2167650064111513
sg34
g753
(S'\x07\xdf\x07\x01\x0f+"\x0c\\\x10'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6676
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6684
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F2.4665768418453808
sg34
g753
(S'\x07\xdf\x07\x01\x0f+)\x00\xc3P'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g7101
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6746
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g7108
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6740
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.88324303334957222
sg34
g753
(S'\x07\xdf\x07\x01\x0f+0\x08t\x10'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6770
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6774
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6778
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6774
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6781
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.78325495043827686
sg34
g753
(S'\x07\xdf\x07\x01\x0f+6\x07\x1cP'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g7423
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g7430
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6648
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6655
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F1.0999222253158223
sg34
g753
(S'\x07\xdf\x07\x01\x0f,\x00\x04YH'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7043
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g7047
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7051
sS'block_loop.thisRepN'
p9075
I2
sg6383
g7047
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g7054
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.1999992587479937
sg34
g753
(S'\x07\xdf\x07\x01\x0f,\x06\x06Y\x00'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g7806
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6817
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g7813
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6817
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6824
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.133264130588941
sg34
g753
(S'\x07\xdf\x07\x01\x0f,\x0c\n\x02\x80'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I41
sg56
g57
sg58
Vn
sg42
I559
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I41
sg55
g11
sg56
g57
sg45
F2.4700000000000002
sg42
I559
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g417
sg51
F30.59
sg46
F0.75999999999999979
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I82846032
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x8f\xc2u=\xaeGa?\x8f\xc2\xf5=\xecQ8?\x00\x00\x00\x00\x8f\xc2\xf5=\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x1e\x05?q=\x8a?\x9a\x99\x99?q=\n?\xb8\x1e\x05?\x00\x00\x00\x00\xc3\xf5(?\x00\x00\x00\x00\x00\x00\x00\x00{\x14.?)\\\x0f>\x00\x00\x00\x00\\\x8fB?\x00\x00\x00\x00)\\\x0f?\x00\x00\x00\x00\xcd\xcc\xcc>\x00\x00\x00\x00\x85\xebQ?\xa4p\xbd?\x00\x00\x00\x00\x8f\xc2u>\xf6(\\?\x00\x00\x00\x00333?\x00\x00\x00\x00\xc3\xf5(?R\xb8\x1e?\xcd\xcc\xcc=\xe1z\x14?\xe1z\x14?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'/\xdd,@\xee|\xbf@\x98n\xbe@\xaa\xf1\xae@\xd5x/A\x87\x16\x89@\xbaI\x94@\xdb\xf9\x1e@\xc9v\x16@\xee|\xbf@\xee|\x8f@ff\x1aA\x98n\x9e@\xdd$\x8a@\xaa\xf1\x8e@\xcb\xa1\xc1@B`5@b\x10@@\xaa\xf1\x86@\xaa\xf1\x1eA\x98n\xa6@\xa2E\x08Ab\x10`@!\xb0\xca@\xcb\xa1\x81@\xa2E\x96AB`e@\x08\xac\x16Aw\xbe\x0bAu\x938@\xcb\xa1\xa1@\xaa\xf1&A1\x08\xb0@\xcd\xcc`Aw\xbe\xab@\xee|\x8f@T\xe3\xb5@!\xb0\xc2@\x98n\xae@1\x08\xa8@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xa8A\x00\x00@A\x00\x00\xa0A\x00\x00\x10A\x00\x00\xc0A\x00\x00\x00@\x00\x00\x98A\x00\x00\x90A\x00\x00\xe8A\x00\x00\x14B\x00\x00\x00B\x00\x00pA\x00\x00\x04B\x00\x00\xe0A\x00\x00\xd8A\x00\x00\xc8A\x00\x00\x10B\x00\x00\x00A\x00\x00\x08B\x00\x00\xb0A\x00\x00\xb8A\x00\x00\x80?\x00\x00\x80A\x00\x00\xf0A\x00\x00\x18B\x00\x000A\x00\x00 A\x00\x00\x0cB\x00\x00\x88A\x00\x00\xd0A\x00\x00\x1cB\x00\x00\xe0@\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xa0@\x00\x00`A\x00\x00\xf8A\x00\x00\xc0@\x00\x00PA\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'ff\xa6?\x00\x00\x00@\xcd\xcc\xcc?\x00\x00\xc0?ff\xe6?ff\xa6?\x00\x00\x00@33\xb3?\xcd\xcc\xcc?33\xb3?ff\xa6?\x00\x00\xc0?\x9a\x99\xd9?33\xb3?ff\xe6?\xcd\xcc\xcc?33\xf3?\xcd\xcc\xcc?33\xf3?\xcd\xcc\xcc?\xcd\xcc\x8c?\xcd\xcc\x8c?\x9a\x99\xd9?\x00\x00\x00@\x9a\x99\x99?\x9a\x99\x99?\x00\x00\x80?33\xb3?\x00\x00\x80?\x00\x00\x00@\xcd\xcc\xcc?\x9a\x99\xd9?ff\xa6?ff\xe6?\x9a\x99\xd9?ff\xa6?\x9a\x99\x99?\x00\x00\x00@\xcd\xcc\xcc?ff\xe6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'!\x00\x00\x00\x15\x00\x00\x00\x05\x00\x00\x00\'\x00\x00\x00 \x00\x00\x00"\x00\x00\x00%\x00\x00\x00\x1f\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00\x1a\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00#\x00\x00\x00\x0b\x00\x00\x00\x16\x00\x00\x00\x1c\x00\x00\x00\x07\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00\x0f\x00\x00\x00\x1d\x00\x00\x00\x0e\x00\x00\x00\r\x00\x00\x00\x08\x00\x00\x00\x17\x00\x00\x00$\x00\x00\x00\n\x00\x00\x00\x0c\x00\x00\x00\x12\x00\x00\x00\x1b\x00\x00\x00\x10\x00\x00\x00\t\x00\x00\x00\x18\x00\x00\x00\x1e\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g250
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g187
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g243
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g166
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g271
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g117
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g236
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g229
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g306
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g362
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g327
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g208
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g334
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g299
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g292
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g278
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g355
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g159
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g341
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g257
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g264
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g110
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g215
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g313
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g369
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g180
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g173
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g348
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g222
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g285
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g376
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g152
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g131
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g103
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g138
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g201
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g320
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g145
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g194
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g124
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I82846032
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@\x9a\x99Y@\x9a\x99\x19@33\x93@\x9a\x99\x89@\x00\x00\xb0@\x00\x00\xc0@\x00\x00\x80@ff\xa6@\x9a\x99\x89@\x00\x00\xa0@\xcd\xcc\x9c@\x00\x00\xa0@33\xb3@33\x93@\x00\x00\xc0@33\x93@\xcd\xccl@\xcd\xcc\x9c@ff\xa6@33S@\x00\x00\xc0@\x9a\x99\xb9@ff&@\xcd\xcc\xac@\xcd\xcc\xbc@ff\xa6@333@\x9a\x99Y@\x00\x00\xb0@\x00\x00\xc0@33\xf3?\x9a\x99\xb9@\x00\x00\x90@fff@\x9a\x99\xb9@\x00\x00\xc0@33\xb3@\x9a\x99\x99@\x9a\x99\x89@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xea\xf1\x7f?m\x00P@\xd9\xff\x8f@\xf4\xcc\x0c@\x0egf@CV\x95?v\x81\xa8?)V\x9d@\xa4\xff\x1f@=\xb8\xfb?e$b@RD$@1z\xb7?\xda\xaa\xca?-\x8d\xa8?\xd5\xdf\xdd?$\x00\x88@\x04Y\xad@\xe1U\xd5?"\xde\xbd?\x83Dd@u\xe4\x9d?\xa5\x02\xc0?\xf0\xdc\xa5@<V\xd5?\xb3\xac\x8a?\xe9\x9a\t@\xfc\xffo@\xfeT\x19AH\xaaZ@~\x03\xa0?\xc22\xcb@\xf3\x98\x99?\xb0\xf1\xae?"i\xe6?%\xf0\xee?\xdd\xbc\x9b?\x9f\x12\xb1?\xd9\xcc,@\xa7\xaa\x82@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\xcd\xccl@\x00\x00@@\x9a\x999@\xcd\xccL@333@33S@\x00\x00`@33S@ff\x86@\x9a\x99\x89@33\x83@ff\x86@333@ffF@\x9a\x99y@\xcd\xccL@\xcd\xccl@\x9a\x99y@\xcd\xcc,@ff\x86@\x9a\x99y@fff@\xcd\xccl@ffF@\xcd\xccL@\xcd\xcc,@\xcd\xccL@\x00\x00\x80@ffF@\xcd\xccl@ff\x86@\x00\x00@@33s@333@\x00\x00@@\x9a\x99y@33s@fff@\x9a\x99Y@\x9a\x99\x89@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xa0\xf5M\x0c\xe0G\xdb\x0b\xa0\x99\xd9\x0b\xa0\x9a\xd9\x0b`\x9a\xd9\x0b`\x9b\xd9\x0b`F\xdb\x0b\xa0E\xdb\x0b`M\xdb\x0b\x80\x90\xd9\x0b\x00K\xdb\x0b\x80G\xdb\x0b`H\xdb\x0b\xe0K\xdb\x0b\xe0E\xdb\x0b@L\xdb\x0b\x80F\xdb\x0b\x00M\xdb\x0b\x00L\xdb\x0b L\xdb\x0b\x00\x0c\x16\x03\xa0\xf8M\x0c`\xf8M\x0c`\xf6M\x0c\xc0\xf6M\x0c\x00\xf9M\x0c\xe0\xf8M\x0c`\xf4M\x0c@\xf7M\x0c@\xf5M\x0c@\xf8M\x0c \xf5M\x0c\xe0\x95\xd9\x0b\x00\xf8M\x0c\xa0\xfaM\x0c\x00\xf7M\x0c\x80\xf8M\x0c\xa0\xf7M\x0c\xe0\xf9M\x0c \xf7M\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'd;\x9b@w\xbeKAb\x10`@\x10X\x11A\x10X\x8d@!\xb0\xda@\x91\xed\xac?\xdd$\xc2@b\x100@\xee|7@\xdb\xf9n@\xcb\xa1\x81@\xfe\xd4\x8c@\xcb\xa1\xa9@\xfc\xa99@\xbaI4@D\x8b\xe8@1\x08\xa8@!\xb0\n@\xa8\xc6\x1b@!\xb0\x1a@^\xba\x99?D\x8b\x90@\xbaI\xbc@\x1dZ\xe4?u\x93h@\x0e-b@T\xe3m@\xfc\xa9y@w\xbe\x83@\xf8S\x93?P\x8d\xd7?\xdb\xf9\xce?\x87\x16q@^\xba\xf9?\x1dZ\xc4?\x91\xed\x8c?1\x08\xb0@T\xe3\xad@\x87\x16\x11@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I82846032
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S' \xcf}\x0cH\xcf}\x0c \xcf}\x0cp\xcf}\x0c\x98\xcf}\x0c\x80Ve\x0cH\xcf}\x0c\x80Ve\x0c\xb0Ve\x0c\xc0\xcf}\x0c\x98\xcf}\x0c\xb0Ve\x0c\xc0\xcf}\x0cp\xcf}\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xb0\\\xa4\x04 _\xa4\x04P\\\xa4\x04\x18R\xa4\x04\xb0S\xa4\x048P\xa4\x04(W\xa4\x04\xd0\x1a\xd4\x04(\x17\xd4\x04\xa8\x12\xd4\x048\x19\xd4\x04\xe0\x1f\xd4\x04@\x17\xd4\x04\x10\x14\xd4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g744
sg83
g767
sg84
g749
sg85
g771
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g776
sg83
g777
sg84
g781
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g756
sg83
g809
sg84
g761
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g798
sg83
g818
sg84
g803
sg85
g822
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g827
sg83
g828
sg84
g832
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g787
sg83
g849
sg84
g792
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g827
sg83
g858
sg84
g832
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g838
sg83
g867
sg84
g843
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g776
sg83
g876
sg84
g781
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I82846032
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I82846032
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'8\x8f\x7f\x0cP\x06\x80\x0cX\xee\x7f\x0c\x80\x06\x80\x0c@\xd4L\x0c\xb0\x06\x80\x0c\x80\xd5L\x0cp\x8f\x7f\x0c\x00\x08\x80\x0c\x80\xee\x7f\x0c0\x08\x80\x0c\xd0\x07\x80\x0c@\xd4L\x0cp\x8f\x7f\x0cX\x10\x80\x0c\xa8\x8f\x7f\x0c\xb0\x06\x80\x0c\xa0\xd1L\x0c\x00\xd3L\x0c\xe0\x06\x80\x0cX\xee\x7f\x0c\xf8\xee\x7f\x0c8\x8f\x7f\x0c\xe0\x06\x80\x0cp \x80\x0c \xef\x7f\x0cp\x8f\x7f\x0cX\x10\x80\x0cX\xee\x7f\x0c\xd0\xee\x7f\x0c \xef\x7f\x0c\x00\x08\x80\x0c\xa0\x07\x80\x0c@\x07\x80\x0c\x10\x07\x80\x0cH\xef\x7f\x0c\xf8\xee\x7f\x0c\xd0\xee\x7f\x0c \xef\x7f\x0c8\x8f\x7f\x0c\xa0\xd1L\x0c8\x8f\x7f\x0cX\xee\x7f\x0c\xa8\x8f\x7f\x0c\x80\x06\x80\x0c\x98 \x80\x0c \xd0L\x0c\xa8\x8f\x7f\x0c\x98 \x80\x0c \xef\x7f\x0cP\x06\x80\x0c0\x08\x80\x0c\xb0\x06\x80\x0c@\xd4L\x0c\xe8 \x80\x0c \xd0L\x0c\x80\x06\x80\x0c@\x07\x80\x0c\xb0\x06\x80\x0c \xd0L\x0cP\x06\x80\x0c\xa0\xd1L\x0c\x98\xef\x7f\x0c\xd0\xee\x7f\x0cH\xef\x7f\x0c \xef\x7f\x0cP\x06\x80\x0c@\xd4L\x0cp\xef\x7f\x0c\xc0 \x80\x0c\xf8\xee\x7f\x0c\x98\xef\x7f\x0cH\xef\x7f\x0c\xf8\xee\x7f\x0c\xa0\x07\x80\x0c\xc8\x10\x80\x0c\x80\xee\x7f\x0c \xef\x7f\x0c@\xd4L\x0c\x80\xee\x7f\x0c\xf8\xee\x7f\x0cp\x07\x80\x0c0\x08\x80\x0c\x80\x06\x80\x0c\xb0\x06\x80\x0c\xa0\xd1L\x0cH\xef\x7f\x0c\x98 \x80\x0c \xef\x7f\x0cp\xef\x7f\x0c\xa8\xee\x7f\x0c \xd0L\x0c\x80\xd5L\x0c\xa0\xd1L\x0c \x10\x80\x0c\xa8\x8f\x7f\x0c\xa8\xee\x7f\x0cp\xef\x7f\x0c\xa8\xee\x7f\x0c\xe8 \x80\x0cp\x8f\x7f\x0c\xe0\x06\x80\x0c\xa8\x8f\x7f\x0c \x10\x80\x0c\xb0\x06\x80\x0cX\xee\x7f\x0c \x10\x80\x0c`\x08\x80\x0c\xe0\x06\x80\x0c8\x8f\x7f\x0c\xd0\xee\x7f\x0c \xd0L\x0cp\x8f\x7f\x0c\xd0\xee\x7f\x0c\xd0\x07\x80\x0c@\xd4L\x0cH\xef\x7f\x0c\x80\x06\x80\x0c\x90\x10\x80\x0c\xa8\x8f\x7f\x0c\x80\xee\x7f\x0c\xa8\xee\x7f\x0c\x98\xef\x7f\x0c\xa8\x8f\x7f\x0c\x80\x06\x80\x0cP\x06\x80\x0c \xd0L\x0c\xb0\x06\x80\x0cP\x06\x80\x0c\x98\xef\x7f\x0c \xd0L\x0c\xe0\x06\x80\x0c\xd0\xee\x7f\x0cp\x8f\x7f\x0cH\xef\x7f\x0c  \x80\x0c\x80\x06\x80\x0cp\xef\x7f\x0c\x80\xee\x7f\x0c \x10\x80\x0c\x98\xef\x7f\x0c\xc0 \x80\x0c8\x8f\x7f\x0c \x10\x80\x0cH\xef\x7f\x0c\xa8\xee\x7f\x0c\x80\xee\x7f\x0c\x98\xef\x7f\x0c\x80\xee\x7f\x0c\xa0\xd1L\x0c\xa8\xee\x7f\x0c\x00\x08\x80\x0c@\xd4L\x0c\x10\x07\x80\x0c\xa8\xee\x7f\x0cp\xef\x7f\x0c\x80\xee\x7f\x0c@\xd4L\x0c\xc0\xd0L\x0c8\x8f\x7f\x0c\xa8\x8f\x7f\x0cp\x8f\x7f\x0c \xd0L\x0cX\xee\x7f\x0c \x10\x80\x0cX\xee\x7f\x0cp\xef\x7f\x0c \xef\x7f\x0c\xa8\x8f\x7f\x0c\xe0\x06\x80\x0cp\x07\x80\x0c\xa0\xd1L\x0c\xd0\x07\x80\x0c \x10\x80\x0c\x98\xef\x7f\x0c\xa0\xd1L\x0c \xef\x7f\x0c \xd0L\x0c\x80\xee\x7f\x0c\x10\x07\x80\x0c\xa8\x8f\x7f\x0c\xd0\xee\x7f\x0c\x98\xef\x7f\x0c\xa0\xd1L\x0c\xb0\x06\x80\x0c \x10\x80\x0cp\x07\x80\x0cp\xef\x7f\x0c\xf8\xee\x7f\x0c\x00\x08\x80\x0c\xf8\xee\x7f\x0c\xc8\x10\x80\x0c\xd0\xee\x7f\x0cX\xee\x7f\x0c8\x8f\x7f\x0c\xc0 \x80\x0c\x98\xef\x7f\x0c8\x8f\x7f\x0cP\x06\x80\x0c\xe8 \x80\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'@8e\x0c\xa09e\x0c@<e\x0c 6e\x0c 8e\x0c`;e\x0c\xc00e\x0c\xe09e\x0c\x00=e\x0c\xc0<e\x0c\xa0:e\x0c@;e\x0c =e\x0c\x00<e\x0c\x80<e\x0c ;e\x0c :e\x0c\xe0:e\x0c\x008e\x0c@:e\x0c\x80;e\x0c\x80=e\x0c\xa0;e\x0c\x80>e\x0c@\xfeM\x0c\xa0\xffM\x0c`\xffM\x0c \xf2M\x0c@\xf1M\x0c`\xf0M\x0c\xe0\xf1M\x0c\xa0\xfeM\x0c\x80\xf1M\x0c\xa0\xf1M\x0c\x00\xffM\x0c\xe0\xfeM\x0c \xffM\x0c\x80\xf2M\x0c`\xfeM\x0c\x80\xffM\x0c \xf3M\x0c\xc0\xfeM\x0c\xe0\xffM\x0c`\xfbM\x0c@\xffM\x0c@\xf3M\x0c\x00\xf2M\x0c\xa0\xf2M\x0c\xa0\xf3M\x0c\xc0\xffM\x0c`\xf3M\x0c \xf4M\x0c\x00\xf4M\x0c\x00\xf1M\x0c\x00\xf3M\x0c\x80\xf3M\x0c\xa0/M\x0c\xe0-M\x0c\x80%M\x0c`\x0b\x16\x03\x00/M\x0c\xa0\xe1N\x0c\xc0\xf3M\x0c\x80\xfcM\x0c \xfeM\x0c`\xf1M\x0c\xe0\xf3M\x0c\x80\xfeM\x0c\xe0\xf2M\x0c\xc0\xf2M\x0c@\xf2M\x0c\xc0/M\x0c\xc0\xf1M\x0c\xe0.M\x0c \xc1\xdb\x0b@{\xdc\x0b`\xf2M\x0c\x00{\xdc\x0b@p\xdc\x0b`:e\x0c@>e\x0c\xe0=e\x0c\xe0;e\x0c\x00;e\x0c\x00:e\x0c\xa0=e\x0c@=e\x0c\x00?e\x0c@?e\x0c\xa0<e\x0c\xe0?e\x0c\xa0?e\x0c\xa0>e\x0c\xe0<e\x0c\xc0:e\x0c\x80?e\x0c`p\xdc\x0b\xc0\x9e\x14\x03 \x0b\x16\x03\xa08e\x0c\xc0;e\x0c\xc0=e\x0c <e\x0c\xc0>e\x0c`>e\x0c ?e\x0c@5e\x0c`?e\x0c\xe0>e\x0c`=e\x0c`<e\x0c u\xdc\x0b\x80\x8bN\x0c@\x8bN\x0c\x00\x8cN\x0c@\x8eN\x0c\x80\x8aN\x0c\xc0\x8cN\x0c\x00\x8dN\x0c@\x8dN\x0c \x87N\x0c@\x8cN\x0c\xa0\x86N\x0c`\x87N\x0c\x00\x86N\x0c\xe0\x86N\x0c`\x85N\x0c@\x86N\x0c\x00\x8bN\x0c\xc0\x89N\x0c\x80\x89N\x0c\xc0\x8eN\x0c\x00\x88N\x0c\xc0\x8bN\x0c\x80\x86N\x0c@\x88N\x0c\x00\x8eN\x0c@\x89N\x0c\x00\x89N\x0c\xc0\x88N\x0c\xc0\x8dN\x0c@\xb5\x14\x03\x80\x8dN\x0c \x80N\x0c\xa0\x80N\x0c\x80\x88N\x0c\xc0\x85N\x0c\xc0\x87N\x0c\xc0\x80N\x0c`\x80N\x0c\x00\x81N\x0c\xc0?e\x0c\x00\x8aN\x0c\xe0\x89N\x0c\x80\x00\xd9\x0b\xa0\x03\xd9\x0b >e\x0c\x80\x80N\x0c\xc0\x8aN\x0c\x00\x8fN\x0c@\x8aN\x0c \x81N\x0c\xe0\x80N\x0c@\x80N\x0c\xe0\x88N\x0c\x80\x8eN\x0c\xe0\x01\xd9\x0b\x80\x8cN\x0c`-M\x0c`\x8fN\x0c \xf2\x1e\x1b\xa0\xf0\x1e\x1b`\xf1\x1e\x1b\x00\xf1\x1e\x1b@\xf0\x1e\x1b\xc0\xf1\x1e\x1b \xf1\x1e\x1b\xa0\xf1\x1e\x1b`\xf2\x1e\x1b\x80\xf2\x1e\x1b\x00\xf2\x1e\x1b`\xf0\x1e\x1b\x00\xf3\x1e\x1b \xf3\x1e\x1b@\xf1\x1e\x1b`\xf3\x1e\x1b\x80\xf3\x1e\x1b@\xf2\x1e\x1b\xa0\xf2\x1e\x1b\xa0\xf3\x1e\x1b\xc07e\x0c@9e\x0c\xa00e\x0c\x807e\x0c`6e\x0c\xe08e\x0c`7e\x0c\x806e\x0c\xa07e\x0c\x009e\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xc1>\xe4?\x91\x0f\x91?b<\x84?#\x96\x99?j\xfd\x9f?|w\xb7?\xd0?\x84?\xf2\x84\xc8?\xa3t\x97?\x1dt\x97?`T\x95?\xb9\x87\x88?\x9ab\xa6?xV\xb5?\xff\r\x91?;\xeb\xae?G\x99\x99?T\xfc\xbf?\xb4Rf?\xe9P\xb5?=\x82H?!a\xa6?M\x84\xe8?\x19\x83H? \xa6\xca?\x91\xdd\x1d@r\xea\xce?K\x85\x88?\x00\x95j?J \x82?0u\x97?7\x00\xe0?\xaad\x06@\xf2W\x86?\xe5u\xd7?\x8d\xdf\xdd?k`f?\x85.\xb3?\xccQ\xd5?\xf6@\xe4?d\xab\xca?"Q\x95?S\xb5L?\x94.\x03@\x83\xcb\x8c?\x04\xea\x9d?\xb8\x96\x99?*H\x95?E\x8fY?\\d\x86?\xe7f\xa6?\x19mw?\xd7\xc6\xac?g\x88\xe8?\xcf\xee\xee?t\xefn?\x86>\xa4?\xba\x81Y?a\xda\x9d?X\x0cQ?\x16\x11\xb1?\x02\xea\xae?\xc4\xea\xce?\xd8\xca\x0c@Z\xbb\xbb?ND\x84?\x9fC4@\x99\xcb\xac?1N\xb5?\xc3/\x93?*e\x86?\xca\xfa\x7f?\xa2\x85\x08@81\x93?\x98\xa0\x8a?dw\xb7?\xc5\xdd\x9d?fc\x86?\xf1\x93\x99?\x05\xe8n?\xa3U\x95?GA\x84?\xafR\x95?\x85\xcdL?\x16\xfb\xff?\xea\x97\t@2A\x84?3f\x86?n\xa6j?Tr\xb7?!\xeen?X\x1eb?v\xb9\x9b?\xce\xc9\xac?\xb9/\xf3?\xcd\xb4\xaa?\xb4.s?\x16\xfb\x7f?\xbedw?l\xc8\xec?\xdc\xc1\xbb?\x1d\xfc\xff?\xb5EU?I0\x93?L\xa7j@\xba\x04@?\xa2\xa7\n@\x87\xdb]?\xecS5@\xf70s?\xd0\xcc\xcc?l\xf9??=c\x86?\x8br\xd7?\xfe\xfa??\x9d\x0f\x91?\xc1\r\x91?\x91\xd7]?\xf4\xfb\xdf?\x93\xf3\x7f?\x08cf?\xe3\x1e\xa2?V\x1f\x82?\xfch7?\x89\xc6L?Nw\xb7?6d&?=\xca\x1c@_\xee\xce?\x8f!\xa2?\x04\xb1Y?kA\xe4?\x10\x93Y?\x9b`f?\x81\xb1{?\xbb\xbc;?%cf?&\xec.@\xd3/s?\x86\x1fB@\xac\x00\x80?\xe6\xe7??\xdc\xe8n?$\xb9+@\xc5c\x86?\xf5\x10\xb1?\x86\xa6j?\xfa`f?r@D?\x1dr\xd7?u\xdd\x1d@\xb3\xf0\x7f?}\x1c\x82?l0\x93?9\x96\xd9?\x90\x11\x91?\xf2\x1cb?\xaf\xda\x9d?\x9d@\x84?;\xd5]?6e\x86?\x1a\xcaL?>@D?\xf8\xd3n?\xadQ\xd5?\xea\x95*?\x93\xda\xbd?\xcfb\x86?\xc4^\xe6?^3\x93?\xceP\x84?R\x85\x88?\x18\xc7L?\xaf\xfb\xbf?\xd3\xdc\x9d?\x0e\x1fb?\x9d\x96Y?q\xfb\x9f?\x9b\x1e\xc2?(\x87\x90@\x94\xabY?\xec\nQ?\xf9\xdb]?T\x18b?\xd0\x1d\xe2?M\x1b\x82?\xdd\x0cQ?\x11\xc6L?\x13\x92Y?\x9e \x82?\xf52\x93?}\x9e\xb9?\xaa\xe0]?\x19O&?\\13?q\xfb\x9f?\x02\xca\x8c?\x82f&?vP\xf5?Mq7?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x98\x19\xd4\x04\xa0\x1a\xd4\x048)\xa3\x04\x80)\xa3\x04\xb0&\xa3\x04\x88!\xa3\x04\x18(\xa3\x04X*\xa3\x04@*\xa3\x04\x00"\xa3\x04 #\xa3\x04\xc0(\xa3\x04\xa8"\xa3\x04`"\xa3\x04\xa0\'\xa3\x04P#\xa3\x04\x98,\xa3\x04\x08)\xa3\x04($\xa3\x04X$\xa3\x04\xe8\'\xa3\x04  \xa3\x04\xc0+\xa3\x04X\'\xa3\x04\xe8DW\x02\xb0,\xa3\x04\x98&\xa3\x04h&\xa3\x04\x80#\xa3\x04\xe0/\xa3\x04\x98 \xa3\x04\xd8"\xa3\x04\xb0 \xa3\x04x%\xa3\x04\xc8,\xa3\x04\x88-\xa3\x04 )\xa3\x04\xf8 \xa3\x04\xb8*\xa3\x04\x88\'\xa3\x04\xb8-\xa3\x040+\xa3\x04\xf0.\xa3\x04\xa8.\xa3\x04\x18%\xa3\x04`+\xa3\x04\x18+\xa3\x04\xd0-\xa3\x04(\'\xa3\x04\xe8-\xa3\x04\xc8#\xa3\x04\xa8%\xa3\x04\x10-\xa3\x04H(\xa3\x04\xf8&\xa3\x04\x90%\xa3\x04\xd8+\xa3\x04\xe0)\xa3\x04h)\xa3\x04\xd8.\xa3\x048/\xa3\x04@$\xa3\x04`%\xa3\x04p*\xa3\x04\xe8!\xa3\x04\x90(\xa3\x04\xa8+\xa3\x04\x98/\xa3\x04\x10*\xa3\x04\x10$\xa3\x04\x18"\xa3\x04H%\xa3\x04\xa0!\xa3\x04x(\xa3\x04h/\xa3\x04X-\xa3\x04\xe0,\xa3\x04\x18.\xa3\x04\xf8#\xa3\x04\x00.\xa3\x04\x00%\xa3\x04\x80&\xa3\x04\x90+\xa3\x04p$\xa3\x04 /\xa3\x04\xf0%\xa3\x04P&\xa3\x04\xa0-\xa3\x04\x80,\xa3\x04`.\xa3\x04\xd0!\xa3\x04p\'\xa3\x04P)\xa3\x04\x88*\xa3\x048 \xa3\x04X!\xa3\x040.\xa3\x04h \xa3\x04\xb8\'\xa3\x04\xf8)\xa3\x04P/\xa3\x04\xb0/\xa3\x04\xc8/\xa3\x04\xc0"\xa3\x04\xd0*\xa3\x04x"\xa3\x04\xf8,\xa3\x04H+\xa3\x04X\x17\xcb\x03 \x1c\xcb\x03\xd0}\xa4\x04\xe0p\xa4\x04\x88t\xa4\x04(w\xa4\x04\x88z\xa4\x04Xz\xa4\x04\x80y\xa4\x04\xc0x\xa4\x04 s\xa4\x04\x10}\xa4\x04P\x7f\xa4\x04\xf8y\xa4\x04\xf0x\xa4\x04@w\xa4\x04\x00u\xa4\x04\x10Q\xa4\x04\x80V\xa4\x04XQ\xa4\x04PV\xa4\x04 V\xa4\x04\x98_\xa4\x048Y\xa4\x04\xa8X\xa4\x04\x80\\\xa4\x040R\xa4\x04\xe0Y\xa4\x04\x18U\xa4\x04\x10]\xa4\x040[\xa4\x04\xd0W\xa4\x04\x00U\xa4\x04\x98&\xc3\x048)\xc3\x04($\xc3\x04\xe0#\xa3\x04(!\xa3\x04 &\xa3\x04\xe8$\xa3\x04\x08,\xa3\x04`(\xa3\x040%\xa3\x04\xd8%\xa3\x04h#\xa3\x048,\xa3\x04\x90"\xa3\x04\x08&\xa3\x04\xc8&\xa3\x04\xd8(\xa3\x04@!\xa3\x04P,\xa3\x04p!\xa3\x04\x98#\xa3\x040(\xa3\x04\xb8!\xa3\x040"\xa3\x04\xf0+\xa3\x04\xf0"\xa3\x04\xe0 \xa3\x04\xa8(\xa3\x04\xc8 \xa3\x04\x10!\xa3\x04\x88$\xa3\x04@\'\xa3\x04\x10\'\xa3\x04\x08#\xa3\x04\xc0%\xa3\x04 ,\xa3\x048&\xa3\x04\x90.\xa3\x04\x80 \xa3\x04(*\xa3\x04\xd0\'\xa3\x04P \xa3\x04\xf0(\xa3\x04\xb8$\xa3\x04p-\xa3\x04x.\xa3\x04\xa0*\xa3\x04\x00+\xa3\x04x+\xa3\x04\xd8R\xa4\x04PS\xa4\x04\x88W\xa4\x04\x08Y\xa4\x04hS\xa4\x04\xd0Q\xa4\x04\x88Q\xa4\x04\x10Z\xa4\x04XT\xa4\x04\xa0Q\xa4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1075
sg895
g1065
sg909
g1069
sg904
g1073
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1018
sg895
g1082
sg909
g1025
sg904
g1089
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g971
sg895
g1097
sg909
g978
sg904
g1104
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1018
sg895
g1082
sg909
g1025
sg904
g1089
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1135
sg895
g1125
sg909
g1129
sg904
g1133
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g988
sg895
g1159
sg909
g995
sg904
g1166
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g900
sg895
g1191
sg909
g910
sg904
g1198
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1292
sg895
g1288
sg909
g1299
sg904
g1296
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1018
sg895
g1082
sg909
g1025
sg904
g1089
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1135
sg895
g1125
sg909
g1129
sg904
g1133
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g937
sg895
g1331
sg909
g944
sg904
g1338
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1135
sg895
g1346
sg909
g1129
sg904
g1353
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1292
sg895
g1361
sg909
g1299
sg904
g1368
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1041
sg895
g1376
sg909
g1035
sg904
g1383
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g920
sg895
g1417
sg909
g927
sg904
g1424
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1436
sg895
g1432
sg909
g1443
sg904
g1440
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1236
sg895
g1449
sg909
g1243
sg904
g1456
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1135
sg895
g1125
sg909
g1129
sg904
g1133
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1292
sg895
g1288
sg909
g1299
sg904
g1296
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g900
sg895
g1191
sg909
g910
sg904
g1198
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g937
sg895
g1331
sg909
g944
sg904
g1338
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1146
sg895
g1542
sg909
g1153
sg904
g1549
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1236
sg895
g1449
sg909
g1243
sg904
g1456
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1587
sg895
g1583
sg909
g1594
sg904
g1591
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1236
sg895
g1449
sg909
g1243
sg904
g1456
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1292
sg895
g1288
sg909
g1299
sg904
g1296
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g920
sg895
g1417
sg909
g927
sg904
g1424
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1075
sg895
g1652
sg909
g1069
sg904
g1659
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g988
sg895
g1159
sg909
g995
sg904
g1166
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1703
sg895
g1693
sg909
g1697
sg904
g1701
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1587
sg895
g1710
sg909
g1594
sg904
g1717
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g954
sg895
g1725
sg909
g961
sg904
g1732
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g988
sg895
g1159
sg909
g995
sg904
g1166
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1587
sg895
g1710
sg909
g1594
sg904
g1717
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g920
sg895
g1417
sg909
g927
sg904
g1424
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1809
sg895
g1805
sg909
g1816
sg904
g1813
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1135
sg895
g1125
sg909
g1129
sg904
g1133
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1436
sg895
g1835
sg909
g1443
sg904
g1842
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1292
sg895
g1361
sg909
g1299
sg904
g1368
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g971
sg895
g1097
sg909
g978
sg904
g1104
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1703
sg895
g1693
sg909
g1697
sg904
g1701
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1436
sg895
g1835
sg909
g1443
sg904
g1842
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1236
sg895
g1449
sg909
g1243
sg904
g1456
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1809
sg895
g1928
sg909
g1816
sg904
g1935
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1436
sg895
g1835
sg909
g1443
sg904
g1842
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1992
sg895
g1982
sg909
g1986
sg904
g1990
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1292
sg895
g1361
sg909
g1299
sg904
g1368
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1052
sg895
g2038
sg909
g1059
sg904
g2045
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g954
sg895
g1725
sg909
g961
sg904
g1732
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1075
sg895
g1652
sg909
g1069
sg904
g1659
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g954
sg895
g1725
sg909
g961
sg904
g1732
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g988
sg895
g1159
sg909
g995
sg904
g1166
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1178
sg895
g2118
sg909
g1185
sg904
g2125
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1436
sg895
g1432
sg909
g1443
sg904
g1440
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1236
sg895
g1449
sg909
g1243
sg904
g1456
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1292
sg895
g1361
sg909
g1299
sg904
g1368
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1703
sg895
g2172
sg909
g1697
sg904
g2179
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1075
sg895
g1065
sg909
g1069
sg904
g1073
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1587
sg895
g1583
sg909
g1594
sg904
g1591
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g971
sg895
g1097
sg909
g978
sg904
g1104
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1178
sg895
g1174
sg909
g1185
sg904
g1182
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1992
sg895
g2239
sg909
g1986
sg904
g2246
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1146
sg895
g1542
sg909
g1153
sg904
g1549
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1075
sg895
g1065
sg909
g1069
sg904
g1073
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1703
sg895
g2172
sg909
g1697
sg904
g2179
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1075
sg895
g1065
sg909
g1069
sg904
g1073
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1703
sg895
g2172
sg909
g1697
sg904
g2179
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1018
sg895
g1082
sg909
g1025
sg904
g1089
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1041
sg895
g1376
sg909
g1035
sg904
g1383
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1992
sg895
g1982
sg909
g1986
sg904
g1990
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g988
sg895
g1159
sg909
g995
sg904
g1166
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1992
sg895
g2239
sg909
g1986
sg904
g2246
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1292
sg895
g1288
sg909
g1299
sg904
g1296
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1041
sg895
g1376
sg909
g1035
sg904
g1383
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g900
sg895
g1191
sg909
g910
sg904
g1198
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1135
sg895
g1346
sg909
g1129
sg904
g1353
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1587
sg895
g1583
sg909
g1594
sg904
g1591
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1135
sg895
g1125
sg909
g1129
sg904
g1133
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g971
sg895
g1097
sg909
g978
sg904
g1104
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1436
sg895
g1432
sg909
g1443
sg904
g1440
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1587
sg895
g1710
sg909
g1594
sg904
g1717
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1146
sg895
g1542
sg909
g1153
sg904
g1549
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1052
sg895
g2038
sg909
g1059
sg904
g2045
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1075
sg895
g1652
sg909
g1069
sg904
g1659
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1809
sg895
g1805
sg909
g1816
sg904
g1813
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g920
sg895
g1417
sg909
g927
sg904
g1424
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1587
sg895
g1710
sg909
g1594
sg904
g1717
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g920
sg895
g1417
sg909
g927
sg904
g1424
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1809
sg895
g1805
sg909
g1816
sg904
g1813
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1587
sg895
g1583
sg909
g1594
sg904
g1591
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1041
sg895
g1376
sg909
g1035
sg904
g1383
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1135
sg895
g1346
sg909
g1129
sg904
g1353
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1436
sg895
g1432
sg909
g1443
sg904
g1440
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g954
sg895
g1725
sg909
g961
sg904
g1732
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1703
sg895
g1693
sg909
g1697
sg904
g1701
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1052
sg895
g2038
sg909
g1059
sg904
g2045
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1992
sg895
g1982
sg909
g1986
sg904
g1990
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1809
sg895
g1928
sg909
g1816
sg904
g1935
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1436
sg895
g1432
sg909
g1443
sg904
g1440
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1992
sg895
g1982
sg909
g1986
sg904
g1990
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1436
sg895
g1835
sg909
g1443
sg904
g1842
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1075
sg895
g1652
sg909
g1069
sg904
g1659
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1052
sg895
g2038
sg909
g1059
sg904
g2045
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1809
sg895
g1928
sg909
g1816
sg904
g1935
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1178
sg895
g2118
sg909
g1185
sg904
g2125
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1075
sg895
g1652
sg909
g1069
sg904
g1659
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1075
sg895
g1065
sg909
g1069
sg904
g1073
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1703
sg895
g2172
sg909
g1697
sg904
g2179
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1052
sg895
g2038
sg909
g1059
sg904
g2045
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g971
sg895
g1097
sg909
g978
sg904
g1104
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1809
sg895
g1928
sg909
g1816
sg904
g1935
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g900
sg895
g1191
sg909
g910
sg904
g1198
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1146
sg895
g1542
sg909
g1153
sg904
g1549
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1018
sg895
g1082
sg909
g1025
sg904
g1089
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1587
sg895
g1583
sg909
g1594
sg904
g1591
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g937
sg895
g1331
sg909
g944
sg904
g1338
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1992
sg895
g2239
sg909
g1986
sg904
g2246
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g937
sg895
g1331
sg909
g944
sg904
g1338
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1703
sg895
g1693
sg909
g1697
sg904
g1701
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1292
sg895
g1361
sg909
g1299
sg904
g1368
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1146
sg895
g1542
sg909
g1153
sg904
g1549
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g954
sg895
g1725
sg909
g961
sg904
g1732
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1178
sg895
g2118
sg909
g1185
sg904
g2125
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1992
sg895
g1982
sg909
g1986
sg904
g1990
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1809
sg895
g1805
sg909
g1816
sg904
g1813
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1178
sg895
g2118
sg909
g1185
sg904
g2125
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1292
sg895
g1288
sg909
g1299
sg904
g1296
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1587
sg895
g1710
sg909
g1594
sg904
g1717
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1135
sg895
g1346
sg909
g1129
sg904
g1353
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1809
sg895
g1805
sg909
g1816
sg904
g1813
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1178
sg895
g2118
sg909
g1185
sg904
g2125
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1992
sg895
g2239
sg909
g1986
sg904
g2246
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1703
sg895
g2172
sg909
g1697
sg904
g2179
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1041
sg895
g1376
sg909
g1035
sg904
g1383
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1992
sg895
g2239
sg909
g1986
sg904
g2246
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1135
sg895
g1346
sg909
g1129
sg904
g1353
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g937
sg895
g1331
sg909
g944
sg904
g1338
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1436
sg895
g1835
sg909
g1443
sg904
g1842
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1809
sg895
g1928
sg909
g1816
sg904
g1935
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g900
sg895
g1191
sg909
g910
sg904
g1198
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1703
sg895
g1693
sg909
g1697
sg904
g1701
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I82846032
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\x10A\xda\x0b(L\xda\x0b\xa0\x18\x1d\x05\x00U,\x1b@T,\x1bpT,\x1b\xa0\x18\x1d\x05\xa0T,\x1b\xc8G\xda\x0b\x88),\x1bpO\xda\x0b0U,\x1b\x10A\xda\x0b\xc0),\x1b\x80\x19\x1d\x05\xf8),\x1bXI\xda\x0b\xc8G\xda\x0b\xf8),\x1b0U,\x1b\xa0T,\x1bXI\xda\x0b\x88),\x1b\xd0T,\x1b@\x18\x1d\x05 \x19\x1d\x05pT,\x1b\xa0\x18\x1d\x050N\xda\x0b\xa0T,\x1b\xd8*,\x1b\xd0T,\x1bpT,\x1b V,\x1b\xd0T,\x1b`U,\x1b\xc0),\x1bpO\xda\x0b O\xda\x0b\x10A\xda\x0b\xc0),\x1b\xf8),\x1b\x10A\xda\x0b\xd0T,\x1b\x10A\xda\x0b0*,\x1b\xc8G\xda\x0bPV,\x1b\xf8),\x1b0U,\x1b\x10A\xda\x0b\xd0T,\x1b\xa0\x18\x1d\x05\xc0),\x1b\x80\x19\x1d\x05(L\xda\x0b\xc0\x18\x1d\x05\xf8),\x1b\x90H\xda\x0b(L\xda\x0b V,\x1b@\x18\x1d\x05\x88),\x1b O\xda\x0b\xc0\x18\x1d\x05\xf8),\x1b\x90H\xda\x0b\xc0\x18\x1d\x05\xc0),\x1b\x90H\xda\x0bpT,\x1b0*,\x1b\xa0\x18\x1d\x05\xd0T,\x1bpO\xda\x0b\x90H\xda\x0b\x10A\xda\x0bPG\xda\x0b O\xda\x0b\x88),\x1b`\x19\x1d\x05\xc0),\x1b\xa0T,\x1b\xa0*,\x1b\xd0T,\x1b`\x19\x1d\x05(L\xda\x0b\xc0@\xda\x0bPG\xda\x0bXI\xda\x0b(L\xda\x0b\xa0T,\x1bXI\xda\x0b0*,\x1b\xa0T,\x1b@T,\x1bpT,\x1bXI\xda\x0b@T,\x1b\x88),\x1b\xf8),\x1b0N\xda\x0bpO\xda\x0b(L\xda\x0bXI\xda\x0b\x80\x19\x1d\x05`\x19\x1d\x05@\x18\x1d\x05`U,\x1b0*,\x1b\xc8G\xda\x0bXI\xda\x0b\x10A\xda\x0b\xa0T,\x1b0*,\x1b\xc8G\xda\x0b0N\xda\x0b\xc8G\xda\x0b\xe0M\xda\x0b\xc0@\xda\x0b\xf8),\x1bpT,\x1b\xd0T,\x1b@\x18\x1d\x05pO\xda\x0b\xc8G\xda\x0b0N\xda\x0b\xc0\x18\x1d\x050*,\x1b\xf8),\x1bPG\xda\x0b O\xda\x0bpO\xda\x0b0N\xda\x0b@T,\x1b0N\xda\x0bXI\xda\x0b O\xda\x0b\x90H\xda\x0b\xc0\x18\x1d\x05h*,\x1b@T,\x1bpO\xda\x0b\xc0),\x1b`\x19\x1d\x05\xa0\x18\x1d\x05(L\xda\x0b\xc0\x18\x1d\x05\xc0),\x1b\xc8G\xda\x0b \x19\x1d\x05PV,\x1b\xa0T,\x1b\x80\x19\x1d\x05\xc0\x18\x1d\x05\xf8),\x1bPG\xda\x0bPV,\x1b\xc0\x18\x1d\x05\xf0U,\x1b\xa0*,\x1b\xa0\x18\x1d\x05\xc0),\x1bpJ\xda\x0b V,\x1b\xa0\x18\x1d\x05XI\xda\x0b@T,\x1b0N\xda\x0b\xd0T,\x1b O\xda\x0b`U,\x1bPG\xda\x0b\x10A\xda\x0bXI\xda\x0b\x90H\xda\x0b\xf0U,\x1b\x90H\xda\x0b(L\xda\x0b\x88),\x1b\xa0\x18\x1d\x05\x10A\xda\x0bPG\xda\x0b\xf0U,\x1b\x00U,\x1b\xa0T,\x1b \x19\x1d\x05 O\xda\x0b@\x18\x1d\x05pO\xda\x0b@T,\x1b\x90U,\x1bpT,\x1b\xd0T,\x1b\x88),\x1b@\x18\x1d\x05\xe0M\xda\x0b(L\xda\x0b O\xda\x0b0*,\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S' \xf7\x1e\x1b\x80\xf7\x1e\x1b\xc0\xf6\x1e\x1b \xf8\x1e\x1b\x80\xf6\x1e\x1b\xe0\xf7\x1e\x1b@\xf8\x1e\x1b\x00\xf8\x1e\x1b\xc0\xf5\x1e\x1b\xe0\xf6\x1e\x1b`\xf6\x1e\x1b\x00\xf9\x1e\x1b\x80\xf5\x1e\x1b\x80\xf8\x1e\x1b\xa0\xf7\x1e\x1b@\xf6\x1e\x1b \xf6\x1e\x1b`\xf5\x1e\x1b\xe0\xf8\x1e\x1b\xc0\xf9\x1e\x1b@\xf7\x1e\x1b\xa0\xf8\x1e\x1b\xc0\xf7\x1e\x1b\xa0\xf5\x1e\x1b`\xfa\x1e\x1b@\xf9\x1e\x1b\xa0\xf6\x1e\x1b\xe0\xf5\x1e\x1b`\xf7\x1e\x1b\xa0\xfa\x1e\x1b\x00\xfb\x1e\x1b\x00\xfa\x1e\x1b`\xf8\x1e\x1b`\xfb\x1e\x1b\xa0\xf9\x1e\x1b\x00\xf6\x1e\x1b\xc0\xf8\x1e\x1b\xe0\xfb\x1e\x1b@\xfa\x1e\x1b \xfb\x1e\x1b\x00\xf7\x1e\x1b`\xfc\x1e\x1b@\xfb\x1e\x1b\x80\xf9\x1e\x1b`\xf9\x1e\x1b\x80\xfa\x1e\x1b \xfd\x1e\x1b \xfc\x1e\x1b\xc0\xfb\x1e\x1b`\xfd\x1e\x1b@\xfc\x1e\x1b\xe0\xf9\x1e\x1b\xe0\xfd\x1e\x1b\x80\xfc\x1e\x1b\x00\xfd\x1e\x1b \xfa\x1e\x1b`\xfe\x1e\x1b\x00\xfc\x1e\x1b\xe0\xfa\x1e\x1b\xa0\xfd\x1e\x1b\xc0\xfc\x1e\x1b\x00\xfe\x1e\x1b \xfe\x1e\x1b\xa0\xfe\x1e\x1b\xc0\xfd\x1e\x1b \xf9\x1e\x1b\xe0\xfc\x1e\x1b\xc0\xfe\x1e\x1b@\xfd\x1e\x1b\x80\xfb\x1e\x1b@\xfe\x1e\x1b\xc0\xff\x1e\x1b\xa0\xfc\x1e\x1b`\xff\x1e\x1b\x00\xff\x1e\x1b \xff\x1e\x1b@\xff\x1e\x1b\xa0\xfb\x1e\x1b\xe0\xfe\x1e\x1b\xa0\xff\x1e\x1b\x80\xfd\x1e\x1b\xe0\xff\x1e\x1b\xa01e\x0c\x80\xfe\x1e\x1b@`F\x1b@bF\x1b``F\x1b\xe07e\x0c aF\x1b\x80aF\x1b@aF\x1b\xe0bF\x1b\xe0aF\x1b`aF\x1b\x80`F\x1b\xc0bF\x1b bF\x1b\x80bF\x1b cF\x1b\x80cF\x1b\xe0cF\x1b\x00dF\x1b\xa0aF\x1b\x00cF\x1b `F\x1b\x00aF\x1b@cF\x1b\x00bF\x1b\xc0`F\x1b\xc0aF\x1b`bF\x1b dF\x1b\x80eF\x1b\xa0`F\x1b\xa0eF\x1b\xa0cF\x1b\xc0cF\x1b`cF\x1b fF\x1b`eF\x1b\x00eF\x1b\x80fF\x1b\x80dF\x1b`dF\x1b\xe0eF\x1b\x00gF\x1b\xe0`F\x1b`gF\x1b\x00fF\x1b\xc0dF\x1b\xc0eF\x1b\xe0gF\x1b\xa0dF\x1b\xa0gF\x1b`fF\x1b\xa0bF\x1b gF\x1b\xa0hF\x1b@eF\x1b@dF\x1b@fF\x1b\xe0fF\x1b\x80hF\x1b\xa0fF\x1b\xe0hF\x1b`1e\x0c\xc0gF\x1b@gF\x1b\xc0fF\x1b`hF\x1b\x00jF\x1b\x80gF\x1b\xa0jF\x1b@jF\x1b`jF\x1b\xc0hF\x1b kF\x1b@iF\x1b eF\x1b\x80jF\x1b\x80kF\x1b\x00hF\x1b\xe0kF\x1b\xe0jF\x1b`iF\x1b\xc0jF\x1b\x00iF\x1b\x00kF\x1b@kF\x1b\x80iF\x1b\xa0kF\x1b jF\x1b mF\x1b\x00lF\x1b`mF\x1b hF\x1b iF\x1b\xa0mF\x1b\xe0mF\x1b\xe0lF\x1b lF\x1b 1e\x0c\x00nF\x1b\xa0iF\x1b\x80mF\x1b\x80nF\x1b\xc0iF\x1b`nF\x1b\xa0nF\x1b\x00oF\x1b\xe0iF\x1b\xe0nF\x1b\x80lF\x1b@lF\x1b\xc0nF\x1b@mF\x1b\xa0lF\x1b\xc0mF\x1b\xc0oF\x1b`oF\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'u?\x84?,\x10Q?\xa6KU?\xb9\xa7\xca?r\xb1\xdb?\xce\xa2H?\xc9\xe6n?\xac_f?Q\tQ?\xe133?\xfdA\xe4?\xe2bf?\x13\xcdL?\x15\xc9\xec?K\x85\xa8?\xee\xf5\x7f?\xcc\xfd??\xe7x7?jk7?\x91\xf6\x7f?\x1a?\xa4?\x1b\x86H?^p7?\xf8\x95\x99?v\x82H?\xed23?E\xb4;?\x98\xf0.?|\x08"?\xe1\xa4*?Q\xeb\xae?\x8aBD?|\xeen?\x84if?Z\xb8\x9b?\xb7+3?\xde\xc9\xac?\x8ab\xe6?qQ\x95?\x02x7?\xb7\xb8\xdb?\x10\x9ej?\xadJU?Bz\x97?\xe6\x1e\x82?\x85A\x84?\x0c\xe0]?\xe7bf?\xfc5D?\xd3S5@\x97p7?{\x18b?\x0b\xd9]?\xf3\xfb\x0f@|\xecn?p`f?\xfag\x86?.\xf9\xbf?st\x97?\xc8\x06@?W\xf4??\x9e\x1d\x82?\x04_&?w@D?\xad\xa6*?\xe5\xabY?\xe2c\x86?\x06\xf8??\x1a\xe9n?\xf4\x07Q?\xe8\xb0{?\xb3\x00\x80?K\xdc]?\xee\xb5;?\xe8\xa7j?P\x87\x88?I0\x93?eR\xb5?\xd1\x84H?-\x93Y?\x8c\xf6\x7f?i\xe8n?FOU?o\xf4\x7f?\xd6(s?\x90\xfe\x9f?\x9crw?%\x12b?\xdd\x81H?1\x99\x99?*\xf5??\x88\xca\x8c?\\\xb6{?\xbb\xa4j?\xa5r7?,\xb8\xfb?\x1dq7?\x81A\x84?#\xb8\x9b?<\xa5*?H\x8cY?\xa7\xd3n?\xbeKU?\xc3bU?\xff\xba{?:NU?\xa4\xa0j?y\xec\x1e@\xc1\xedn?\x1d\xbe;?\xb4.3?@?D?jNU?1iw?\xd5\xad*?\xc4\xa8j?q\x1d3??\x87H?\x1e\xec\x8e?e\x85\x88?\x99\xe4.?:\xa4*?\x8bNU?y`&?c\x9eY?\x93,s?\x14\xf4??h\xf7??\x15\nQ?S\x11b?:\xf6\x7f?\xee\x82H?fx\xb7?yO&?\x87\x17b?d\x9b*?\xa80\x93?\x8d?D?\xbc\x99\x99?l\x18"?\x18\xca\x8c?\xf4q7?,\x87\xe8?\x10\xf0\x8e?\x87\x12Q?]:\x84?\xf3\xb5{?4\xea.?\xb22\xb3?\xfdw7?>s7?V\xa7\x8a?8\xc2L?\n\xfc\xbf? 23?\xd4%3?\x86\xa7\x8a?l\xa9j?\x8d\xa9*?\x19\x15"?\xbaa&?\xe9\xa1j?\x0b\xd5]?\xfa\nQ?\xb9K\x95?\xe1\xa6*?\xa2A\xa4?{\rQ?\x87\xdd??\xb4\xa9\x8a?\x18PU?\xe6\x19b?\x8bow?@?D?\r,3??\x83H?D\xda.?\xa9\x0f\xb1?\x8a\xe8.?\xb4\xf9\x7f?\xfda&?K\'\x17?Kg\x86?/\xd7.?\xda\x1d\xa2?Ap7?\xdar7?Mo7?\x83\xef\xae?\xb2\x85\x88?fc\x86?8IU?\x1c\xb5;?\xfe2\xb3?\xebq7?\x85\xb9{?d_&?\xb4\xc6L?\xd8\xa7\x8a?\xf2\xdc]?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\xc0u\xa4\x04pw\xa4\x04\xd0\x11\xd4\x04x\x18\xd4\x04\x80\x1f\xd4\x04\xc8\x16\xd4\x04\xd0\x17\xd4\x04\x90\x1b\xd4\x04P\x1f\xd4\x04\x88\x1d\xd4\x048\x13\xd4\x04\xf8\x16\xd4\x04\xf0\x15\xd4\x04\xd8\x12\xd4\x04\x08\x16\xd4\x04 \x16\xd4\x04P\x13\xd4\x04\x00\x1e\xd4\x04\xd8\x18\xd4\x04\x98\x16\xd4\x04X\x17\xd4\x04\xb8\x11\xd4\x04x\x15\xd4\x040\x18\xd4\x04\xa0\x14\xd4\x04\xf0\x1b\xd4\x04\x88\x1a\xd4\x04P\x19\xd4\x04x\x1b\xd4\x04\xe8\x1d\xd4\x04\x88\x14\xd4\x04\xe0\x10\xd4\x04\xa8\x1b\xd4\x04\xc0\x15\xd4\x04\x80\x10\xd4\x04\xe8\x14\xd4\x04\x88\x17\xd4\x04h\x16\xd4\x04X\x14\xd4\x04\xc8\x1c\xd4\x04\x88\x11\xd4\x04p\x17\xd4\x04\xb0\x1c\xd4\x04 \x10\xd4\x04\xe8\x1a\xd4\x048\x16\xd4\x04\xa8\x15\xd4\x04\xc8\x1f\xd4\x04H\x1b\xd4\x04\x18\x1e\xd4\x040\x1b\xd4\x04\x18\x12\xd4\x04\x10\x1d\xd4\x04\xf8\x1c\xd4\x04\x90\x18\xd4\x04\x98\x1f\xd4\x04\xc8\x19\xd4\x04h\x10\xd4\x04\xc8\x10\xd4\x04`\x15\xd4\x04\xd8\x15\xd4\x040\x1e\xd4\x04p\x1a\xd4\x04\xe8-\xc3\x04\xd8.\xc3\x04X\'\xc3\x04\xf0%\xc3\x04\x90.\xc3\x04 )\xc3\x04 &\xc3\x04@-\xc3\x04\xb8$\xc3\x04\xf8)\xc3\x04@*\xc3\x04\xe0 \xc3\x04\xb0 \xc3\x04 ,\xc3\x04\xc0(\xc3\x048&\xc3\x04\x88!\xc3\x04\x18"\xc3\x04\x88\'\xc3\x04\x90+\xc3\x04\xa0!\xc3\x04\x18%\xc3\x04\xe0#\xc3\x04\x88*\xc3\x04\x10*\xc3\x040(\xc3\x04\x08)\xc3\x04\xc0%\xc3\x04\xd0$\xc3\x04\x98/\xc3\x04\xf8,\xc3\x04\x00%\xc3\x04x(\xc3\x04\xa0$\xc3\x04\xd0\'\xc3\x04X!\xc3\x04\x80,\xc3\x04\x00"\xc3\x04\xf0+\xc3\x04\x10\'\xc3\x04\xc8)\xc3\x04\xc0"\xc3\x04h,\xc3\x048,\xc3\x04H(\xc3\x04@\'\xc3\x04\x80)\xc3\x04\xb8\'\xc3\x04\x88-\xc3\x04\xe0&\xc3\x04H"\xc3\x04\xd0-\xc3\x04\xf0(\xc3\x04X-\xc3\x04`(\xc3\x04X$\xc3\x04(\'\xc3\x04@!\xc3\x04\xe8*\xc3\x04H.\xc3\x04\x10-\xc3\x04(-\xc3\x04x+\xc3\x04h&\xc3\x04\xc0.\xc3\x04\xb8-\xc3\x04x%\xc3\x04\xf8#\xc3\x04\xa8.\xc3\x04\x98#\xc3\x04\xa8(\xc3\x04H%\xc3\x04\xb0#\xc3\x04h/\xc3\x04\xe0,\xc3\x04\x00.\xc3\x04\x98,\xc3\x04h)\xc3\x04\x80\x13\xd4\x04\xd0\x1d\xd4\x04X\x1d\xd4\x04\xc8\x13\xd4\x04P\x10\xd4\x04\x08\x19\xd4\x04\xa0\x1d\xd4\x04h\x1c\xd4\x04\xb0\x10\xd4\x04\xa0\x17\xd4\x04\xf0\x12\xd4\x04\xb0\x13\xd4\x04\x18\x15\xd4\x04\xc0\x1b\xd4\x04h\x19\xd4\x04`\x1e\xd4\x04\x18\x18\xd4\x048\x1f\xd4\x04X\x1a\xd4\x04\x90\x15\xd4\x04\xd0\x14\xd4\x04 \x1c\xd4\x04\xc0\x18\xd4\x04p\x1d\xd4\x04h\x13\xd4\x04`\x18\xd4\x04x\x1e\xd4\x04P\x16\xd4\x04\xe8\x17\xd4\x04\xa8\x18\xd4\x04\x18\x1b\xd4\x04\xd8\x1b\xd4\x04P\x1c\xd4\x04\xb0\x1f\xd4\x04\x00\x18\xd4\x04\x08\x1c\xd4\x04\xf0\x18\xd4\x04\x10\x17\xd4\x04H\x18\xd4\x04\x90\x12\xd4\x04\xe0\x19\xd4\x04\xf8\x19\xd4\x04H\x1e\xd4\x04\xe0\x16\xd4\x04@\x1a\xd4\x04(\x14\xd4\x04\xf8\x10\xd4\x04H\x15\xd4\x048\x1c\xd4\x04\x10\x1a\xd4\x04\xb0\x19\xd4\x04@\x1d\xd4\x04\x80\x16\xd4\x04\x80\x19\xd4\x04\xb8\x1a\xd4\x04`\x12\xd4\x04 \x1f\xd4\x04\xa0\x11\xd4\x048\x10\xd4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3709
sg3633
g3818
sg3647
g3716
sg3642
g3825
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3775
sg3633
g3914
sg3647
g3782
sg3642
g3921
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3709
sg3633
g3818
sg3647
g3716
sg3642
g3825
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3758
sg3633
g3955
sg3647
g3765
sg3642
g3962
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g4000
sg3633
g3996
sg3647
g4007
sg3642
g4004
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3792
sg3633
g4026
sg3647
g3799
sg3642
g4033
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4071
sg3633
g4067
sg3647
g4078
sg3642
g4075
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g4000
sg3633
g4110
sg3647
g4007
sg3642
g4117
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3726
sg3633
g4125
sg3647
g3733
sg3642
g4132
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g4150
sg3633
g4140
sg3647
g4144
sg3642
g4148
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4000
sg3633
g3996
sg3647
g4007
sg3642
g4004
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3726
sg3633
g4125
sg3647
g3733
sg3642
g4132
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3850
sg3633
g4183
sg3647
g3857
sg3642
g4190
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3698
sg3633
g4198
sg3647
g3692
sg3642
g4205
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4217
sg3633
g4213
sg3647
g4224
sg3642
g4221
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3638
sg3633
g4230
sg3647
g3648
sg3642
g4237
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3850
sg3633
g4183
sg3647
g3857
sg3642
g4190
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3884
sg3633
g4258
sg3647
g3891
sg3642
g4265
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g4000
sg3633
g4110
sg3647
g4007
sg3642
g4117
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3638
sg3633
g4230
sg3647
g3648
sg3642
g4237
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4150
sg3633
g4312
sg3647
g4144
sg3642
g4319
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4350
sg3633
g4340
sg3647
g4344
sg3642
g4348
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3884
sg3633
g4258
sg3647
g3891
sg3642
g4265
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3638
sg3633
g4230
sg3647
g3648
sg3642
g4237
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g4000
sg3633
g3996
sg3647
g4007
sg3642
g4004
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3850
sg3633
g4183
sg3647
g3857
sg3642
g4190
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3873
sg3633
g4435
sg3647
g3867
sg3642
g4442
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g4350
sg3633
g4493
sg3647
g4344
sg3642
g4500
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g4150
sg3633
g4312
sg3647
g4144
sg3642
g4319
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3792
sg3633
g4026
sg3647
g3799
sg3642
g4033
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4217
sg3633
g4213
sg3647
g4224
sg3642
g4221
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g4467
sg3633
g4573
sg3647
g4474
sg3642
g4580
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3884
sg3633
g4258
sg3647
g3891
sg3642
g4265
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g4350
sg3633
g4340
sg3647
g4344
sg3642
g4348
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g4467
sg3633
g4573
sg3647
g4474
sg3642
g4580
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g4350
sg3633
g4340
sg3647
g4344
sg3642
g4348
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3726
sg3633
g4125
sg3647
g3733
sg3642
g4132
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4150
sg3633
g4312
sg3647
g4144
sg3642
g4319
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g4000
sg3633
g4110
sg3647
g4007
sg3642
g4117
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g4350
sg3633
g4340
sg3647
g4344
sg3642
g4348
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g4748
sg3633
g4744
sg3647
g4755
sg3642
g4752
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g4217
sg3633
g4761
sg3647
g4224
sg3642
g4768
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3792
sg3633
g4026
sg3647
g3799
sg3642
g4033
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4748
sg3633
g4789
sg3647
g4755
sg3642
g4796
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3775
sg3633
g3914
sg3647
g3782
sg3642
g3921
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g4000
sg3633
g3996
sg3647
g4007
sg3642
g4004
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4748
sg3633
g4744
sg3647
g4755
sg3642
g4752
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g4748
sg3633
g4789
sg3647
g4755
sg3642
g4796
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3658
sg3633
g4921
sg3647
g3665
sg3642
g4928
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3758
sg3633
g3955
sg3647
g3765
sg3642
g3962
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g4150
sg3633
g4312
sg3647
g4144
sg3642
g4319
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3758
sg3633
g3955
sg3647
g3765
sg3642
g3962
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3901
sg3633
g5014
sg3647
g3908
sg3642
g5021
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3709
sg3633
g3818
sg3647
g3716
sg3642
g3825
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3884
sg3633
g4258
sg3647
g3891
sg3642
g4265
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4071
sg3633
g5068
sg3647
g4078
sg3642
g5075
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3873
sg3633
g4435
sg3647
g3867
sg3642
g4442
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4748
sg3633
g4744
sg3647
g4755
sg3642
g4752
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3873
sg3633
g4435
sg3647
g3867
sg3642
g4442
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3726
sg3633
g4125
sg3647
g3733
sg3642
g4132
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4150
sg3633
g4140
sg3647
g4144
sg3642
g4148
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3775
sg3633
g3914
sg3647
g3782
sg3642
g3921
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3901
sg3633
g5014
sg3647
g3908
sg3642
g5021
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3758
sg3633
g3955
sg3647
g3765
sg3642
g3962
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g4150
sg3633
g4140
sg3647
g4144
sg3642
g4148
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g4071
sg3633
g5068
sg3647
g4078
sg3642
g5075
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3775
sg3633
g3914
sg3647
g3782
sg3642
g3921
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g4217
sg3633
g4213
sg3647
g4224
sg3642
g4221
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g4467
sg3633
g4573
sg3647
g4474
sg3642
g4580
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4000
sg3633
g3996
sg3647
g4007
sg3642
g4004
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3873
sg3633
g4435
sg3647
g3867
sg3642
g4442
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3698
sg3633
g4198
sg3647
g3692
sg3642
g4205
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3775
sg3633
g3914
sg3647
g3782
sg3642
g3921
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4071
sg3633
g4067
sg3647
g4078
sg3642
g4075
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g4467
sg3633
g4573
sg3647
g4474
sg3642
g4580
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4150
sg3633
g4140
sg3647
g4144
sg3642
g4148
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3884
sg3633
g4258
sg3647
g3891
sg3642
g4265
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g4748
sg3633
g4744
sg3647
g4755
sg3642
g4752
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4217
sg3633
g4761
sg3647
g4224
sg3642
g4768
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3698
sg3633
g4198
sg3647
g3692
sg3642
g4205
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4071
sg3633
g5068
sg3647
g4078
sg3642
g5075
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g4071
sg3633
g5068
sg3647
g4078
sg3642
g5075
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3901
sg3633
g5014
sg3647
g3908
sg3642
g5021
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g4217
sg3633
g4761
sg3647
g4224
sg3642
g4768
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g4350
sg3633
g4493
sg3647
g4344
sg3642
g4500
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3709
sg3633
g3818
sg3647
g3716
sg3642
g3825
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3698
sg3633
g4198
sg3647
g3692
sg3642
g4205
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3850
sg3633
g4183
sg3647
g3857
sg3642
g4190
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g4748
sg3633
g4789
sg3647
g4755
sg3642
g4796
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3658
sg3633
g4921
sg3647
g3665
sg3642
g4928
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g4350
sg3633
g4493
sg3647
g4344
sg3642
g4500
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g4748
sg3633
g4789
sg3647
g4755
sg3642
g4796
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4350
sg3633
g4493
sg3647
g4344
sg3642
g4500
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g4467
sg3633
g4573
sg3647
g4474
sg3642
g4580
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4071
sg3633
g4067
sg3647
g4078
sg3642
g4075
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3850
sg3633
g4183
sg3647
g3857
sg3642
g4190
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3658
sg3633
g4921
sg3647
g3665
sg3642
g4928
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g4150
sg3633
g4312
sg3647
g4144
sg3642
g4319
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3901
sg3633
g5014
sg3647
g3908
sg3642
g5021
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4071
sg3633
g5068
sg3647
g4078
sg3642
g5075
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g4000
sg3633
g4110
sg3647
g4007
sg3642
g4117
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4217
sg3633
g4213
sg3647
g4224
sg3642
g4221
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3726
sg3633
g4125
sg3647
g3733
sg3642
g4132
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g4748
sg3633
g4789
sg3647
g4755
sg3642
g4796
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3638
sg3633
g4230
sg3647
g3648
sg3642
g4237
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3901
sg3633
g5014
sg3647
g3908
sg3642
g5021
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g4350
sg3633
g4493
sg3647
g4344
sg3642
g4500
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g4071
sg3633
g4067
sg3647
g4078
sg3642
g4075
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g4350
sg3633
g4340
sg3647
g4344
sg3642
g4348
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3658
sg3633
g4921
sg3647
g3665
sg3642
g4928
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3792
sg3633
g4026
sg3647
g3799
sg3642
g4033
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3638
sg3633
g4230
sg3647
g3648
sg3642
g4237
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4748
sg3633
g4744
sg3647
g4755
sg3642
g4752
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g4071
sg3633
g4067
sg3647
g4078
sg3642
g4075
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3758
sg3633
g3955
sg3647
g3765
sg3642
g3962
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3792
sg3633
g4026
sg3647
g3799
sg3642
g4033
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g4217
sg3633
g4213
sg3647
g4224
sg3642
g4221
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3698
sg3633
g4198
sg3647
g3692
sg3642
g4205
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3709
sg3633
g3818
sg3647
g3716
sg3642
g3825
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g4000
sg3633
g4110
sg3647
g4007
sg3642
g4117
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3873
sg3633
g4435
sg3647
g3867
sg3642
g4442
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g4217
sg3633
g4761
sg3647
g4224
sg3642
g4768
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3658
sg3633
g4921
sg3647
g3665
sg3642
g4928
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4217
sg3633
g4761
sg3647
g4224
sg3642
g4768
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4150
sg3633
g4140
sg3647
g4144
sg3642
g4148
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I82846032
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\x90{g\x1b /h\x1b\xe0qh\x1b\x18rh\x1bH/h\x1b\xc0rh\x1bp/h\x1b\x90{g\x1b\xc0{g\x1b@ah\x1bH/h\x1b\x10\x81h\x1b\xc0{g\x1b\x10\x81h\x1b\xc0rh\x1b /h\x1bp/h\x1bPrh\x1b\x18rh\x1b\x98/h\x1b\x90{g\x1b ah\x1b\xf0{g\x1b`\x81h\x1b \x80h\x1bH\x80h\x1b8\x81h\x1b\xc0{g\x1b\x88rh\x1b`ah\x1bp\x80h\x1b`ah\x1bp\x80h\x1b\xe0qh\x1bH/h\x1bp\x80h\x1b\xf0{g\x1bp/h\x1b\xe0qh\x1b \x80h\x1b\xe8\x80h\x1b`ah\x1b\x98\x80h\x1b ah\x1b |g\x1b ah\x1b \x80h\x1b\x98/h\x1b\xc0/h\x1b\xf0{g\x1b\x18rh\x1b@ah\x1bp/h\x1b ah\x1b\x98/h\x1bH\x80h\x1b\xf0{g\x1b /h\x1b0sh\x1bp}g\x1b\x98\x80h\x1b@ah\x1b\xf0{g\x1b\xe0|g\x1b@}g\x1b\xc0rh\x1b`ah\x1b\xe0qh\x1b\x98\x80h\x1b`ah\x1b\x88rh\x1b\xe8\x80h\x1bPrh\x1b@ah\x1b`ah\x1b /h\x1bp\x80h\x1b\x18rh\x1b\xf0{g\x1b /h\x1b@ah\x1b ah\x1bPrh\x1b\xc0/h\x1b\xb0\x81h\x1b\x98/h\x1b |g\x1b\x90{g\x1b\x88rh\x1b`ah\x1b /h\x1b |g\x1b\x98\x80h\x1bH\x80h\x1b`\x81h\x1b\x90{g\x1bH\x80h\x1bPrh\x1bp/h\x1b\xe0qh\x1bPrh\x1b\x88rh\x1b \x80h\x1b\xc0/h\x1b@ah\x1b\xa0}g\x1b /h\x1bH/h\x1bp\x80h\x1b ah\x1b\xf0{g\x1b\xe0|g\x1bH/h\x1b\xc0{g\x1b0sh\x1b@}g\x1b |g\x1b\x88rh\x1b\xc0{g\x1bPrh\x1bp\x80h\x1b@ah\x1b\xc0{g\x1b\xe0qh\x1bp}g\x1b\x90{g\x1b\x98\x80h\x1bp/h\x1b |g\x1b \x80h\x1bPrh\x1b\x98\x80h\x1b@ah\x1bH/h\x1b\xf0{g\x1b\x98/h\x1b@ah\x1b /h\x1b\x90{g\x1b`ah\x1b \x80h\x1b\x98/h\x1b`\x81h\x1bH/h\x1bp\x80h\x1bH/h\x1b@ah\x1b \x80h\x1bp\x80h\x1b\xf0{g\x1bp/h\x1b |g\x1b\x98/h\x1b\x18rh\x1bPrh\x1bp\x80h\x1b\xe0|g\x1b\xc0/h\x1b\x88rh\x1b\xc0/h\x1b\x18rh\x1bP|g\x1bH/h\x1b\x88rh\x1bPrh\x1b\xe0qh\x1b\x98/h\x1b\x10}g\x1b \x80h\x1b\x80ah\x1b \x80h\x1bH\x80h\x1b |g\x1b\x80ah\x1b |g\x1bH/h\x1b\x18rh\x1b\xe0qh\x1bH\x80h\x1b\x98\x80h\x1b \x80h\x1b\xc0/h\x1b\x18rh\x1b\x90{g\x1b\xc0{g\x1b\x80|g\x1bP|g\x1bp/h\x1b0sh\x1b ah\x1bH\x80h\x1bp/h\x1b /h\x1bp/h\x1b\x98/h\x1b\xc0/h\x1bH\x80h\x1bPrh\x1b |g\x1b\x88rh\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@dh\x1b\x80ch\x1b\xe0bh\x1b\xa0bh\x1b\xc0bh\x1b\x80dh\x1b`bh\x1b\x80bh\x1b\xe0ch\x1b\xa0ch\x1b@bh\x1b\xc0dh\x1b eh\x1b bh\x1b ch\x1b@eh\x1b\x00ch\x1b\x80eh\x1b\xa0eh\x1b\xc0eh\x1b\xe0eh\x1b\xe0dh\x1b fh\x1b\x00fh\x1b\xc0ch\x1b@fh\x1b\xe0fh\x1b\xa0fh\x1b`dh\x1b\xc0fh\x1b\x00dh\x1b\x00gh\x1b gh\x1b\x80gh\x1b\xa0gh\x1b\xc0gh\x1b\xe0gh\x1b\x00hh\x1b\xa0dh\x1b`eh\x1b hh\x1b\x80hh\x1b`hh\x1b\xc0hh\x1b\xe0hh\x1b`gh\x1b\x00eh\x1b\x00ih\x1b ih\x1b\x80ih\x1b`ih\x1b\xc0ih\x1b\xa0ih\x1b\x00jh\x1b jh\x1b@ch\x1b\xc0lF\x1b@jh\x1b`fh\x1b\xe0jh\x1b@hh\x1b\xe0ah\x1b\xa0jh\x1b`jh\x1b dh\x1b\x80jh\x1b\xa0kh\x1b\x00kh\x1b@lh\x1b`kh\x1b\xe0ih\x1b\xa0lh\x1b lh\x1b`lh\x1b\xa0hh\x1b mh\x1b@gh\x1b\x80mh\x1b\xc0kh\x1b nF\x1b kh\x1b\x00nh\x1b@ih\x1b\xc0lh\x1b@mh\x1b\x80fh\x1b\x00mh\x1b\xe0nh\x1b\xa0nh\x1b\x00oh\x1b\xa0mh\x1b\x80lh\x1b\xe0mh\x1b@nh\x1b@kh\x1b\xe0lh\x1b\xc0mh\x1b\x80kh\x1b\x00lh\x1b`oh\x1b\x80oh\x1b oh\x1b\xc0jh\x1b`mh\x1b\xe0kh\x1b nh\x1b`nh\x1b\xc0nh\x1b`ch\x1b@oh\x1b\xe0oh\x1b\xc0\xfa\x1e\x1b \xd2\x8e\x1b\xa0\xd0\x8e\x1b`\xd1\x8e\x1b\x00\xd1\x8e\x1b@\xd0\x8e\x1b\xc0\xd1\x8e\x1b \xd1\x8e\x1b\xa0\xd2\x8e\x1b@\xd2\x8e\x1b \xd0\x8e\x1b`\xd2\x8e\x1b\xe0\xd2\x8e\x1b\x00\xd3\x8e\x1b\x80\xd1\x8e\x1b\x80\xd0\x8e\x1b \xd3\x8e\x1b\x80\xd3\x8e\x1b\xa0\xd3\x8e\x1b\xe0\xd0\x8e\x1b`\xd0\x8e\x1b\xc0\xd3\x8e\x1b\xa0oF\x1b@\xd3\x8e\x1b\xe0\xd1\x8e\x1b\xa0\xd4\x8e\x1b\xc0\xd4\x8e\x1b\xa0\xd1\x8e\x1b\x00\xd5\x8e\x1b \xd5\x8e\x1b\xe0\xd4\x8e\x1b@\xd5\x8e\x1b\x00\xd2\x8e\x1b`\xd3\x8e\x1b \xd6\x8e\x1b`\xd5\x8e\x1b\xc0\xd5\x8e\x1b`\xd4\x8e\x1b\x00\xd4\x8e\x1b`\xd6\x8e\x1b\xc0\xd2\x8e\x1b\x00\xd6\x8e\x1b\xc0\xd0\x8e\x1b\xc0oh\x1b\xe0\xd6\x8e\x1b\xe0\xd5\x8e\x1b\xa0\xd6\x8e\x1b@\xd1\x8e\x1b\x80\xd6\x8e\x1b@\xd7\x8e\x1b@\xd6\x8e\x1b\xc0\xd7\x8e\x1b\xa0\xd5\x8e\x1b`\xd8\x8e\x1b\x80\xd4\x8e\x1b\xc0\xd8\x8e\x1b\x00\xd9\x8e\x1b\x80\xd2\x8e\x1b \xd9\x8e\x1b\xc0\xd6\x8e\x1b\x80\xd8\x8e\x1b\xe0\xd7\x8e\x1b\x00\xd8\x8e\x1b\xa0\xd7\x8e\x1b\x00\xda\x8e\x1b\x00\xd7\x8e\x1b@\xd4\x8e\x1b\x80\xd5\x8e\x1b \xda\x8e\x1b@\xd8\x8e\x1b\xa0\xd8\x8e\x1b\xe0\xd3\x8e\x1b\xc0\xd9\x8e\x1b@\xd9\x8e\x1b\x00\xdb\x8e\x1b\x80\xd9\x8e\x1b \xd8\x8e\x1b`\xda\x8e\x1b\xa0\xdb\x8e\x1b\xc0\xdb\x8e\x1b\x80\xda\x8e\x1b`\xd9\x8e\x1b \xdc\x8e\x1b`\xdc\x8e\x1b@\xda\x8e\x1b\x80\xdc\x8e\x1b@\xdc\x8e\x1b\xe0\xdc\x8e\x1b\xa0\xd9\x8e\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\x8e\xc4L?\xfa\xc2\x1d?\xa5wH?\xe9*s?@\xebn?`\x1f"?\xfb\x93Y?B*3?~ \x82?\x15t7?\x04\xb9\x9b?\xffff??/3?\xf8?\xa4?qp7?C\x1c3?:\xc5L?\x01\x82w?\xf2\xf9??}RU?\x9e\x1bb?\xe3\xca\xac?}\x1b"?\x1bnw?SA\x84?\xef\xa8\x8a?"\xfa??\xf8a&?\xb0,3?\xfd\xean?;\x81H?U\xec\x8e?\xb1!\xa2?z\xaa;?\xebNU?\xad13?\xe9\xa1*?\xba!b?\x144D?763?\x90\xa4\x8a?\xa5\xc6L?D\xfa??\x81qw?\xa7t\x97?\xee\xf7??,\x85\x88?f\x0cQ?9:D?\xff\xba{?\x99R\x15?\x9cpw?S\xebn?%\xb7;?\xe0\xb5;?\x83\x93Y?}\x13"?\xb7.D?aA\x84?\xea\xec.?6x7?j\x83\x88?Kf\x86?\xf8@D?\xa143?\'\xba;?>:D?\xcb\xac{?\t"\xc2?#\nQ?\xb1w7?g\xa5*?\xdbd\xa6?Z\x80H?C53?I\x0f"?\xd4C\xa4?\xb9\x18"?\xf4\x1d\x82?\x94\x0f3?E\xceL?\x0e\xca\x8c?\xb7\xb6\xbb?\xc5\x81H?s\x1f\x82?}\xf3.?\x9ab\x86?\x93\xc0L?\x9f\xa0*?\xf3\x82H?\x1a\xee??\xfe\xbc{?\n13?\xcd\xe8.?\xd5\xab*?\xf6"b?\x94q7?\xb5 Q?\x890\x93?\xb7g7?\xa5\xc6L?!\x1e\x82?\xe2\x99\xb9?\xf1@\x84?\x0803?\xd6\xa3j?\xa1\xc7\x1d?\x16\xa7\x8a?\xf9\xab\x8a?\x9a\x81H?\xc2\xa7j?\x02AD?\xa4-s?\x83vw?}\xfe??H\x00@?r?\x84?\x9c\x84H?\xce<D?s3\x93?\xa0\xceL?Q\xff\x9f?\x03\xbe\x9b?-\xe7.?J\xab\x8a?\xee\r/?\t>D?Bc\x86?\xcad\x86?\x0f\x85H?\x00\x1db?\xf5}&?\xb1\xc9\xac?\x85\xf1\x7f?\x05\xfe\xbf?\xd4-3?;\xceL?2\x98*?Q\xe8.?\xbcB\x84?~v\x97?\xd0\x02Q?"\xa8j?$\xc6L?\x99\x1bb?8d\x86?f\xb8\xbb?*\xbb{?\xc98D?i\x94Y?$\xfb\x9f?\r\xb9\x9b?\xc7\xf9??t\x0cQ?\xa9gw?\xab\xf9\x7f?[\xfa\x7f?1\xb6;?\xffx7?z\x1f\x82?\xdf23?\xc2\xf9??\x99\x00@?\xe1q7?M\xaa\x8a?\xc27D?\xa3PU?\x1b\xda]?\xf1\x94\x99?\xd0\xc6L?\xd5\x88\x88?\xe6\xe6n?\xcb\x93Y?\xa2a&?/\xb5;?D\xdb\x9d?@ED?\xd6\x81\x88?\xd5\xbf{?\xf03s?7QU?IID?\x07p\xc6?\xfd\x94Y?)\xe7n?<\xe1.?\x83}H?4 \xa2?D&b?\xe2/3?9A\xa4?\xe9\xdc]?\xf7\xfcP?\xf5\xbe\x9b?e\xdc\x1d@7\x1cb?e\x83H?@\xca\x8c?\x93\x99\x99?\xcd\x0e\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'(*\xc3\x04\xa0*\xc3\x04\x88d\xf6\x0b\xf0h\xf6\x0bpm\xf6\x0b\xb0o\xf6\x0bHh\xf6\x0b(a\xf6\x0b0b\xf6\x0b0k\xf6\x0b\x88g\xf6\x0b\xc8l\xf6\x0b\x90e\xf6\x0b\xa0j\xf6\x0b\xf8f\xf6\x0b c\xf6\x0b\xb8a\xf6\x0b\x98o\xf6\x0bPo\xf6\x0b8c\xf6\x0b\xd0g\xf6\x0b(d\xf6\x0b\x08i\xf6\x0b\xe0o\xf6\x0b0\xfe\xc2\x04h\xfc\xc2\x04X\xfd\xc2\x04\xe0\xf6\xc2\x04\x80\xf0\xc2\x04 \xf6\xc2\x04\x88\xf4\xc2\x04X\xf4\xc2\x04(\xf7\xc2\x04h\xff\xc2\x04@\xf7\xc2\x04\xa8\xf8\xc2\x04\xe8\xf1\xc2\x04\xe8\xf4\xc2\x04\xa0\xfa\xc2\x04\x88\xfa\xc2\x04\xa0\xf4\xc2\x04`\xf5\xc2\x04H\xf8\xc2\x04\xa0\xf7\xc2\x04x\xf2\xc2\x04\xc0\xf2\xc2\x04\x08\xf3\xc2\x04\x90\xf8\xc2\x04P\xf0\xc2\x04\x80\xf3\xc2\x04\xf0\xfb\xc2\x04\xc8\xf3\xc2\x04P\xff\xc2\x04\xd8\xf2\xc2\x04\xc8\xf9\xc2\x04\xd0\xf7\xc2\x04\x80\xfc\xc2\x04\xb8\xfa\xc2\x04\xc8\xf0\xc2\x04x\xfe\xc2\x04\xd8\xf5\xc2\x04\x80\xf9\xc2\x04H\xfe\xc2\x04\xb8\xf4\xc2\x04`\xf2\xc2\x04\xc0\xf5\xc2\x04X\xf1\xc2\x04x\xfb\xc2\x04\x00\xf2\xc2\x04P\xf6\xc2\x040\xf8\xc2\x04\x98\xf3\xc2\x04\xa8\xf2\xc2\x04\x98\xf0\xc2\x04\x80\xff\xc2\x04\xd8\xfb\xc2\x04\xb8\xf7\xc2\x04\x10\xf4\xc2\x04h\xf6\xc2\x04\xe0\xfc\xc2\x04\xe0\xf3\xc2\x04 \xf0\xc2\x04\x18\xf5\xc2\x04H\xf2\xc2\x04\xd8\xf8\xc2\x04\x88\xfd\xc2\x04\xf8\xf3\xc2\x04\xb0\xf3\xc2\x04\x00\xfb\xc2\x04\x08\xf6\xc2\x04\x18\xf8\xc2\x04\xf0\xf5\xc2\x04@\xf1\xc2\x04\xb8\xf1\xc2\x04\x90\xfe\xc2\x048\xff\xc2\x04(\xfd\xc2\x04\xa8\xfe\xc2\x04\xd0\xf1\xc2\x04\x10\xfa\xc2\x04\xf8\xf6\xc2\x04\xa8\xfb\xc2\x04\x00\xf8\xc2\x04\x98\xfc\xc2\x04 \xff\xc2\x04(\xf4\xc2\x04h\xf9\xc2\x04\x88\xf7\xc2\x04\xe0\xf0\xc2\x04X\xfa\xc2\x04\xe0\xff\xc2\x04x\xf8\xc2\x04\xe8\xfa\xc2\x04\xf8\xf9\xc2\x04`\xfe\xc2\x04@\xf4\xc2\x04\x00\xf5\xc2\x04`\xfb\xc2\x04\xf8\xfc\xc2\x04\x98\xf6\xc2\x04\x90\xfb\xc2\x04@\xfa\xc2\x04\x10\xf7\xc2\x04\x10\xf1\xc2\x040\xf2\xc2\x04\x18\xf2\xc2\x04\xc0\xfb\xc2\x04(\xfa\xc2\x04\xd0\xfd\xc2\x04p\xf7\xc2\x04(\xf1\xc2\x04\xc0\xfe\xc2\x04p\xfd\xc2\x04\xa0\xf1\xc2\x04\xb0\xf0\xc2\x04H\xf5\xc2\x048\xf6\xc2\x04\xf0\xf2\xc2\x04P\xfc\xc2\x04\xe8\xf7\xc2\x048\xf9\xc2\x04\xf0\xfe\xc2\x04\x10\xfd\xc2\x04 \xfc\xc2\x04\xd8\xfe\xc2\x04\x08\xf9\xc2\x040\xfb\xc2\x04\x08\xff\xc2\x040\xf5\xc2\x04\xb0\xff\xc2\x048\xf3\xc2\x04p\xf1\xc2\x04X\xf7\xc2\x04@\xfd\xc2\x04\xa8\xf5\xc2\x04H\xfb\xc2\x04\xb0\xf6\xc2\x04\x18\xfe\xc2\x04\xb8\xfd\xc2\x04\x90\xf5\xc2\x04\xf0\xf8\xc2\x04\xb0\xfc\xc2\x04\x98\xf9\xc2\x04P\xf3\xc2\x048\xfc\xc2\x04\x98\xff\xc2\x04p\xfa\xc2\x04\xc8\xfc\xc2\x04\xc8\xff\xc2\x04x\xf5\xc2\x04\xc8\xf6\xc2\x04`\xf8\xc2\x04\x88\xf1\xc2\x04 \xf9\xc2\x04\xc0\xf8\xc2\x04h\xf3\xc2\x04\x18\xfb\xc2\x04\xe8\xfd\xc2\x04\x08\xfc\xc2\x04\xa0\xfd\xc2\x04\x80/\xa3\x04\xd0$\xa3\x04\x98)\xa3\x04\xe8*\xa3\x04\xa0$\xa3\x04\xe0&\xa3\x04\x08/\xa3\x04\xb0#\xa3\x04H"\xa3\x04\x00(\xa3\x048#\xa3\x04\x00e\xf6\x0b\xf8i\xf6\x0b`k\xf6\x0bxk\xf6\x0b `\xf6\x0bxe\xf6\x0bho\xf6\x0b\x10m\xf6\x0b\xb8d\xf6\x0b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6376
sg6371
g6494
sg6385
g6386
sg6380
g6501
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6447
sg6371
g6543
sg6385
g6454
sg6380
g6550
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6568
sg6371
g6558
sg6385
g6562
sg6380
g6566
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6513
sg6371
g6575
sg6385
g6520
sg6380
g6582
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6568
sg6371
g6558
sg6385
g6562
sg6380
g6566
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6470
sg6371
g6603
sg6385
g6464
sg6380
g6610
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6648
sg6371
g6644
sg6385
g6655
sg6380
g6652
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6430
sg6371
g6661
sg6385
g6437
sg6380
g6668
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6746
sg6371
g6736
sg6385
g6740
sg6380
g6744
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6774
sg6371
g6770
sg6385
g6781
sg6380
g6778
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6513
sg6371
g6575
sg6385
g6520
sg6380
g6582
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6817
sg6371
g6813
sg6385
g6824
sg6380
g6821
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6568
sg6371
g6558
sg6385
g6562
sg6380
g6566
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6847
sg6371
g6843
sg6385
g6854
sg6380
g6851
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6568
sg6371
g6558
sg6385
g6562
sg6380
g6566
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6847
sg6371
g6873
sg6385
g6854
sg6380
g6880
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6447
sg6371
g6543
sg6385
g6454
sg6380
g6550
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6847
sg6371
g6843
sg6385
g6854
sg6380
g6851
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6723
sg6371
g6929
sg6385
g6730
sg6380
g6936
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6757
sg6371
g6970
sg6385
g6764
sg6380
g6977
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6568
sg6371
g6998
sg6385
g6562
sg6380
g7005
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6470
sg6371
g6603
sg6385
g6464
sg6380
g6610
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g7047
sg6371
g7043
sg6385
g7054
sg6380
g7051
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6470
sg6371
g6603
sg6385
g6464
sg6380
g6610
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6680
sg6371
g7086
sg6385
g6687
sg6380
g7093
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6746
sg6371
g7101
sg6385
g6740
sg6380
g7108
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6430
sg6371
g6661
sg6385
g6437
sg6380
g6668
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6530
sg6371
g7142
sg6385
g6537
sg6380
g7149
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6680
sg6371
g7086
sg6385
g6687
sg6380
g7093
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6774
sg6371
g6770
sg6385
g6781
sg6380
g6778
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6396
sg6371
g7222
sg6385
g6403
sg6380
g7229
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g7017
sg6371
g7237
sg6385
g7024
sg6380
g7244
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6817
sg6371
g6813
sg6385
g6824
sg6380
g6821
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g7017
sg6371
g7237
sg6385
g7024
sg6380
g7244
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6530
sg6371
g7142
sg6385
g6537
sg6380
g7149
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6723
sg6371
g6929
sg6385
g6730
sg6380
g6936
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6513
sg6371
g6575
sg6385
g6520
sg6380
g6582
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6774
sg6371
g7317
sg6385
g6781
sg6380
g7324
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6470
sg6371
g6603
sg6385
g6464
sg6380
g6610
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6568
sg6371
g6998
sg6385
g6562
sg6380
g7005
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g7017
sg6371
g7237
sg6385
g7024
sg6380
g7244
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6568
sg6371
g6998
sg6385
g6562
sg6380
g7005
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6817
sg6371
g6813
sg6385
g6824
sg6380
g6821
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6648
sg6371
g7423
sg6385
g6655
sg6380
g7430
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6568
sg6371
g6998
sg6385
g6562
sg6380
g7005
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6396
sg6371
g7222
sg6385
g6403
sg6380
g7229
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6847
sg6371
g6843
sg6385
g6854
sg6380
g6851
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6430
sg6371
g6661
sg6385
g6437
sg6380
g6668
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6723
sg6371
g6929
sg6385
g6730
sg6380
g6936
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6396
sg6371
g7222
sg6385
g6403
sg6380
g7229
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6648
sg6371
g7423
sg6385
g6655
sg6380
g7430
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6746
sg6371
g7101
sg6385
g6740
sg6380
g7108
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6847
sg6371
g6843
sg6385
g6854
sg6380
g6851
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6680
sg6371
g7086
sg6385
g6687
sg6380
g7093
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g7047
sg6371
g7607
sg6385
g7054
sg6380
g7614
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6376
sg6371
g6494
sg6385
g6386
sg6380
g6501
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6817
sg6371
g6813
sg6385
g6824
sg6380
g6821
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6568
sg6371
g6998
sg6385
g6562
sg6380
g7005
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6396
sg6371
g7222
sg6385
g6403
sg6380
g7229
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g7047
sg6371
g7607
sg6385
g7054
sg6380
g7614
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g7017
sg6371
g7237
sg6385
g7024
sg6380
g7244
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6774
sg6371
g7317
sg6385
g6781
sg6380
g7324
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6746
sg6371
g6736
sg6385
g6740
sg6380
g6744
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6774
sg6371
g7317
sg6385
g6781
sg6380
g7324
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6648
sg6371
g7423
sg6385
g6655
sg6380
g7430
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6481
sg6371
g7765
sg6385
g6488
sg6380
g7772
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6648
sg6371
g6644
sg6385
g6655
sg6380
g6652
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6817
sg6371
g7806
sg6385
g6824
sg6380
g7813
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6746
sg6371
g7101
sg6385
g6740
sg6380
g7108
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g7047
sg6371
g7043
sg6385
g7054
sg6380
g7051
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6396
sg6371
g7222
sg6385
g6403
sg6380
g7229
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6447
sg6371
g6543
sg6385
g6454
sg6380
g6550
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6847
sg6371
g6873
sg6385
g6854
sg6380
g6880
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6470
sg6371
g6603
sg6385
g6464
sg6380
g6610
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6723
sg6371
g6929
sg6385
g6730
sg6380
g6936
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6513
sg6371
g6575
sg6385
g6520
sg6380
g6582
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6774
sg6371
g7317
sg6385
g6781
sg6380
g7324
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g7047
sg6371
g7043
sg6385
g7054
sg6380
g7051
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6817
sg6371
g6813
sg6385
g6824
sg6380
g6821
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6513
sg6371
g6575
sg6385
g6520
sg6380
g6582
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6648
sg6371
g6644
sg6385
g6655
sg6380
g6652
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6847
sg6371
g6873
sg6385
g6854
sg6380
g6880
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6530
sg6371
g7142
sg6385
g6537
sg6380
g7149
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6817
sg6371
g7806
sg6385
g6824
sg6380
g7813
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6376
sg6371
g6494
sg6385
g6386
sg6380
g6501
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6481
sg6371
g7765
sg6385
g6488
sg6380
g7772
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g7047
sg6371
g7043
sg6385
g7054
sg6380
g7051
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6648
sg6371
g6644
sg6385
g6655
sg6380
g6652
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6530
sg6371
g7142
sg6385
g6537
sg6380
g7149
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6447
sg6371
g6543
sg6385
g6454
sg6380
g6550
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6723
sg6371
g6929
sg6385
g6730
sg6380
g6936
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6680
sg6371
g7086
sg6385
g6687
sg6380
g7093
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6376
sg6371
g6494
sg6385
g6386
sg6380
g6501
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6568
sg6371
g6558
sg6385
g6562
sg6380
g6566
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6757
sg6371
g6970
sg6385
g6764
sg6380
g6977
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6746
sg6371
g6736
sg6385
g6740
sg6380
g6744
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6847
sg6371
g6843
sg6385
g6854
sg6380
g6851
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6447
sg6371
g6543
sg6385
g6454
sg6380
g6550
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6530
sg6371
g7142
sg6385
g6537
sg6380
g7149
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6757
sg6371
g6970
sg6385
g6764
sg6380
g6977
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6847
sg6371
g6873
sg6385
g6854
sg6380
g6880
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6481
sg6371
g7765
sg6385
g6488
sg6380
g7772
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g7047
sg6371
g7607
sg6385
g7054
sg6380
g7614
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6648
sg6371
g6644
sg6385
g6655
sg6380
g6652
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6847
sg6371
g6873
sg6385
g6854
sg6380
g6880
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6746
sg6371
g7101
sg6385
g6740
sg6380
g7108
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6817
sg6371
g7806
sg6385
g6824
sg6380
g7813
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6746
sg6371
g6736
sg6385
g6740
sg6380
g6744
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6376
sg6371
g6494
sg6385
g6386
sg6380
g6501
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6817
sg6371
g7806
sg6385
g6824
sg6380
g7813
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6648
sg6371
g7423
sg6385
g6655
sg6380
g7430
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6680
sg6371
g7086
sg6385
g6687
sg6380
g7093
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6757
sg6371
g6970
sg6385
g6764
sg6380
g6977
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6430
sg6371
g6661
sg6385
g6437
sg6380
g6668
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6757
sg6371
g6970
sg6385
g6764
sg6380
g6977
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6774
sg6371
g6770
sg6385
g6781
sg6380
g6778
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g7047
sg6371
g7607
sg6385
g7054
sg6380
g7614
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6430
sg6371
g6661
sg6385
g6437
sg6380
g6668
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g7047
sg6371
g7607
sg6385
g7054
sg6380
g7614
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6774
sg6371
g6770
sg6385
g6781
sg6380
g6778
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6757
sg6371
g6753
sg6385
g6764
sg6380
g6761
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6746
sg6371
g6736
sg6385
g6740
sg6380
g6744
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6513
sg6371
g6509
sg6385
g6520
sg6380
g6517
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6481
sg6371
g7765
sg6385
g6488
sg6380
g7772
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g7017
sg6371
g7237
sg6385
g7024
sg6380
g7244
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6774
sg6371
g7317
sg6385
g6781
sg6380
g7324
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6481
sg6371
g7765
sg6385
g6488
sg6380
g7772
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6746
sg6371
g7101
sg6385
g6740
sg6380
g7108
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6774
sg6371
g6770
sg6385
g6781
sg6380
g6778
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6648
sg6371
g7423
sg6385
g6655
sg6380
g7430
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g7047
sg6371
g7043
sg6385
g7054
sg6380
g7051
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6817
sg6371
g7806
sg6385
g6824
sg6380
g7813
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.