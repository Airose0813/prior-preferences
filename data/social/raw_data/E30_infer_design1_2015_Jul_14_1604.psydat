ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E30_infer_design1_2015_Jul_14_1604
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vy
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xda\xb9\xa3S\r\xfcM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_14_1604
p67
sVparticipant
p68
VE30
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.63345875808408891
sg14
S'space'
p89
sg59
g63
sg58
Vy
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vy
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F19.916497507660097
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P5\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F7.601
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.71999999999999931
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x10\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V22-daim.png
p103
sg21
F1.6000000000000001
sg70
Vn
sa(dp104
g64
g65
sg20
F13.651
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F1.3199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x1f\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p110
sg21
F1.7
sg70
Vn
sa(dp111
g64
g65
sg20
F6.8170000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x1e\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p117
sg21
F1.3999999999999999
sg70
Vn
sa(dp118
g64
g65
sg20
F4.9009999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.8199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\n\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p124
sg21
F1.5
sg70
Vn
sa(dp125
g64
g65
sg20
F2.5670000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.83999999999999941
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S"'\x00\x00\x00"
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V51-mars.png
p131
sg21
F1.3999999999999999
sg70
Vn
sa(dp132
g64
g65
sg20
F3.6509999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.87999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S' \x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p138
sg21
F2
sg70
Vn
sa(dp139
g64
g65
sg20
F2.6509999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.55999999999999961
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'&\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V50-polo.png
p145
sg21
F1.1000000000000001
sg70
Vn
sa(dp146
g64
g65
sg20
F3.2839999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.67999999999999949
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x13\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p152
sg21
F1.2
sg70
Vn
sa(dp153
g64
g65
sg20
F2.0670000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x17\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p159
sg21
F1.1000000000000001
sg70
Vn
sa(dp160
g64
g65
sg20
F3.1840000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F1.0399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x02\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p166
sg21
F1.3
sg70
Vn
sa(dp167
g64
g65
sg20
F3.8010000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.89999999999999969
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x12\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p173
sg21
F1.3
sg70
Vn
sa(dp174
g64
g65
sg20
F3.3340000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F1.0599999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x1b\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p180
sg21
F1.2
sg70
Vn
sa(dp181
g64
g65
sg20
F2.4510000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.4200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x06\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V7-olives.png
p187
sg21
F1.3
sg70
Vn
sa(dp188
g64
g65
sg20
F4.8339999999999996
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.89999999999999902
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x19\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p194
sg21
F1.8999999999999999
sg70
Vn
sa(dp195
g64
g65
sg20
F2.7010000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x00\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p201
sg21
F1.1000000000000001
sg70
Vn
sa(dp202
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.95999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x14\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p208
sg21
F1.3999999999999999
sg70
Vn
sa(dp209
g64
g65
sg20
F6.601
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'#\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p215
sg21
F1
sg70
Vn
sa(dp216
g64
g65
sg20
F5.617
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.81999999999999962
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x0f\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p222
sg21
F1.2
sg70
Vn
sa(dp223
g64
g65
sg20
F2.5510000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.45999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x1a\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V35-raisins.png
p229
sg21
F1.5
sg70
Vn
sa(dp230
g64
g65
sg20
F2.0840000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.45999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x03\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V4-corn.png
p236
sg21
F1.1000000000000001
sg70
Vn
sa(dp237
g64
g65
sg20
F2.2010000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.89999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'$\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V48-twix.png
p243
sg21
F1.7
sg70
Vn
sa(dp244
g64
g65
sg20
F1.1339999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.83999999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\t\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p250
sg21
F1
sg70
Vn
sa(dp251
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'!\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V44-crunch.png
p257
sg21
F1.8
sg70
Vn
sa(dp258
g64
g65
sg20
F2.0339999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x08\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p264
sg21
F1
sg70
Vn
sa(dp265
g64
g65
sg20
F3.2509999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F1.1199999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x01\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p271
sg21
F1.8999999999999999
sg70
Vn
sa(dp272
g64
g65
sg20
F2.351
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F1.0599999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x1c\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p278
sg21
F1.8999999999999999
sg70
Vn
sa(dp279
g64
g65
sg20
F5.4669999999999996
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F1.5999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x05\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p285
sg21
F1.8
sg70
Vn
sa(dp286
g64
g65
sg20
F1.2669999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F1.4800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x0c\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V18-mms.png
p292
sg21
F1.1000000000000001
sg70
Vn
sa(dp293
g64
g65
sg20
F1.867
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.97999999999999976
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x18\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p299
sg21
F1.3
sg70
Vn
sa(dp300
g64
g65
sg20
F1.734
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.73999999999999955
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x15\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V29-beans.png
p306
sg21
F1.3
sg70
Vn
sa(dp307
g64
g65
sg20
F4.7009999999999996
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F1.3400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x1d\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V40-sardines.png
p313
sg21
F1
sg70
Vn
sa(dp314
g64
g65
sg20
F10.717000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F1.0199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'"\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p320
sg21
F1.2
sg70
Vn
sa(dp321
g64
g65
sg20
F2.0840000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.0199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x0e\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p327
sg21
F1.3999999999999999
sg70
Vn
sa(dp328
g64
g65
sg20
F2.1669999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.97999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x11\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p334
sg21
F1
sg70
Vn
sa(dp335
g64
g65
sg20
F1.8340000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.95999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'%\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p341
sg21
F1.3999999999999999
sg70
Vn
sa(dp342
g64
g65
sg20
F2.8170000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F1.0399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x0b\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p348
sg21
F1.8
sg70
Vn
sa(dp349
g64
g65
sg20
F1.3169999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.67999999999999972
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x16\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p355
sg21
F1.1000000000000001
sg70
Vn
sa(dp356
g64
g65
sg20
F2.367
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.97999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\r\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p362
sg21
F1.1000000000000001
sg70
Vn
sa(dp363
g64
g65
sg20
F2.617
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.85999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x04\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p369
sg21
F1.5
sg70
Vn
sa(dp370
g64
g65
sg20
F1.8839999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x07\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p376
sg21
F1.3999999999999999
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F5.5167487372946198
sg58
Vy
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p381
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vy
sg81
S'51-mars.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F2.4166919454855815
sg27
F1.5669999999999999
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p390
sg26
F4.2000000000000011
sg28
F3
sg59
g63
sg58
Vy
sg81
S'42-mrkipling_lemon_slices.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F18.70008535877605
sg27
F3.6840000000000002
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p399
sg26
F5.2000000000000011
sg28
F2.8999999999999999
sg59
g63
sg58
Vy
sg81
S'23-crunchie_redo.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.3167186878126813
sg27
F1.617
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'46-pistachios.png'
p408
sg26
F5.3999999999999995
sg28
F4.0999999999999996
sg59
g63
sg58
Vy
sg81
S'29-beans.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.1167485092155403
sg27
F1.9510000000000001
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p417
sg26
F4.3000000000000007
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'2-steamed_puddings.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F8.4333736844073428
sg27
F2.2010000000000001
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p426
sg26
F4.9000000000000021
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'1-treacle_cookies.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F1.7172383670858835
sg27
F1.5669999999999999
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p435
sg26
F5.0000000000000018
sg28
F2.7000000000000002
sg59
g63
sg58
Vy
sg81
S'36-fig_rolls.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F1.7668547942903388
sg27
F1.4670000000000001
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'25-kitkat.png'
p444
sg26
F5.0000000000000009
sg28
F3.5
sg59
g63
sg58
Vy
sg81
S'31-hobnobs.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F4.6334533411954908
sg27
F1.5169999999999999
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p453
sg26
F4.8000000000000016
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'19-caramello_redo.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.5999296374575351
sg27
F1.234
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'48-twix.png'
p462
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vy
sg81
S'50-polo.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.316954750156583
sg27
F0.83399999999999996
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'29-beans.png'
p471
sg26
F5.5999999999999996
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'46-pistachios.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F1.0167327717244916
sg27
F1.784
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p480
sg26
F5.4999999999999991
sg28
F3.5
sg59
g63
sg58
Vy
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.3500488090248837
sg27
F0.95099999999999996
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'5-pineapple.png'
p489
sg26
F2.0999999999999983
sg28
F3.8999999999999999
sg59
g63
sg58
Vy
sg81
S'40-sardines.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F6.8000774330103013
sg27
F1.0009999999999999
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'38-maltesers.png'
p498
sg26
F4.2000000000000011
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'6-sour_patch_kids.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F5.8329322934441734
sg27
F3.5009999999999999
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p507
sg26
F3.2000000000000002
sg28
F3.2000000000000002
sg59
g63
sg58
Vy
sg81
S'44-crunch.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F5.000486949858896
sg27
F0.41799999999999998
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p516
sg26
F5.6999999999999984
sg28
F3.5
sg59
g63
sg58
Vy
sg81
S'33-ambrosia_rice.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.0000573049892409
sg27
F1.1839999999999999
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p525
sg26
F5.4999999999999991
sg28
F3.3999999999999999
sg59
g63
sg58
Vy
sg81
S'18-mms.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.4500728143993911
sg27
F0.73399999999999999
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'51-mars.png'
p534
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vy
sg81
S'27-hartleys_raspberries_jelly.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F0.91671788953317446
sg27
F0.51700000000000002
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p543
sg26
F4.0999999999999996
sg28
F4.0999999999999996
sg59
g63
sg58
Vy
sg81
S'16-skips_prawn.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F4.2500362076298188
sg27
F2.2509999999999999
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'49-yorkie.png'
p552
sg26
F5.1000000000000014
sg28
F3
sg59
g63
sg58
Vy
sg81
S'35-raisins.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.3669343940564431
sg27
F0.65100000000000002
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p561
sg26
F5.3999999999999995
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'21-nakd_banana_crunch.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F2.2672140195954853
sg27
F1.0169999999999999
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'4-corn.png'
p570
sg26
F4.8000000000000007
sg28
F3.5
sg59
g63
sg58
Vy
sg81
S'10-bounty_redo.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F11.633302808686494
sg27
F0.96699999999999997
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p579
sg26
F4
sg28
F4
sg59
g63
sg58
Vy
sg81
S'8-liquorice_catherine_wheels.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.8168803391999973
sg27
F0.96699999999999997
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'18-mms.png'
p588
sg26
F5.7999999999999972
sg28
F4.2999999999999998
sg59
g63
sg58
Vy
sg81
S'43-mrporky_pork_crackles_redo.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.0667580315366649
sg27
F0.83399999999999996
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'44-crunch.png'
p597
sg26
F5.2000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vy
sg81
S'26-walkers_smoky_bacon.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F3.0001676384745224
sg27
F3.8170000000000002
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p606
sg26
F4.9000000000000021
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'4-corn.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.1168032483092247
sg27
F3.2839999999999998
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p615
sg26
F5.5999999999999996
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'45-chewy_nougat_redo.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.9335102470431593
sg27
F1.8340000000000001
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p624
sg26
F3.9000000000000004
sg28
F3.7000000000000002
sg59
g63
sg58
Vy
sg81
S'13-mccoys_steak_crisps.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F16.916560229539755
sg27
F2.117
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'35-raisins.png'
p633
sg26
F5.3000000000000007
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'49-yorkie.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F0.68353134440440044
sg27
F1.601
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'40-sardines.png'
p642
sg26
F2.7999999999999994
sg28
F3.2999999999999998
sg59
g63
sg58
Vy
sg81
S'5-pineapple.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.9334238619103417
sg27
F0.60099999999999998
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p651
sg26
F3.6000000000000001
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'3-ellas_strawberries_apples.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F2.2834313315179315
sg27
F1.7170000000000001
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'7-olives.png'
p660
sg26
F4.7000000000000011
sg28
F2.8999999999999999
sg59
g63
sg58
Vy
sg81
S'22-daim.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.4001461989973905
sg27
F1.0840000000000001
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p669
sg26
F4.7000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vy
sg81
S'38-maltesers.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F0.96646004559443099
sg27
F0.95099999999999996
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p678
sg26
F5.0000000000000018
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'17-jacobs_mini_cheddars_redo.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.400192385108312
sg27
F2.3170000000000002
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p687
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'30-spaghetti_hoops.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.1833916456744191
sg27
F1.2509999999999999
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'31-hobnobs.png'
p696
sg26
F5.1000000000000005
sg28
F4
sg59
g63
sg58
Vy
sg81
S'25-kitkat.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F6.3167052881381096
sg27
F1.2170000000000001
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p705
sg26
F3.5999999999999996
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'20-fruit_pastilles.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F3.9500545680348296
sg27
F1.151
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'22-daim.png'
p714
sg26
F4.8000000000000016
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'7-olives.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.3334406257581577
sg27
F0.86699999999999999
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p723
sg26
F4.9000000000000012
sg28
F3.5
sg59
g63
sg58
Vy
sg81
S'41-peanuts_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.2000577041271754
sg27
F0.70099999999999996
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'50-polo.png'
p732
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vy
sg81
S'48-twix.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F1.133398031901379
sg27
F1.351
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vy
sg59
g63
sg30
F352.2260673268047
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vy
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F27.316725530199619
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'53-cheestrings.png'
p744
sg83
S'47-picnic.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'47-picnic.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x0e\x10\x138\x07\x95h'
tRp754
sa(dp755
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p756
sg83
S'37-nakd_cashew_cookie.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'9-yu_mango_pieces.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x14\x02\x0b\x00h'
tRp765
sa(dp766
g64
g65
sg82
S'11-snickers.png'
p767
sg83
S'11-snickers.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'54-frubes_yogurt.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x14\x0b\x02\xee\x00'
tRp776
sa(dp777
g64
g65
sg82
S'12-topic.png'
p778
sg83
S'12-topic.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'39-mackerel.png'
p783
sg33
g783
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x14\x11\x0b\x98\xc0'
tRp787
sa(dp788
g64
g65
sg82
S'32-hovis_crackers.png'
p789
sg83
S'32-hovis_crackers.png'
p790
sg56
g57
sS'practice_loop.thisN'
p791
I4
sS'practice_loop.thisTrialN'
p792
I4
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p793
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p795
sS'practice_loop.thisIndex'
p796
g60
(g99
S'\x04\x00\x00\x00'
tRp797
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x14\x17\x0c)H'
tRp798
sa(dp799
g64
g65
sg82
S'52-aero_mousse.png'
p800
sg83
S'52-aero_mousse.png'
p801
sg56
g57
sS'practice_loop.thisN'
p802
I5
sS'practice_loop.thisTrialN'
p803
I5
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p804
I0
sg84
S'14-discos_salt_vinegar.png'
p805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p806
sS'practice_loop.thisIndex'
p807
g60
(g99
S'\x05\x00\x00\x00'
tRp808
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x14\x1e\x00\x90\x88'
tRp809
sa(dp810
g64
g65
sg82
g789
sg83
S'24-food_doctor_apple_walnut_bar.png'
p811
sg56
g57
sS'practice_loop.thisN'
p812
I6
sS'practice_loop.thisTrialN'
p813
I6
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p814
I0
sg84
g794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x14$\x03\tX'
tRp818
sa(dp819
g64
g65
sg82
S'15-walnut_whip.png'
p820
sg83
S'28-maple_pecan.png'
p821
sg56
g57
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p824
I0
sg84
S'28-maple_pecan.png'
p825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x14*\x0c-0'
tRp829
sa(dp830
g64
g65
sg82
g756
sg83
S'9-yu_mango_pieces.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x141\x01\r\x88'
tRp838
sa(dp839
g64
g65
sg82
g820
sg83
S'15-walnut_whip.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x147\ty\xc8'
tRp847
sa(dp848
g64
g65
sg82
g767
sg83
S'54-frubes_yogurt.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x15\x01\x0b\xb4\x18'
tRp856
sa(dp857
g64
g65
sg82
g778
sg83
S'39-mackerel.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g783
sg33
g783
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x15\x0b\x0b\xb4\x18'
tRp865
sa(dp866
g64
g65
sg82
g744
sg83
S'53-cheestrings.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x15\x12\x03\xadh'
tRp874
sa(dp875
g64
g65
sg82
g800
sg83
S'14-discos_salt_vinegar.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x15\x19\x00ix'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vy
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F123.31428222792601
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'33-ambrosia_rice.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'33-ambrosia_rice.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'23-crunchie_redo.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
S'23-crunchie_redo.png'
p908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p909
I0
sS'img_wrong'
p910
g900
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.9331590045239864
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x19/\n\xec\xe0'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'10-bounty_redo.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'10-bounty_redo.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'4-corn.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p926
I0
sg910
S'4-corn.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.8332627237032284
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x196\n\nP'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'26-walkers_smoky_bacon.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'44-crunch.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'44-crunch.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p943
I0
sg910
S'26-walkers_smoky_bacon.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.7166157098927215
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a\x01\x085\x90'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'46-pistachios.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'left'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'46-pistachios.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'29-beans.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p960
I0
sg910
S'29-beans.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.2498275148336688
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a\x08\x04:\x08'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'3-ellas_strawberries_apples.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'13-mccoys_steak_crisps.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'13-mccoys_steak_crisps.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p977
I0
sg910
S'3-ellas_strawberries_apples.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.2166889804502716
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a\x0e\x08\x9b '
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'6-sour_patch_kids.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'right'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'38-maltesers.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'38-maltesers.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p994
I0
sg910
S'6-sour_patch_kids.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.4163760552946769
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a\x14\x0c\x7f8'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'21-nakd_banana_crunch.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'1-treacle_cookies.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'1-treacle_cookies.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1011
I0
sg910
S'21-nakd_banana_crunch.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vn
sS'block_loop.thisTrialN'
p1014
I0
sg39
F2.2666458163948846
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a\x1b\x03\xffp'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'4-corn.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'right'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1022
g60
(g99
S'\x07\x00\x00\x00'
tRp1023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1024
I0
sg904
S'10-bounty_redo.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1027
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p1028
Nsg70
Vn
sS'block_loop.thisTrialN'
p1029
I0
sg39
F2.6333010980906693
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a"\x08\x978'
tRp1030
sa(dp1031
S'trial_loop.thisTrialN'
p1032
I8
sg895
S'42-mrkipling_lemon_slices.png'
p1033
sS'block_loop.thisIndex'
p1034
g889
sg38
S'left'
p1035
sg59
g63
sS'trial_loop.thisN'
p1036
I8
sg33
S'42-mrkipling_lemon_slices.png'
p1037
sg64
g65
sS'trial_loop.thisIndex'
p1038
g60
(g99
S'\x08\x00\x00\x00'
tRp1039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1040
I0
sg904
S'16-skips_prawn.png'
p1041
sS'block_loop.thisRepN'
p1042
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1043
I0
sg910
S'16-skips_prawn.png'
p1044
sg55
g11
sS'block_loop.thisTrial'
p1045
Nsg70
Vn
sS'block_loop.thisTrialN'
p1046
I0
sg39
F1.9665110783953423
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a*\x03\xa1\xb0'
tRp1047
sa(dp1048
S'trial_loop.thisTrialN'
p1049
I9
sg895
S'44-crunch.png'
p1050
sS'block_loop.thisIndex'
p1051
g889
sg38
S'right'
p1052
sg59
g63
sS'trial_loop.thisN'
p1053
I9
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1054
g60
(g99
S'\t\x00\x00\x00'
tRp1055
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1056
I0
sg904
S'26-walkers_smoky_bacon.png'
p1057
sS'block_loop.thisRepN'
p1058
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1059
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1060
Nsg70
Vn
sS'block_loop.thisTrialN'
p1061
I0
sg39
F4.4166488954670058
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a1\x03v\xb8'
tRp1062
sa(dp1063
S'trial_loop.thisTrialN'
p1064
I10
sg895
S'45-chewy_nougat_redo.png'
p1065
sS'block_loop.thisIndex'
p1066
g889
sg38
S'right'
p1067
sg59
g63
sS'trial_loop.thisN'
p1068
I10
sg33
S'41-peanuts_redo.png'
p1069
sg64
g65
sS'trial_loop.thisIndex'
p1070
g60
(g99
S'\n\x00\x00\x00'
tRp1071
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1072
I0
sg904
S'41-peanuts_redo.png'
p1073
sS'block_loop.thisRepN'
p1074
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1075
I0
sg910
S'45-chewy_nougat_redo.png'
p1076
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vn
sS'block_loop.thisTrialN'
p1078
I0
sg39
F1.4498937719454261
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1a:\nd('
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
S'8-liquorice_catherine_wheels.png'
p1082
sS'block_loop.thisIndex'
p1083
g889
sg38
S'right'
p1084
sg59
g63
sS'trial_loop.thisN'
p1085
I11
sg33
S'8-liquorice_catherine_wheels.png'
p1086
sg64
g65
sS'trial_loop.thisIndex'
p1087
g60
(g99
S'\x0b\x00\x00\x00'
tRp1088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1089
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1090
sS'block_loop.thisRepN'
p1091
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1092
I0
sg910
S'17-jacobs_mini_cheddars_redo.png'
p1093
sg55
g11
sS'block_loop.thisTrial'
p1094
Nsg70
Vn
sS'block_loop.thisTrialN'
p1095
I0
sg39
F1.6499691522403737
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b\x05\x02\x98\x10'
tRp1096
sa(dp1097
S'trial_loop.thisTrialN'
p1098
I12
sg895
S'30-spaghetti_hoops.png'
p1099
sS'block_loop.thisIndex'
p1100
g889
sg38
S'right'
p1101
sg59
g63
sS'trial_loop.thisN'
p1102
I12
sg33
S'19-caramello_redo.png'
p1103
sg64
g65
sS'trial_loop.thisIndex'
p1104
g60
(g99
S'\x0c\x00\x00\x00'
tRp1105
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1106
I0
sg904
S'19-caramello_redo.png'
p1107
sS'block_loop.thisRepN'
p1108
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1109
I0
sg910
S'30-spaghetti_hoops.png'
p1110
sg55
g11
sS'block_loop.thisTrial'
p1111
Nsg70
Vn
sS'block_loop.thisTrialN'
p1112
I0
sg39
F1.4499958375472488
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b\x0b\x0c\xec\x98'
tRp1113
sa(dp1114
S'trial_loop.thisTrialN'
p1115
I13
sg895
S'43-mrporky_pork_crackles_redo.png'
p1116
sS'block_loop.thisIndex'
p1117
g889
sg38
S'right'
p1118
sg59
g63
sS'trial_loop.thisN'
p1119
I13
sg33
S'43-mrporky_pork_crackles_redo.png'
p1120
sg64
g65
sS'trial_loop.thisIndex'
p1121
g60
(g99
S'\r\x00\x00\x00'
tRp1122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1123
I0
sg904
S'18-mms.png'
p1124
sS'block_loop.thisRepN'
p1125
I0
sg907
S'18-mms.png'
p1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1127
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p1128
Nsg70
Vn
sS'block_loop.thisTrialN'
p1129
I0
sg39
F1.166697932572788
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b\x12\x05$h'
tRp1130
sa(dp1131
S'trial_loop.thisTrialN'
p1132
I14
sg895
S'49-yorkie.png'
p1133
sS'block_loop.thisIndex'
p1134
g889
sg38
S'left'
p1135
sg59
g63
sS'trial_loop.thisN'
p1136
I14
sg33
S'35-raisins.png'
p1137
sg64
g65
sS'trial_loop.thisIndex'
p1138
g60
(g99
S'\x0e\x00\x00\x00'
tRp1139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1140
I0
sg904
S'35-raisins.png'
p1141
sS'block_loop.thisRepN'
p1142
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1143
I0
sg910
S'49-yorkie.png'
p1144
sg55
g11
sS'block_loop.thisTrial'
p1145
Nsg70
Vn
sS'block_loop.thisTrialN'
p1146
I0
sg39
F1.5502339526083233
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b\x18\x08\x16P'
tRp1147
sa(dp1148
S'trial_loop.thisTrialN'
p1149
I15
sg895
S'38-maltesers.png'
p1150
sS'block_loop.thisIndex'
p1151
g889
sg38
S'left'
p1152
sg59
g63
sS'trial_loop.thisN'
p1153
I15
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1154
g60
(g99
S'\x0f\x00\x00\x00'
tRp1155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1156
I0
sg904
S'6-sour_patch_kids.png'
p1157
sS'block_loop.thisRepN'
p1158
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1159
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1160
Nsg70
Vn
sS'block_loop.thisTrialN'
p1161
I0
sg39
F1.749636498203472
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b\x1f\x01\xb9h'
tRp1162
sa(dp1163
S'trial_loop.thisTrialN'
p1164
I16
sg895
S'29-beans.png'
p1165
sS'block_loop.thisIndex'
p1166
g889
sg38
S'right'
p1167
sg59
g63
sS'trial_loop.thisN'
p1168
I16
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1169
g60
(g99
S'\x10\x00\x00\x00'
tRp1170
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1171
I0
sg904
S'46-pistachios.png'
p1172
sS'block_loop.thisRepN'
p1173
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1174
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1175
Nsg70
Vn
sS'block_loop.thisTrialN'
p1176
I0
sg39
F1.0332702503292239
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b%\r\xb7\xb8'
tRp1177
sa(dp1178
S'trial_loop.thisTrialN'
p1179
I17
sg895
S'7-olives.png'
p1180
sS'block_loop.thisIndex'
p1181
g889
sg38
S'right'
p1182
sg59
g63
sS'trial_loop.thisN'
p1183
I17
sg33
S'7-olives.png'
p1184
sg64
g65
sS'trial_loop.thisIndex'
p1185
g60
(g99
S'\x11\x00\x00\x00'
tRp1186
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1187
I0
sg904
S'22-daim.png'
p1188
sS'block_loop.thisRepN'
p1189
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1190
I0
sg910
S'22-daim.png'
p1191
sg55
g11
sS'block_loop.thisTrial'
p1192
Nsg70
Vn
sS'block_loop.thisTrialN'
p1193
I0
sg39
F1.2499144701650948
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b+\x0e\xc1X'
tRp1194
sa(dp1195
S'trial_loop.thisTrialN'
p1196
I18
sg895
g1116
sS'block_loop.thisIndex'
p1197
g889
sg38
S'right'
p1198
sg59
g63
sS'trial_loop.thisN'
p1199
I18
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1200
g60
(g99
S'\x12\x00\x00\x00'
tRp1201
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1202
I0
sg904
g1124
sS'block_loop.thisRepN'
p1203
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1204
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p1205
Nsg70
Vn
sS'block_loop.thisTrialN'
p1206
I0
sg39
F1.1997714642820938
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b2\x03\xa5\x98'
tRp1207
sa(dp1208
S'trial_loop.thisTrialN'
p1209
I19
sg895
g1150
sS'block_loop.thisIndex'
p1210
g889
sg38
S'left'
p1211
sg59
g63
sS'trial_loop.thisN'
p1212
I19
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1213
g60
(g99
S'\x13\x00\x00\x00'
tRp1214
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1215
I0
sg904
g1157
sS'block_loop.thisRepN'
p1216
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1217
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1218
Nsg70
Vn
sS'block_loop.thisTrialN'
p1219
I0
sg39
F0.98312467855066643
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1b8\x07O\x18'
tRp1220
sa(dp1221
S'trial_loop.thisTrialN'
p1222
I20
sg895
S'2-steamed_puddings.png'
p1223
sS'block_loop.thisIndex'
p1224
g889
sg38
S'left'
p1225
sg59
g63
sS'trial_loop.thisN'
p1226
I20
sg33
S'2-steamed_puddings.png'
p1227
sg64
g65
sS'trial_loop.thisIndex'
p1228
g60
(g99
S'\x14\x00\x00\x00'
tRp1229
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1230
I0
sg904
S'20-fruit_pastilles.png'
p1231
sS'block_loop.thisRepN'
p1232
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1233
I0
sg910
S'20-fruit_pastilles.png'
p1234
sg55
g11
sS'block_loop.thisTrial'
p1235
Nsg70
Vn
sS'block_loop.thisTrialN'
p1236
I0
sg39
F3.2166388029472728
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c\x02\x07\xa1 '
tRp1237
sa(dp1238
S'trial_loop.thisTrialN'
p1239
I21
sg895
S'48-twix.png'
p1240
sS'block_loop.thisIndex'
p1241
g889
sg38
S'left'
p1242
sg59
g63
sS'trial_loop.thisN'
p1243
I21
sg33
S'48-twix.png'
p1244
sg64
g65
sS'trial_loop.thisIndex'
p1245
g60
(g99
S'\x15\x00\x00\x00'
tRp1246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1247
I0
sg904
S'50-polo.png'
p1248
sS'block_loop.thisRepN'
p1249
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1250
I0
sg910
S'50-polo.png'
p1251
sg55
g11
sS'block_loop.thisTrial'
p1252
Nsg70
Vn
sS'block_loop.thisTrialN'
p1253
I0
sg39
F1.400015053251991
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c\n\x0b}h'
tRp1254
sa(dp1255
S'trial_loop.thisTrialN'
p1256
I22
sg895
g916
sS'block_loop.thisIndex'
p1257
g889
sg38
S'left'
p1258
sg59
g63
sS'trial_loop.thisN'
p1259
I22
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1260
g60
(g99
S'\x16\x00\x00\x00'
tRp1261
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1262
I0
sg904
g924
sS'block_loop.thisRepN'
p1263
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1264
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p1265
Nsg70
Vn
sS'block_loop.thisTrialN'
p1266
I0
sg39
F1.0166090385646385
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c\x11\x02\xbf '
tRp1267
sa(dp1268
S'trial_loop.thisTrialN'
p1269
I23
sg895
g967
sS'block_loop.thisIndex'
p1270
g889
sg38
S'right'
p1271
sg59
g63
sS'trial_loop.thisN'
p1272
I23
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1273
g60
(g99
S'\x17\x00\x00\x00'
tRp1274
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1275
I0
sg904
g975
sS'block_loop.thisRepN'
p1276
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1277
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1278
Nsg70
Vn
sS'block_loop.thisTrialN'
p1279
I0
sg39
F1.4000287380240479
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c\x17\x03\x8e('
tRp1280
sa(dp1281
S'trial_loop.thisTrialN'
p1282
I24
sg895
g896
sS'block_loop.thisIndex'
p1283
g889
sg38
S'left'
p1284
sg59
g63
sS'trial_loop.thisN'
p1285
I24
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1286
g60
(g99
S'\x18\x00\x00\x00'
tRp1287
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1288
I0
sg904
g905
sS'block_loop.thisRepN'
p1289
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1290
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1291
Nsg70
Vn
sS'block_loop.thisTrialN'
p1292
I0
sg39
F1.3666769492538151
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c\x1d\n\x12 '
tRp1293
sa(dp1294
S'trial_loop.thisTrialN'
p1295
I25
sg895
g1116
sS'block_loop.thisIndex'
p1296
g889
sg38
S'right'
p1297
sg59
g63
sS'trial_loop.thisN'
p1298
I25
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1299
g60
(g99
S'\x19\x00\x00\x00'
tRp1300
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1301
I0
sg904
g1124
sS'block_loop.thisRepN'
p1302
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1303
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p1304
Nsg70
Vn
sS'block_loop.thisTrialN'
p1305
I0
sg39
F1.0000607261808909
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c$\x00\xda\xc0'
tRp1306
sa(dp1307
S'trial_loop.thisTrialN'
p1308
I26
sg895
g1223
sS'block_loop.thisIndex'
p1309
g889
sg38
S'left'
p1310
sg59
g63
sS'trial_loop.thisN'
p1311
I26
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p1312
g60
(g99
S'\x1a\x00\x00\x00'
tRp1313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1314
I0
sg904
g1231
sS'block_loop.thisRepN'
p1315
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1316
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p1317
Nsg70
Vn
sS'block_loop.thisTrialN'
p1318
I0
sg39
F3.6665091967370245
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c*\x01kH'
tRp1319
sa(dp1320
S'trial_loop.thisTrialN'
p1321
I27
sg895
S'5-pineapple.png'
p1322
sS'block_loop.thisIndex'
p1323
g889
sg38
S'left'
p1324
sg59
g63
sS'trial_loop.thisN'
p1325
I27
sg33
S'40-sardines.png'
p1326
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
S'40-sardines.png'
p1330
sS'block_loop.thisRepN'
p1331
I0
sg907
S'5-pineapple.png'
p1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1333
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p1334
Nsg70
Vn
sS'block_loop.thisTrialN'
p1335
I0
sg39
F2.2332207570634637
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c2\x0c-0'
tRp1336
sa(dp1337
S'trial_loop.thisTrialN'
p1338
I28
sg895
S'1-treacle_cookies.png'
p1339
sS'block_loop.thisIndex'
p1340
g889
sg38
S'left'
p1341
sg59
g63
sS'trial_loop.thisN'
p1342
I28
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1343
g60
(g99
S'\x1c\x00\x00\x00'
tRp1344
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1345
I0
sg904
S'21-nakd_banana_crunch.png'
p1346
sS'block_loop.thisRepN'
p1347
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1348
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p1349
Nsg70
Vn
sS'block_loop.thisTrialN'
p1350
I0
sg39
F1.8166211838015442
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1c:\x01\t\xa0'
tRp1351
sa(dp1352
S'trial_loop.thisTrialN'
p1353
I29
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1354
sS'block_loop.thisIndex'
p1355
g889
sg38
S'right'
p1356
sg59
g63
sS'trial_loop.thisN'
p1357
I29
sg33
S'36-fig_rolls.png'
p1358
sg64
g65
sS'trial_loop.thisIndex'
p1359
g60
(g99
S'\x1d\x00\x00\x00'
tRp1360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1361
I0
sg904
S'36-fig_rolls.png'
p1362
sS'block_loop.thisRepN'
p1363
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1364
I0
sg910
S'34-hula_hoops_bbq_beef_redo.png'
p1365
sg55
g11
sS'block_loop.thisTrial'
p1366
Nsg70
Vn
sS'block_loop.thisTrialN'
p1367
I0
sg39
F3.2166439347383857
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d\x04\r\xfa '
tRp1368
sa(dp1369
S'trial_loop.thisTrialN'
p1370
I30
sg895
S'22-daim.png'
p1371
sS'block_loop.thisIndex'
p1372
g889
sg38
S'right'
p1373
sg59
g63
sS'trial_loop.thisN'
p1374
I30
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1375
g60
(g99
S'\x1e\x00\x00\x00'
tRp1376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1377
I0
sg904
S'7-olives.png'
p1378
sS'block_loop.thisRepN'
p1379
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1380
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p1381
Nsg70
Vn
sS'block_loop.thisTrialN'
p1382
I0
sg39
F1.1499380763998488
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d\r\x02\x90@'
tRp1383
sa(dp1384
S'trial_loop.thisTrialN'
p1385
I31
sg895
g1339
sS'block_loop.thisIndex'
p1386
g889
sg38
S'left'
p1387
sg59
g63
sS'trial_loop.thisN'
p1388
I31
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1389
g60
(g99
S'\x1f\x00\x00\x00'
tRp1390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1391
I0
sg904
g1346
sS'block_loop.thisRepN'
p1392
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1393
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p1394
Nsg70
Vn
sS'block_loop.thisTrialN'
p1395
I0
sg39
F1.5999384755396022
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d\x13\x05G\x90'
tRp1396
sa(dp1397
S'trial_loop.thisTrialN'
p1398
I32
sg895
S'19-caramello_redo.png'
p1399
sS'block_loop.thisIndex'
p1400
g889
sg38
S'left'
p1401
sg59
g63
sS'trial_loop.thisN'
p1402
I32
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p1403
g60
(g99
S' \x00\x00\x00'
tRp1404
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1405
I0
sg904
S'30-spaghetti_hoops.png'
p1406
sS'block_loop.thisRepN'
p1407
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1408
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p1409
Nsg70
Vn
sS'block_loop.thisTrialN'
p1410
I0
sg39
F1.1332440781989135
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d\x19\x0e\xe4\x80'
tRp1411
sa(dp1412
S'trial_loop.thisTrialN'
p1413
I33
sg895
S'18-mms.png'
p1414
sS'block_loop.thisIndex'
p1415
g889
sg38
S'left'
p1416
sg59
g63
sS'trial_loop.thisN'
p1417
I33
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1418
g60
(g99
S'!\x00\x00\x00'
tRp1419
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1420
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1421
sS'block_loop.thisRepN'
p1422
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1423
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p1424
Nsg70
Vn
sS'block_loop.thisTrialN'
p1425
I0
sg39
F0.99991760625925963
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d \x02\x1b\x10'
tRp1426
sa(dp1427
S'trial_loop.thisTrialN'
p1428
I34
sg895
S'36-fig_rolls.png'
p1429
sS'block_loop.thisIndex'
p1430
g889
sg38
S'left'
p1431
sg59
g63
sS'trial_loop.thisN'
p1432
I34
sg33
g1358
sg64
g65
sS'trial_loop.thisIndex'
p1433
g60
(g99
S'"\x00\x00\x00'
tRp1434
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1435
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1436
sS'block_loop.thisRepN'
p1437
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1438
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p1439
Nsg70
Vn
sS'block_loop.thisTrialN'
p1440
I0
sg39
F4.6833058307402098
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d&\x02\xab\x98'
tRp1441
sa(dp1442
S'trial_loop.thisTrialN'
p1443
I35
sg895
S'20-fruit_pastilles.png'
p1444
sS'block_loop.thisIndex'
p1445
g889
sg38
S'right'
p1446
sg59
g63
sS'trial_loop.thisN'
p1447
I35
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p1448
g60
(g99
S'#\x00\x00\x00'
tRp1449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1450
I0
sg904
S'2-steamed_puddings.png'
p1451
sS'block_loop.thisRepN'
p1452
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1453
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p1454
Nsg70
Vn
sS'block_loop.thisTrialN'
p1455
I0
sg39
F1.0000048466918088
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d/\r\xa40'
tRp1456
sa(dp1457
S'trial_loop.thisTrialN'
p1458
I36
sg895
S'23-crunchie_redo.png'
p1459
sS'block_loop.thisIndex'
p1460
g889
sg38
S'right'
p1461
sg59
g63
sS'trial_loop.thisN'
p1462
I36
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1463
g60
(g99
S'$\x00\x00\x00'
tRp1464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1465
I0
sg904
S'33-ambrosia_rice.png'
p1466
sS'block_loop.thisRepN'
p1467
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1468
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1469
Nsg70
Vn
sS'block_loop.thisTrialN'
p1470
I0
sg39
F2.8666190740659658
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1d5\x0e4\xb8'
tRp1471
sa(dp1472
S'trial_loop.thisTrialN'
p1473
I37
sg895
g950
sS'block_loop.thisIndex'
p1474
g889
sg38
S'left'
p1475
sg59
g63
sS'trial_loop.thisN'
p1476
I37
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1477
g60
(g99
S'%\x00\x00\x00'
tRp1478
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1479
I0
sg904
g958
sS'block_loop.thisRepN'
p1480
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1481
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1482
Nsg70
Vn
sS'block_loop.thisTrialN'
p1483
I0
sg39
F0.83341097541597264
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e\x01\x0c\x96\xa8'
tRp1484
sa(dp1485
S'trial_loop.thisTrialN'
p1486
I38
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1487
sS'block_loop.thisIndex'
p1488
g889
sg38
S'right'
p1489
sg59
g63
sS'trial_loop.thisN'
p1490
I38
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1491
g60
(g99
S'&\x00\x00\x00'
tRp1492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1493
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1494
sS'block_loop.thisRepN'
p1495
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1496
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p1497
Nsg70
Vn
sS'block_loop.thisTrialN'
p1498
I0
sg39
F1.7665944984928501
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e\x07\n\x87P'
tRp1499
sa(dp1500
S'trial_loop.thisTrialN'
p1501
I39
sg895
g1065
sS'block_loop.thisIndex'
p1502
g889
sg38
S'right'
p1503
sg59
g63
sS'trial_loop.thisN'
p1504
I39
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p1505
g60
(g99
S"'\x00\x00\x00"
tRp1506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1507
I0
sg904
g1073
sS'block_loop.thisRepN'
p1508
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1509
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p1510
Nsg70
Vn
sS'block_loop.thisTrialN'
p1511
I0
sg39
F1.3166927437632694
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e\x0e\x07\x81\xe0'
tRp1512
sa(dp1513
S'trial_loop.thisTrialN'
p1514
I40
sg895
S'40-sardines.png'
p1515
sS'block_loop.thisIndex'
p1516
g889
sg38
S'left'
p1517
sg59
g63
sS'trial_loop.thisN'
p1518
I40
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p1519
g60
(g99
S'(\x00\x00\x00'
tRp1520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1521
I0
sg904
S'5-pineapple.png'
p1522
sS'block_loop.thisRepN'
p1523
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1524
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p1525
Nsg70
Vn
sS'block_loop.thisTrialN'
p1526
I0
sg39
F1.4999920172158454
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e\x14\x0c\xd5('
tRp1527
sa(dp1528
S'trial_loop.thisTrialN'
p1529
I41
sg895
S'41-peanuts_redo.png'
p1530
sS'block_loop.thisIndex'
p1531
g889
sg38
S'left'
p1532
sg59
g63
sS'trial_loop.thisN'
p1533
I41
sg33
g1076
sg64
g65
sS'trial_loop.thisIndex'
p1534
g60
(g99
S')\x00\x00\x00'
tRp1535
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1536
I0
sg904
S'45-chewy_nougat_redo.png'
p1537
sS'block_loop.thisRepN'
p1538
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1539
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p1540
Nsg70
Vn
sS'block_loop.thisTrialN'
p1541
I0
sg39
F0.83328695715499634
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e\x1b\x05\xc4\x90'
tRp1542
sa(dp1543
S'trial_loop.thisTrialN'
p1544
I42
sg895
g1133
sS'block_loop.thisIndex'
p1545
g889
sg38
S'right'
p1546
sg59
g63
sS'trial_loop.thisN'
p1547
I42
sg33
g1137
sg64
g65
sS'trial_loop.thisIndex'
p1548
g60
(g99
S'*\x00\x00\x00'
tRp1549
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1550
I0
sg904
g1141
sS'block_loop.thisRepN'
p1551
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1552
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p1553
Nsg70
Vn
sS'block_loop.thisTrialN'
p1554
I0
sg39
F4.1999607703146467
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e!\x03\xb58'
tRp1555
sa(dp1556
S'trial_loop.thisTrialN'
p1557
I43
sg895
S'27-hartleys_raspberries_jelly.png'
p1558
sS'block_loop.thisIndex'
p1559
g889
sg38
S'right'
p1560
sg59
g63
sS'trial_loop.thisN'
p1561
I43
sg33
S'51-mars.png'
p1562
sg64
g65
sS'trial_loop.thisIndex'
p1563
g60
(g99
S'+\x00\x00\x00'
tRp1564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1565
I0
sg904
S'51-mars.png'
p1566
sS'block_loop.thisRepN'
p1567
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1568
I0
sg910
S'27-hartleys_raspberries_jelly.png'
p1569
sg55
g11
sS'block_loop.thisTrial'
p1570
Nsg70
Vn
sS'block_loop.thisTrialN'
p1571
I0
sg39
F1.1165885684240493
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e*\x07O\x18'
tRp1572
sa(dp1573
S'trial_loop.thisTrialN'
p1574
I44
sg895
g1223
sS'block_loop.thisIndex'
p1575
g889
sg38
S'left'
p1576
sg59
g63
sS'trial_loop.thisN'
p1577
I44
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p1578
g60
(g99
S',\x00\x00\x00'
tRp1579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1580
I0
sg904
g1231
sS'block_loop.thisRepN'
p1581
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1582
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p1583
Nsg70
Vn
sS'block_loop.thisTrialN'
p1584
I0
sg39
F0.8333702061954682
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e0\t\x89h'
tRp1585
sa(dp1586
S'trial_loop.thisTrialN'
p1587
I45
sg895
g1487
sS'block_loop.thisIndex'
p1588
g889
sg38
S'right'
p1589
sg59
g63
sS'trial_loop.thisN'
p1590
I45
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1591
g60
(g99
S'-\x00\x00\x00'
tRp1592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1593
I0
sg904
g1494
sS'block_loop.thisRepN'
p1594
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1595
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p1596
Nsg70
Vn
sS'block_loop.thisTrialN'
p1597
I0
sg39
F0.79988926737496513
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1e6\x07}\xf8'
tRp1598
sa(dp1599
S'trial_loop.thisTrialN'
p1600
I46
sg895
g916
sS'block_loop.thisIndex'
p1601
g889
sg38
S'left'
p1602
sg59
g63
sS'trial_loop.thisN'
p1603
I46
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1604
g60
(g99
S'.\x00\x00\x00'
tRp1605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1606
I0
sg904
g924
sS'block_loop.thisRepN'
p1607
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1608
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p1609
Nsg70
Vn
sS'block_loop.thisTrialN'
p1610
I0
sg39
F1.6832342707784846
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f\x00\x04\xf5\x88'
tRp1611
sa(dp1612
S'trial_loop.thisTrialN'
p1613
I47
sg895
g933
sS'block_loop.thisIndex'
p1614
g889
sg38
S'right'
p1615
sg59
g63
sS'trial_loop.thisN'
p1616
I47
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1617
g60
(g99
S'/\x00\x00\x00'
tRp1618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1619
I0
sg904
g941
sS'block_loop.thisRepN'
p1620
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1621
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1622
Nsg70
Vn
sS'block_loop.thisTrialN'
p1623
I0
sg39
F1.1333361653214524
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f\x07\x00\xbfh'
tRp1624
sa(dp1625
S'trial_loop.thisTrialN'
p1626
I48
sg895
g1444
sS'block_loop.thisIndex'
p1627
g889
sg38
S'right'
p1628
sg59
g63
sS'trial_loop.thisN'
p1629
I48
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p1630
g60
(g99
S'0\x00\x00\x00'
tRp1631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1632
I0
sg904
g1451
sS'block_loop.thisRepN'
p1633
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1634
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p1635
Nsg70
Vn
sS'block_loop.thisTrialN'
p1636
I0
sg39
F0.79989525446399057
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f\r\x0388'
tRp1637
sa(dp1638
S'trial_loop.thisTrialN'
p1639
I49
sg895
g1414
sS'block_loop.thisIndex'
p1640
g889
sg38
S'left'
p1641
sg59
g63
sS'trial_loop.thisN'
p1642
I49
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1643
g60
(g99
S'1\x00\x00\x00'
tRp1644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1645
I0
sg904
g1421
sS'block_loop.thisRepN'
p1646
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1647
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p1648
Nsg70
Vn
sS'block_loop.thisTrialN'
p1649
I0
sg39
F0.86703674475756998
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f\x13\x00\xaf\xc8'
tRp1650
sa(dp1651
S'trial_loop.thisTrialN'
p1652
I50
sg895
g1050
sS'block_loop.thisIndex'
p1653
g889
sg38
S'left'
p1654
sg59
g63
sS'trial_loop.thisN'
p1655
I50
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1656
g60
(g99
S'2\x00\x00\x00'
tRp1657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1658
I0
sg904
g1057
sS'block_loop.thisRepN'
p1659
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1660
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1661
Nsg70
Vn
sS'block_loop.thisTrialN'
p1662
I0
sg39
F0.78333069141262968
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f\x18\x0e_\xb0'
tRp1663
sa(dp1664
S'trial_loop.thisTrialN'
p1665
I51
sg895
g1399
sS'block_loop.thisIndex'
p1666
g889
sg38
S'left'
p1667
sg59
g63
sS'trial_loop.thisN'
p1668
I51
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p1669
g60
(g99
S'3\x00\x00\x00'
tRp1670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1671
I0
sg904
g1406
sS'block_loop.thisRepN'
p1672
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1673
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p1674
Nsg70
Vn
sS'block_loop.thisTrialN'
p1675
I0
sg39
F1.3164612430118723
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f\x1e\x0b\x9c\xa8'
tRp1676
sa(dp1677
S'trial_loop.thisTrialN'
p1678
I52
sg895
g1339
sS'block_loop.thisIndex'
p1679
g889
sg38
S'left'
p1680
sg59
g63
sS'trial_loop.thisN'
p1681
I52
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1682
g60
(g99
S'4\x00\x00\x00'
tRp1683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1684
I0
sg904
g1346
sS'block_loop.thisRepN'
p1685
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1686
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p1687
Nsg70
Vn
sS'block_loop.thisTrialN'
p1688
I0
sg39
F1.1833178049164417
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f%\x01\xad\xb0'
tRp1689
sa(dp1690
S'trial_loop.thisTrialN'
p1691
I53
sg895
S'13-mccoys_steak_crisps.png'
p1692
sS'block_loop.thisIndex'
p1693
g889
sg38
S'left'
p1694
sg59
g63
sS'trial_loop.thisN'
p1695
I53
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1696
g60
(g99
S'5\x00\x00\x00'
tRp1697
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1698
I0
sg904
S'3-ellas_strawberries_apples.png'
p1699
sS'block_loop.thisRepN'
p1700
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1701
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1702
Nsg70
Vn
sS'block_loop.thisTrialN'
p1703
I0
sg39
F0.99992587414271838
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f+\x05\x18\xb0'
tRp1704
sa(dp1705
S'trial_loop.thisTrialN'
p1706
I54
sg895
S'25-kitkat.png'
p1707
sS'block_loop.thisIndex'
p1708
g889
sg38
S'left'
p1709
sg59
g63
sS'trial_loop.thisN'
p1710
I54
sg33
S'31-hobnobs.png'
p1711
sg64
g65
sS'trial_loop.thisIndex'
p1712
g60
(g99
S'6\x00\x00\x00'
tRp1713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1714
I0
sg904
S'31-hobnobs.png'
p1715
sS'block_loop.thisRepN'
p1716
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1717
I0
sg910
S'25-kitkat.png'
p1718
sg55
g11
sS'block_loop.thisTrial'
p1719
Nsg70
Vn
sS'block_loop.thisTrialN'
p1720
I0
sg39
F6.9832427097226173
sg34
g753
(S'\x07\xdf\x07\x0e\x10\x1f1\x05n\xa0'
tRp1721
sa(dp1722
S'trial_loop.thisTrialN'
p1723
I55
sg895
g1240
sS'block_loop.thisIndex'
p1724
g889
sg38
S'left'
p1725
sg59
g63
sS'trial_loop.thisN'
p1726
I55
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p1727
g60
(g99
S'7\x00\x00\x00'
tRp1728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1729
I0
sg904
g1248
sS'block_loop.thisRepN'
p1730
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1731
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p1732
Nsg70
Vn
sS'block_loop.thisTrialN'
p1733
I0
sg39
F1.1499087111569679
sg34
g753
(S'\x07\xdf\x07\x0e\x10 \x01\x05\xd8\x18'
tRp1734
sa(dp1735
S'trial_loop.thisTrialN'
p1736
I56
sg895
g1165
sS'block_loop.thisIndex'
p1737
g889
sg38
S'right'
p1738
sg59
g63
sS'trial_loop.thisN'
p1739
I56
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1740
g60
(g99
S'8\x00\x00\x00'
tRp1741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1742
I0
sg904
g1172
sS'block_loop.thisRepN'
p1743
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1744
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1745
Nsg70
Vn
sS'block_loop.thisTrialN'
p1746
I0
sg39
F0.71667871686986473
sg34
g753
(S'\x07\xdf\x07\x0e\x10 \x07\x08\x8fh'
tRp1747
sa(dp1748
S'trial_loop.thisTrialN'
p1749
I57
sg895
g1050
sS'block_loop.thisIndex'
p1750
g889
sg38
S'left'
p1751
sg59
g63
sS'trial_loop.thisN'
p1752
I57
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1753
g60
(g99
S'9\x00\x00\x00'
tRp1754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1755
I0
sg904
g1057
sS'block_loop.thisRepN'
p1756
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1757
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1758
Nsg70
Vn
sS'block_loop.thisTrialN'
p1759
I0
sg39
F1.0333321169091505
sg34
g753
(S'\x07\xdf\x07\x0e\x10 \r\x04\xd6H'
tRp1760
sa(dp1761
S'trial_loop.thisTrialN'
p1762
I58
sg895
g1116
sS'block_loop.thisIndex'
p1763
g889
sg38
S'right'
p1764
sg59
g63
sS'trial_loop.thisN'
p1765
I58
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1766
g60
(g99
S':\x00\x00\x00'
tRp1767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1768
I0
sg904
g1124
sS'block_loop.thisRepN'
p1769
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1770
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p1771
Nsg70
Vn
sS'block_loop.thisTrialN'
p1772
I0
sg39
F0.73334477532443998
sg34
g753
(S'\x07\xdf\x07\x0e\x10 \x13\x05\xa5P'
tRp1773
sa(dp1774
S'trial_loop.thisTrialN'
p1775
I59
sg895
S'51-mars.png'
p1776
sS'block_loop.thisIndex'
p1777
g889
sg38
S'left'
p1778
sg59
g63
sS'trial_loop.thisN'
p1779
I59
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p1780
g60
(g99
S';\x00\x00\x00'
tRp1781
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1782
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1783
sS'block_loop.thisRepN'
p1784
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1785
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p1786
Nsg70
Vn
sS'block_loop.thisTrialN'
p1787
I0
sg39
F0.86661593797180103
sg34
g753
(S'\x07\xdf\x07\x0e\x10 \x19\x02*\xb0'
tRp1788
sa(dp1789
S'trial_loop.thisTrialN'
p1790
I60
sg895
S'16-skips_prawn.png'
p1791
sS'block_loop.thisIndex'
p1792
g889
sg38
S'left'
p1793
sg59
g63
sS'trial_loop.thisN'
p1794
I60
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p1795
g60
(g99
S'<\x00\x00\x00'
tRp1796
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1797
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1798
sS'block_loop.thisRepN'
p1799
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1800
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p1801
Nsg70
Vn
sS'block_loop.thisTrialN'
p1802
I0
sg39
F3.1668923703964538
sg34
g753
(S'\x07\xdf\x07\x0e\x10 \x1f\x00\x98X'
tRp1803
sa(dp1804
S'trial_loop.thisTrialN'
p1805
I61
sg895
g1082
sS'block_loop.thisIndex'
p1806
g889
sg38
S'left'
p1807
sg59
g63
sS'trial_loop.thisN'
p1808
I61
sg33
g1093
sg64
g65
sS'trial_loop.thisIndex'
p1809
g60
(g99
S'=\x00\x00\x00'
tRp1810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1811
I0
sg904
g1090
sS'block_loop.thisRepN'
p1812
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1813
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p1814
Nsg70
Vn
sS'block_loop.thisTrialN'
p1815
I0
sg39
F1.0000256589501078
sg34
g753
(S"\x07\xdf\x07\x0e\x10 '\x03\xbd\x08"
tRp1816
sa(dp1817
S'trial_loop.thisTrialN'
p1818
I62
sg895
g1692
sS'block_loop.thisIndex'
p1819
g889
sg38
S'left'
p1820
sg59
g63
sS'trial_loop.thisN'
p1821
I62
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1822
g60
(g99
S'>\x00\x00\x00'
tRp1823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1824
I0
sg904
g1699
sS'block_loop.thisRepN'
p1825
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1826
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1827
Nsg70
Vn
sS'block_loop.thisTrialN'
p1828
I0
sg39
F1.2333251034615387
sg34
g753
(S'\x07\xdf\x07\x0e\x10 -\x04M\x90'
tRp1829
sa(dp1830
S'trial_loop.thisTrialN'
p1831
I63
sg895
g1776
sS'block_loop.thisIndex'
p1832
g889
sg38
S'left'
p1833
sg59
g63
sS'trial_loop.thisN'
p1834
I63
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p1835
g60
(g99
S'?\x00\x00\x00'
tRp1836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1837
I0
sg904
g1783
sS'block_loop.thisRepN'
p1838
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1839
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p1840
Nsg70
Vn
sS'block_loop.thisTrialN'
p1841
I0
sg39
F0.73332766935891414
sg34
g753
(S'\x07\xdf\x07\x0e\x10 3\x085\x90'
tRp1842
sa(dp1843
S'trial_loop.thisTrialN'
p1844
I64
sg895
g1399
sS'block_loop.thisIndex'
p1845
g889
sg38
S'left'
p1846
sg59
g63
sS'trial_loop.thisN'
p1847
I64
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p1848
g60
(g99
S'@\x00\x00\x00'
tRp1849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1850
I0
sg904
g1406
sS'block_loop.thisRepN'
p1851
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1852
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p1853
Nsg70
Vn
sS'block_loop.thisTrialN'
p1854
I0
sg39
F1.2332834789431217
sg34
g753
(S'\x07\xdf\x07\x0e\x10 9\x04\xba\xf0'
tRp1855
sa(dp1856
S'trial_loop.thisTrialN'
p1857
I65
sg895
S'31-hobnobs.png'
p1858
sS'block_loop.thisIndex'
p1859
g889
sg38
S'left'
p1860
sg59
g63
sS'trial_loop.thisN'
p1861
I65
sg33
g1718
sg64
g65
sS'trial_loop.thisIndex'
p1862
g60
(g99
S'A\x00\x00\x00'
tRp1863
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1864
I0
sg904
S'25-kitkat.png'
p1865
sS'block_loop.thisRepN'
p1866
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1867
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p1868
Nsg70
Vn
sS'block_loop.thisTrialN'
p1869
I0
sg39
F1.1337119263953355
sg34
g753
(S'\x07\xdf\x07\x0e\x10!\x03\x08\xdd\x88'
tRp1870
sa(dp1871
S'trial_loop.thisTrialN'
p1872
I66
sg895
S'50-polo.png'
p1873
sS'block_loop.thisIndex'
p1874
g889
sg38
S'right'
p1875
sg59
g63
sS'trial_loop.thisN'
p1876
I66
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p1877
g60
(g99
S'B\x00\x00\x00'
tRp1878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1879
I0
sg904
S'48-twix.png'
p1880
sS'block_loop.thisRepN'
p1881
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1882
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p1883
Nsg70
Vn
sS'block_loop.thisTrialN'
p1884
I0
sg39
F1.1832525171430461
sg34
g753
(S'\x07\xdf\x07\x0e\x10!\t\x0bVX'
tRp1885
sa(dp1886
S'trial_loop.thisTrialN'
p1887
I67
sg895
g1444
sS'block_loop.thisIndex'
p1888
g889
sg38
S'right'
p1889
sg59
g63
sS'trial_loop.thisN'
p1890
I67
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p1891
g60
(g99
S'C\x00\x00\x00'
tRp1892
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1893
I0
sg904
g1451
sS'block_loop.thisRepN'
p1894
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1895
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p1896
Nsg70
Vn
sS'block_loop.thisTrialN'
p1897
I0
sg39
F0.88324265270239266
sg34
g753
(S'\x07\xdf\x07\x0e\x10!\x0f\x0e\xc1X'
tRp1898
sa(dp1899
S'trial_loop.thisTrialN'
p1900
I68
sg895
g1339
sS'block_loop.thisIndex'
p1901
g889
sg38
S'left'
p1902
sg59
g63
sS'trial_loop.thisN'
p1903
I68
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1904
g60
(g99
S'D\x00\x00\x00'
tRp1905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1906
I0
sg904
g1346
sS'block_loop.thisRepN'
p1907
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1908
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p1909
Nsg70
Vn
sS'block_loop.thisTrialN'
p1910
I0
sg39
F1.049922053811315
sg34
g753
(S'\x07\xdf\x07\x0e\x10!\x15\rm\x80'
tRp1911
sa(dp1912
S'trial_loop.thisTrialN'
p1913
I69
sg895
g1133
sS'block_loop.thisIndex'
p1914
g889
sg38
S'right'
p1915
sg59
g63
sS'trial_loop.thisN'
p1916
I69
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p1917
g60
(g99
S'E\x00\x00\x00'
tRp1918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1919
I0
sg904
g1141
sS'block_loop.thisRepN'
p1920
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1921
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p1922
Nsg70
Vn
sS'block_loop.thisTrialN'
p1923
I0
sg39
F1.133344148105607
sg34
g753
(S'\x07\xdf\x07\x0e\x10!\x1b\x0e\xb5\xa0'
tRp1924
sa(dp1925
S'trial_loop.thisTrialN'
p1926
I70
sg895
g950
sS'block_loop.thisIndex'
p1927
g889
sg38
S'left'
p1928
sg59
g63
sS'trial_loop.thisN'
p1929
I70
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1930
g60
(g99
S'F\x00\x00\x00'
tRp1931
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1932
I0
sg904
g958
sS'block_loop.thisRepN'
p1933
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1934
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1935
Nsg70
Vn
sS'block_loop.thisTrialN'
p1936
I0
sg39
F0.86704700833797688
sg34
g753
(S'\x07\xdf\x07\x0e\x10!"\x01\xec0'
tRp1937
sa(dp1938
S'trial_loop.thisTrialN'
p1939
I71
sg895
g1530
sS'block_loop.thisIndex'
p1940
g889
sg38
S'left'
p1941
sg59
g63
sS'trial_loop.thisN'
p1942
I71
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p1943
g60
(g99
S'G\x00\x00\x00'
tRp1944
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1945
I0
sg904
g1537
sS'block_loop.thisRepN'
p1946
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1947
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p1948
Nsg70
Vn
sS'block_loop.thisTrialN'
p1949
I0
sg39
F1.1999992587407178
sg34
g753
(S'\x07\xdf\x07\x0e\x10!(\x00U\xf0'
tRp1950
sa(dp1951
S'trial_loop.thisTrialN'
p1952
I72
sg895
g1515
sS'block_loop.thisIndex'
p1953
g889
sg38
S'left'
p1954
sg59
g63
sS'trial_loop.thisN'
p1955
I72
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p1956
g60
(g99
S'H\x00\x00\x00'
tRp1957
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1958
I0
sg904
g1522
sS'block_loop.thisRepN'
p1959
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1960
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p1961
Nsg70
Vn
sS'block_loop.thisTrialN'
p1962
I0
sg39
F1.8999454889853951
sg34
g753
(S'\x07\xdf\x07\x0e\x10!.\x03\xffp'
tRp1963
sa(dp1964
S'trial_loop.thisTrialN'
p1965
I73
sg895
S'35-raisins.png'
p1966
sS'block_loop.thisIndex'
p1967
g889
sg38
S'left'
p1968
sg59
g63
sS'trial_loop.thisN'
p1969
I73
sg33
g1137
sg64
g65
sS'trial_loop.thisIndex'
p1970
g60
(g99
S'I\x00\x00\x00'
tRp1971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1972
I0
sg904
S'49-yorkie.png'
p1973
sS'block_loop.thisRepN'
p1974
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1975
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p1976
Nsg70
Vn
sS'block_loop.thisTrialN'
p1977
I0
sg39
F1.6833203708119981
sg34
g753
(S'\x07\xdf\x07\x0e\x10!5\x02\xe2H'
tRp1978
sa(dp1979
S'trial_loop.thisTrialN'
p1980
I74
sg895
g1791
sS'block_loop.thisIndex'
p1981
g889
sg38
S'right'
p1982
sg59
g63
sS'trial_loop.thisN'
p1983
I74
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p1984
g60
(g99
S'J\x00\x00\x00'
tRp1985
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1986
I0
sg904
g1798
sS'block_loop.thisRepN'
p1987
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1988
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p1989
Nsg70
Vn
sS'block_loop.thisTrialN'
p1990
I0
sg39
F1.4665019552121521
sg34
g753
(S'\x07\xdf\x07\x0e\x10!;\r\xea\x80'
tRp1991
sa(dp1992
S'trial_loop.thisTrialN'
p1993
I75
sg895
g933
sS'block_loop.thisIndex'
p1994
g889
sg38
S'right'
p1995
sg59
g63
sS'trial_loop.thisN'
p1996
I75
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1997
g60
(g99
S'K\x00\x00\x00'
tRp1998
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1999
I0
sg904
g941
sS'block_loop.thisRepN'
p2000
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2001
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2002
Nsg70
Vn
sS'block_loop.thisTrialN'
p2003
I0
sg39
F0.76670625747647136
sg34
g753
(S'\x07\xdf\x07\x0e\x10"\x06\x06"P'
tRp2004
sa(dp2005
S'trial_loop.thisTrialN'
p2006
I76
sg895
g1459
sS'block_loop.thisIndex'
p2007
g889
sg38
S'left'
p2008
sg59
g63
sS'trial_loop.thisN'
p2009
I76
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2010
g60
(g99
S'L\x00\x00\x00'
tRp2011
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2012
I0
sg904
g1466
sS'block_loop.thisRepN'
p2013
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2014
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2015
Nsg70
Vn
sS'block_loop.thisTrialN'
p2016
I0
sg39
F4.1666124027378828
sg34
g753
(S'\x07\xdf\x07\x0e\x10"\x0c\x03 \xc8'
tRp2017
sa(dp2018
S'trial_loop.thisTrialN'
p2019
I77
sg895
g1371
sS'block_loop.thisIndex'
p2020
g889
sg38
S'right'
p2021
sg59
g63
sS'trial_loop.thisN'
p2022
I77
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2023
g60
(g99
S'M\x00\x00\x00'
tRp2024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2025
I0
sg904
g1378
sS'block_loop.thisRepN'
p2026
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2027
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2028
Nsg70
Vn
sS'block_loop.thisTrialN'
p2029
I0
sg39
F2.2332270292536123
sg34
g753
(S'\x07\xdf\x07\x0e\x10"\x15\x06=\xa8'
tRp2030
sa(dp2031
S'trial_loop.thisTrialN'
p2032
I78
sg895
g1150
sS'block_loop.thisIndex'
p2033
g889
sg38
S'left'
p2034
sg59
g63
sS'trial_loop.thisN'
p2035
I78
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2036
g60
(g99
S'N\x00\x00\x00'
tRp2037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2038
I0
sg904
g1157
sS'block_loop.thisRepN'
p2039
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2040
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2041
Nsg70
Vn
sS'block_loop.thisTrialN'
p2042
I0
sg39
F1.233049127195045
sg34
g753
(S'\x07\xdf\x07\x0e\x10"\x1c\n\\X'
tRp2043
sa(dp2044
S'trial_loop.thisTrialN'
p2045
I79
sg895
g1240
sS'block_loop.thisIndex'
p2046
g889
sg38
S'left'
p2047
sg59
g63
sS'trial_loop.thisN'
p2048
I79
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p2049
g60
(g99
S'O\x00\x00\x00'
tRp2050
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2051
I0
sg904
g1248
sS'block_loop.thisRepN'
p2052
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2053
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p2054
Nsg70
Vn
sS'block_loop.thisTrialN'
p2055
I0
sg39
F0.86666725587201654
sg34
g753
(S'\x07\xdf\x07\x0e\x10""\x0eDX'
tRp2056
sa(dp2057
S'trial_loop.thisTrialN'
p2058
I80
sg895
g1530
sS'block_loop.thisIndex'
p2059
g889
sg38
S'left'
p2060
sg59
g63
sS'trial_loop.thisN'
p2061
I80
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p2062
g60
(g99
S'P\x00\x00\x00'
tRp2063
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2064
I0
sg904
g1537
sS'block_loop.thisRepN'
p2065
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2066
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p2067
Nsg70
Vn
sS'block_loop.thisTrialN'
p2068
I0
sg39
F0.81693963988618634
sg34
g753
(S'\x07\xdf\x07\x0e\x10"(\x0c\xec\x98'
tRp2069
sa(dp2070
S'trial_loop.thisTrialN'
p2071
I81
sg895
g1001
sS'block_loop.thisIndex'
p2072
g889
sg38
S'right'
p2073
sg59
g63
sS'trial_loop.thisN'
p2074
I81
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2075
g60
(g99
S'Q\x00\x00\x00'
tRp2076
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2077
I0
sg904
g1009
sS'block_loop.thisRepN'
p2078
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2079
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2080
Nsg70
Vn
sS'block_loop.thisTrialN'
p2081
I0
sg39
F0.81669759045325918
sg34
g753
(S'\x07\xdf\x07\x0e\x10".\n\xa2\xa8'
tRp2082
sa(dp2083
S'trial_loop.thisTrialN'
p2084
I82
sg895
g1429
sS'block_loop.thisIndex'
p2085
g889
sg38
S'left'
p2086
sg59
g63
sS'trial_loop.thisN'
p2087
I82
sg33
g1365
sg64
g65
sS'trial_loop.thisIndex'
p2088
g60
(g99
S'R\x00\x00\x00'
tRp2089
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2090
I0
sg904
g1436
sS'block_loop.thisRepN'
p2091
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2092
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p2093
Nsg70
Vn
sS'block_loop.thisTrialN'
p2094
I0
sg39
F1.3000010263567674
sg34
g753
(S'\x07\xdf\x07\x0e\x10"4\x08X\xb8'
tRp2095
sa(dp2096
S'trial_loop.thisTrialN'
p2097
I83
sg895
g1099
sS'block_loop.thisIndex'
p2098
g889
sg38
S'right'
p2099
sg59
g63
sS'trial_loop.thisN'
p2100
I83
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2101
g60
(g99
S'S\x00\x00\x00'
tRp2102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2103
I0
sg904
g1107
sS'block_loop.thisRepN'
p2104
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2105
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p2106
Nsg70
Vn
sS'block_loop.thisTrialN'
p2107
I0
sg39
F1.9833236779650179
sg34
g753
(S'\x07\xdf\x07\x0e\x10":\rqh'
tRp2108
sa(dp2109
S'trial_loop.thisTrialN'
p2110
I84
sg895
g1515
sS'block_loop.thisIndex'
p2111
g889
sg38
S'right'
p2112
sg59
g63
sS'trial_loop.thisN'
p2113
I84
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p2114
g60
(g99
S'T\x00\x00\x00'
tRp2115
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2116
I0
sg904
g1522
sS'block_loop.thisRepN'
p2117
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2118
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p2119
Nsg70
Vn
sS'block_loop.thisTrialN'
p2120
I0
sg39
F1.0333440910853824
sg34
g753
(S'\x07\xdf\x07\x0e\x10#\x05\r\x81\x08'
tRp2121
sa(dp2122
S'trial_loop.thisTrialN'
p2123
I85
sg895
g1459
sS'block_loop.thisIndex'
p2124
g889
sg38
S'left'
p2125
sg59
g63
sS'trial_loop.thisN'
p2126
I85
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2127
g60
(g99
S'U\x00\x00\x00'
tRp2128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2129
I0
sg904
g1466
sS'block_loop.thisRepN'
p2130
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2131
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2132
Nsg70
Vn
sS'block_loop.thisTrialN'
p2133
I0
sg39
F1.2666771773328946
sg34
g753
(S'\x07\xdf\x07\x0e\x10#\x0b\x0e\x8a\xa8'
tRp2134
sa(dp2135
S'trial_loop.thisTrialN'
p2136
I86
sg895
g1707
sS'block_loop.thisIndex'
p2137
g889
sg38
S'right'
p2138
sg59
g63
sS'trial_loop.thisN'
p2139
I86
sg33
g1718
sg64
g65
sS'trial_loop.thisIndex'
p2140
g60
(g99
S'V\x00\x00\x00'
tRp2141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2142
I0
sg904
g1715
sS'block_loop.thisRepN'
p2143
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2144
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p2145
Nsg70
Vn
sS'block_loop.thisTrialN'
p2146
I0
sg39
F1.3166710762052389
sg34
g753
(S'\x07\xdf\x07\x0e\x10#\x12\x03\xe8\x00'
tRp2147
sa(dp2148
S'trial_loop.thisTrialN'
p2149
I87
sg895
g1033
sS'block_loop.thisIndex'
p2150
g889
sg38
S'left'
p2151
sg59
g63
sS'trial_loop.thisN'
p2152
I87
sg33
g1044
sg64
g65
sS'trial_loop.thisIndex'
p2153
g60
(g99
S'W\x00\x00\x00'
tRp2154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2155
I0
sg904
g1041
sS'block_loop.thisRepN'
p2156
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2157
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p2158
Nsg70
Vn
sS'block_loop.thisTrialN'
p2159
I0
sg39
F0.91647954639665841
sg34
g753
(S'\x07\xdf\x07\x0e\x10#\x18\t;H'
tRp2160
sa(dp2161
S'trial_loop.thisTrialN'
p2162
I88
sg895
g1966
sS'block_loop.thisIndex'
p2163
g889
sg38
S'left'
p2164
sg59
g63
sS'trial_loop.thisN'
p2165
I88
sg33
g1137
sg64
g65
sS'trial_loop.thisIndex'
p2166
g60
(g99
S'X\x00\x00\x00'
tRp2167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2168
I0
sg904
g1973
sS'block_loop.thisRepN'
p2169
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2170
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p2171
Nsg70
Vn
sS'block_loop.thisTrialN'
p2172
I0
sg39
F1.1833907903765066
sg34
g753
(S'\x07\xdf\x07\x0e\x10#\x1e\x08\x9b '
tRp2173
sa(dp2174
S'trial_loop.thisTrialN'
p2175
I89
sg895
g1354
sS'block_loop.thisIndex'
p2176
g889
sg38
S'right'
p2177
sg59
g63
sS'trial_loop.thisN'
p2178
I89
sg33
g1365
sg64
g65
sS'trial_loop.thisIndex'
p2179
g60
(g99
S'Y\x00\x00\x00'
tRp2180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2181
I0
sg904
g1362
sS'block_loop.thisRepN'
p2182
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2183
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p2184
Nsg70
Vn
sS'block_loop.thisTrialN'
p2185
I0
sg39
F0.7500102635804069
sg34
g753
(S'\x07\xdf\x07\x0e\x10#$\x0b\xcb\x88'
tRp2186
sa(dp2187
S'trial_loop.thisTrialN'
p2188
I90
sg895
g1165
sS'block_loop.thisIndex'
p2189
g889
sg38
S'right'
p2190
sg59
g63
sS'trial_loop.thisN'
p2191
I90
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2192
g60
(g99
S'Z\x00\x00\x00'
tRp2193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2194
I0
sg904
g1172
sS'block_loop.thisRepN'
p2195
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2196
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2197
Nsg70
Vn
sS'block_loop.thisTrialN'
p2198
I0
sg39
F0.80001414093203493
sg34
g753
(S'\x07\xdf\x07\x0e\x10#*\x08\x8fh'
tRp2199
sa(dp2200
S'trial_loop.thisTrialN'
p2201
I91
sg895
g1515
sS'block_loop.thisIndex'
p2202
g889
sg38
S'right'
p2203
sg59
g63
sS'trial_loop.thisN'
p2204
I91
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p2205
g60
(g99
S'[\x00\x00\x00'
tRp2206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2207
I0
sg904
g1522
sS'block_loop.thisRepN'
p2208
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2209
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p2210
Nsg70
Vn
sS'block_loop.thisTrialN'
p2211
I0
sg39
F0.85000889510411071
sg34
g753
(S'\x07\xdf\x07\x0e\x10#0\x06\x06\xf8'
tRp2212
sa(dp2213
S'trial_loop.thisTrialN'
p2214
I92
sg895
g1558
sS'block_loop.thisIndex'
p2215
g889
sg38
S'right'
p2216
sg59
g63
sS'trial_loop.thisN'
p2217
I92
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p2218
g60
(g99
S'\\\x00\x00\x00'
tRp2219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2220
I0
sg904
g1566
sS'block_loop.thisRepN'
p2221
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2222
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p2223
Nsg70
Vn
sS'block_loop.thisTrialN'
p2224
I0
sg39
F0.84974603341106558
sg34
g753
(S'\x07\xdf\x07\x0e\x10#6\x046 '
tRp2225
sa(dp2226
S'trial_loop.thisTrialN'
p2227
I93
sg895
g1791
sS'block_loop.thisIndex'
p2228
g889
sg38
S'right'
p2229
sg59
g63
sS'trial_loop.thisN'
p2230
I93
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p2231
g60
(g99
S']\x00\x00\x00'
tRp2232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2233
I0
sg904
g1798
sS'block_loop.thisRepN'
p2234
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2235
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p2236
Nsg70
Vn
sS'block_loop.thisTrialN'
p2237
I0
sg39
F0.78322149832456489
sg34
g753
(S'\x07\xdf\x07\x0e\x10$\x00\x02eH'
tRp2238
sa(dp2239
S'trial_loop.thisTrialN'
p2240
I94
sg895
g1180
sS'block_loop.thisIndex'
p2241
g889
sg38
S'left'
p2242
sg59
g63
sS'trial_loop.thisN'
p2243
I94
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2244
g60
(g99
S'^\x00\x00\x00'
tRp2245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2246
I0
sg904
g1188
sS'block_loop.thisRepN'
p2247
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2248
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vn
sS'block_loop.thisTrialN'
p2250
I0
sg39
F1.0836826751910849
sg34
g753
(S'\x07\xdf\x07\x0e\x10$\x05\x0e\xe4\x80'
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g896
sS'block_loop.thisIndex'
p2254
g889
sg38
S'right'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g905
sS'block_loop.thisRepN'
p2260
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2261
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vn
sS'block_loop.thisTrialN'
p2263
I0
sg39
F0.81667563779592456
sg34
g753
(S'\x07\xdf\x07\x0e\x10$\x0c\x01cx'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1339
sS'block_loop.thisIndex'
p2267
g889
sg38
S'left'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1346
sS'block_loop.thisRepN'
p2273
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2274
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vn
sS'block_loop.thisTrialN'
p2276
I0
sg39
F1.1000522302183526
sg34
g753
(S'\x07\xdf\x07\x0e\x10$\x11\x0e_\xb0'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g1429
sS'block_loop.thisIndex'
p2280
g889
sg38
S'right'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g1358
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g1436
sS'block_loop.thisRepN'
p2286
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2287
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vn
sS'block_loop.thisTrialN'
p2289
I0
sg39
F1.1333355951210251
sg34
g753
(S'\x07\xdf\x07\x0e\x10$\x18\x01\x19@'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g1487
sS'block_loop.thisIndex'
p2293
g889
sg38
S'right'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g1494
sS'block_loop.thisRepN'
p2299
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2300
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vn
sS'block_loop.thisTrialN'
p2302
I0
sg39
F1.0999125314901903
sg34
g753
(S'\x07\xdf\x07\x0e\x10$\x1e\x03\x92\x10'
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g1165
sS'block_loop.thisIndex'
p2306
g889
sg38
S'right'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g1172
sS'block_loop.thisRepN'
p2312
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2313
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vn
sS'block_loop.thisTrialN'
p2315
I0
sg39
F0.71664678573142737
sg34
g753
(S'\x07\xdf\x07\x0e\x10$$\x05\xd0H'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1033
sS'block_loop.thisIndex'
p2319
g889
sg38
S'left'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1041
sS'block_loop.thisRepN'
p2325
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2326
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vn
sS'block_loop.thisTrialN'
p2328
I0
sg39
F1.0665886824644986
sg34
g753
(S'\x07\xdf\x07\x0e\x10$*\x01\xdc\x90'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g933
sS'block_loop.thisIndex'
p2332
g889
sg38
S'right'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g941
sS'block_loop.thisRepN'
p2338
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2339
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vn
sS'block_loop.thisTrialN'
p2341
I0
sg39
F1.2000311898791551
sg34
g753
(S'\x07\xdf\x07\x0e\x10$0\x03_H'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1414
sS'block_loop.thisIndex'
p2345
g889
sg38
S'left'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1421
sS'block_loop.thisRepN'
p2351
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2352
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vn
sS'block_loop.thisTrialN'
p2354
I0
sg39
F0.90000535987019248
sg34
g753
(S'\x07\xdf\x07\x0e\x10$6\x07\x08\xc8'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g1459
sS'block_loop.thisIndex'
p2358
g889
sg38
S'left'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1466
sS'block_loop.thisRepN'
p2364
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2365
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vn
sS'block_loop.thisTrialN'
p2367
I0
sg39
F1.3333362793600827
sg34
g753
(S'\x07\xdf\x07\x0e\x10%\x00\x05\xef\x88'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g1707
sS'block_loop.thisIndex'
p2371
g889
sg38
S'left'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g1711
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g1715
sS'block_loop.thisRepN'
p2377
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2378
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vn
sS'block_loop.thisTrialN'
p2380
I0
sg39
F1.333288097554032
sg34
g753
(S'\x07\xdf\x07\x0e\x10%\x06\x0b\x81P'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g1018
sS'block_loop.thisIndex'
p2384
g889
sg38
S'right'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g1025
sS'block_loop.thisRepN'
p2390
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2391
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vn
sS'block_loop.thisTrialN'
p2393
I0
sg39
F1.1998450199407671
sg34
g753
(S'\x07\xdf\x07\x0e\x10%\r\x01\xd0\xd8'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g1459
sS'block_loop.thisIndex'
p2397
g889
sg38
S'left'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g1466
sS'block_loop.thisRepN'
p2403
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2404
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vn
sS'block_loop.thisTrialN'
p2406
I0
sg39
F1.2999958945674734
sg34
g753
(S'\x07\xdf\x07\x0e\x10%\x13\x05zX'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g1371
sS'block_loop.thisIndex'
p2410
g889
sg38
S'right'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g1378
sS'block_loop.thisRepN'
p2416
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2417
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vn
sS'block_loop.thisTrialN'
p2419
I0
sg39
F2.0666665146145533
sg34
g753
(S'\x07\xdf\x07\x0e\x10%\x19\n\x8f '
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g1414
sS'block_loop.thisIndex'
p2423
g889
sg38
S'left'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g1421
sS'block_loop.thisRepN'
p2429
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2430
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vn
sS'block_loop.thisTrialN'
p2432
I0
sg39
F0.78336376294828369
sg34
g753
(S'\x07\xdf\x07\x0e\x10% \x0c\r\xf0'
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g1707
sS'block_loop.thisIndex'
p2436
g889
sg38
S'left'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g1711
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g1715
sS'block_loop.thisRepN'
p2442
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2443
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vn
sS'block_loop.thisTrialN'
p2445
I0
sg39
F1.1665873139863834
sg34
g753
(S'\x07\xdf\x07\x0e\x10%&\tJ\xe8'
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g1515
sS'block_loop.thisIndex'
p2449
g889
sg38
S'right'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g1522
sS'block_loop.thisRepN'
p2455
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2456
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vn
sS'block_loop.thisTrialN'
p2458
I0
sg39
F1.0332380340914824
sg34
g753
(S'\x07\xdf\x07\x0e\x10%,\x0c<\xd0'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1558
sS'block_loop.thisIndex'
p2462
g889
sg38
S'right'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1569
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1566
sS'block_loop.thisRepN'
p2468
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2469
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vn
sS'block_loop.thisTrialN'
p2471
I0
sg39
F0.70038813438986836
sg34
g753
(S'\x07\xdf\x07\x0e\x10%2\rJX'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1180
sS'block_loop.thisIndex'
p2475
g889
sg38
S'right'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1188
sS'block_loop.thisRepN'
p2481
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2482
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vn
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.1832884396735608
sg34
g753
(S'\x07\xdf\x07\x0e\x10%8\tV\xa0'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g967
sS'block_loop.thisIndex'
p2488
g889
sg38
S'right'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g975
sS'block_loop.thisRepN'
p2494
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2495
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vn
sS'block_loop.thisTrialN'
p2497
I0
sg39
F0.9166819670026598
sg34
g753
(S'\x07\xdf\x07\x0e\x10&\x02\x0c\x83 '
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g916
sS'block_loop.thisIndex'
p2501
g889
sg38
S'left'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g924
sS'block_loop.thisRepN'
p2507
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2508
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vn
sS'block_loop.thisTrialN'
p2510
I0
sg39
F0.88328570271914941
sg34
g753
(S'\x07\xdf\x07\x0e\x10&\x08\x0b\xe6\xe0'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g896
sS'block_loop.thisIndex'
p2514
g889
sg38
S'right'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g905
sS'block_loop.thisRepN'
p2520
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2521
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vn
sS'block_loop.thisTrialN'
p2523
I0
sg39
F0.68336199533223407
sg34
g753
(S'\x07\xdf\x07\x0e\x10&\x0e\n\x8f '
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1966
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1973
sS'block_loop.thisRepN'
p2533
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2534
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F0.84994617322445265
sg34
g753
(S'\x07\xdf\x07\x0e\x10&\x14\x06"P'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1150
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1157
sS'block_loop.thisRepN'
p2546
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2547
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.93310455052960606
sg34
g753
(S'\x07\xdf\x07\x0e\x10&\x1a\x04\x8f\xf8'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1018
sS'block_loop.thisIndex'
p2553
g889
sg38
S'right'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1025
sS'block_loop.thisRepN'
p2559
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2560
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.2166858443561068
sg34
g753
(S'\x07\xdf\x07\x0e\x10& \x03\xef\xd0'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g984
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g992
sS'block_loop.thisRepN'
p2572
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2573
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F0.74974341049528448
sg34
g753
(S'\x07\xdf\x07\x0e\x10&&\x07\xd3\xe8'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g1530
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1076
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g1537
sS'block_loop.thisRepN'
p2585
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2586
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F0.98329744881630177
sg34
g753
(S'\x07\xdf\x07\x0e\x10&,\x04YH'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1873
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1880
sS'block_loop.thisRepN'
p2598
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2599
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F0.99991418506579066
sg34
g753
(S'\x07\xdf\x07\x0e\x10&2\x04\xaf8'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1530
sS'block_loop.thisIndex'
p2605
g889
sg38
S'left'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1537
sS'block_loop.thisRepN'
p2611
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2612
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.1337113561949081
sg34
g753
(S'\x07\xdf\x07\x0e\x10&8\x05?\xc0'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1099
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1110
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1107
sS'block_loop.thisRepN'
p2624
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2625
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.0999131016869796
sg34
g753
(S"\x07\xdf\x07\x0e\x10'\x02\x07\xb8\x90"
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1322
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1330
sS'block_loop.thisRepN'
p2637
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2638
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F0.81665511063692975
sg34
g753
(S"\x07\xdf\x07\x0e\x10'\x08\t\xb8H"
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1018
sS'block_loop.thisIndex'
p2644
g889
sg38
S'right'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1025
sS'block_loop.thisRepN'
p2650
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2651
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F0.68335458274486882
sg34
g753
(S"\x07\xdf\x07\x0e\x10'\x0e\x07nX"
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1692
sS'block_loop.thisIndex'
p2657
g889
sg38
S'left'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1699
sS'block_loop.thisRepN'
p2663
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2664
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.0166617819631938
sg34
g753
(S"\x07\xdf\x07\x0e\x10'\x14\x03< "
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1082
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1093
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1090
sS'block_loop.thisRepN'
p2676
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2677
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F1.4336562179614702
sg34
g753
(S"\x07\xdf\x07\x0e\x10'\x1a\x03\xcc\xa8"
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1322
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1330
sS'block_loop.thisRepN'
p2689
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2690
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F0.89990814095835958
sg34
g753
(S"\x07\xdf\x07\x0e\x10' \x0b\x088"
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1354
sS'block_loop.thisIndex'
p2696
g889
sg38
S'left'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1365
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1362
sS'block_loop.thisRepN'
p2702
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2703
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.3333086247130268
sg34
g753
(S"\x07\xdf\x07\x0e\x10'&\t\xee\xf8"
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1223
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1231
sS'block_loop.thisRepN'
p2715
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2716
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F0.88336923685710644
sg34
g753
(S"\x07\xdf\x07\x0e\x10'-\x00>\x80"
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1873
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1880
sS'block_loop.thisRepN'
p2728
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2729
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F0.86667694925381511
sg34
g753
(S"\x07\xdf\x07\x0e\x10'2\x0eg\x80"
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1001
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1009
sS'block_loop.thisRepN'
p2741
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2742
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.69997816138129565
sg34
g753
(S"\x07\xdf\x07\x0e\x10'8\x0c\xd5("
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1180
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1188
sS'block_loop.thisRepN'
p2754
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2755
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.48335874519762
sg34
g753
(S'\x07\xdf\x07\x0e\x10(\x02\x08\xa2\xf0'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1099
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1107
sS'block_loop.thisRepN'
p2767
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2768
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.75001710596734483
sg34
g753
(S'\x07\xdf\x07\x0e\x10(\t\x01S\xd8'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g967
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g975
sS'block_loop.thisRepN'
p2780
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2781
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.71666731289224117
sg34
g753
(S'\x07\xdf\x07\x0e\x10(\x0e\rY\xf8'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1050
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1057
sS'block_loop.thisRepN'
p2793
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2794
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F0.95002092629874824
sg34
g753
(S'\x07\xdf\x07\x0e\x10(\x14\tf@'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1858
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1711
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1865
sS'block_loop.thisRepN'
p2806
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2807
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F4.3498940000263246
sg34
g753
(S'\x07\xdf\x07\x0e\x10(\x1a\t?0'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g896
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g905
sS'block_loop.thisRepN'
p2819
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2820
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.8665948406123789
sg34
g753
(S'\x07\xdf\x07\x0e\x10(#\x0e\xfb\xf0'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1322
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1332
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1330
sS'block_loop.thisRepN'
p2832
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2833
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.80000102635858639
sg34
g753
(S'\x07\xdf\x07\x0e\x10()\r\xa40'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1001
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1009
sS'block_loop.thisRepN'
p2845
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2846
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F0.71669354204095725
sg34
g753
(S'\x07\xdf\x07\x0e\x10(/\x0b\x1b\xc0'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g950
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g958
sS'block_loop.thisRepN'
p2858
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2859
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.69992883917802828
sg34
g753
(S'\x07\xdf\x07\x0e\x10(5\x07(\x08'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1692
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1699
sS'block_loop.thisRepN'
p2871
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2872
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.6500313039196044
sg34
g753
(S'\x07\xdf\x07\x0e\x10(;\x034P'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1223
sS'block_loop.thisIndex'
p2878
g889
sg38
S'left'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1231
sS'block_loop.thisRepN'
p2884
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2885
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.73364755093825806
sg34
g753
(S'\x07\xdf\x07\x0e\x10)\x04\r\x8c\xc0'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1873
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1880
sS'block_loop.thisRepN'
p2897
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2898
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.61669377012185578
sg34
g753
(S'\x07\xdf\x07\x0e\x10)\n\n\x12 '
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1116
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1124
sS'block_loop.thisRepN'
p2910
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2911
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.83336079791479278
sg34
g753
(S'\x07\xdf\x07\x0e\x10)\x10\x04\xb3 '
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1487
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1494
sS'block_loop.thisRepN'
p2923
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2924
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.5333229937259603
sg34
g753
(S'\x07\xdf\x07\x0e\x10)\x16\x02\xa3\xc8'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1776
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1783
sS'block_loop.thisRepN'
p2936
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2937
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.80000758364622016
sg34
g753
(S'\x07\xdf\x07\x0e\x10)\x1c\x0bN\x88'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1873
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1880
sS'block_loop.thisRepN'
p2949
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2950
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.64999566648839391
sg34
g753
(S'\x07\xdf\x07\x0e\x10)"\x08\xc6\x18'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1966
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1137
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1973
sS'block_loop.thisRepN'
p2962
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2963
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.93334717015932256
sg34
g753
(S'\x07\xdf\x07\x0e\x10)(\x03\xe00'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1399
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1406
sS'block_loop.thisRepN'
p2975
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2976
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.96663994334448944
sg34
g753
(S'\x07\xdf\x07\x0e\x10).\x03z\xa0'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1001
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1009
sS'block_loop.thisRepN'
p2988
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2989
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.0167895065151242
sg34
g753
(S'\x07\xdf\x07\x0e\x10)4\x03Wx'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1018
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1025
sS'block_loop.thisRepN'
p3001
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3002
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.8833347398249316
sg34
g753
(S'\x07\xdf\x07\x0e\x10):\x04&\x80'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1180
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1188
sS'block_loop.thisRepN'
p3014
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3015
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F4.7998661743185949
sg34
g753
(S'\x07\xdf\x07\x0e\x10*\x04\x02\xce\xc0'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1082
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1093
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1090
sS'block_loop.thisRepN'
p3027
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3028
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F0.80037450663621712
sg34
g753
(S'\x07\xdf\x07\x0e\x10*\x0e\x00m`'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1776
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1569
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1783
sS'block_loop.thisRepN'
p3040
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3041
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.70000667132626404
sg34
g753
(S"\x07\xdf\x07\x0e\x10*\x13\r'0"
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1371
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1378
sS'block_loop.thisRepN'
p3053
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3054
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.3832857027173304
sg34
g753
(S'\x07\xdf\x07\x0e\x10*\x19\x08\xf4\xf8'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1399
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1406
sS'block_loop.thisRepN'
p3066
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3067
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.71657978736038785
sg34
g753
(S'\x07\xdf\x07\x0e\x10*\x1f\x0f>X'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1558
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1566
sS'block_loop.thisRepN'
p3079
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3080
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.58366043743444607
sg34
g753
(S'\x07\xdf\x07\x0e\x10*%\x0b\x858'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g984
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g992
sS'block_loop.thisRepN'
p3092
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3093
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.1495760001016606
sg34
g753
(S'\x07\xdf\x07\x0e\x10*+\x05\xa98'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1707
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1711
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1715
sS'block_loop.thisRepN'
p3105
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3106
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.0504121397625568
sg34
g753
(S'\x07\xdf\x07\x0e\x10*1\x08`\x88'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1082
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1090
sS'block_loop.thisRepN'
p3118
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3119
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.99981325986118463
sg34
g753
(S'\x07\xdf\x07\x0e\x10*7\t\xa8\xa8'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1133
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1137
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1141
sS'block_loop.thisRepN'
p3131
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3132
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.84999464013162651
sg34
g753
(S'\x07\xdf\x07\x0e\x10+\x01\n90'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1354
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1358
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1362
sS'block_loop.thisRepN'
p3144
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3145
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.1999476557411981
sg34
g753
(S'\x07\xdf\x07\x0e\x10+\x07\x08hX'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1692
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1699
sS'block_loop.thisRepN'
p3157
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3158
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.1499990876818629
sg34
g753
(S'\x07\xdf\x07\x0e\x10+\r\x0c\x11\xd8'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1858
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1711
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1865
sS'block_loop.thisRepN'
p3170
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3171
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.91664062758354703
sg34
g753
(S'\x07\xdf\x07\x0e\x10+\x13\x0e\xc9('
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1065
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1076
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1073
sS'block_loop.thisRepN'
p3183
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3184
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.8999278128194419
sg34
g753
(S'\x07\xdf\x07\x0e\x10+\x19\x0e)\x00'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g933
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g941
sS'block_loop.thisRepN'
p3196
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3197
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.86660025750279601
sg34
g753
(S'\x07\xdf\x07\x0e\x10+\x1f\r\x0f\xc0'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1322
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1330
sS'block_loop.thisRepN'
p3209
I0
sg907
g1332
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3210
I0
sg910
g1326
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.79990722863840347
sg34
g753
(S'\x07\xdf\x07\x0e\x10+%\x0b}h'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1371
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1378
sS'block_loop.thisRepN'
p3222
I0
sg907
g1184
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3223
I0
sg910
g1191
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.89988903929406661
sg34
g753
(S'\x07\xdf\x07\x0e\x10++\x08\xf4\xf8'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1033
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1041
sS'block_loop.thisRepN'
p3235
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3236
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.1163436679980805
sg34
g753
(S'\x07\xdf\x07\x0e\x10+1\x07\xdf\xa0'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1444
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1227
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1451
sS'block_loop.thisRepN'
p3248
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3249
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.83334312174883962
sg34
g753
(S'\x07\xdf\x07\x0e\x10+7\nXp'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g984
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g992
sS'block_loop.thisRepN'
p3261
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3262
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.93301645479914441
sg34
g753
(S'\x07\xdf\x07\x0e\x10,\x01\x08I\x18'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1429
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1358
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1436
sS'block_loop.thisRepN'
p3274
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3275
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.2332646623799519
sg34
g753
(S'\x07\xdf\x07\x0e\x10,\x07\x07\xa8\xf0'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1487
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1494
sS'block_loop.thisRepN'
p3287
I0
sg907
g1086
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3288
I0
sg910
g1093
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.1165934151158581
sg34
g753
(S'\x07\xdf\x07\x0e\x10,\r\x0b\xcfp'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1858
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1711
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1865
sS'block_loop.thisRepN'
p3300
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3301
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.91669308588279819
sg34
g753
(S'\x07\xdf\x07\x0e\x10,\x13\x0e\t\xc0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1165
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1172
sS'block_loop.thisRepN'
p3313
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3314
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.75004276491745259
sg34
g753
(S'\x07\xdf\x07\x0e\x10,\x19\r/\x00'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1414
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1421
sS'block_loop.thisRepN'
p3326
I0
sg907
g1126
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3327
I0
sg910
g1120
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.71670152482511185
sg34
g753
(S'\x07\xdf\x07\x0e\x10,\x1f\t\xee\xf8'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1133
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1137
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1141
sS'block_loop.thisRepN'
p3339
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3340
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.76660704286769032
sg34
g753
(S'\x07\xdf\x07\x0e\x10,%\x069\xc0'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1429
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1358
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1436
sS'block_loop.thisRepN'
p3352
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3353
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F2.9999914470172371
sg34
g753
(S'\x07\xdf\x07\x0e\x10,+\x0388'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1791
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1044
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1798
sS'block_loop.thisRepN'
p3365
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3366
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.1165212849555246
sg34
g753
(S'\x07\xdf\x07\x0e\x10,3\x03~\x88'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g916
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g924
sS'block_loop.thisRepN'
p3378
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3379
I0
sg910
g927
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.78371586076718813
sg34
g753
(S'\x07\xdf\x07\x0e\x10,9\x05\xf7X'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1050
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1057
sS'block_loop.thisRepN'
p3391
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3392
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.83334739823840209
sg34
g753
(S'\x07\xdf\x07\x0e\x10-\x03\x034P'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1099
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1107
sS'block_loop.thisRepN'
p3404
I0
sg907
g1103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3405
I0
sg910
g1110
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.81667392720009957
sg34
g753
(S'\x07\xdf\x07\x0e\x10-\t\x01(\xe0'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1558
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1566
sS'block_loop.thisRepN'
p3417
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3418
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F0.66667198852337606
sg34
g753
(S'\x07\xdf\x07\x0e\x10-\x0e\x0e!0'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1966
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1137
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1973
sS'block_loop.thisRepN'
p3430
I0
sg907
g1137
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3431
I0
sg910
g1144
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.81662032850363175
sg34
g753
(S'\x07\xdf\x07\x0e\x10-\x14\tu\xe0'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g967
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g975
sS'block_loop.thisRepN'
p3443
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3444
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.91660641565067635
sg34
g753
(S'\x07\xdf\x07\x0e\x10-\x1a\x07+\xf0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1776
sS'block_loop.thisIndex'
p3450
g889
sg38
S'left'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1783
sS'block_loop.thisRepN'
p3456
I0
sg907
g1562
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3457
I0
sg910
g1569
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.70002719848707784
sg34
g753
(S'\x07\xdf\x07\x0e\x10- \x06MH'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1240
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1248
sS'block_loop.thisRepN'
p3469
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3470
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.80000530284996785
sg34
g753
(S'\x07\xdf\x07\x0e\x10-&\x02Y\x90'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g950
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g958
sS'block_loop.thisRepN'
p3482
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3483
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.66667997130753065
sg34
g753
(S'\x07\xdf\x07\x0e\x10-+\x0f\x17H'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1791
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1798
sS'block_loop.thisRepN'
p3495
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3496
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F1.0163225136184337
sg34
g753
(S'\x07\xdf\x07\x0e\x10-1\nk\xf8'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1444
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1234
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1451
sS'block_loop.thisRepN'
p3508
I0
sg907
g1227
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3509
I0
sg910
g1234
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.7666751816359465
sg34
g753
(S'\x07\xdf\x07\x0e\x10-7\x0b7\x18'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g984
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g992
sS'block_loop.thisRepN'
p3521
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3522
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.76637810801184969
sg34
g753
(S'\x07\xdf\x07\x0e\x10.\x01\x089x'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1065
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1073
sS'block_loop.thisRepN'
p3534
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3535
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.90005126088180987
sg34
g753
(S'\x07\xdf\x07\x0e\x10.\x07\x057\xf0'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1354
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1358
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1362
sS'block_loop.thisRepN'
p3547
I0
sg907
g1358
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3548
I0
sg910
g1365
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.6832197307048773
sg34
g753
(S'\x07\xdf\x07\x0e\x10.\r\x04\x1e\xb0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1065
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1073
sS'block_loop.thisRepN'
p3560
I0
sg907
g1069
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3561
I0
sg910
g1076
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.69991715010110056
sg34
g753
(S'\x07\xdf\x07\x0e\x10.\x14\x00a\xa8'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1240
sS'block_loop.thisIndex'
p3567
g889
sg38
S'left'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1244
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1248
sS'block_loop.thisRepN'
p3573
I0
sg907
g1244
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3574
I0
sg910
g1251
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.69999298655420716
sg34
g753
(S'\x07\xdf\x07\x0e\x10.\x19\x0bq\xb0'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1033
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1041
sS'block_loop.thisRepN'
p3586
I0
sg907
g1037
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3587
I0
sg910
g1044
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F1.0832305074654869
sg34
g753
(S'\x07\xdf\x07\x0e\x10.\x1f\x07}\xf8'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1150
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1157
sS'block_loop.thisRepN'
p3599
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3600
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.7997820699820295
sg34
g753
(S'\x07\xdf\x07\x0e\x10.%\t?0'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1858
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1711
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1865
sS'block_loop.thisRepN'
p3612
I0
sg907
g1711
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3613
I0
sg910
g1718
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.85000233781647694
sg34
g753
(S'\x07\xdf\x07\x0e\x10.+\x06\xb6\xc0'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F12.283245446677029
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'50-polo.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'48-twix.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'48-twix.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'50-polo.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F0.96648655984245124
sg34
g753
(S'\x07\xdf\x07\x0e\x100$\r>\xa0'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'29-beans.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'29-beans.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'46-pistachios.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
S'46-pistachios.png'
p3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3665
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.68326249562232988
sg34
g753
(S'\x07\xdf\x07\x0e\x100*\r\x17\x90'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'7-olives.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'22-daim.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'22-daim.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
S'7-olives.png'
p3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3682
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.6499372211001173
sg34
g753
(S'\x07\xdf\x07\x0e\x1000\x08\xaa\xc0'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'10-bounty_redo.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'10-bounty_redo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'4-corn.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3698
I1
sg3647
S'4-corn.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.86667210256200633
sg34
g753
(S'\x07\xdf\x07\x0e\x1007\x03\xbd\x08'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'49-yorkie.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'35-raisins.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'35-raisins.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3715
I1
sg3647
S'49-yorkie.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.7500133996745717
sg34
g753
(S'\x07\xdf\x07\x0e\x101\x01\x02eH'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'5-pineapple.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'left'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'5-pineapple.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'40-sardines.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3732
I1
sg3647
S'40-sardines.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vn
sS'block_loop.thisTrialN'
p3735
I0
sg39
F1.5833257306803716
sg34
g753
(S'\x07\xdf\x07\x0e\x101\x06\x0e,\xe8'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'26-walkers_smoky_bacon.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'right'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
S'44-crunch.png'
p3743
sg64
g65
sS'trial_loop.thisIndex'
p3744
g60
(g99
S'\x06\x00\x00\x00'
tRp3745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3746
I0
sg3642
S'44-crunch.png'
p3747
sS'block_loop.thisRepN'
p3748
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3749
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3750
sg55
g11
sS'block_loop.thisTrial'
p3751
Nsg70
Vn
sS'block_loop.thisTrialN'
p3752
I0
sg39
F0.80001499623176642
sg34
g753
(S'\x07\xdf\x07\x0e\x101\r\x08M\x00'
tRp3753
sa(dp3754
S'trial_loop.thisTrialN'
p3755
I7
sg3633
S'36-fig_rolls.png'
p3756
sS'block_loop.thisIndex'
p3757
g3627
sg38
S'left'
p3758
sg59
g63
sS'trial_loop.thisN'
p3759
I7
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3760
sg64
g65
sS'trial_loop.thisIndex'
p3761
g60
(g99
S'\x07\x00\x00\x00'
tRp3762
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3763
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3764
sS'block_loop.thisRepN'
p3765
I1
sg3645
S'36-fig_rolls.png'
p3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3767
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p3768
Nsg70
Vn
sS'block_loop.thisTrialN'
p3769
I0
sg39
F1.4500092372218205
sg34
g753
(S'\x07\xdf\x07\x0e\x101\x13\x05\xc4\x90'
tRp3770
sa(dp3771
S'trial_loop.thisTrialN'
p3772
I8
sg3633
S'25-kitkat.png'
p3773
sS'block_loop.thisIndex'
p3774
g3627
sg38
S'right'
p3775
sg59
g63
sS'trial_loop.thisN'
p3776
I8
sg33
S'25-kitkat.png'
p3777
sg64
g65
sS'trial_loop.thisIndex'
p3778
g60
(g99
S'\x08\x00\x00\x00'
tRp3779
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3780
I0
sg3642
S'31-hobnobs.png'
p3781
sS'block_loop.thisRepN'
p3782
I1
sg3645
S'31-hobnobs.png'
p3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3784
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p3785
Nsg70
Vn
sS'block_loop.thisTrialN'
p3786
I0
sg39
F0.80001927272314788
sg34
g753
(S'\x07\xdf\x07\x0e\x101\x19\r>\xa0'
tRp3787
sa(dp3788
S'trial_loop.thisTrialN'
p3789
I9
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3790
sS'block_loop.thisIndex'
p3791
g3627
sg38
S'right'
p3792
sg59
g63
sS'trial_loop.thisN'
p3793
I9
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p3794
g60
(g99
S'\t\x00\x00\x00'
tRp3795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3796
I0
sg3642
S'36-fig_rolls.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3799
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p3800
Nsg70
Vn
sS'block_loop.thisTrialN'
p3801
I0
sg39
F0.93331951551408565
sg34
g753
(S'\x07\xdf\x07\x0e\x101\x1f\n\xb60'
tRp3802
sa(dp3803
S'trial_loop.thisTrialN'
p3804
I10
sg3633
S'27-hartleys_raspberries_jelly.png'
p3805
sS'block_loop.thisIndex'
p3806
g3627
sg38
S'right'
p3807
sg59
g63
sS'trial_loop.thisN'
p3808
I10
sg33
S'27-hartleys_raspberries_jelly.png'
p3809
sg64
g65
sS'trial_loop.thisIndex'
p3810
g60
(g99
S'\n\x00\x00\x00'
tRp3811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3812
I0
sg3642
S'51-mars.png'
p3813
sS'block_loop.thisRepN'
p3814
I1
sg3645
S'51-mars.png'
p3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3816
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p3817
Nsg70
Vn
sS'block_loop.thisTrialN'
p3818
I0
sg39
F0.6500241764333623
sg34
g753
(S'\x07\xdf\x07\x0e\x101%\n\x16\x08'
tRp3819
sa(dp3820
S'trial_loop.thisTrialN'
p3821
I11
sg3633
g3654
sS'block_loop.thisIndex'
p3822
g3627
sg38
S'right'
p3823
sg59
g63
sS'trial_loop.thisN'
p3824
I11
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p3825
g60
(g99
S'\x0b\x00\x00\x00'
tRp3826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3827
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3828
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3829
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p3830
Nsg70
Vn
sS'block_loop.thisTrialN'
p3831
I0
sg39
F0.59999891662300797
sg34
g753
(S'\x07\xdf\x07\x0e\x101+\x05j\xb8'
tRp3832
sa(dp3833
S'trial_loop.thisTrialN'
p3834
I12
sg3633
g3756
sS'block_loop.thisIndex'
p3835
g3627
sg38
S'left'
p3836
sg59
g63
sS'trial_loop.thisN'
p3837
I12
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p3838
g60
(g99
S'\x0c\x00\x00\x00'
tRp3839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3840
I0
sg3642
g3764
sS'block_loop.thisRepN'
p3841
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3842
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p3843
Nsg70
Vn
sS'block_loop.thisTrialN'
p3844
I0
sg39
F1.1498804863113037
sg34
g753
(S'\x07\xdf\x07\x0e\x1010\x0f\x0fx'
tRp3845
sa(dp3846
S'trial_loop.thisTrialN'
p3847
I13
sg3633
S'41-peanuts_redo.png'
p3848
sS'block_loop.thisIndex'
p3849
g3627
sg38
S'left'
p3850
sg59
g63
sS'trial_loop.thisN'
p3851
I13
sg33
S'41-peanuts_redo.png'
p3852
sg64
g65
sS'trial_loop.thisIndex'
p3853
g60
(g99
S'\r\x00\x00\x00'
tRp3854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3855
I0
sg3642
S'45-chewy_nougat_redo.png'
p3856
sS'block_loop.thisRepN'
p3857
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3858
I1
sg3647
S'45-chewy_nougat_redo.png'
p3859
sg55
g11
sS'block_loop.thisTrial'
p3860
Nsg70
Vn
sS'block_loop.thisTrialN'
p3861
I0
sg39
F0.91665972924602102
sg34
g753
(S'\x07\xdf\x07\x0e\x1017\x02\x84\x88'
tRp3862
sa(dp3863
S'trial_loop.thisTrialN'
p3864
I14
sg3633
S'44-crunch.png'
p3865
sS'block_loop.thisIndex'
p3866
g3627
sg38
S'left'
p3867
sg59
g63
sS'trial_loop.thisN'
p3868
I14
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p3869
g60
(g99
S'\x0e\x00\x00\x00'
tRp3870
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3871
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3872
sS'block_loop.thisRepN'
p3873
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3874
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vn
sS'block_loop.thisTrialN'
p3876
I0
sg39
F0.8332658597973932
sg34
g753
(S'\x07\xdf\x07\x0e\x102\x01\x01\xe4`'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'48-twix.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'left'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3884
g60
(g99
S'\x0f\x00\x00\x00'
tRp3885
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3886
I0
sg3642
S'50-polo.png'
p3887
sS'block_loop.thisRepN'
p3888
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3889
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3890
Nsg70
Vn
sS'block_loop.thisTrialN'
p3891
I0
sg39
F1.2166048761137063
sg34
g753
(S'\x07\xdf\x07\x0e\x102\x06\x0f\x17H'
tRp3892
sa(dp3893
S'trial_loop.thisTrialN'
p3894
I16
sg3633
S'38-maltesers.png'
p3895
sS'block_loop.thisIndex'
p3896
g3627
sg38
S'left'
p3897
sg59
g63
sS'trial_loop.thisN'
p3898
I16
sg33
S'38-maltesers.png'
p3899
sg64
g65
sS'trial_loop.thisIndex'
p3900
g60
(g99
S'\x10\x00\x00\x00'
tRp3901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3902
I0
sg3642
S'6-sour_patch_kids.png'
p3903
sS'block_loop.thisRepN'
p3904
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3905
I1
sg3647
S'6-sour_patch_kids.png'
p3906
sg55
g11
sS'block_loop.thisTrial'
p3907
Nsg70
Vn
sS'block_loop.thisTrialN'
p3908
I0
sg39
F1.066420758888853
sg34
g753
(S'\x07\xdf\x07\x0e\x102\r\x03~\x88'
tRp3909
sa(dp3910
S'trial_loop.thisTrialN'
p3911
I17
sg3633
S'42-mrkipling_lemon_slices.png'
p3912
sS'block_loop.thisIndex'
p3913
g3627
sg38
S'left'
p3914
sg59
g63
sS'trial_loop.thisN'
p3915
I17
sg33
S'42-mrkipling_lemon_slices.png'
p3916
sg64
g65
sS'trial_loop.thisIndex'
p3917
g60
(g99
S'\x11\x00\x00\x00'
tRp3918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3919
I0
sg3642
S'16-skips_prawn.png'
p3920
sS'block_loop.thisRepN'
p3921
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3922
I1
sg3647
S'16-skips_prawn.png'
p3923
sg55
g11
sS'block_loop.thisTrial'
p3924
Nsg70
Vn
sS'block_loop.thisTrialN'
p3925
I0
sg39
F1.0496440818496922
sg34
g753
(S'\x07\xdf\x07\x0e\x102\x13\x05\x05('
tRp3926
sa(dp3927
S'trial_loop.thisTrialN'
p3928
I18
sg3633
g3805
sS'block_loop.thisIndex'
p3929
g3627
sg38
S'right'
p3930
sg59
g63
sS'trial_loop.thisN'
p3931
I18
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p3932
g60
(g99
S'\x12\x00\x00\x00'
tRp3933
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3934
I0
sg3642
g3813
sS'block_loop.thisRepN'
p3935
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3936
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p3937
Nsg70
Vn
sS'block_loop.thisTrialN'
p3938
I0
sg39
F0.64992353632806044
sg34
g753
(S'\x07\xdf\x07\x0e\x102\x19\x06MH'
tRp3939
sa(dp3940
S'trial_loop.thisTrialN'
p3941
I19
sg3633
S'20-fruit_pastilles.png'
p3942
sS'block_loop.thisIndex'
p3943
g3627
sg38
S'right'
p3944
sg59
g63
sS'trial_loop.thisN'
p3945
I19
sg33
S'2-steamed_puddings.png'
p3946
sg64
g65
sS'trial_loop.thisIndex'
p3947
g60
(g99
S'\x13\x00\x00\x00'
tRp3948
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3949
I0
sg3642
S'2-steamed_puddings.png'
p3950
sS'block_loop.thisRepN'
p3951
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3952
I1
sg3647
S'20-fruit_pastilles.png'
p3953
sg55
g11
sS'block_loop.thisTrial'
p3954
Nsg70
Vn
sS'block_loop.thisTrialN'
p3955
I0
sg39
F0.85000632920673524
sg34
g753
(S'\x07\xdf\x07\x0e\x102\x1f\x01\xa1\xf8'
tRp3956
sa(dp3957
S'trial_loop.thisTrialN'
p3958
I20
sg3633
g3671
sS'block_loop.thisIndex'
p3959
g3627
sg38
S'right'
p3960
sg59
g63
sS'trial_loop.thisN'
p3961
I20
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p3962
g60
(g99
S'\x14\x00\x00\x00'
tRp3963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3964
I0
sg3642
g3679
sS'block_loop.thisRepN'
p3965
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3966
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vn
sS'block_loop.thisTrialN'
p3968
I0
sg39
F0.88335868817739538
sg34
g753
(S'\x07\xdf\x07\x0e\x102$\x0f\x13`'
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
S'46-pistachios.png'
p3972
sS'block_loop.thisIndex'
p3973
g3627
sg38
S'left'
p3974
sg59
g63
sS'trial_loop.thisN'
p3975
I21
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p3976
g60
(g99
S'\x15\x00\x00\x00'
tRp3977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3978
I0
sg3642
S'29-beans.png'
p3979
sS'block_loop.thisRepN'
p3980
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3981
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p3982
Nsg70
Vn
sS'block_loop.thisTrialN'
p3983
I0
sg39
F0.61672912245194311
sg34
g753
(S'\x07\xdf\x07\x0e\x102*\r\xbf\x88'
tRp3984
sa(dp3985
S'trial_loop.thisTrialN'
p3986
I22
sg3633
g3773
sS'block_loop.thisIndex'
p3987
g3627
sg38
S'right'
p3988
sg59
g63
sS'trial_loop.thisN'
p3989
I22
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p3990
g60
(g99
S'\x16\x00\x00\x00'
tRp3991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3992
I0
sg3642
g3781
sS'block_loop.thisRepN'
p3993
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3994
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p3995
Nsg70
Vn
sS'block_loop.thisTrialN'
p3996
I0
sg39
F0.95036304563836893
sg34
g753
(S'\x07\xdf\x07\x0e\x1020\x08\\\xa0'
tRp3997
sa(dp3998
S'trial_loop.thisTrialN'
p3999
I23
sg3633
S'51-mars.png'
p4000
sS'block_loop.thisIndex'
p4001
g3627
sg38
S'left'
p4002
sg59
g63
sS'trial_loop.thisN'
p4003
I23
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p4004
g60
(g99
S'\x17\x00\x00\x00'
tRp4005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4006
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4007
sS'block_loop.thisRepN'
p4008
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4009
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p4010
Nsg70
Vn
sS'block_loop.thisTrialN'
p4011
I0
sg39
F0.81667592289522872
sg34
g753
(S'\x07\xdf\x07\x0e\x1026\x085\x90'
tRp4012
sa(dp4013
S'trial_loop.thisTrialN'
p4014
I24
sg3633
S'13-mccoys_steak_crisps.png'
p4015
sS'block_loop.thisIndex'
p4016
g3627
sg38
S'left'
p4017
sg59
g63
sS'trial_loop.thisN'
p4018
I24
sg33
S'13-mccoys_steak_crisps.png'
p4019
sg64
g65
sS'trial_loop.thisIndex'
p4020
g60
(g99
S'\x18\x00\x00\x00'
tRp4021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4022
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4023
sS'block_loop.thisRepN'
p4024
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4025
I1
sg3647
S'3-ellas_strawberries_apples.png'
p4026
sg55
g11
sS'block_loop.thisTrial'
p4027
Nsg70
Vn
sS'block_loop.thisTrialN'
p4028
I0
sg39
F0.8333425515484123
sg34
g753
(S'\x07\xdf\x07\x0e\x103\x00\x05\xeb\xa0'
tRp4029
sa(dp4030
S'trial_loop.thisTrialN'
p4031
I25
sg3633
S'2-steamed_puddings.png'
p4032
sS'block_loop.thisIndex'
p4033
g3627
sg38
S'left'
p4034
sg59
g63
sS'trial_loop.thisN'
p4035
I25
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p4036
g60
(g99
S'\x19\x00\x00\x00'
tRp4037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4038
I0
sg3642
S'20-fruit_pastilles.png'
p4039
sS'block_loop.thisRepN'
p4040
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4041
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4042
Nsg70
Vn
sS'block_loop.thisTrialN'
p4043
I0
sg39
F0.71666873838876199
sg34
g753
(S'\x07\xdf\x07\x0e\x103\x06\x03\xe00'
tRp4044
sa(dp4045
S'trial_loop.thisTrialN'
p4046
I26
sg3633
g3654
sS'block_loop.thisIndex'
p4047
g3627
sg38
S'right'
p4048
sg59
g63
sS'trial_loop.thisN'
p4049
I26
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p4050
g60
(g99
S'\x1a\x00\x00\x00'
tRp4051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4052
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4053
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4054
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p4055
Nsg70
Vn
sS'block_loop.thisTrialN'
p4056
I0
sg39
F0.56669759045325918
sg34
g753
(S'\x07\xdf\x07\x0e\x103\x0b\x0f.\xb8'
tRp4057
sa(dp4058
S'trial_loop.thisTrialN'
p4059
I27
sg3633
g4015
sS'block_loop.thisIndex'
p4060
g3627
sg38
S'left'
p4061
sg59
g63
sS'trial_loop.thisN'
p4062
I27
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4063
g60
(g99
S'\x1b\x00\x00\x00'
tRp4064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4065
I0
sg3642
g4023
sS'block_loop.thisRepN'
p4066
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4067
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4068
Nsg70
Vn
sS'block_loop.thisTrialN'
p4069
I0
sg39
F0.59990226790796441
sg34
g753
(S'\x07\xdf\x07\x0e\x103\x11\t\x148'
tRp4070
sa(dp4071
S'trial_loop.thisTrialN'
p4072
I28
sg3633
g3895
sS'block_loop.thisIndex'
p4073
g3627
sg38
S'left'
p4074
sg59
g63
sS'trial_loop.thisN'
p4075
I28
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p4076
g60
(g99
S'\x1c\x00\x00\x00'
tRp4077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4078
I0
sg3642
g3903
sS'block_loop.thisRepN'
p4079
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4080
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p4081
Nsg70
Vn
sS'block_loop.thisTrialN'
p4082
I0
sg39
F0.64975760844936303
sg34
g753
(S'\x07\xdf\x07\x0e\x103\x17\x03v\xb8'
tRp4083
sa(dp4084
S'trial_loop.thisTrialN'
p4085
I29
sg3633
S'8-liquorice_catherine_wheels.png'
p4086
sS'block_loop.thisIndex'
p4087
g3627
sg38
S'left'
p4088
sg59
g63
sS'trial_loop.thisN'
p4089
I29
sg33
S'8-liquorice_catherine_wheels.png'
p4090
sg64
g65
sS'trial_loop.thisIndex'
p4091
g60
(g99
S'\x1d\x00\x00\x00'
tRp4092
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4093
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4094
sS'block_loop.thisRepN'
p4095
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4096
I1
sg3647
S'17-jacobs_mini_cheddars_redo.png'
p4097
sg55
g11
sS'block_loop.thisTrial'
p4098
Nsg70
Vn
sS'block_loop.thisTrialN'
p4099
I0
sg39
F1.3999851178086828
sg34
g753
(S'\x07\xdf\x07\x0e\x103\x1c\x0e\r\xa8'
tRp4100
sa(dp4101
S'trial_loop.thisTrialN'
p4102
I30
sg3633
S'18-mms.png'
p4103
sS'block_loop.thisIndex'
p4104
g3627
sg38
S'left'
p4105
sg59
g63
sS'trial_loop.thisN'
p4106
I30
sg33
S'18-mms.png'
p4107
sg64
g65
sS'trial_loop.thisIndex'
p4108
g60
(g99
S'\x1e\x00\x00\x00'
tRp4109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4110
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p4111
sS'block_loop.thisRepN'
p4112
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4113
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p4114
sg55
g11
sS'block_loop.thisTrial'
p4115
Nsg70
Vn
sS'block_loop.thisTrialN'
p4116
I0
sg39
F0.84998779774468858
sg34
g753
(S'\x07\xdf\x07\x0e\x103#\x05O`'
tRp4117
sa(dp4118
S'trial_loop.thisTrialN'
p4119
I31
sg3633
g3942
sS'block_loop.thisIndex'
p4120
g3627
sg38
S'right'
p4121
sg59
g63
sS'trial_loop.thisN'
p4122
I31
sg33
g3953
sg64
g65
sS'trial_loop.thisIndex'
p4123
g60
(g99
S'\x1f\x00\x00\x00'
tRp4124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4125
I0
sg3642
g3950
sS'block_loop.thisRepN'
p4126
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4127
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4128
Nsg70
Vn
sS'block_loop.thisTrialN'
p4129
I0
sg39
F0.63332476134200988
sg34
g753
(S'\x07\xdf\x07\x0e\x103)\x03~\x88'
tRp4130
sa(dp4131
S'trial_loop.thisTrialN'
p4132
I32
sg3633
S'21-nakd_banana_crunch.png'
p4133
sS'block_loop.thisIndex'
p4134
g3627
sg38
S'right'
p4135
sg59
g63
sS'trial_loop.thisN'
p4136
I32
sg33
S'21-nakd_banana_crunch.png'
p4137
sg64
g65
sS'trial_loop.thisIndex'
p4138
g60
(g99
S' \x00\x00\x00'
tRp4139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4140
I0
sg3642
S'1-treacle_cookies.png'
p4141
sS'block_loop.thisRepN'
p4142
I1
sg3645
S'1-treacle_cookies.png'
p4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4144
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vn
sS'block_loop.thisTrialN'
p4146
I0
sg39
F0.70004886604692729
sg34
g753
(S'\x07\xdf\x07\x0e\x103.\r\xda\xe0'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4150
sS'block_loop.thisIndex'
p4151
g3627
sg38
S'right'
p4152
sg59
g63
sS'trial_loop.thisN'
p4153
I33
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4154
g60
(g99
S'!\x00\x00\x00'
tRp4155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4156
I0
sg3642
S'18-mms.png'
p4157
sS'block_loop.thisRepN'
p4158
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4159
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p4160
Nsg70
Vn
sS'block_loop.thisTrialN'
p4161
I0
sg39
F1.2000163647080626
sg34
g753
(S'\x07\xdf\x07\x0e\x1034\t\xa8\xa8'
tRp4162
sa(dp4163
S'trial_loop.thisTrialN'
p4164
I34
sg3633
g3688
sS'block_loop.thisIndex'
p4165
g3627
sg38
S'left'
p4166
sg59
g63
sS'trial_loop.thisN'
p4167
I34
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4168
g60
(g99
S'"\x00\x00\x00'
tRp4169
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4170
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4171
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4172
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4173
Nsg70
Vn
sS'block_loop.thisTrialN'
p4174
I0
sg39
F0.69998300807310443
sg34
g753
(S'\x07\xdf\x07\x0e\x103:\rR('
tRp4175
sa(dp4176
S'trial_loop.thisTrialN'
p4177
I35
sg3633
g3865
sS'block_loop.thisIndex'
p4178
g3627
sg38
S'left'
p4179
sg59
g63
sS'trial_loop.thisN'
p4180
I35
sg33
g3750
sg64
g65
sS'trial_loop.thisIndex'
p4181
g60
(g99
S'#\x00\x00\x00'
tRp4182
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4183
I0
sg3642
g3872
sS'block_loop.thisRepN'
p4184
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4185
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4186
Nsg70
Vn
sS'block_loop.thisTrialN'
p4187
I0
sg39
F0.7166955377379054
sg34
g753
(S'\x07\xdf\x07\x0e\x104\x04\t\x1f\xf0'
tRp4188
sa(dp4189
S'trial_loop.thisTrialN'
p4190
I36
sg3633
S'33-ambrosia_rice.png'
p4191
sS'block_loop.thisIndex'
p4192
g3627
sg38
S'right'
p4193
sg59
g63
sS'trial_loop.thisN'
p4194
I36
sg33
S'23-crunchie_redo.png'
p4195
sg64
g65
sS'trial_loop.thisIndex'
p4196
g60
(g99
S'$\x00\x00\x00'
tRp4197
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4198
I0
sg3642
S'23-crunchie_redo.png'
p4199
sS'block_loop.thisRepN'
p4200
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4201
I1
sg3647
S'33-ambrosia_rice.png'
p4202
sg55
g11
sS'block_loop.thisTrial'
p4203
Nsg70
Vn
sS'block_loop.thisTrialN'
p4204
I0
sg39
F0.69999783324419695
sg34
g753
(S'\x07\xdf\x07\x0e\x104\n\x05f\xd0'
tRp4205
sa(dp4206
S'trial_loop.thisTrialN'
p4207
I37
sg3633
g3688
sS'block_loop.thisIndex'
p4208
g3627
sg38
S'left'
p4209
sg59
g63
sS'trial_loop.thisN'
p4210
I37
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4211
g60
(g99
S'%\x00\x00\x00'
tRp4212
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4213
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4214
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4215
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4216
Nsg70
Vn
sS'block_loop.thisTrialN'
p4217
I0
sg39
F0.66666486103713396
sg34
g753
(S'\x07\xdf\x07\x0e\x104\x10\x018\x80'
tRp4218
sa(dp4219
S'trial_loop.thisTrialN'
p4220
I38
sg3633
S'40-sardines.png'
p4221
sS'block_loop.thisIndex'
p4222
g3627
sg38
S'right'
p4223
sg59
g63
sS'trial_loop.thisN'
p4224
I38
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4225
g60
(g99
S'&\x00\x00\x00'
tRp4226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4227
I0
sg3642
S'5-pineapple.png'
p4228
sS'block_loop.thisRepN'
p4229
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4230
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4231
Nsg70
Vn
sS'block_loop.thisTrialN'
p4232
I0
sg39
F0.68310141443544126
sg34
g753
(S'\x07\xdf\x07\x0e\x104\x15\x0c\n\x08'
tRp4233
sa(dp4234
S'trial_loop.thisTrialN'
p4235
I39
sg3633
S'3-ellas_strawberries_apples.png'
p4236
sS'block_loop.thisIndex'
p4237
g3627
sg38
S'right'
p4238
sg59
g63
sS'trial_loop.thisN'
p4239
I39
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4240
g60
(g99
S"'\x00\x00\x00"
tRp4241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4242
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4243
sS'block_loop.thisRepN'
p4244
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4245
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4246
Nsg70
Vn
sS'block_loop.thisTrialN'
p4247
I0
sg39
F0.58373427819242352
sg34
g753
(S'\x07\xdf\x07\x0e\x104\x1b\x07\x9d8'
tRp4248
sa(dp4249
S'trial_loop.thisTrialN'
p4250
I40
sg3633
g4032
sS'block_loop.thisIndex'
p4251
g3627
sg38
S'left'
p4252
sg59
g63
sS'trial_loop.thisN'
p4253
I40
sg33
g3953
sg64
g65
sS'trial_loop.thisIndex'
p4254
g60
(g99
S'(\x00\x00\x00'
tRp4255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4256
I0
sg3642
g4039
sS'block_loop.thisRepN'
p4257
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4258
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4259
Nsg70
Vn
sS'block_loop.thisTrialN'
p4260
I0
sg39
F0.73332995015334745
sg34
g753
(S'\x07\xdf\x07\x0e\x104!\x01\xc18'
tRp4261
sa(dp4262
S'trial_loop.thisTrialN'
p4263
I41
sg3633
S'16-skips_prawn.png'
p4264
sS'block_loop.thisIndex'
p4265
g3627
sg38
S'right'
p4266
sg59
g63
sS'trial_loop.thisN'
p4267
I41
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p4268
g60
(g99
S')\x00\x00\x00'
tRp4269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4270
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p4271
sS'block_loop.thisRepN'
p4272
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4273
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4274
Nsg70
Vn
sS'block_loop.thisTrialN'
p4275
I0
sg39
F0.74991247446814668
sg34
g753
(S'\x07\xdf\x07\x0e\x104&\r\x88\xd8'
tRp4276
sa(dp4277
S'trial_loop.thisTrialN'
p4278
I42
sg3633
S'30-spaghetti_hoops.png'
p4279
sS'block_loop.thisIndex'
p4280
g3627
sg38
S'right'
p4281
sg59
g63
sS'trial_loop.thisN'
p4282
I42
sg33
S'19-caramello_redo.png'
p4283
sg64
g65
sS'trial_loop.thisIndex'
p4284
g60
(g99
S'*\x00\x00\x00'
tRp4285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4286
I0
sg3642
S'19-caramello_redo.png'
p4287
sS'block_loop.thisRepN'
p4288
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4289
I1
sg3647
S'30-spaghetti_hoops.png'
p4290
sg55
g11
sS'block_loop.thisTrial'
p4291
Nsg70
Vn
sS'block_loop.thisTrialN'
p4292
I0
sg39
F0.78334808247745968
sg34
g753
(S'\x07\xdf\x07\x0e\x104,\n\x0e8'
tRp4293
sa(dp4294
S'trial_loop.thisTrialN'
p4295
I43
sg3633
S'6-sour_patch_kids.png'
p4296
sS'block_loop.thisIndex'
p4297
g3627
sg38
S'right'
p4298
sg59
g63
sS'trial_loop.thisN'
p4299
I43
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p4300
g60
(g99
S'+\x00\x00\x00'
tRp4301
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4302
I0
sg3642
S'38-maltesers.png'
p4303
sS'block_loop.thisRepN'
p4304
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4305
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p4306
Nsg70
Vn
sS'block_loop.thisTrialN'
p4307
I0
sg39
F0.84954788929462666
sg34
g753
(S'\x07\xdf\x07\x0e\x1042\x07K0'
tRp4308
sa(dp4309
S'trial_loop.thisTrialN'
p4310
I44
sg3633
g4000
sS'block_loop.thisIndex'
p4311
g3627
sg38
S'left'
p4312
sg59
g63
sS'trial_loop.thisN'
p4313
I44
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p4314
g60
(g99
S',\x00\x00\x00'
tRp4315
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4316
I0
sg3642
g4007
sS'block_loop.thisRepN'
p4317
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4318
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p4319
Nsg70
Vn
sS'block_loop.thisTrialN'
p4320
I0
sg39
F0.66667540971502603
sg34
g753
(S'\x07\xdf\x07\x0e\x1048\x05zX'
tRp4321
sa(dp4322
S'trial_loop.thisTrialN'
p4323
I45
sg3633
g4221
sS'block_loop.thisIndex'
p4324
g3627
sg38
S'right'
p4325
sg59
g63
sS'trial_loop.thisN'
p4326
I45
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4327
g60
(g99
S'-\x00\x00\x00'
tRp4328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4329
I0
sg3642
g4228
sS'block_loop.thisRepN'
p4330
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4331
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4332
Nsg70
Vn
sS'block_loop.thisTrialN'
p4333
I0
sg39
F0.65004242279792379
sg34
g753
(S'\x07\xdf\x07\x0e\x105\x02\x01\t\xa0'
tRp4334
sa(dp4335
S'trial_loop.thisTrialN'
p4336
I46
sg3633
S'23-crunchie_redo.png'
p4337
sS'block_loop.thisIndex'
p4338
g3627
sg38
S'left'
p4339
sg59
g63
sS'trial_loop.thisN'
p4340
I46
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p4341
g60
(g99
S'.\x00\x00\x00'
tRp4342
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4343
I0
sg3642
S'33-ambrosia_rice.png'
p4344
sS'block_loop.thisRepN'
p4345
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4346
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p4347
Nsg70
Vn
sS'block_loop.thisTrialN'
p4348
I0
sg39
F1.0333543546657893
sg34
g753
(S'\x07\xdf\x07\x0e\x105\x07\x0be\xf8'
tRp4349
sa(dp4350
S'trial_loop.thisTrialN'
p4351
I47
sg3633
g3654
sS'block_loop.thisIndex'
p4352
g3627
sg38
S'right'
p4353
sg59
g63
sS'trial_loop.thisN'
p4354
I47
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4355
g60
(g99
S'/\x00\x00\x00'
tRp4356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4357
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4358
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4359
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p4360
Nsg70
Vn
sS'block_loop.thisTrialN'
p4361
I0
sg39
F0.96657750656595454
sg34
g753
(S'\x07\xdf\x07\x0e\x105\r\x0co\x98'
tRp4362
sa(dp4363
S'trial_loop.thisTrialN'
p4364
I48
sg3633
g4150
sS'block_loop.thisIndex'
p4365
g3627
sg38
S'right'
p4366
sg59
g63
sS'trial_loop.thisN'
p4367
I48
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4368
g60
(g99
S'0\x00\x00\x00'
tRp4369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4370
I0
sg3642
g4157
sS'block_loop.thisRepN'
p4371
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4372
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p4373
Nsg70
Vn
sS'block_loop.thisTrialN'
p4374
I0
sg39
F0.84999292953398253
sg34
g753
(S'\x07\xdf\x07\x0e\x105\x13\x0c\x87\x08'
tRp4375
sa(dp4376
S'trial_loop.thisTrialN'
p4377
I49
sg3633
g4337
sS'block_loop.thisIndex'
p4378
g3627
sg38
S'left'
p4379
sg59
g63
sS'trial_loop.thisN'
p4380
I49
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p4381
g60
(g99
S'1\x00\x00\x00'
tRp4382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4383
I0
sg3642
g4344
sS'block_loop.thisRepN'
p4384
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4385
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p4386
Nsg70
Vn
sS'block_loop.thisTrialN'
p4387
I0
sg39
F0.86669177442490763
sg34
g753
(S'\x07\xdf\x07\x0e\x105\x19\n\xba\x18'
tRp4388
sa(dp4389
S'trial_loop.thisTrialN'
p4390
I50
sg3633
g3671
sS'block_loop.thisIndex'
p4391
g3627
sg38
S'right'
p4392
sg59
g63
sS'trial_loop.thisN'
p4393
I50
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4394
g60
(g99
S'2\x00\x00\x00'
tRp4395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4396
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4397
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4398
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4399
Nsg70
Vn
sS'block_loop.thisTrialN'
p4400
I0
sg39
F1.3336792539976159
sg34
g753
(S'\x07\xdf\x07\x0e\x105\x1f\t#\xd8'
tRp4401
sa(dp4402
S'trial_loop.thisTrialN'
p4403
I51
sg3633
g4133
sS'block_loop.thisIndex'
p4404
g3627
sg38
S'right'
p4405
sg59
g63
sS'trial_loop.thisN'
p4406
I51
sg33
g4143
sg64
g65
sS'trial_loop.thisIndex'
p4407
g60
(g99
S'3\x00\x00\x00'
tRp4408
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4409
I0
sg3642
g4141
sS'block_loop.thisRepN'
p4410
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4411
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p4412
Nsg70
Vn
sS'block_loop.thisTrialN'
p4413
I0
sg39
F0.96665419831697363
sg34
g753
(S'\x07\xdf\x07\x0e\x105%\x0e\xb5\xa0'
tRp4414
sa(dp4415
S'trial_loop.thisTrialN'
p4416
I52
sg3633
g3722
sS'block_loop.thisIndex'
p4417
g3627
sg38
S'left'
p4418
sg59
g63
sS'trial_loop.thisN'
p4419
I52
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4420
g60
(g99
S'4\x00\x00\x00'
tRp4421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4422
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4423
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4424
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4425
Nsg70
Vn
sS'block_loop.thisTrialN'
p4426
I0
sg39
F1.4999592307776766
sg34
g753
(S'\x07\xdf\x07\x0e\x105+\x0e\xcd\x10'
tRp4427
sa(dp4428
S'trial_loop.thisTrialN'
p4429
I53
sg3633
g3705
sS'block_loop.thisIndex'
p4430
g3627
sg38
S'right'
p4431
sg59
g63
sS'trial_loop.thisN'
p4432
I53
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4433
g60
(g99
S'5\x00\x00\x00'
tRp4434
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4435
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4436
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4437
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4438
Nsg70
Vn
sS'block_loop.thisTrialN'
p4439
I0
sg39
F1.0166432504993281
sg34
g753
(S'\x07\xdf\x07\x0e\x1052\x07\xbcx'
tRp4440
sa(dp4441
S'trial_loop.thisTrialN'
p4442
I54
sg3633
g4103
sS'block_loop.thisIndex'
p4443
g3627
sg38
S'left'
p4444
sg59
g63
sS'trial_loop.thisN'
p4445
I54
sg33
g4114
sg64
g65
sS'trial_loop.thisIndex'
p4446
g60
(g99
S'6\x00\x00\x00'
tRp4447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4448
I0
sg3642
g4111
sS'block_loop.thisRepN'
p4449
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4450
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p4451
Nsg70
Vn
sS'block_loop.thisTrialN'
p4452
I0
sg39
F0.8666185038673575
sg34
g753
(S'\x07\xdf\x07\x0e\x1058\x08M\x00'
tRp4453
sa(dp4454
S'trial_loop.thisTrialN'
p4455
I55
sg3633
g3654
sS'block_loop.thisIndex'
p4456
g3627
sg38
S'right'
p4457
sg59
g63
sS'trial_loop.thisN'
p4458
I55
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4459
g60
(g99
S'7\x00\x00\x00'
tRp4460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4461
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4462
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4463
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p4464
Nsg70
Vn
sS'block_loop.thisTrialN'
p4465
I0
sg39
F0.56702516971927253
sg34
g753
(S'\x07\xdf\x07\x0e\x106\x02\x06\xf5@'
tRp4466
sa(dp4467
S'trial_loop.thisTrialN'
p4468
I56
sg3633
S'22-daim.png'
p4469
sS'block_loop.thisIndex'
p4470
g3627
sg38
S'left'
p4471
sg59
g63
sS'trial_loop.thisN'
p4472
I56
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4473
g60
(g99
S'8\x00\x00\x00'
tRp4474
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4475
I0
sg3642
S'7-olives.png'
p4476
sS'block_loop.thisRepN'
p4477
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4478
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4479
Nsg70
Vn
sS'block_loop.thisTrialN'
p4480
I0
sg39
F1.1500050747690693
sg34
g753
(S'\x07\xdf\x07\x0e\x106\x08\x00\xa0('
tRp4481
sa(dp4482
S'trial_loop.thisTrialN'
p4483
I57
sg3633
g3634
sS'block_loop.thisIndex'
p4484
g3627
sg38
S'right'
p4485
sg59
g63
sS'trial_loop.thisN'
p4486
I57
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4487
g60
(g99
S'9\x00\x00\x00'
tRp4488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4489
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4490
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4491
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4492
Nsg70
Vn
sS'block_loop.thisTrialN'
p4493
I0
sg39
F0.68334745525862672
sg34
g753
(S'\x07\xdf\x07\x0e\x106\x0e\x03\x92\x10'
tRp4494
sa(dp4495
S'trial_loop.thisTrialN'
p4496
I58
sg3633
S'35-raisins.png'
p4497
sS'block_loop.thisIndex'
p4498
g3627
sg38
S'left'
p4499
sg59
g63
sS'trial_loop.thisN'
p4500
I58
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4501
g60
(g99
S':\x00\x00\x00'
tRp4502
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4503
I0
sg3642
S'49-yorkie.png'
p4504
sS'block_loop.thisRepN'
p4505
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4506
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4507
Nsg70
Vn
sS'block_loop.thisTrialN'
p4508
I0
sg39
F0.78336518844480452
sg34
g753
(S'\x07\xdf\x07\x0e\x106\x13\x0eg\x80'
tRp4509
sa(dp4510
S'trial_loop.thisTrialN'
p4511
I59
sg3633
g3671
sS'block_loop.thisIndex'
p4512
g3627
sg38
S'left'
p4513
sg59
g63
sS'trial_loop.thisN'
p4514
I59
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4515
g60
(g99
S';\x00\x00\x00'
tRp4516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4517
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4518
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4519
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4520
Nsg70
Vn
sS'block_loop.thisTrialN'
p4521
I0
sg39
F1.3999959515876981
sg34
g753
(S'\x07\xdf\x07\x0e\x106\x19\x0b\xa4x'
tRp4522
sa(dp4523
S'trial_loop.thisTrialN'
p4524
I60
sg3633
S'1-treacle_cookies.png'
p4525
sS'block_loop.thisIndex'
p4526
g3627
sg38
S'left'
p4527
sg59
g63
sS'trial_loop.thisN'
p4528
I60
sg33
g4143
sg64
g65
sS'trial_loop.thisIndex'
p4529
g60
(g99
S'<\x00\x00\x00'
tRp4530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4531
I0
sg3642
S'21-nakd_banana_crunch.png'
p4532
sS'block_loop.thisRepN'
p4533
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4534
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p4535
Nsg70
Vn
sS'block_loop.thisTrialN'
p4536
I0
sg39
F0.69991287360790011
sg34
g753
(S'\x07\xdf\x07\x0e\x106 \x03 \xc8'
tRp4537
sa(dp4538
S'trial_loop.thisTrialN'
p4539
I61
sg3633
g3688
sS'block_loop.thisIndex'
p4540
g3627
sg38
S'left'
p4541
sg59
g63
sS'trial_loop.thisN'
p4542
I61
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4543
g60
(g99
S'=\x00\x00\x00'
tRp4544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4545
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4546
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4547
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4548
Nsg70
Vn
sS'block_loop.thisTrialN'
p4549
I0
sg39
F0.88333958651492139
sg34
g753
(S'\x07\xdf\x07\x0e\x106%\x0e4\xb8'
tRp4550
sa(dp4551
S'trial_loop.thisTrialN'
p4552
I62
sg3633
g4086
sS'block_loop.thisIndex'
p4553
g3627
sg38
S'left'
p4554
sg59
g63
sS'trial_loop.thisN'
p4555
I62
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p4556
g60
(g99
S'>\x00\x00\x00'
tRp4557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4558
I0
sg3642
g4094
sS'block_loop.thisRepN'
p4559
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4560
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p4561
Nsg70
Vn
sS'block_loop.thisTrialN'
p4562
I0
sg39
F0.85002029907991528
sg34
g753
(S'\x07\xdf\x07\x0e\x106+\x0c\xdc\xf8'
tRp4563
sa(dp4564
S'trial_loop.thisTrialN'
p4565
I63
sg3633
g3895
sS'block_loop.thisIndex'
p4566
g3627
sg38
S'left'
p4567
sg59
g63
sS'trial_loop.thisN'
p4568
I63
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p4569
g60
(g99
S'?\x00\x00\x00'
tRp4570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4571
I0
sg3642
g3903
sS'block_loop.thisRepN'
p4572
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4573
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p4574
Nsg70
Vn
sS'block_loop.thisTrialN'
p4575
I0
sg39
F0.68309913363918895
sg34
g753
(S'\x07\xdf\x07\x0e\x1061\x0b\x0c '
tRp4576
sa(dp4577
S'trial_loop.thisTrialN'
p4578
I64
sg3633
g3912
sS'block_loop.thisIndex'
p4579
g3627
sg38
S'left'
p4580
sg59
g63
sS'trial_loop.thisN'
p4581
I64
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4582
g60
(g99
S'@\x00\x00\x00'
tRp4583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4584
I0
sg3642
g3920
sS'block_loop.thisRepN'
p4585
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4586
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4587
Nsg70
Vn
sS'block_loop.thisTrialN'
p4588
I0
sg39
F0.64976673163255327
sg34
g753
(S'\x07\xdf\x07\x0e\x1067\x06\xd9\xe8'
tRp4589
sa(dp4590
S'trial_loop.thisTrialN'
p4591
I65
sg3633
g3848
sS'block_loop.thisIndex'
p4592
g3627
sg38
S'left'
p4593
sg59
g63
sS'trial_loop.thisN'
p4594
I65
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4595
g60
(g99
S'A\x00\x00\x00'
tRp4596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4597
I0
sg3642
g3856
sS'block_loop.thisRepN'
p4598
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4599
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p4600
Nsg70
Vn
sS'block_loop.thisTrialN'
p4601
I0
sg39
F0.71668156786290638
sg34
g753
(S'\x07\xdf\x07\x0e\x107\x01\x01\xf4\x00'
tRp4602
sa(dp4603
S'trial_loop.thisTrialN'
p4604
I66
sg3633
g3912
sS'block_loop.thisIndex'
p4605
g3627
sg38
S'left'
p4606
sg59
g63
sS'trial_loop.thisN'
p4607
I66
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4608
g60
(g99
S'B\x00\x00\x00'
tRp4609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4610
I0
sg3642
g3920
sS'block_loop.thisRepN'
p4611
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4612
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4613
Nsg70
Vn
sS'block_loop.thisTrialN'
p4614
I0
sg39
F0.68322657309363422
sg34
g753
(S'\x07\xdf\x07\x0e\x107\x06\r} '
tRp4615
sa(dp4616
S'trial_loop.thisTrialN'
p4617
I67
sg3633
g4221
sS'block_loop.thisIndex'
p4618
g3627
sg38
S'right'
p4619
sg59
g63
sS'trial_loop.thisN'
p4620
I67
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4621
g60
(g99
S'C\x00\x00\x00'
tRp4622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4623
I0
sg3642
g4228
sS'block_loop.thisRepN'
p4624
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4625
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4626
Nsg70
Vn
sS'block_loop.thisTrialN'
p4627
I0
sg39
F0.76644254048733274
sg34
g753
(S'\x07\xdf\x07\x0e\x107\x0c\t\x10P'
tRp4628
sa(dp4629
S'trial_loop.thisTrialN'
p4630
I68
sg3633
g3790
sS'block_loop.thisIndex'
p4631
g3627
sg38
S'right'
p4632
sg59
g63
sS'trial_loop.thisN'
p4633
I68
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p4634
g60
(g99
S'D\x00\x00\x00'
tRp4635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4636
I0
sg3642
g3797
sS'block_loop.thisRepN'
p4637
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4638
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p4639
Nsg70
Vn
sS'block_loop.thisTrialN'
p4640
I0
sg39
F1.4166722736226802
sg34
g753
(S'\x07\xdf\x07\x0e\x107\x12\x06\x0e\xc8'
tRp4641
sa(dp4642
S'trial_loop.thisTrialN'
p4643
I69
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4644
sS'block_loop.thisIndex'
p4645
g3627
sg38
S'right'
p4646
sg59
g63
sS'trial_loop.thisN'
p4647
I69
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p4648
g60
(g99
S'E\x00\x00\x00'
tRp4649
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4650
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4651
sS'block_loop.thisRepN'
p4652
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4653
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p4654
Nsg70
Vn
sS'block_loop.thisTrialN'
p4655
I0
sg39
F1.0166198723436537
sg34
g753
(S'\x07\xdf\x07\x0e\x107\x18\r\x0f\xc0'
tRp4656
sa(dp4657
S'trial_loop.thisTrialN'
p4658
I70
sg3633
g4236
sS'block_loop.thisIndex'
p4659
g3627
sg38
S'right'
p4660
sg59
g63
sS'trial_loop.thisN'
p4661
I70
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4662
g60
(g99
S'F\x00\x00\x00'
tRp4663
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4664
I0
sg3642
g4243
sS'block_loop.thisRepN'
p4665
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4666
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4667
Nsg70
Vn
sS'block_loop.thisTrialN'
p4668
I0
sg39
F0.99976963964581955
sg34
g753
(S'\x07\xdf\x07\x0e\x107\x1e\r\xa0H'
tRp4669
sa(dp4670
S'trial_loop.thisTrialN'
p4671
I71
sg3633
g4000
sS'block_loop.thisIndex'
p4672
g3627
sg38
S'left'
p4673
sg59
g63
sS'trial_loop.thisN'
p4674
I71
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p4675
g60
(g99
S'G\x00\x00\x00'
tRp4676
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4677
I0
sg3642
g4007
sS'block_loop.thisRepN'
p4678
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4679
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p4680
Nsg70
Vn
sS'block_loop.thisTrialN'
p4681
I0
sg39
F0.7336298747723049
sg34
g753
(S'\x07\xdf\x07\x0e\x107$\x0e0\xd0'
tRp4682
sa(dp4683
S'trial_loop.thisTrialN'
p4684
I72
sg3633
g4221
sS'block_loop.thisIndex'
p4685
g3627
sg38
S'right'
p4686
sg59
g63
sS'trial_loop.thisN'
p4687
I72
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4688
g60
(g99
S'H\x00\x00\x00'
tRp4689
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4690
I0
sg3642
g4228
sS'block_loop.thisRepN'
p4691
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4692
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4693
Nsg70
Vn
sS'block_loop.thisTrialN'
p4694
I0
sg39
F0.81659039306214254
sg34
g753
(S'\x07\xdf\x07\x0e\x107*\n\xb60'
tRp4695
sa(dp4696
S'trial_loop.thisTrialN'
p4697
I73
sg3633
S'19-caramello_redo.png'
p4698
sS'block_loop.thisIndex'
p4699
g3627
sg38
S'left'
p4700
sg59
g63
sS'trial_loop.thisN'
p4701
I73
sg33
g4290
sg64
g65
sS'trial_loop.thisIndex'
p4702
g60
(g99
S'I\x00\x00\x00'
tRp4703
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4704
I0
sg3642
S'30-spaghetti_hoops.png'
p4705
sS'block_loop.thisRepN'
p4706
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4707
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p4708
Nsg70
Vn
sS'block_loop.thisTrialN'
p4709
I0
sg39
F0.66657876100362046
sg34
g753
(S'\x07\xdf\x07\x0e\x1070\x08l@'
tRp4710
sa(dp4711
S'trial_loop.thisTrialN'
p4712
I74
sg3633
g4086
sS'block_loop.thisIndex'
p4713
g3627
sg38
S'left'
p4714
sg59
g63
sS'trial_loop.thisN'
p4715
I74
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p4716
g60
(g99
S'J\x00\x00\x00'
tRp4717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4718
I0
sg3642
g4094
sS'block_loop.thisRepN'
p4719
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4720
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p4721
Nsg70
Vn
sS'block_loop.thisTrialN'
p4722
I0
sg39
F0.76658651570687653
sg34
g753
(S'\x07\xdf\x07\x0e\x1076\x03\xc0\xf0'
tRp4723
sa(dp4724
S'trial_loop.thisTrialN'
p4725
I75
sg3633
g3912
sS'block_loop.thisIndex'
p4726
g3627
sg38
S'left'
p4727
sg59
g63
sS'trial_loop.thisN'
p4728
I75
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4729
g60
(g99
S'K\x00\x00\x00'
tRp4730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4731
I0
sg3642
g3920
sS'block_loop.thisRepN'
p4732
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4733
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4734
Nsg70
Vn
sS'block_loop.thisTrialN'
p4735
I0
sg39
F1.4332220115011296
sg34
g753
(S'\x07\xdf\x07\x0e\x108\x00\x00\xbfh'
tRp4736
sa(dp4737
S'trial_loop.thisTrialN'
p4738
I76
sg3633
g3739
sS'block_loop.thisIndex'
p4739
g3627
sg38
S'right'
p4740
sg59
g63
sS'trial_loop.thisN'
p4741
I76
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4742
g60
(g99
S'L\x00\x00\x00'
tRp4743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4744
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4745
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4746
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4747
Nsg70
Vn
sS'block_loop.thisTrialN'
p4748
I0
sg39
F0.96669895893137436
sg34
g753
(S'\x07\xdf\x07\x0e\x108\x06\x07\xc0`'
tRp4749
sa(dp4750
S'trial_loop.thisTrialN'
p4751
I77
sg3633
g3805
sS'block_loop.thisIndex'
p4752
g3627
sg38
S'right'
p4753
sg59
g63
sS'trial_loop.thisN'
p4754
I77
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p4755
g60
(g99
S'M\x00\x00\x00'
tRp4756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4757
I0
sg3642
g3813
sS'block_loop.thisRepN'
p4758
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4759
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p4760
Nsg70
Vn
sS'block_loop.thisTrialN'
p4761
I0
sg39
F0.65037000206575613
sg34
g753
(S'\x07\xdf\x07\x0e\x108\x0c\x07\xd7\xd0'
tRp4762
sa(dp4763
S'trial_loop.thisTrialN'
p4764
I78
sg3633
g4279
sS'block_loop.thisIndex'
p4765
g3627
sg38
S'right'
p4766
sg59
g63
sS'trial_loop.thisN'
p4767
I78
sg33
g4283
sg64
g65
sS'trial_loop.thisIndex'
p4768
g60
(g99
S'N\x00\x00\x00'
tRp4769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4770
I0
sg3642
g4287
sS'block_loop.thisRepN'
p4771
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4772
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p4773
Nsg70
Vn
sS'block_loop.thisTrialN'
p4774
I0
sg39
F0.73355175752476498
sg34
g753
(S'\x07\xdf\x07\x0e\x108\x12\x02\xee\x00'
tRp4775
sa(dp4776
S'trial_loop.thisTrialN'
p4777
I79
sg3633
g4015
sS'block_loop.thisIndex'
p4778
g3627
sg38
S'left'
p4779
sg59
g63
sS'trial_loop.thisN'
p4780
I79
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4781
g60
(g99
S'O\x00\x00\x00'
tRp4782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4783
I0
sg3642
g4023
sS'block_loop.thisRepN'
p4784
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4785
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4786
Nsg70
Vn
sS'block_loop.thisTrialN'
p4787
I0
sg39
F0.69993625176357455
sg34
g753
(S'\x07\xdf\x07\x0e\x108\x17\x0e\xb5\xa0'
tRp4788
sa(dp4789
S'trial_loop.thisTrialN'
p4790
I80
sg3633
g4103
sS'block_loop.thisIndex'
p4791
g3627
sg38
S'left'
p4792
sg59
g63
sS'trial_loop.thisN'
p4793
I80
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4794
g60
(g99
S'P\x00\x00\x00'
tRp4795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4796
I0
sg3642
g4111
sS'block_loop.thisRepN'
p4797
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4798
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p4799
Nsg70
Vn
sS'block_loop.thisTrialN'
p4800
I0
sg39
F1.0165959239911899
sg34
g753
(S'\x07\xdf\x07\x0e\x108\x1d\n\xc1\xe8'
tRp4801
sa(dp4802
S'trial_loop.thisTrialN'
p4803
I81
sg3633
g3705
sS'block_loop.thisIndex'
p4804
g3627
sg38
S'right'
p4805
sg59
g63
sS'trial_loop.thisN'
p4806
I81
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4807
g60
(g99
S'Q\x00\x00\x00'
tRp4808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4809
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4810
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4811
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vn
sS'block_loop.thisTrialN'
p4813
I0
sg39
F1.2498945132047083
sg34
g753
(S'\x07\xdf\x07\x0e\x108#\x0bRp'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
g4264
sS'block_loop.thisIndex'
p4817
g3627
sg38
S'right'
p4818
sg59
g63
sS'trial_loop.thisN'
p4819
I82
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p4820
g60
(g99
S'R\x00\x00\x00'
tRp4821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4822
I0
sg3642
g4271
sS'block_loop.thisRepN'
p4823
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4824
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4825
Nsg70
Vn
sS'block_loop.thisTrialN'
p4826
I0
sg39
F0.94986098550907627
sg34
g753
(S'\x07\xdf\x07\x0e\x108*\x00qH'
tRp4827
sa(dp4828
S'trial_loop.thisTrialN'
p4829
I83
sg3633
g3671
sS'block_loop.thisIndex'
p4830
g3627
sg38
S'left'
p4831
sg59
g63
sS'trial_loop.thisN'
p4832
I83
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4833
g60
(g99
S'S\x00\x00\x00'
tRp4834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4835
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4836
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4837
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4838
Nsg70
Vn
sS'block_loop.thisTrialN'
p4839
I0
sg39
F1.8666852171372739
sg34
g753
(S'\x07\xdf\x07\x0e\x1080\x00J8'
tRp4840
sa(dp4841
S'trial_loop.thisTrialN'
p4842
I84
sg3633
g3634
sS'block_loop.thisIndex'
p4843
g3627
sg38
S'right'
p4844
sg59
g63
sS'trial_loop.thisN'
p4845
I84
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4846
g60
(g99
S'T\x00\x00\x00'
tRp4847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4848
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4849
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4850
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4851
Nsg70
Vn
sS'block_loop.thisTrialN'
p4852
I0
sg39
F1.3499028381083917
sg34
g753
(S'\x07\xdf\x07\x0e\x1086\r\xf2P'
tRp4853
sa(dp4854
S'trial_loop.thisTrialN'
p4855
I85
sg3633
g3865
sS'block_loop.thisIndex'
p4856
g3627
sg38
S'left'
p4857
sg59
g63
sS'trial_loop.thisN'
p4858
I85
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4859
g60
(g99
S'U\x00\x00\x00'
tRp4860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4861
I0
sg3642
g3872
sS'block_loop.thisRepN'
p4862
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4863
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4864
Nsg70
Vn
sS'block_loop.thisTrialN'
p4865
I0
sg39
F0.88324578879655746
sg34
g753
(S'\x07\xdf\x07\x0e\x109\x01\x04\x80X'
tRp4866
sa(dp4867
S'trial_loop.thisTrialN'
p4868
I86
sg3633
g3880
sS'block_loop.thisIndex'
p4869
g3627
sg38
S'left'
p4870
sg59
g63
sS'trial_loop.thisN'
p4871
I86
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4872
g60
(g99
S'V\x00\x00\x00'
tRp4873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4874
I0
sg3642
g3887
sS'block_loop.thisRepN'
p4875
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4876
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vn
sS'block_loop.thisTrialN'
p4878
I0
sg39
F0.8665948406123789
sg34
g753
(S'\x07\xdf\x07\x0e\x109\x07\x03(\x98'
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g4150
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'right'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g4157
sS'block_loop.thisRepN'
p4888
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4889
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vn
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.83338132507378759
sg34
g753
(S'\x07\xdf\x07\x0e\x109\r\x01\xd4\xc0'
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
g4469
sS'block_loop.thisIndex'
p4895
g3627
sg38
S'right'
p4896
sg59
g63
sS'trial_loop.thisN'
p4897
I88
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4898
g60
(g99
S'X\x00\x00\x00'
tRp4899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4900
I0
sg3642
g4476
sS'block_loop.thisRepN'
p4901
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4902
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4903
Nsg70
Vn
sS'block_loop.thisTrialN'
p4904
I0
sg39
F1.7670272794548509
sg34
g753
(S'\x07\xdf\x07\x0e\x109\x12\x0f\x07\xa8'
tRp4905
sa(dp4906
S'trial_loop.thisTrialN'
p4907
I89
sg3633
g4698
sS'block_loop.thisIndex'
p4908
g3627
sg38
S'left'
p4909
sg59
g63
sS'trial_loop.thisN'
p4910
I89
sg33
g4290
sg64
g65
sS'trial_loop.thisIndex'
p4911
g60
(g99
S'Y\x00\x00\x00'
tRp4912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4913
I0
sg3642
g4705
sS'block_loop.thisRepN'
p4914
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4915
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p4916
Nsg70
Vn
sS'block_loop.thisTrialN'
p4917
I0
sg39
F0.81665910202900704
sg34
g753
(S'\x07\xdf\x07\x0e\x109\x19\x0c\x028'
tRp4918
sa(dp4919
S'trial_loop.thisTrialN'
p4920
I90
sg3633
g3739
sS'block_loop.thisIndex'
p4921
g3627
sg38
S'right'
p4922
sg59
g63
sS'trial_loop.thisN'
p4923
I90
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4924
g60
(g99
S'Z\x00\x00\x00'
tRp4925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4926
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4927
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4928
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4929
Nsg70
Vn
sS'block_loop.thisTrialN'
p4930
I0
sg39
F0.76661046406115929
sg34
g753
(S'\x07\xdf\x07\x0e\x109\x1f\t\xb8H'
tRp4931
sa(dp4932
S'trial_loop.thisTrialN'
p4933
I91
sg3633
g3722
sS'block_loop.thisIndex'
p4934
g3627
sg38
S'left'
p4935
sg59
g63
sS'trial_loop.thisN'
p4936
I91
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4937
g60
(g99
S'[\x00\x00\x00'
tRp4938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4939
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4940
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4941
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4942
Nsg70
Vn
sS'block_loop.thisTrialN'
p4943
I0
sg39
F0.96664507513560238
sg34
g753
(S'\x07\xdf\x07\x0e\x109%\x06|('
tRp4944
sa(dp4945
S'trial_loop.thisTrialN'
p4946
I92
sg3633
S'31-hobnobs.png'
p4947
sS'block_loop.thisIndex'
p4948
g3627
sg38
S'left'
p4949
sg59
g63
sS'trial_loop.thisN'
p4950
I92
sg33
g3777
sg64
g65
sS'trial_loop.thisIndex'
p4951
g60
(g99
S'\\\x00\x00\x00'
tRp4952
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4953
I0
sg3642
S'25-kitkat.png'
p4954
sS'block_loop.thisRepN'
p4955
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4956
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p4957
Nsg70
Vn
sS'block_loop.thisTrialN'
p4958
I0
sg39
F0.88335241599088477
sg34
g753
(S'\x07\xdf\x07\x0e\x109+\x06\x93\x98'
tRp4959
sa(dp4960
S'trial_loop.thisTrialN'
p4961
I93
sg3633
g3756
sS'block_loop.thisIndex'
p4962
g3627
sg38
S'left'
p4963
sg59
g63
sS'trial_loop.thisN'
p4964
I93
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p4965
g60
(g99
S']\x00\x00\x00'
tRp4966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4967
I0
sg3642
g3764
sS'block_loop.thisRepN'
p4968
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4969
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p4970
Nsg70
Vn
sS'block_loop.thisTrialN'
p4971
I0
sg39
F0.78339113249421644
sg34
g753
(S'\x07\xdf\x07\x0e\x1091\x05;\xd8'
tRp4972
sa(dp4973
S'trial_loop.thisTrialN'
p4974
I94
sg3633
g3634
sS'block_loop.thisIndex'
p4975
g3627
sg38
S'right'
p4976
sg59
g63
sS'trial_loop.thisN'
p4977
I94
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4978
g60
(g99
S'^\x00\x00\x00'
tRp4979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4980
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4981
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4982
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vn
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.66705145589003223
sg34
g753
(S'\x07\xdf\x07\x0e\x1097\x02x\xd0'
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g3942
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'right'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g3950
sS'block_loop.thisRepN'
p4994
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4995
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vn
sS'block_loop.thisTrialN'
p4997
I0
sg39
F1.0333731712289591
sg34
g753
(S'\x07\xdf\x07\x0e\x10:\x00\r\x0f\xc0'
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g4296
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'right'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g3906
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g4303
sS'block_loop.thisRepN'
p5007
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5008
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vn
sS'block_loop.thisTrialN'
p5010
I0
sg39
F0.8496328489309235
sg34
g753
(S'\x07\xdf\x07\x0e\x10:\x06\x0e\x19`'
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
g4086
sS'block_loop.thisIndex'
p5014
g3627
sg38
S'left'
p5015
sg59
g63
sS'trial_loop.thisN'
p5016
I97
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p5017
g60
(g99
S'a\x00\x00\x00'
tRp5018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5019
I0
sg3642
g4094
sS'block_loop.thisRepN'
p5020
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5021
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p5022
Nsg70
Vn
sS'block_loop.thisTrialN'
p5023
I0
sg39
F1.4833630216890015
sg34
g753
(S'\x07\xdf\x07\x0e\x10:\x0c\x0cH\x88'
tRp5024
sa(dp5025
S'trial_loop.thisTrialN'
p5026
I98
sg3633
g4236
sS'block_loop.thisIndex'
p5027
g3627
sg38
S'right'
p5028
sg59
g63
sS'trial_loop.thisN'
p5029
I98
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5030
g60
(g99
S'b\x00\x00\x00'
tRp5031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5032
I0
sg3642
g4243
sS'block_loop.thisRepN'
p5033
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5034
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vn
sS'block_loop.thisTrialN'
p5036
I0
sg39
F0.6833696930170845
sg34
g753
(S'\x07\xdf\x07\x0e\x10:\x13\x04\xf9p'
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
g3865
sS'block_loop.thisIndex'
p5040
g3627
sg38
S'left'
p5041
sg59
g63
sS'trial_loop.thisN'
p5042
I99
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5043
g60
(g99
S'c\x00\x00\x00'
tRp5044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5045
I0
sg3642
g3872
sS'block_loop.thisRepN'
p5046
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5047
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5048
Nsg70
Vn
sS'block_loop.thisTrialN'
p5049
I0
sg39
F0.63325890337000601
sg34
g753
(S'\x07\xdf\x07\x0e\x10:\x19\x00\xc78'
tRp5050
sa(dp5051
S'trial_loop.thisTrialN'
p5052
I100
sg3633
g4337
sS'block_loop.thisIndex'
p5053
g3627
sg38
S'left'
p5054
sg59
g63
sS'trial_loop.thisN'
p5055
I100
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p5056
g60
(g99
S'd\x00\x00\x00'
tRp5057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5058
I0
sg3642
g4344
sS'block_loop.thisRepN'
p5059
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5060
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p5061
Nsg70
Vn
sS'block_loop.thisTrialN'
p5062
I0
sg39
F0.76668972170773486
sg34
g753
(S'\x07\xdf\x07\x0e\x10:\x1e\n\xe5\x10'
tRp5063
sa(dp5064
S'trial_loop.thisTrialN'
p5065
I101
sg3633
g3880
sS'block_loop.thisIndex'
p5066
g3627
sg38
S'left'
p5067
sg59
g63
sS'trial_loop.thisN'
p5068
I101
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5069
g60
(g99
S'e\x00\x00\x00'
tRp5070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5071
I0
sg3642
g3887
sS'block_loop.thisRepN'
p5072
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5073
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5074
Nsg70
Vn
sS'block_loop.thisTrialN'
p5075
I0
sg39
F1.7499803281389177
sg34
g753
(S'\x07\xdf\x07\x0e\x10:$\x07\xe3\x88'
tRp5076
sa(dp5077
S'trial_loop.thisTrialN'
p5078
I102
sg3633
g3688
sS'block_loop.thisIndex'
p5079
g3627
sg38
S'left'
p5080
sg59
g63
sS'trial_loop.thisN'
p5081
I102
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5082
g60
(g99
S'f\x00\x00\x00'
tRp5083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5084
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5085
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5086
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5087
Nsg70
Vn
sS'block_loop.thisTrialN'
p5088
I0
sg39
F0.73336473228664545
sg34
g753
(S'\x07\xdf\x07\x0e\x10:+\x04\x9f\x98'
tRp5089
sa(dp5090
S'trial_loop.thisTrialN'
p5091
I103
sg3633
g4236
sS'block_loop.thisIndex'
p5092
g3627
sg38
S'right'
p5093
sg59
g63
sS'trial_loop.thisN'
p5094
I103
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5095
g60
(g99
S'g\x00\x00\x00'
tRp5096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5097
I0
sg3642
g4243
sS'block_loop.thisRepN'
p5098
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5099
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5100
Nsg70
Vn
sS'block_loop.thisTrialN'
p5101
I0
sg39
F0.68335344234765216
sg34
g753
(S'\x07\xdf\x07\x0e\x10:1\x00\xea`'
tRp5102
sa(dp5103
S'trial_loop.thisTrialN'
p5104
I104
sg3633
g4469
sS'block_loop.thisIndex'
p5105
g3627
sg38
S'right'
p5106
sg59
g63
sS'trial_loop.thisN'
p5107
I104
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5108
g60
(g99
S'h\x00\x00\x00'
tRp5109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5110
I0
sg3642
g4476
sS'block_loop.thisRepN'
p5111
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5112
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5113
Nsg70
Vn
sS'block_loop.thisTrialN'
p5114
I0
sg39
F1.1003302021799755
sg34
g753
(S'\x07\xdf\x07\x0e\x10:6\x0b\xfah'
tRp5115
sa(dp5116
S'trial_loop.thisTrialN'
p5117
I105
sg3633
g4698
sS'block_loop.thisIndex'
p5118
g3627
sg38
S'left'
p5119
sg59
g63
sS'trial_loop.thisN'
p5120
I105
sg33
g4283
sg64
g65
sS'trial_loop.thisIndex'
p5121
g60
(g99
S'i\x00\x00\x00'
tRp5122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5123
I0
sg3642
g4705
sS'block_loop.thisRepN'
p5124
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5125
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p5126
Nsg70
Vn
sS'block_loop.thisTrialN'
p5127
I0
sg39
F0.93334146816960128
sg34
g753
(S'\x07\xdf\x07\x0e\x10;\x00\r\xfa '
tRp5128
sa(dp5129
S'trial_loop.thisTrialN'
p5130
I106
sg3633
g4644
sS'block_loop.thisIndex'
p5131
g3627
sg38
S'right'
p5132
sg59
g63
sS'trial_loop.thisN'
p5133
I106
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p5134
g60
(g99
S'j\x00\x00\x00'
tRp5135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5136
I0
sg3642
g4651
sS'block_loop.thisRepN'
p5137
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5138
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p5139
Nsg70
Vn
sS'block_loop.thisTrialN'
p5140
I0
sg39
F1.2665802435203659
sg34
g753
(S'\x07\xdf\x07\x0e\x10;\x06\rY\xf8'
tRp5141
sa(dp5142
S'trial_loop.thisTrialN'
p5143
I107
sg3633
g4497
sS'block_loop.thisIndex'
p5144
g3627
sg38
S'left'
p5145
sg59
g63
sS'trial_loop.thisN'
p5146
I107
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5147
g60
(g99
S'k\x00\x00\x00'
tRp5148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5149
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5150
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5151
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5152
Nsg70
Vn
sS'block_loop.thisTrialN'
p5153
I0
sg39
F0.81662175400015258
sg34
g753
(S'\x07\xdf\x07\x0e\x10;\r\x02\xb7P'
tRp5154
sa(dp5155
S'trial_loop.thisTrialN'
p5156
I108
sg3633
S'4-corn.png'
p5157
sS'block_loop.thisIndex'
p5158
g3627
sg38
S'right'
p5159
sg59
g63
sS'trial_loop.thisN'
p5160
I108
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5161
g60
(g99
S'l\x00\x00\x00'
tRp5162
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5163
I0
sg3642
S'10-bounty_redo.png'
p5164
sS'block_loop.thisRepN'
p5165
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5166
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F0.85004909412418783
sg34
g753
(S'\x07\xdf\x07\x0e\x10;\x13\x00m`'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g3739
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'right'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5178
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5179
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.68334317876724526
sg34
g753
(S'\x07\xdf\x07\x0e\x10;\x18\r\xde\xc8'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4644
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'right'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4651
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5192
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F1.1668795409223094
sg34
g753
(S'\x07\xdf\x07\x0e\x10;\x1e\t\xac\x90'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g3739
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5205
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.76660048558187555
sg34
g753
(S'\x07\xdf\x07\x0e\x10;$\x0c\x9ex'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4296
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'right'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4303
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5218
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.76632479441468604
sg34
g753
(S'\x07\xdf\x07\x0e\x10;*\t\x9c\xf0'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g3848
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5231
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.9333397575737763
sg34
g753
(S'\x07\xdf\x07\x0e\x10;0\x06\x9fP'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g3912
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'left'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5244
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.84989000863242836
sg34
g753
(S'\x07\xdf\x07\x0e\x10;6\x05\xff('
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g4497
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'left'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5257
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.96655612410722824
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00\x00\x04.P'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4264
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4271
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5270
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.96693188518111128
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00\x06\x04E\xc0'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g4015
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'left'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g4023
sS'block_loop.thisRepN'
p5282
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5283
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vn
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.68329157576772559
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00\x0c\x04]0'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
S'45-chewy_nougat_redo.png'
p5289
sS'block_loop.thisIndex'
p5290
g3627
sg38
S'right'
p5291
sg59
g63
sS'trial_loop.thisN'
p5292
I118
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5293
g60
(g99
S'v\x00\x00\x00'
tRp5294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5295
I0
sg3642
S'41-peanuts_redo.png'
p5296
sS'block_loop.thisRepN'
p5297
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5298
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.83339843104113243
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00\x11\x0f2\xa0'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4947
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'left'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4954
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5311
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.93332521750198794
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00\x17\r#H'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3972
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5324
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.66668025640683481
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00\x1d\x0c\xc1\xa0'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4133
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'right'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g4143
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4141
sS'block_loop.thisRepN'
p5336
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5337
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.66671931503151427
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00#\x08\x16P'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g3790
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g3797
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5350
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.83373484838921286
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00)\x03k\x00'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g3865
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g3872
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3743
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5363
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.78334295068816573
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00/\x01_\x90'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4497
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5376
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F1.233337932937502
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x004\r\xda\xe0'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4150
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g4114
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4157
sS'block_loop.thisRepN'
p5388
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5389
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.8832740136404027
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x00;\x02\xbf '
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4337
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4344
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5402
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.71669439733886975
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x01\x05\x01g`'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4279
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g4283
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4287
sS'block_loop.thisRepN'
p5414
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5415
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.86665300089953234
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x01\n\x0c\xf4h'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4191
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'right'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4199
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5428
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.68335486784599198
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x01\x10\x0b^('
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g5157
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'right'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g5164
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5441
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.78335121857162449
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x01\x16\x06\xf1X'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g5289
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'right'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g5296
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5454
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.8166705060066306
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x01\x1c\x04.P'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g3972
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5467
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.66669337098210235
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x01"\x01\xe4`'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3756
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3764
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5480
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.70007110380174709
sg34
g753
(S"\x07\xdf\x07\x0e\x11\x01'\x0c\xb5\xe8"
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g3942
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g3950
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5493
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.84998181065566314
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x01-\x08\x87\x98'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3705
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5506
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.88368826314035687
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x013\x06\xb6\xc0'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4525
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'left'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g4143
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4532
sS'block_loop.thisRepN'
p5518
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5519
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.73324470541774645
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x019\x05\x9d\x80'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3790
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3797
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5532
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.88328456232193275
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02\x03\x01\xe4`'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g5157
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g5164
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5545
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.95002862398541765
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02\t\x00\xcb '
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g5289
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g5296
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5558
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.69992285208900284
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02\x0f\x00ix'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4644
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4651
sS'block_loop.thisRepN'
p5570
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5571
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.83333770485842251
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02\x14\x0b\xb8\x00'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g3805
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3809
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g3813
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5584
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.68350397485664871
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02\x1a\t\xa8\xa8'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4947
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4954
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5597
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.81666851030968246
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02 \x05;\xd8'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g4525
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g4143
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g4532
sS'block_loop.thisRepN'
p5609
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5610
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.71660202511884563
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02&\x02\xf1\xe8'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4221
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4228
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5623
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.70005000644414395
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x02+\x0e{\x08'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4191
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'right'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4199
sS'block_loop.thisRepN'
p5635
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5636
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.78330645795904275
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x021\nL\xb8'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4000
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4007
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5649
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.71670637151510164
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x027\x07\x89\xb0'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3790
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3797
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5662
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.85038066478409746
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03\x01\x03\xd0\x90'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3848
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5675
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.78334494638329488
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03\x07\x01\xff\xb8'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4236
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4243
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5688
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.59993990103612305
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03\x0c\x0e~\xf0'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4279
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g4290
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4287
sS'block_loop.thisRepN'
p5700
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5701
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.86670773999321682
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03\x12\x08\xe1p'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3880
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3887
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5714
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.81659638014934899
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03\x18\x07K0'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g5289
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g5296
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5727
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.78327794801225537
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03\x1e\x05\x01@'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4644
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4651
sS'block_loop.thisRepN'
p5739
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5740
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.78331301524485752
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03$\x02>8'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4015
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4023
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4019
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5753
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.3332826806654339
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03)\x0e\xbdp'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4032
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4039
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5766
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.69994737064189394
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x030\x05\x0c\xf8'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4191
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4199
sS'block_loop.thisRepN'
p5778
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5779
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.85001203119645652
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x036\x00\xda\xc0'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g3722
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5792
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.73310956828026974
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x03;\x0eL('
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4497
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5805
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.74990563208302774
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x04\x05\n\xd1\x88'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g3972
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5818
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.63356367468077224
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x04\x0b\x07\x95h'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4469
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4476
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5831
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F1.1999393878559204
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x04\x11\x02q\x00'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4698
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g4283
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4705
sS'block_loop.thisRepN'
p5843
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5844
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.8333157521992689
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x04\x17\x06\x1a\x80'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g3773
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g3781
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5857
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.70001664980736678
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x04\x1e\x04\x07@'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3805
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3813
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5870
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.75004419041397341
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x04#\x0f\x17H'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4032
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4039
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5883
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.7667028362848214
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x04)\x0b\xdb('
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3880
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3887
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5896
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.70000153953697009
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x040\x08\xd1\xd0'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3773
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3781
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5909
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.99997576654641307
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x046\x04\x9f\x98'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3848
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5922
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.89994577408651821
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05\x00\x054\x08'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3895
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3903
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5935
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.1663378519697289
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05\x06\x04\x1a\xc8'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4264
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4271
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5948
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F1.0332021115591488
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05\x0c\x07GH'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4698
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g4283
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4705
sS'block_loop.thisRepN'
p5960
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5961
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.66653571098686371
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05\x12\x08T\xd0'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g3634
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5974
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.69993397096914123
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05\x18\x03\xa9\x80'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4000
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3815
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4007
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3815
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5987
I1
sg3647
g3809
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.60000319311438943
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05\x1d\x0e\xf8\x08'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4103
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5999
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6000
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.86668835323143867
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05#\tV\xa0'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4525
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g4137
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4532
sS'block_loop.thisRepN'
p6012
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6013
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.7999779333040351
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05)\x07\xc4H'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4337
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4344
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6026
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.6503640149749117
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05/\x05;\xd8'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4947
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4954
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6039
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.78324373608120368
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x055\x00U\xf0'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3756
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3766
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3764
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3766
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6052
I1
sg3647
g3760
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F2.0332297662062047
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x05:\x0c\xd5('
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4296
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4303
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6065
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F1.0497507090422005
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06\x05\r\xd6\xf8'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3705
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6078
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.89991013665348873
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06\x0b\x0f\x1f\x18'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4133
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g4143
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4141
sS'block_loop.thisRepN'
p6090
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6091
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.88362554126069881
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06\x11\x0e\x05\xd8'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3942
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3950
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6104
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.8165638788123033
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06\x17\x0c\xec\x98'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4279
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4283
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4287
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4283
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6117
I1
sg3647
g4290
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.71653246085224964
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06\x1d\n\xa2\xa8'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4133
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4143
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4141
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6130
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F1.4999133297660592
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06#\x06\xae\xf0'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4264
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4271
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6143
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.73324698621217976
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06)\x0e\xe0\x98'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4103
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4111
sS'block_loop.thisRepN'
p6155
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6156
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.98334848161721311
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06/\x0be\xf8'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4032
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4039
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3946
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6169
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.81666765501176997
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x065\x0b}h'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3972
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3664
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3979
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3664
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6182
I1
sg3647
g3658
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.69992513288525515
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x06;\t3x'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4947
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4954
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6195
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.1166433075177338
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07\x05\x05?\xc0'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4296
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4303
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6208
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.79972647558861354
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07\x0b\x07z\x10'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4469
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4476
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3681
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6221
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.96662540327270108
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07\x11\x04\xf1\xa0'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4525
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g4137
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4532
sS'block_loop.thisRepN'
p6233
I1
sg3645
g4143
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6234
I1
sg3647
g4137
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.91645217684890667
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07\x17\x05\t\x10'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4086
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g4090
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4094
sS'block_loop.thisRepN'
p6246
I1
sg3645
g4090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6247
I1
sg3647
g4097
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.84999777622397232
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07\x1d\x04.P'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4150
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4114
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4157
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4107
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6260
I1
sg3647
g4114
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.3999206853331998
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07#\x02]x'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g5157
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'right'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g5164
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6273
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.74991960195620777
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07)\t\x1f\xf0'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g5289
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g5296
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3852
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6286
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.90000878106184246
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07/\x05\xa5P'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g5157
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g5164
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6299
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.7666751816359465
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x075\x04\xca\x90'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4191
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4199
sS'block_loop.thisRepN'
p6311
I1
sg3645
g4195
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6312
I1
sg3647
g4202
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.68331324332393706
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x07;\x01\x8a\x88'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g3895
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3906
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g3903
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3899
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6325
I1
sg3647
g3906
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.76633106660301564
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x08\x04\x0c\x9a\x90'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3722
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'left'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3730
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6338
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F1.099993784831895
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x08\n\t\x9c\xf0'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3773
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3783
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3781
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3783
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6351
I1
sg3647
g3777
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.95000638622695988
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x08\x10\x0b\x98\xc0'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F325.97694400760884
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'13-mccoys_steak_crisps.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'13-mccoys_steak_crisps.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'3-ellas_strawberries_apples.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'3-ellas_strawberries_apples.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.78321323043928714
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f\x0e\x07 8'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'19-caramello_redo.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'19-caramello_redo.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'30-spaghetti_hoops.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6402
I2
sg6385
S'30-spaghetti_hoops.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.81677684810165374
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f\x14\x04\x1e\xb0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'4-corn.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'10-bounty_redo.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'10-bounty_redo.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6419
I2
sg6385
S'4-corn.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.98333907333471871
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f\x1a\x01\xd4\xc0'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'46-pistachios.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'29-beans.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'29-beans.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
S'46-pistachios.png'
p6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6437
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.65001932974155352
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f \x02*\xb0'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'16-skips_prawn.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'42-mrkipling_lemon_slices.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6453
I2
sg6385
S'16-skips_prawn.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.84984125662776933
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f%\x0c\x83 '
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'41-peanuts_redo.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'left'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'41-peanuts_redo.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'45-chewy_nougat_redo.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6470
I2
sg6385
S'45-chewy_nougat_redo.png'
p6471
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vn
sS'block_loop.thisTrialN'
p6473
I0
sg39
F0.78335920135577908
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f+\n\xb2H'
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
g6372
sS'block_loop.thisIndex'
p6477
g6365
sg38
S'left'
p6478
sg59
g63
sS'trial_loop.thisN'
p6479
I6
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6483
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6484
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vn
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.61658030054059054
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f1\x07\xef@'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'25-kitkat.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'right'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
S'31-hobnobs.png'
p6494
sg64
g65
sS'trial_loop.thisIndex'
p6495
g60
(g99
S'\x07\x00\x00\x00'
tRp6496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6497
I0
sg6380
S'31-hobnobs.png'
p6498
sS'block_loop.thisRepN'
p6499
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6500
I2
sg6385
S'25-kitkat.png'
p6501
sg55
g11
sS'block_loop.thisTrial'
p6502
Nsg70
Vn
sS'block_loop.thisTrialN'
p6503
I0
sg39
F0.7333422094307025
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x0f7\x02\x8cX'
tRp6504
sa(dp6505
S'trial_loop.thisTrialN'
p6506
I8
sg6371
S'50-polo.png'
p6507
sS'block_loop.thisIndex'
p6508
g6365
sg38
S'right'
p6509
sg59
g63
sS'trial_loop.thisN'
p6510
I8
sg33
S'48-twix.png'
p6511
sg64
g65
sS'trial_loop.thisIndex'
p6512
g60
(g99
S'\x08\x00\x00\x00'
tRp6513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6514
I0
sg6380
S'48-twix.png'
p6515
sS'block_loop.thisRepN'
p6516
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6517
I2
sg6385
S'50-polo.png'
p6518
sg55
g11
sS'block_loop.thisTrial'
p6519
Nsg70
Vn
sS'block_loop.thisTrialN'
p6520
I0
sg39
F0.849945032825417
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10\x00\x0eS\xf8'
tRp6521
sa(dp6522
S'trial_loop.thisTrialN'
p6523
I9
sg6371
S'36-fig_rolls.png'
p6524
sS'block_loop.thisIndex'
p6525
g6365
sg38
S'left'
p6526
sg59
g63
sS'trial_loop.thisN'
p6527
I9
sg33
S'36-fig_rolls.png'
p6528
sg64
g65
sS'trial_loop.thisIndex'
p6529
g60
(g99
S'\t\x00\x00\x00'
tRp6530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6531
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6532
sS'block_loop.thisRepN'
p6533
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6534
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6535
sg55
g11
sS'block_loop.thisTrial'
p6536
Nsg70
Vn
sS'block_loop.thisTrialN'
p6537
I0
sg39
F0.88338719812236377
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10\x06\x0c\x87\x08'
tRp6538
sa(dp6539
S'trial_loop.thisTrialN'
p6540
I10
sg6371
S'45-chewy_nougat_redo.png'
p6541
sS'block_loop.thisIndex'
p6542
g6365
sg38
S'right'
p6543
sg59
g63
sS'trial_loop.thisN'
p6544
I10
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6545
g60
(g99
S'\n\x00\x00\x00'
tRp6546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6547
I0
sg6380
S'41-peanuts_redo.png'
p6548
sS'block_loop.thisRepN'
p6549
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6550
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vn
sS'block_loop.thisTrialN'
p6552
I0
sg39
F0.76675073299156793
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10\x0c\x0b/H'
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
S'48-twix.png'
p6556
sS'block_loop.thisIndex'
p6557
g6365
sg38
S'left'
p6558
sg59
g63
sS'trial_loop.thisN'
p6559
I11
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p6560
g60
(g99
S'\x0b\x00\x00\x00'
tRp6561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6562
I0
sg6380
S'50-polo.png'
p6563
sS'block_loop.thisRepN'
p6564
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6565
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6566
Nsg70
Vn
sS'block_loop.thisTrialN'
p6567
I0
sg39
F0.90035859808631358
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10\x12\x08-\xc0'
tRp6568
sa(dp6569
S'trial_loop.thisTrialN'
p6570
I12
sg6371
S'44-crunch.png'
p6571
sS'block_loop.thisIndex'
p6572
g6365
sg38
S'left'
p6573
sg59
g63
sS'trial_loop.thisN'
p6574
I12
sg33
S'26-walkers_smoky_bacon.png'
p6575
sg64
g65
sS'trial_loop.thisIndex'
p6576
g60
(g99
S'\x0c\x00\x00\x00'
tRp6577
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6578
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6579
sS'block_loop.thisRepN'
p6580
I2
sg6383
S'44-crunch.png'
p6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6582
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p6583
Nsg70
Vn
sS'block_loop.thisTrialN'
p6584
I0
sg39
F0.8499758235666377
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10\x18\x07\x14\x80'
tRp6585
sa(dp6586
S'trial_loop.thisTrialN'
p6587
I13
sg6371
S'30-spaghetti_hoops.png'
p6588
sS'block_loop.thisIndex'
p6589
g6365
sg38
S'right'
p6590
sg59
g63
sS'trial_loop.thisN'
p6591
I13
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6592
g60
(g99
S'\r\x00\x00\x00'
tRp6593
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6594
I0
sg6380
S'19-caramello_redo.png'
p6595
sS'block_loop.thisRepN'
p6596
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6597
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6598
Nsg70
Vn
sS'block_loop.thisTrialN'
p6599
I0
sg39
F0.76659136240050429
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10\x1e\x05\x82('
tRp6600
sa(dp6601
S'trial_loop.thisTrialN'
p6602
I14
sg6371
S'42-mrkipling_lemon_slices.png'
p6603
sS'block_loop.thisIndex'
p6604
g6365
sg38
S'left'
p6605
sg59
g63
sS'trial_loop.thisN'
p6606
I14
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6607
g60
(g99
S'\x0e\x00\x00\x00'
tRp6608
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6609
I0
sg6380
S'16-skips_prawn.png'
p6610
sS'block_loop.thisRepN'
p6611
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6612
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6613
Nsg70
Vn
sS'block_loop.thisTrialN'
p6614
I0
sg39
F0.88318021592385776
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10$\x02F\x08'
tRp6615
sa(dp6616
S'trial_loop.thisTrialN'
p6617
I15
sg6371
S'1-treacle_cookies.png'
p6618
sS'block_loop.thisIndex'
p6619
g6365
sg38
S'left'
p6620
sg59
g63
sS'trial_loop.thisN'
p6621
I15
sg33
S'1-treacle_cookies.png'
p6622
sg64
g65
sS'trial_loop.thisIndex'
p6623
g60
(g99
S'\x0f\x00\x00\x00'
tRp6624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6625
I0
sg6380
S'21-nakd_banana_crunch.png'
p6626
sS'block_loop.thisRepN'
p6627
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6628
I2
sg6385
S'21-nakd_banana_crunch.png'
p6629
sg55
g11
sS'block_loop.thisTrial'
p6630
Nsg70
Vn
sS'block_loop.thisTrialN'
p6631
I0
sg39
F0.68329613735841122
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10*\x01,\xc8'
tRp6632
sa(dp6633
S'trial_loop.thisTrialN'
p6634
I16
sg6371
g6372
sS'block_loop.thisIndex'
p6635
g6365
sg38
S'left'
p6636
sg59
g63
sS'trial_loop.thisN'
p6637
I16
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6638
g60
(g99
S'\x10\x00\x00\x00'
tRp6639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6640
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6641
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6642
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6643
Nsg70
Vn
sS'block_loop.thisTrialN'
p6644
I0
sg39
F0.6499372211019363
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10/\x0b\xfeP'
tRp6645
sa(dp6646
S'trial_loop.thisTrialN'
p6647
I17
sg6371
S'21-nakd_banana_crunch.png'
p6648
sS'block_loop.thisIndex'
p6649
g6365
sg38
S'right'
p6650
sg59
g63
sS'trial_loop.thisN'
p6651
I17
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p6652
g60
(g99
S'\x11\x00\x00\x00'
tRp6653
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6654
I0
sg6380
S'1-treacle_cookies.png'
p6655
sS'block_loop.thisRepN'
p6656
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6657
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p6658
Nsg70
Vn
sS'block_loop.thisTrialN'
p6659
I0
sg39
F0.71665647911322594
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x105\x07\x18h'
tRp6660
sa(dp6661
S'trial_loop.thisTrialN'
p6662
I18
sg6371
S'6-sour_patch_kids.png'
p6663
sS'block_loop.thisIndex'
p6664
g6365
sg38
S'right'
p6665
sg59
g63
sS'trial_loop.thisN'
p6666
I18
sg33
S'38-maltesers.png'
p6667
sg64
g65
sS'trial_loop.thisIndex'
p6668
g60
(g99
S'\x12\x00\x00\x00'
tRp6669
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6670
I0
sg6380
S'38-maltesers.png'
p6671
sS'block_loop.thisRepN'
p6672
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6673
I2
sg6385
S'6-sour_patch_kids.png'
p6674
sg55
g11
sS'block_loop.thisTrial'
p6675
Nsg70
Vn
sS'block_loop.thisTrialN'
p6676
I0
sg39
F0.68307375978838536
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x10;\x03_H'
tRp6677
sa(dp6678
S'trial_loop.thisTrialN'
p6679
I19
sg6371
g6372
sS'block_loop.thisIndex'
p6680
g6365
sg38
S'left'
p6681
sg59
g63
sS'trial_loop.thisN'
p6682
I19
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p6683
g60
(g99
S'\x13\x00\x00\x00'
tRp6684
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6685
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6686
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6687
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6688
Nsg70
Vn
sS'block_loop.thisTrialN'
p6689
I0
sg39
F0.58335424062715902
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11\x04\x0e4\xb8'
tRp6690
sa(dp6691
S'trial_loop.thisTrialN'
p6692
I20
sg6371
S'23-crunchie_redo.png'
p6693
sS'block_loop.thisIndex'
p6694
g6365
sg38
S'left'
p6695
sg59
g63
sS'trial_loop.thisN'
p6696
I20
sg33
S'33-ambrosia_rice.png'
p6697
sg64
g65
sS'trial_loop.thisIndex'
p6698
g60
(g99
S'\x14\x00\x00\x00'
tRp6699
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6700
I0
sg6380
S'33-ambrosia_rice.png'
p6701
sS'block_loop.thisRepN'
p6702
I2
sg6383
S'23-crunchie_redo.png'
p6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6704
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p6705
Nsg70
Vn
sS'block_loop.thisTrialN'
p6706
I0
sg39
F0.81659039306032355
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11\n\x08X\xb8'
tRp6707
sa(dp6708
S'trial_loop.thisTrialN'
p6709
I21
sg6371
S'31-hobnobs.png'
p6710
sS'block_loop.thisIndex'
p6711
g6365
sg38
S'left'
p6712
sg59
g63
sS'trial_loop.thisN'
p6713
I21
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p6714
g60
(g99
S'\x15\x00\x00\x00'
tRp6715
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6716
I0
sg6380
S'25-kitkat.png'
p6717
sS'block_loop.thisRepN'
p6718
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6719
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vn
sS'block_loop.thisTrialN'
p6721
I0
sg39
F0.71671806059384835
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11\x10\x06\x0e\xc8'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
S'8-liquorice_catherine_wheels.png'
p6725
sS'block_loop.thisIndex'
p6726
g6365
sg38
S'left'
p6727
sg59
g63
sS'trial_loop.thisN'
p6728
I22
sg33
S'8-liquorice_catherine_wheels.png'
p6729
sg64
g65
sS'trial_loop.thisIndex'
p6730
g60
(g99
S'\x16\x00\x00\x00'
tRp6731
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6732
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6733
sS'block_loop.thisRepN'
p6734
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6735
I2
sg6385
S'17-jacobs_mini_cheddars_redo.png'
p6736
sg55
g11
sS'block_loop.thisTrial'
p6737
Nsg70
Vn
sS'block_loop.thisTrialN'
p6738
I0
sg39
F1.2165948976326035
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11\x16\x02U\xa8'
tRp6739
sa(dp6740
S'trial_loop.thisTrialN'
p6741
I23
sg6371
g6556
sS'block_loop.thisIndex'
p6742
g6365
sg38
S'left'
p6743
sg59
g63
sS'trial_loop.thisN'
p6744
I23
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p6745
g60
(g99
S'\x17\x00\x00\x00'
tRp6746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6747
I0
sg6380
g6563
sS'block_loop.thisRepN'
p6748
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6749
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vn
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.78335378446718096
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11\x1c\x06=\xa8'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
g6618
sS'block_loop.thisIndex'
p6755
g6365
sg38
S'left'
p6756
sg59
g63
sS'trial_loop.thisN'
p6757
I24
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p6758
g60
(g99
S'\x18\x00\x00\x00'
tRp6759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6760
I0
sg6380
g6626
sS'block_loop.thisRepN'
p6761
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6762
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p6763
Nsg70
Vn
sS'block_loop.thisTrialN'
p6764
I0
sg39
F0.85001089079742087
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11"\x03< '
tRp6765
sa(dp6766
S'trial_loop.thisTrialN'
p6767
I25
sg6371
g6409
sS'block_loop.thisIndex'
p6768
g6365
sg38
S'right'
p6769
sg59
g63
sS'trial_loop.thisN'
p6770
I25
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6771
g60
(g99
S'\x19\x00\x00\x00'
tRp6772
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6773
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6774
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6775
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6776
Nsg70
Vn
sS'block_loop.thisTrialN'
p6777
I0
sg39
F0.66667626501475752
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11(\x01\xa9\xc8'
tRp6778
sa(dp6779
S'trial_loop.thisTrialN'
p6780
I26
sg6371
g6507
sS'block_loop.thisIndex'
p6781
g6365
sg38
S'right'
p6782
sg59
g63
sS'trial_loop.thisN'
p6783
I26
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p6784
g60
(g99
S'\x1a\x00\x00\x00'
tRp6785
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6786
I0
sg6380
g6515
sS'block_loop.thisRepN'
p6787
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6788
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6789
Nsg70
Vn
sS'block_loop.thisTrialN'
p6790
I0
sg39
F0.90001818934433686
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x11-\x0c@\xb8'
tRp6791
sa(dp6792
S'trial_loop.thisTrialN'
p6793
I27
sg6371
S'40-sardines.png'
p6794
sS'block_loop.thisIndex'
p6795
g6365
sg38
S'right'
p6796
sg59
g63
sS'trial_loop.thisN'
p6797
I27
sg33
S'5-pineapple.png'
p6798
sg64
g65
sS'trial_loop.thisIndex'
p6799
g60
(g99
S'\x1b\x00\x00\x00'
tRp6800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6801
I0
sg6380
S'5-pineapple.png'
p6802
sS'block_loop.thisRepN'
p6803
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6804
I2
sg6385
S'40-sardines.png'
p6805
sg55
g11
sS'block_loop.thisTrial'
p6806
Nsg70
Vn
sS'block_loop.thisTrialN'
p6807
I0
sg39
F0.58329693563609908
sg34
g753
(S"\x07\xdf\x07\x0e\x11\x113\x0b'x"
tRp6808
sa(dp6809
S'trial_loop.thisTrialN'
p6810
I28
sg6371
g6571
sS'block_loop.thisIndex'
p6811
g6365
sg38
S'left'
p6812
sg59
g63
sS'trial_loop.thisN'
p6813
I28
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p6814
g60
(g99
S'\x1c\x00\x00\x00'
tRp6815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6816
I0
sg6380
g6579
sS'block_loop.thisRepN'
p6817
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6818
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p6819
Nsg70
Vn
sS'block_loop.thisTrialN'
p6820
I0
sg39
F0.95003375577471161
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x119\x05Kx'
tRp6821
sa(dp6822
S'trial_loop.thisTrialN'
p6823
I29
sg6371
S'49-yorkie.png'
p6824
sS'block_loop.thisIndex'
p6825
g6365
sg38
S'right'
p6826
sg59
g63
sS'trial_loop.thisN'
p6827
I29
sg33
S'35-raisins.png'
p6828
sg64
g65
sS'trial_loop.thisIndex'
p6829
g60
(g99
S'\x1d\x00\x00\x00'
tRp6830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6831
I0
sg6380
S'35-raisins.png'
p6832
sS'block_loop.thisRepN'
p6833
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6834
I2
sg6385
S'49-yorkie.png'
p6835
sg55
g11
sS'block_loop.thisTrial'
p6836
Nsg70
Vn
sS'block_loop.thisTrialN'
p6837
I0
sg39
F0.90035888318561774
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12\x03\x05$h'
tRp6838
sa(dp6839
S'trial_loop.thisTrialN'
p6840
I30
sg6371
S'20-fruit_pastilles.png'
p6841
sS'block_loop.thisIndex'
p6842
g6365
sg38
S'right'
p6843
sg59
g63
sS'trial_loop.thisN'
p6844
I30
sg33
S'2-steamed_puddings.png'
p6845
sg64
g65
sS'trial_loop.thisIndex'
p6846
g60
(g99
S'\x1e\x00\x00\x00'
tRp6847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6848
I0
sg6380
S'2-steamed_puddings.png'
p6849
sS'block_loop.thisRepN'
p6850
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6851
I2
sg6385
S'20-fruit_pastilles.png'
p6852
sg55
g11
sS'block_loop.thisTrial'
p6853
Nsg70
Vn
sS'block_loop.thisTrialN'
p6854
I0
sg39
F0.86667523865617113
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12\t\x04\x0b('
tRp6855
sa(dp6856
S'trial_loop.thisTrialN'
p6857
I31
sg6371
g6507
sS'block_loop.thisIndex'
p6858
g6365
sg38
S'right'
p6859
sg59
g63
sS'trial_loop.thisN'
p6860
I31
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p6861
g60
(g99
S'\x1f\x00\x00\x00'
tRp6862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6863
I0
sg6380
g6515
sS'block_loop.thisRepN'
p6864
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6865
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6866
Nsg70
Vn
sS'block_loop.thisTrialN'
p6867
I0
sg39
F0.86662392075595562
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12\x0f\x02x\xd0'
tRp6868
sa(dp6869
S'trial_loop.thisTrialN'
p6870
I32
sg6371
S'27-hartleys_raspberries_jelly.png'
p6871
sS'block_loop.thisIndex'
p6872
g6365
sg38
S'right'
p6873
sg59
g63
sS'trial_loop.thisN'
p6874
I32
sg33
S'51-mars.png'
p6875
sg64
g65
sS'trial_loop.thisIndex'
p6876
g60
(g99
S' \x00\x00\x00'
tRp6877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6878
I0
sg6380
S'51-mars.png'
p6879
sS'block_loop.thisRepN'
p6880
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6881
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6882
sg55
g11
sS'block_loop.thisTrial'
p6883
Nsg70
Vn
sS'block_loop.thisTrialN'
p6884
I0
sg39
F0.68322543269641756
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12\x15\x01!\x10'
tRp6885
sa(dp6886
S'trial_loop.thisTrialN'
p6887
I33
sg6371
S'10-bounty_redo.png'
p6888
sS'block_loop.thisIndex'
p6889
g6365
sg38
S'left'
p6890
sg59
g63
sS'trial_loop.thisN'
p6891
I33
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6892
g60
(g99
S'!\x00\x00\x00'
tRp6893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6894
I0
sg6380
S'4-corn.png'
p6895
sS'block_loop.thisRepN'
p6896
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6897
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6898
Nsg70
Vn
sS'block_loop.thisTrialN'
p6899
I0
sg39
F0.80001014953995764
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12\x1a\x0b\xf6\x80'
tRp6900
sa(dp6901
S'trial_loop.thisTrialN'
p6902
I34
sg6371
g6460
sS'block_loop.thisIndex'
p6903
g6365
sg38
S'left'
p6904
sg59
g63
sS'trial_loop.thisN'
p6905
I34
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6906
g60
(g99
S'"\x00\x00\x00'
tRp6907
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6908
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6909
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6910
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6911
Nsg70
Vn
sS'block_loop.thisTrialN'
p6912
I0
sg39
F0.73332852465682663
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12 \tn\x10'
tRp6913
sa(dp6914
S'trial_loop.thisTrialN'
p6915
I35
sg6371
S'22-daim.png'
p6916
sS'block_loop.thisIndex'
p6917
g6365
sg38
S'right'
p6918
sg59
g63
sS'trial_loop.thisN'
p6919
I35
sg33
S'7-olives.png'
p6920
sg64
g65
sS'trial_loop.thisIndex'
p6921
g60
(g99
S'#\x00\x00\x00'
tRp6922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6923
I0
sg6380
S'7-olives.png'
p6924
sS'block_loop.thisRepN'
p6925
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6926
I2
sg6385
S'22-daim.png'
p6927
sg55
g11
sS'block_loop.thisTrial'
p6928
Nsg70
Vn
sS'block_loop.thisTrialN'
p6929
I0
sg39
F0.93339079037468764
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12&\x05\xf3p'
tRp6930
sa(dp6931
S'trial_loop.thisTrialN'
p6932
I36
sg6371
S'51-mars.png'
p6933
sS'block_loop.thisIndex'
p6934
g6365
sg38
S'left'
p6935
sg59
g63
sS'trial_loop.thisN'
p6936
I36
sg33
g6875
sg64
g65
sS'trial_loop.thisIndex'
p6937
g60
(g99
S'$\x00\x00\x00'
tRp6938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6939
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6940
sS'block_loop.thisRepN'
p6941
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6942
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p6943
Nsg70
Vn
sS'block_loop.thisTrialN'
p6944
I0
sg39
F0.68330640093881811
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x12,\x05W0'
tRp6945
sa(dp6946
S'trial_loop.thisTrialN'
p6947
I37
sg6371
S'7-olives.png'
p6948
sS'block_loop.thisIndex'
p6949
g6365
sg38
S'left'
p6950
sg59
g63
sS'trial_loop.thisN'
p6951
I37
sg33
g6927
sg64
g65
sS'trial_loop.thisIndex'
p6952
g60
(g99
S'%\x00\x00\x00'
tRp6953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6954
I0
sg6380
S'22-daim.png'
p6955
sS'block_loop.thisRepN'
p6956
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6957
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p6958
Nsg70
Vn
sS'block_loop.thisTrialN'
p6959
I0
sg39
F0.88328598781845358
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x122\x01$\xf8'
tRp6960
sa(dp6961
S'trial_loop.thisTrialN'
p6962
I38
sg6371
g6426
sS'block_loop.thisIndex'
p6963
g6365
sg38
S'left'
p6964
sg59
g63
sS'trial_loop.thisN'
p6965
I38
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p6966
g60
(g99
S'&\x00\x00\x00'
tRp6967
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6968
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6969
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6970
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p6971
Nsg70
Vn
sS'block_loop.thisTrialN'
p6972
I0
sg39
F0.60002571597033239
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x127\x0f\x0fx'
tRp6973
sa(dp6974
S'trial_loop.thisTrialN'
p6975
I39
sg6371
g6588
sS'block_loop.thisIndex'
p6976
g6365
sg38
S'right'
p6977
sg59
g63
sS'trial_loop.thisN'
p6978
I39
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6979
g60
(g99
S"'\x00\x00\x00"
tRp6980
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6981
I0
sg6380
g6595
sS'block_loop.thisRepN'
p6982
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6983
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6984
Nsg70
Vn
sS'block_loop.thisTrialN'
p6985
I0
sg39
F1.0833408409525873
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13\x01\tq\xf8'
tRp6986
sa(dp6987
S'trial_loop.thisTrialN'
p6988
I40
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6989
sS'block_loop.thisIndex'
p6990
g6365
sg38
S'right'
p6991
sg59
g63
sS'trial_loop.thisN'
p6992
I40
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p6993
g60
(g99
S'(\x00\x00\x00'
tRp6994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6995
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6996
sS'block_loop.thisRepN'
p6997
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6998
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p6999
Nsg70
Vn
sS'block_loop.thisTrialN'
p7000
I0
sg39
F0.98322759945040161
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13\x07\x0b30'
tRp7001
sa(dp7002
S'trial_loop.thisTrialN'
p7003
I41
sg6371
S'29-beans.png'
p7004
sS'block_loop.thisIndex'
p7005
g6365
sg38
S'right'
p7006
sg59
g63
sS'trial_loop.thisN'
p7007
I41
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p7008
g60
(g99
S')\x00\x00\x00'
tRp7009
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7010
I0
sg6380
S'46-pistachios.png'
p7011
sS'block_loop.thisRepN'
p7012
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7013
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p7014
Nsg70
Vn
sS'block_loop.thisTrialN'
p7015
I0
sg39
F0.6837086762607214
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13\r\x0b\x89 '
tRp7016
sa(dp7017
S'trial_loop.thisTrialN'
p7018
I42
sg6371
g6933
sS'block_loop.thisIndex'
p7019
g6365
sg38
S'left'
p7020
sg59
g63
sS'trial_loop.thisN'
p7021
I42
sg33
g6875
sg64
g65
sS'trial_loop.thisIndex'
p7022
g60
(g99
S'*\x00\x00\x00'
tRp7023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7024
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7025
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7026
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p7027
Nsg70
Vn
sS'block_loop.thisTrialN'
p7028
I0
sg39
F0.63335498188462225
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13\x13\x07\x18h'
tRp7029
sa(dp7030
S'trial_loop.thisTrialN'
p7031
I43
sg6371
g6693
sS'block_loop.thisIndex'
p7032
g6365
sg38
S'left'
p7033
sg59
g63
sS'trial_loop.thisN'
p7034
I43
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p7035
g60
(g99
S'+\x00\x00\x00'
tRp7036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7037
I0
sg6380
g6701
sS'block_loop.thisRepN'
p7038
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7039
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p7040
Nsg70
Vn
sS'block_loop.thisTrialN'
p7041
I0
sg39
F0.66664689977187663
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13\x19\x01\xf4\x00'
tRp7042
sa(dp7043
S'trial_loop.thisTrialN'
p7044
I44
sg6371
g6871
sS'block_loop.thisIndex'
p7045
g6365
sg38
S'right'
p7046
sg59
g63
sS'trial_loop.thisN'
p7047
I44
sg33
g6875
sg64
g65
sS'trial_loop.thisIndex'
p7048
g60
(g99
S',\x00\x00\x00'
tRp7049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7050
I0
sg6380
g6879
sS'block_loop.thisRepN'
p7051
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7052
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p7053
Nsg70
Vn
sS'block_loop.thisTrialN'
p7054
I0
sg39
F0.49991447016509483
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13\x1e\x0c\xc9p'
tRp7055
sa(dp7056
S'trial_loop.thisTrialN'
p7057
I45
sg6371
S'38-maltesers.png'
p7058
sS'block_loop.thisIndex'
p7059
g6365
sg38
S'left'
p7060
sg59
g63
sS'trial_loop.thisN'
p7061
I45
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7062
g60
(g99
S'-\x00\x00\x00'
tRp7063
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7064
I0
sg6380
S'6-sour_patch_kids.png'
p7065
sS'block_loop.thisRepN'
p7066
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7067
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p7068
Nsg70
Vn
sS'block_loop.thisTrialN'
p7069
I0
sg39
F0.88307415892813879
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13$\x05\xbc\xc0'
tRp7070
sa(dp7071
S'trial_loop.thisTrialN'
p7072
I46
sg6371
g6989
sS'block_loop.thisIndex'
p7073
g6365
sg38
S'right'
p7074
sg59
g63
sS'trial_loop.thisN'
p7075
I46
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7076
g60
(g99
S'.\x00\x00\x00'
tRp7077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7078
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7079
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7080
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7081
Nsg70
Vn
sS'block_loop.thisTrialN'
p7082
I0
sg39
F0.56666280832178018
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13*\x04e\x00'
tRp7083
sa(dp7084
S'trial_loop.thisTrialN'
p7085
I47
sg6371
S'18-mms.png'
p7086
sS'block_loop.thisIndex'
p7087
g6365
sg38
S'left'
p7088
sg59
g63
sS'trial_loop.thisN'
p7089
I47
sg33
S'18-mms.png'
p7090
sg64
g65
sS'trial_loop.thisIndex'
p7091
g60
(g99
S'/\x00\x00\x00'
tRp7092
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7093
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7094
sS'block_loop.thisRepN'
p7095
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7096
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p7097
sg55
g11
sS'block_loop.thisTrial'
p7098
Nsg70
Vn
sS'block_loop.thisTrialN'
p7099
I0
sg39
F1.0166595011687605
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x13/\r\x8c\xc0'
tRp7100
sa(dp7101
S'trial_loop.thisTrialN'
p7102
I48
sg6371
S'2-steamed_puddings.png'
p7103
sS'block_loop.thisIndex'
p7104
g6365
sg38
S'left'
p7105
sg59
g63
sS'trial_loop.thisN'
p7106
I48
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7107
g60
(g99
S'0\x00\x00\x00'
tRp7108
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7109
I0
sg6380
S'20-fruit_pastilles.png'
p7110
sS'block_loop.thisRepN'
p7111
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7112
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7113
Nsg70
Vn
sS'block_loop.thisTrialN'
p7114
I0
sg39
F1.1000000570184056
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x135\x0e[\xc8'
tRp7115
sa(dp7116
S'trial_loop.thisTrialN'
p7117
I49
sg6371
g6933
sS'block_loop.thisIndex'
p7118
g6365
sg38
S'left'
p7119
sg59
g63
sS'trial_loop.thisN'
p7120
I49
sg33
g6875
sg64
g65
sS'trial_loop.thisIndex'
p7121
g60
(g99
S'1\x00\x00\x00'
tRp7122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7123
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7124
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7125
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p7126
Nsg70
Vn
sS'block_loop.thisTrialN'
p7127
I0
sg39
F0.60000918020159588
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14\x00\x01\x19@'
tRp7128
sa(dp7129
S'trial_loop.thisTrialN'
p7130
I50
sg6371
g7103
sS'block_loop.thisIndex'
p7131
g6365
sg38
S'left'
p7132
sg59
g63
sS'trial_loop.thisN'
p7133
I50
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7134
g60
(g99
S'2\x00\x00\x00'
tRp7135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7136
I0
sg6380
g7110
sS'block_loop.thisRepN'
p7137
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7138
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7139
Nsg70
Vn
sS'block_loop.thisTrialN'
p7140
I0
sg39
F0.61671002078946913
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14\x05\n\xbe\x00'
tRp7141
sa(dp7142
S'trial_loop.thisTrialN'
p7143
I51
sg6371
S'3-ellas_strawberries_apples.png'
p7144
sS'block_loop.thisIndex'
p7145
g6365
sg38
S'right'
p7146
sg59
g63
sS'trial_loop.thisN'
p7147
I51
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7148
g60
(g99
S'3\x00\x00\x00'
tRp7149
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7150
I0
sg6380
S'13-mccoys_steak_crisps.png'
p7151
sS'block_loop.thisRepN'
p7152
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7153
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7154
Nsg70
Vn
sS'block_loop.thisTrialN'
p7155
I0
sg39
F0.63318990930565633
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14\x0b\x05[\x18'
tRp7156
sa(dp7157
S'trial_loop.thisTrialN'
p7158
I52
sg6371
S'26-walkers_smoky_bacon.png'
p7159
sS'block_loop.thisIndex'
p7160
g6365
sg38
S'right'
p7161
sg59
g63
sS'trial_loop.thisN'
p7162
I52
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p7163
g60
(g99
S'4\x00\x00\x00'
tRp7164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7165
I0
sg6380
S'44-crunch.png'
p7166
sS'block_loop.thisRepN'
p7167
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7168
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p7169
Nsg70
Vn
sS'block_loop.thisTrialN'
p7170
I0
sg39
F0.64994463368748256
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14\x11\x006\xb0'
tRp7171
sa(dp7172
S'trial_loop.thisTrialN'
p7173
I53
sg6371
g6794
sS'block_loop.thisIndex'
p7174
g6365
sg38
S'right'
p7175
sg59
g63
sS'trial_loop.thisN'
p7176
I53
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7177
g60
(g99
S'5\x00\x00\x00'
tRp7178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7179
I0
sg6380
g6802
sS'block_loop.thisRepN'
p7180
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7181
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7182
Nsg70
Vn
sS'block_loop.thisTrialN'
p7183
I0
sg39
F0.88332989313312282
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14\x16\n\xcd\xa0'
tRp7184
sa(dp7185
S'trial_loop.thisTrialN'
p7186
I54
sg6371
g6710
sS'block_loop.thisIndex'
p7187
g6365
sg38
S'right'
p7188
sg59
g63
sS'trial_loop.thisN'
p7189
I54
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7190
g60
(g99
S'6\x00\x00\x00'
tRp7191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7192
I0
sg6380
g6717
sS'block_loop.thisRepN'
p7193
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7194
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7195
Nsg70
Vn
sS'block_loop.thisTrialN'
p7196
I0
sg39
F0.93333519598309067
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14\x1c\tu\xe0'
tRp7197
sa(dp7198
S'trial_loop.thisTrialN'
p7199
I55
sg6371
g6824
sS'block_loop.thisIndex'
p7200
g6365
sg38
S'right'
p7201
sg59
g63
sS'trial_loop.thisN'
p7202
I55
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7203
g60
(g99
S'7\x00\x00\x00'
tRp7204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7205
I0
sg6380
g6832
sS'block_loop.thisRepN'
p7206
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7207
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p7208
Nsg70
Vn
sS'block_loop.thisTrialN'
p7209
I0
sg39
F0.74994326520936738
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14"\x08\xd5\xb8'
tRp7210
sa(dp7211
S'trial_loop.thisTrialN'
p7212
I56
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7213
sS'block_loop.thisIndex'
p7214
g6365
sg38
S'right'
p7215
sg59
g63
sS'trial_loop.thisN'
p7216
I56
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7217
g60
(g99
S'8\x00\x00\x00'
tRp7218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7219
I0
sg6380
S'36-fig_rolls.png'
p7220
sS'block_loop.thisRepN'
p7221
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7222
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7223
Nsg70
Vn
sS'block_loop.thisTrialN'
p7224
I0
sg39
F0.84997696396385436
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14(\x05\x99\x98'
tRp7225
sa(dp7226
S'trial_loop.thisTrialN'
p7227
I57
sg6371
g6948
sS'block_loop.thisIndex'
p7228
g6365
sg38
S'left'
p7229
sg59
g63
sS'trial_loop.thisN'
p7230
I57
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7231
g60
(g99
S'9\x00\x00\x00'
tRp7232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7233
I0
sg6380
g6955
sS'block_loop.thisRepN'
p7234
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7235
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7236
Nsg70
Vn
sS'block_loop.thisTrialN'
p7237
I0
sg39
F0.89991270254904521
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x14.\x03\xc8\xc0'
tRp7238
sa(dp7239
S'trial_loop.thisTrialN'
p7240
I58
sg6371
g6841
sS'block_loop.thisIndex'
p7241
g6365
sg38
S'right'
p7242
sg59
g63
sS'trial_loop.thisN'
p7243
I58
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7244
g60
(g99
S':\x00\x00\x00'
tRp7245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7246
I0
sg6380
g6849
sS'block_loop.thisRepN'
p7247
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7248
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7249
Nsg70
Vn
sS'block_loop.thisTrialN'
p7250
I0
sg39
F0.70002520279194869
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x144\x02\xee\x00'
tRp7251
sa(dp7252
S'trial_loop.thisTrialN'
p7253
I59
sg6371
g6409
sS'block_loop.thisIndex'
p7254
g6365
sg38
S'right'
p7255
sg59
g63
sS'trial_loop.thisN'
p7256
I59
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7257
g60
(g99
S';\x00\x00\x00'
tRp7258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7259
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7260
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7261
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7262
Nsg70
Vn
sS'block_loop.thisTrialN'
p7263
I0
sg39
F0.63334956499420514
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x149\r\xfe\x08'
tRp7264
sa(dp7265
S'trial_loop.thisTrialN'
p7266
I60
sg6371
g6443
sS'block_loop.thisIndex'
p7267
g6365
sg38
S'right'
p7268
sg59
g63
sS'trial_loop.thisN'
p7269
I60
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7270
g60
(g99
S'<\x00\x00\x00'
tRp7271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7272
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7273
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7274
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7275
Nsg70
Vn
sS'block_loop.thisTrialN'
p7276
I0
sg39
F0.76651581104488287
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15\x03\x08\xd9\xa0'
tRp7277
sa(dp7278
S'trial_loop.thisTrialN'
p7279
I61
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7280
sS'block_loop.thisIndex'
p7281
g6365
sg38
S'right'
p7282
sg59
g63
sS'trial_loop.thisN'
p7283
I61
sg33
g7090
sg64
g65
sS'trial_loop.thisIndex'
p7284
g60
(g99
S'=\x00\x00\x00'
tRp7285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7286
I0
sg6380
S'18-mms.png'
p7287
sS'block_loop.thisRepN'
p7288
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7289
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p7290
Nsg70
Vn
sS'block_loop.thisTrialN'
p7291
I0
sg39
F0.84994674342306098
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15\t\x05\xd8\x18'
tRp7292
sa(dp7293
S'trial_loop.thisTrialN'
p7294
I62
sg6371
S'33-ambrosia_rice.png'
p7295
sS'block_loop.thisIndex'
p7296
g6365
sg38
S'right'
p7297
sg59
g63
sS'trial_loop.thisN'
p7298
I62
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p7299
g60
(g99
S'>\x00\x00\x00'
tRp7300
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7301
I0
sg6380
S'23-crunchie_redo.png'
p7302
sS'block_loop.thisRepN'
p7303
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7304
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg70
Vn
sS'block_loop.thisTrialN'
p7306
I0
sg39
F0.69994508984746062
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15\x0f\x04\x07@'
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I63
sg6371
g6603
sS'block_loop.thisIndex'
p7310
g6365
sg38
S'left'
p7311
sg59
g63
sS'trial_loop.thisN'
p7312
I63
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7313
g60
(g99
S'?\x00\x00\x00'
tRp7314
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7315
I0
sg6380
g6610
sS'block_loop.thisRepN'
p7316
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7317
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg70
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F0.73325012230816355
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15\x15\x00\x13\x88'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I64
sg6371
g6541
sS'block_loop.thisIndex'
p7323
g6365
sg38
S'right'
p7324
sg59
g63
sS'trial_loop.thisN'
p7325
I64
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7326
g60
(g99
S'@\x00\x00\x00'
tRp7327
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7328
I0
sg6380
g6548
sS'block_loop.thisRepN'
p7329
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7330
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7331
Nsg70
Vn
sS'block_loop.thisTrialN'
p7332
I0
sg39
F0.7833147258425015
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15\x1a\x0b\x9c\xa8'
tRp7333
sa(dp7334
S'trial_loop.thisTrialN'
p7335
I65
sg6371
g6571
sS'block_loop.thisIndex'
p7336
g6365
sg38
S'left'
p7337
sg59
g63
sS'trial_loop.thisN'
p7338
I65
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p7339
g60
(g99
S'A\x00\x00\x00'
tRp7340
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7341
I0
sg6380
g6579
sS'block_loop.thisRepN'
p7342
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7343
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p7344
Nsg70
Vn
sS'block_loop.thisTrialN'
p7345
I0
sg39
F0.81707819821713201
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15 \x08\xd9\xa0'
tRp7346
sa(dp7347
S'trial_loop.thisTrialN'
p7348
I66
sg6371
g6693
sS'block_loop.thisIndex'
p7349
g6365
sg38
S'left'
p7350
sg59
g63
sS'trial_loop.thisN'
p7351
I66
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p7352
g60
(g99
S'B\x00\x00\x00'
tRp7353
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7354
I0
sg6380
g6701
sS'block_loop.thisRepN'
p7355
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7356
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p7357
Nsg70
Vn
sS'block_loop.thisTrialN'
p7358
I0
sg39
F1.0166044769739528
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15&\x06\x8f\xb0'
tRp7359
sa(dp7360
S'trial_loop.thisTrialN'
p7361
I67
sg6371
S'5-pineapple.png'
p7362
sS'block_loop.thisIndex'
p7363
g6365
sg38
S'left'
p7364
sg59
g63
sS'trial_loop.thisN'
p7365
I67
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7366
g60
(g99
S'C\x00\x00\x00'
tRp7367
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7368
I0
sg6380
S'40-sardines.png'
p7369
sS'block_loop.thisRepN'
p7370
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7371
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7372
Nsg70
Vn
sS'block_loop.thisTrialN'
p7373
I0
sg39
F1.133344148107426
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x15,\x07^\xb8'
tRp7374
sa(dp7375
S'trial_loop.thisTrialN'
p7376
I68
sg6371
g6989
sS'block_loop.thisIndex'
p7377
g6365
sg38
S'right'
p7378
sg59
g63
sS'trial_loop.thisN'
p7379
I68
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7380
g60
(g99
S'D\x00\x00\x00'
tRp7381
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7382
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7383
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7384
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7385
Nsg70
Vn
sS'block_loop.thisTrialN'
p7386
I0
sg39
F0.73395830933804973
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x152\t\xd7\x88'
tRp7387
sa(dp7388
S'trial_loop.thisTrialN'
p7389
I69
sg6371
g7213
sS'block_loop.thisIndex'
p7390
g6365
sg38
S'right'
p7391
sg59
g63
sS'trial_loop.thisN'
p7392
I69
sg33
g6535
sg64
g65
sS'trial_loop.thisIndex'
p7393
g60
(g99
S'E\x00\x00\x00'
tRp7394
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7395
I0
sg6380
g7220
sS'block_loop.thisRepN'
p7396
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7397
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7398
Nsg70
Vn
sS'block_loop.thisTrialN'
p7399
I0
sg39
F0.76669741939258529
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x158\x06\\\xe8'
tRp7400
sa(dp7401
S'trial_loop.thisTrialN'
p7402
I70
sg6371
g7086
sS'block_loop.thisIndex'
p7403
g6365
sg38
S'left'
p7404
sg59
g63
sS'trial_loop.thisN'
p7405
I70
sg33
g7097
sg64
g65
sS'trial_loop.thisIndex'
p7406
g60
(g99
S'F\x00\x00\x00'
tRp7407
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7408
I0
sg6380
g7094
sS'block_loop.thisRepN'
p7409
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7410
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p7411
Nsg70
Vn
sS'block_loop.thisTrialN'
p7412
I0
sg39
F0.71668955064887996
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16\x02\x03[`'
tRp7413
sa(dp7414
S'trial_loop.thisTrialN'
p7415
I71
sg6371
g7144
sS'block_loop.thisIndex'
p7416
g6365
sg38
S'right'
p7417
sg59
g63
sS'trial_loop.thisN'
p7418
I71
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7419
g60
(g99
S'G\x00\x00\x00'
tRp7420
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7421
I0
sg6380
g7151
sS'block_loop.thisRepN'
p7422
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7423
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7424
Nsg70
Vn
sS'block_loop.thisTrialN'
p7425
I0
sg39
F0.68335971453598177
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16\x07\x0e\xa9\xe8'
tRp7426
sa(dp7427
S'trial_loop.thisTrialN'
p7428
I72
sg6371
g6524
sS'block_loop.thisIndex'
p7429
g6365
sg38
S'left'
p7430
sg59
g63
sS'trial_loop.thisN'
p7431
I72
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7432
g60
(g99
S'H\x00\x00\x00'
tRp7433
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7434
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7435
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7436
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7437
Nsg70
Vn
sS'block_loop.thisTrialN'
p7438
I0
sg39
F1.083267285293914
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16\r\nw\xb0'
tRp7439
sa(dp7440
S'trial_loop.thisTrialN'
p7441
I73
sg6371
g7159
sS'block_loop.thisIndex'
p7442
g6365
sg38
S'right'
p7443
sg59
g63
sS'trial_loop.thisN'
p7444
I73
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p7445
g60
(g99
S'I\x00\x00\x00'
tRp7446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7447
I0
sg6380
g7166
sS'block_loop.thisRepN'
p7448
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7449
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p7450
Nsg70
Vn
sS'block_loop.thisTrialN'
p7451
I0
sg39
F1.1166835065414489
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16\x13\x0c<\xd0'
tRp7452
sa(dp7453
S'trial_loop.thisTrialN'
p7454
I74
sg6371
g6409
sS'block_loop.thisIndex'
p7455
g6365
sg38
S'right'
p7456
sg59
g63
sS'trial_loop.thisN'
p7457
I74
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7458
g60
(g99
S'J\x00\x00\x00'
tRp7459
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7460
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7461
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7462
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7463
Nsg70
Vn
sS'block_loop.thisTrialN'
p7464
I0
sg39
F0.75000142549833981
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16\x19\x0ew '
tRp7465
sa(dp7466
S'trial_loop.thisTrialN'
p7467
I75
sg6371
g6443
sS'block_loop.thisIndex'
p7468
g6365
sg38
S'right'
p7469
sg59
g63
sS'trial_loop.thisN'
p7470
I75
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7471
g60
(g99
S'K\x00\x00\x00'
tRp7472
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7473
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7474
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7475
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7476
Nsg70
Vn
sS'block_loop.thisTrialN'
p7477
I0
sg39
F0.8832209851443622
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16\x1f\x0b;\x00'
tRp7478
sa(dp7479
S'trial_loop.thisTrialN'
p7480
I76
sg6371
g6392
sS'block_loop.thisIndex'
p7481
g6365
sg38
S'left'
p7482
sg59
g63
sS'trial_loop.thisN'
p7483
I76
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7484
g60
(g99
S'L\x00\x00\x00'
tRp7485
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7486
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7487
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7488
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7489
Nsg70
Vn
sS'block_loop.thisTrialN'
p7490
I0
sg39
F0.76667261574220902
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16%\t\xe3@'
tRp7491
sa(dp7492
S'trial_loop.thisTrialN'
p7493
I77
sg6371
g6663
sS'block_loop.thisIndex'
p7494
g6365
sg38
S'right'
p7495
sg59
g63
sS'trial_loop.thisN'
p7496
I77
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7497
g60
(g99
S'M\x00\x00\x00'
tRp7498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7499
I0
sg6380
g6671
sS'block_loop.thisRepN'
p7500
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7501
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p7502
Nsg70
Vn
sS'block_loop.thisTrialN'
p7503
I0
sg39
F0.96642469326070568
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x16+\x06\xe1\xb8'
tRp7504
sa(dp7505
S'trial_loop.thisTrialN'
p7506
I78
sg6371
g7362
sS'block_loop.thisIndex'
p7507
g6365
sg38
S'left'
p7508
sg59
g63
sS'trial_loop.thisN'
p7509
I78
sg33
g6805
sg64
g65
sS'trial_loop.thisIndex'
p7510
g60
(g99
S'N\x00\x00\x00'
tRp7511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7512
I0
sg6380
g7369
sS'block_loop.thisRepN'
p7513
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7514
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7515
Nsg70
Vn
sS'block_loop.thisTrialN'
p7516
I0
sg39
F0.78329248808586271
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x161\x06\xf9('
tRp7517
sa(dp7518
S'trial_loop.thisTrialN'
p7519
I79
sg6371
g6824
sS'block_loop.thisIndex'
p7520
g6365
sg38
S'right'
p7521
sg59
g63
sS'trial_loop.thisN'
p7522
I79
sg33
g6835
sg64
g65
sS'trial_loop.thisIndex'
p7523
g60
(g99
S'O\x00\x00\x00'
tRp7524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7525
I0
sg6380
g6832
sS'block_loop.thisRepN'
p7526
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7527
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p7528
Nsg70
Vn
sS'block_loop.thisTrialN'
p7529
I0
sg39
F0.74998802582376811
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x167\x03\xf7\xa0'
tRp7530
sa(dp7531
S'trial_loop.thisTrialN'
p7532
I80
sg6371
g7086
sS'block_loop.thisIndex'
p7533
g6365
sg38
S'left'
p7534
sg59
g63
sS'trial_loop.thisN'
p7535
I80
sg33
g7090
sg64
g65
sS'trial_loop.thisIndex'
p7536
g60
(g99
S'P\x00\x00\x00'
tRp7537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7538
I0
sg6380
g7094
sS'block_loop.thisRepN'
p7539
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7540
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p7541
Nsg70
Vn
sS'block_loop.thisTrialN'
p7542
I0
sg39
F0.88342711204495572
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17\x01\x00\xbb\x80'
tRp7543
sa(dp7544
S'trial_loop.thisTrialN'
p7545
I81
sg6371
g6841
sS'block_loop.thisIndex'
p7546
g6365
sg38
S'right'
p7547
sg59
g63
sS'trial_loop.thisN'
p7548
I81
sg33
g6852
sg64
g65
sS'trial_loop.thisIndex'
p7549
g60
(g99
S'Q\x00\x00\x00'
tRp7550
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7551
I0
sg6380
g6849
sS'block_loop.thisRepN'
p7552
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7553
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7554
Nsg70
Vn
sS'block_loop.thisTrialN'
p7555
I0
sg39
F0.73310785768262576
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17\x06\x0e\xa6\x00'
tRp7556
sa(dp7557
S'trial_loop.thisTrialN'
p7558
I82
sg6371
g6490
sS'block_loop.thisIndex'
p7559
g6365
sg38
S'right'
p7560
sg59
g63
sS'trial_loop.thisN'
p7561
I82
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7562
g60
(g99
S'R\x00\x00\x00'
tRp7563
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7564
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7565
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7566
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7567
Nsg70
Vn
sS'block_loop.thisTrialN'
p7568
I0
sg39
F0.74991161917205318
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17\x0c\x0b+`'
tRp7569
sa(dp7570
S'trial_loop.thisTrialN'
p7571
I83
sg6371
g6663
sS'block_loop.thisIndex'
p7572
g6365
sg38
S'right'
p7573
sg59
g63
sS'trial_loop.thisN'
p7574
I83
sg33
g6674
sg64
g65
sS'trial_loop.thisIndex'
p7575
g60
(g99
S'S\x00\x00\x00'
tRp7576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7577
I0
sg6380
g6671
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7579
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vn
sS'block_loop.thisTrialN'
p7581
I0
sg39
F0.83310335311216477
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17\x12\x07\xef@'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g6693
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'left'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g6701
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7592
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vn
sS'block_loop.thisTrialN'
p7594
I0
sg39
F0.65003329961473355
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17\x18\x05\xe3\xd0'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
S'35-raisins.png'
p7598
sS'block_loop.thisIndex'
p7599
g6365
sg38
S'left'
p7600
sg59
g63
sS'trial_loop.thisN'
p7601
I85
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7602
g60
(g99
S'U\x00\x00\x00'
tRp7603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7604
I0
sg6380
S'49-yorkie.png'
p7605
sS'block_loop.thisRepN'
p7606
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7607
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p7608
Nsg70
Vn
sS'block_loop.thisTrialN'
p7609
I0
sg39
F0.90001562345059938
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17\x1e\x00\xfa\x00'
tRp7610
sa(dp7611
S'trial_loop.thisTrialN'
p7612
I86
sg6371
g6541
sS'block_loop.thisIndex'
p7613
g6365
sg38
S'right'
p7614
sg59
g63
sS'trial_loop.thisN'
p7615
I86
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7616
g60
(g99
S'V\x00\x00\x00'
tRp7617
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7618
I0
sg6380
g6548
sS'block_loop.thisRepN'
p7619
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7620
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7621
Nsg70
Vn
sS'block_loop.thisTrialN'
p7622
I0
sg39
F0.71657094928013976
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17$\x00\x1f@'
tRp7623
sa(dp7624
S'trial_loop.thisTrialN'
p7625
I87
sg6371
g6693
sS'block_loop.thisIndex'
p7626
g6365
sg38
S'left'
p7627
sg59
g63
sS'trial_loop.thisN'
p7628
I87
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p7629
g60
(g99
S'W\x00\x00\x00'
tRp7630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7631
I0
sg6380
g6701
sS'block_loop.thisRepN'
p7632
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7633
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p7634
Nsg70
Vn
sS'block_loop.thisTrialN'
p7635
I0
sg39
F1.1166740982589545
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17)\x0bm\xc8'
tRp7636
sa(dp7637
S'trial_loop.thisTrialN'
p7638
I88
sg6371
g6524
sS'block_loop.thisIndex'
p7639
g6365
sg38
S'left'
p7640
sg59
g63
sS'trial_loop.thisN'
p7641
I88
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7642
g60
(g99
S'X\x00\x00\x00'
tRp7643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7644
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7645
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7646
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7647
Nsg70
Vn
sS'block_loop.thisTrialN'
p7648
I0
sg39
F0.66668253720308712
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17/\r\xa8\x18'
tRp7649
sa(dp7650
S'trial_loop.thisTrialN'
p7651
I89
sg6371
g6989
sS'block_loop.thisIndex'
p7652
g6365
sg38
S'right'
p7653
sg59
g63
sS'trial_loop.thisN'
p7654
I89
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p7655
g60
(g99
S'Y\x00\x00\x00'
tRp7656
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7657
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7658
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7659
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7660
Nsg70
Vn
sS'block_loop.thisTrialN'
p7661
I0
sg39
F0.88334813949768431
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x175\t;H'
tRp7662
sa(dp7663
S'trial_loop.thisTrialN'
p7664
I90
sg6371
g6571
sS'block_loop.thisIndex'
p7665
g6365
sg38
S'left'
p7666
sg59
g63
sS'trial_loop.thisN'
p7667
I90
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p7668
g60
(g99
S'Z\x00\x00\x00'
tRp7669
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7670
I0
sg6380
g6579
sS'block_loop.thisRepN'
p7671
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7672
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p7673
Nsg70
Vn
sS'block_loop.thisTrialN'
p7674
I0
sg39
F0.9166369212907739
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x17;\x07\xe3\x88'
tRp7675
sa(dp7676
S'trial_loop.thisTrialN'
p7677
I91
sg6371
g6556
sS'block_loop.thisIndex'
p7678
g6365
sg38
S'left'
p7679
sg59
g63
sS'trial_loop.thisN'
p7680
I91
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7681
g60
(g99
S'[\x00\x00\x00'
tRp7682
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7683
I0
sg6380
g6563
sS'block_loop.thisRepN'
p7684
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7685
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7686
Nsg70
Vn
sS'block_loop.thisTrialN'
p7687
I0
sg39
F0.73325126270538021
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18\x05\x07\x08\xc8'
tRp7688
sa(dp7689
S'trial_loop.thisTrialN'
p7690
I92
sg6371
g6841
sS'block_loop.thisIndex'
p7691
g6365
sg38
S'right'
p7692
sg59
g63
sS'trial_loop.thisN'
p7693
I92
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7694
g60
(g99
S'\\\x00\x00\x00'
tRp7695
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7696
I0
sg6380
g6849
sS'block_loop.thisRepN'
p7697
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7698
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7699
Nsg70
Vn
sS'block_loop.thisTrialN'
p7700
I0
sg39
F0.76667974322845112
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18\x0b\x03\x8e('
tRp7701
sa(dp7702
S'trial_loop.thisTrialN'
p7703
I93
sg6371
g6710
sS'block_loop.thisIndex'
p7704
g6365
sg38
S'left'
p7705
sg59
g63
sS'trial_loop.thisN'
p7706
I93
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7707
g60
(g99
S']\x00\x00\x00'
tRp7708
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7709
I0
sg6380
g6717
sS'block_loop.thisRepN'
p7710
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7711
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7712
Nsg70
Vn
sS'block_loop.thisTrialN'
p7713
I0
sg39
F0.6832559383365151
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18\x11\x00\x8c\xa0'
tRp7714
sa(dp7715
S'trial_loop.thisTrialN'
p7716
I94
sg6371
g6648
sS'block_loop.thisIndex'
p7717
g6365
sg38
S'right'
p7718
sg59
g63
sS'trial_loop.thisN'
p7719
I94
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p7720
g60
(g99
S'^\x00\x00\x00'
tRp7721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7722
I0
sg6380
g6655
sS'block_loop.thisRepN'
p7723
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7724
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p7725
Nsg70
Vn
sS'block_loop.thisTrialN'
p7726
I0
sg39
F1.0000142549724842
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18\x16\x0b^('
tRp7727
sa(dp7728
S'trial_loop.thisTrialN'
p7729
I95
sg6371
g7004
sS'block_loop.thisIndex'
p7730
g6365
sg38
S'right'
p7731
sg59
g63
sS'trial_loop.thisN'
p7732
I95
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7733
g60
(g99
S'_\x00\x00\x00'
tRp7734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7735
I0
sg6380
g7011
sS'block_loop.thisRepN'
p7736
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7737
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p7738
Nsg70
Vn
sS'block_loop.thisTrialN'
p7739
I0
sg39
F0.75007754704893159
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18\x1c\x0b\xf2\x98'
tRp7740
sa(dp7741
S'trial_loop.thisTrialN'
p7742
I96
sg6371
g7598
sS'block_loop.thisIndex'
p7743
g6365
sg38
S'left'
p7744
sg59
g63
sS'trial_loop.thisN'
p7745
I96
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7746
g60
(g99
S'`\x00\x00\x00'
tRp7747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7748
I0
sg6380
g7605
sS'block_loop.thisRepN'
p7749
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7750
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p7751
Nsg70
Vn
sS'block_loop.thisTrialN'
p7752
I0
sg39
F0.66668310740169545
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18"\x08\xb2\x90'
tRp7753
sa(dp7754
S'trial_loop.thisTrialN'
p7755
I97
sg6371
g6888
sS'block_loop.thisIndex'
p7756
g6365
sg38
S'left'
p7757
sg59
g63
sS'trial_loop.thisN'
p7758
I97
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7759
g60
(g99
S'a\x00\x00\x00'
tRp7760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7761
I0
sg6380
g6895
sS'block_loop.thisRepN'
p7762
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7763
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7764
Nsg70
Vn
sS'block_loop.thisTrialN'
p7765
I0
sg39
F0.73335617930206354
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18(\x04\x07@'
tRp7766
sa(dp7767
S'trial_loop.thisTrialN'
p7768
I98
sg6371
g6871
sS'block_loop.thisIndex'
p7769
g6365
sg38
S'right'
p7770
sg59
g63
sS'trial_loop.thisN'
p7771
I98
sg33
g6875
sg64
g65
sS'trial_loop.thisIndex'
p7772
g60
(g99
S'b\x00\x00\x00'
tRp7773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7774
I0
sg6380
g6879
sS'block_loop.thisRepN'
p7775
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7776
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p7777
Nsg70
Vn
sS'block_loop.thisTrialN'
p7778
I0
sg39
F0.69993853255982685
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x18.\x00\x8c\xa0'
tRp7779
sa(dp7780
S'trial_loop.thisTrialN'
p7781
I99
sg6371
g6824
sS'block_loop.thisIndex'
p7782
g6365
sg38
S'left'
p7783
sg59
g63
sS'trial_loop.thisN'
p7784
I99
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7785
g60
(g99
S'c\x00\x00\x00'
tRp7786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7787
I0
sg6380
g6832
sS'block_loop.thisRepN'
p7788
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7789
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p7790
Nsg70
Vn
sS'block_loop.thisTrialN'
p7791
I0
sg39
F0.96661827578645898
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x183\x0b\x9c\xa8'
tRp7792
sa(dp7793
S'trial_loop.thisTrialN'
p7794
I100
sg6371
g6725
sS'block_loop.thisIndex'
p7795
g6365
sg38
S'left'
p7796
sg59
g63
sS'trial_loop.thisN'
p7797
I100
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p7798
g60
(g99
S'd\x00\x00\x00'
tRp7799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7800
I0
sg6380
g6733
sS'block_loop.thisRepN'
p7801
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7802
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7803
Nsg70
Vn
sS'block_loop.thisTrialN'
p7804
I0
sg39
F1.1334732981558773
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x189\x0b\xb4\x18'
tRp7805
sa(dp7806
S'trial_loop.thisTrialN'
p7807
I101
sg6371
g6948
sS'block_loop.thisIndex'
p7808
g6365
sg38
S'left'
p7809
sg59
g63
sS'trial_loop.thisN'
p7810
I101
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7811
g60
(g99
S'e\x00\x00\x00'
tRp7812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7813
I0
sg6380
g6955
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7815
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vn
sS'block_loop.thisTrialN'
p7817
I0
sg39
F0.95012441739891074
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19\x03\x0e,\xe8'
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g6794
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'right'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g6802
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7828
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vn
sS'block_loop.thisTrialN'
p7830
I0
sg39
F0.78326141224533785
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19\t\x0e\t\xc0'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g6871
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6882
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g6879
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7841
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vn
sS'block_loop.thisTrialN'
p7843
I0
sg39
F0.70002349219430471
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19\x0f\x0bF\xb8'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6460
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'left'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7854
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vn
sS'block_loop.thisTrialN'
p7856
I0
sg39
F0.78334124009052175
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19\x15\x07\x14\x80'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g6989
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'right'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7867
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vn
sS'block_loop.thisTrialN'
p7869
I0
sg39
F0.73325953058883897
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19\x1b\x04Qx'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g7086
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'left'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g7097
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g7094
sS'block_loop.thisRepN'
p7879
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7880
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vn
sS'block_loop.thisTrialN'
p7882
I0
sg39
F0.83333599426259752
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19!\x00\xd6\xd8'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g6460
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'left'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7893
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vn
sS'block_loop.thisTrialN'
p7895
I0
sg39
F2.2498015707842569
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19&\x0e\t\xc0'
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g6916
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g6924
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7906
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vn
sS'block_loop.thisTrialN'
p7908
I0
sg39
F0.81664712785095617
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x19.\x03$\xb0'
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g6618
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'left'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g6626
sS'block_loop.thisRepN'
p7918
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7919
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vn
sS'block_loop.thisTrialN'
p7921
I0
sg39
F0.81663287287847197
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x194\x00\xda\xc0'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g7362
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'left'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6805
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g7369
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7932
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vn
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.94988978055334883
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x199\r\xd3\x10'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g6618
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'left'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g6626
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7945
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vn
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.91662694281149015
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a\x03\rm\x80'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g6933
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'left'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6875
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7958
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.96656410689320182
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a\t\x0c\x92\xc0'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6507
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6515
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7971
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F1.1168973311268928
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a\x0f\x0c\xaa0'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g6794
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g6802
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7984
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F1.2497941581968917
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a\x15\x0e\xe4\x80'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7598
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'left'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7605
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7997
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.83331147570970643
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a\x1c\x04\x03X'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6392
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8010
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F1.9998622969669668
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a"\x01\xf7\xe8'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6603
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6610
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8023
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.79989610976008407
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a)\x02\x80\xa0'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6916
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'right'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6924
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8036
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.93340247945343435
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a.\x0f>X'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7159
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7166
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8049
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.1666808266054431
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a4\x0e\x9e0'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6948
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6927
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6955
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8062
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.80001414093203493
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1a;\x02\x8cX'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7144
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7151
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8075
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.76664866738792625
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b\x05\x00\x03\xe8'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6618
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6626
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8088
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F1.1166472989098111
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b\n\x0cD\xa0'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6916
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6927
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6924
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8101
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.83326300880253257
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b\x10\x0e\x82\xd8'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7103
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'left'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7110
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8114
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.76665807566860167
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b\x16\x0cs\x80'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g7004
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'right'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g7011
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8127
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.86657345815365261
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b\x1c\tu\xe0'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6541
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6548
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8140
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.86643518492019211
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b"\x07\xe3\x88'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6426
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8153
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.73325097760607605
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b(\x06MH'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6556
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6563
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8166
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.73326295178230794
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b.\x02\xd2\xa8'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6392
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8179
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F1.067043416083834
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b3\x0e_\xb0'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6871
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'right'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6875
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6879
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8192
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.63326631595555227
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1b:\x00\xa0('
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7058
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'left'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7065
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8205
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.78298857207300898
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c\x03\n\xfc\x80'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6524
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6532
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8218
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.68335657844181696
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c\t\x07\xfa\xf8'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7295
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7302
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8231
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.84993077785293281
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c\x0f\x03\xc8\xc0'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g7086
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g7090
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g7094
sS'block_loop.thisRepN'
p8243
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8244
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.66666799712947977
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c\x15\x01\xf7\xe8'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6933
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'left'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6882
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6940
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6875
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8257
I2
sg6385
g6882
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.60035928232537117
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c\x1a\x0c\x8e\xd8'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7213
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7220
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8270
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.69994936633884208
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c \x07/\xd8'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6409
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8283
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.85004025604212075
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c&\x02\xfd\xa0'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7213
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7220
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8296
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.96666560229459719
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c,\x01,\xc8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7103
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7110
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8309
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F1.0499086541367433
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c2\x01D8'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6426
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8322
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.3668998970224493
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1c8\x02\x8cX'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6507
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8335
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.58311304649214435
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d\x02\x08\x978'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6916
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6924
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8348
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.0499174922188104
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d\x08\x02\xbb8'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7159
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7166
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8361
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F1.1165489396007615
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d\x0e\x04\x03X'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g7280
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g7097
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g7287
sS'block_loop.thisRepN'
p8373
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8374
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.91665060606464976
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d\x14\x06=\xa8'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6603
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6610
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8387
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.150354036493809
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d\x1a\x05\xa1h'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6392
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8400
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.9500212113980524
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d \x08T\xd0'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7280
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g7097
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7287
sS'block_loop.thisRepN'
p8412
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8413
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.7833780179189489
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d&\x081\xa8'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6648
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6655
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8426
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.7170273934953002
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d,\x050 '
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6443
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8439
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.63327230304457771
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d2\x01w\x00'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6725
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8452
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.84999863152370381
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1d7\x0b\x94\xd8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6460
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6468
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8465
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.81705909655465803
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e\x01\t\xc4\x00'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6588
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6595
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8478
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.0333589162564749
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e\x07\x07z\x10'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7295
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7302
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8491
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.71660886750578356
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e\r\x08\x87\x98'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6888
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6895
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8504
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.81657328709479771
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e\x13\x04\xcex'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6426
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'left'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8517
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.69994423454772914
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e\x19\x02\x84\x88'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6443
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8530
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.78321893242900842
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e\x1e\r\x94\x90'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6824
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6832
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8543
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.81703001641108131
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e$\n\xd1\x88'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6663
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6671
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8556
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F1.016326505010511
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e*\x08\x87\x98'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g7103
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7110
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8569
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.68339478176676494
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e0\tV\xa0'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6490
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8582
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.81670870933157858
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1e6\x04\xe9\xd0'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g7295
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g7302
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8595
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.73330685709879617
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f\x00\x02\x9f\xe0'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7280
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g7097
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7287
sS'block_loop.thisRepN'
p8607
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8608
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.81669388416048605
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f\x05\x0eg\x80'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6663
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'right'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6674
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6671
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8621
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.80010280686110491
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f\x0b\x0c\x1d\x90'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6888
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6895
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8634
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F1.0166067577683862
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f\x11\t\x95 '
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6571
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6581
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6579
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8647
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.95002634318916535
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f\x17\nd('
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g7004
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g7011
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8660
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.1500141979522596
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f\x1d\n\x02\x80'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7058
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7065
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8673
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F1.1163969815952441
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f#\x0c\xf4h'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7598
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7605
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8686
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.85004738352836284
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f)\x0f.\xb8'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7280
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g7090
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7287
sS'block_loop.thisRepN'
p8698
I2
sg6383
g7090
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8699
I2
sg6385
g7097
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.90002132543850166
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f/\ra\xc8'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6556
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6563
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6511
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8712
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.81658754206546291
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f5\x0cH\x88'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6490
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8725
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.6500067853667133
sg34
g753
(S'\x07\xdf\x07\x0e\x11\x1f;\t\xfe\x98'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7362
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6805
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7369
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8738
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.81668447587981063
sg34
g753
(S'\x07\xdf\x07\x0e\x11 \x05\x05SH'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7213
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7220
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8751
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.79986047233069257
sg34
g753
(S'\x07\xdf\x07\x0e\x11 \x0b\x03\tX'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6490
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8764
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.6501111317647883
sg34
g753
(S'\x07\xdf\x07\x0e\x11 \x11\x00\x80\xe8'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g7362
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g7369
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8777
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.78326739933436329
sg34
g753
(S'\x07\xdf\x07\x0e\x11 \x16\n\xd9X'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6725
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8790
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.8000238343138335
sg34
g753
(S'\x07\xdf\x07\x0e\x11 \x1c\x08\x16P'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6948
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6955
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8803
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.73335817499901168
sg34
g753
(S'\x07\xdf\x07\x0e\x11 "\x05\x91\xc8'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6648
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6655
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8816
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.91660071366095508
sg34
g753
(S'\x07\xdf\x07\x0e\x11 (\x01\xd8\xa8'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6541
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6548
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6464
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8829
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.73336188129178481
sg34
g753
(S'\x07\xdf\x07\x0e\x11 .\x018\x80'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g7058
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g7065
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8842
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.71643552703972091
sg34
g753
(S'\x07\xdf\x07\x0e\x11 3\r\x00 '
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6725
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6729
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8855
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.81665910202718806
sg34
g753
(S'\x07\xdf\x07\x0e\x11 9\t\x0ch'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6524
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6532
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6528
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8868
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.81658155497825646
sg34
g753
(S'\x07\xdf\x07\x0e\x11!\x03\x06\xc2x'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g7144
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g7151
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8881
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.68326107012580906
sg34
g753
(S'\x07\xdf\x07\x0e\x11!\t\x04x\x88'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7004
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7011
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6436
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8894
I2
sg6385
g6430
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.65004185259931546
sg34
g753
(S'\x07\xdf\x07\x0e\x11!\x0f\x00FP'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g7058
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g7065
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6667
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8907
I2
sg6385
g6674
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.666350111245265
sg34
g753
(S'\x07\xdf\x07\x0e\x11!\x14\n\xa2\xa8'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6603
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6610
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8920
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.84991053579324216
sg34
g753
(S'\x07\xdf\x07\x0e\x11!\x1a\x05\xf7X'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7295
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6703
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7302
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6703
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8933
I2
sg6385
g6697
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.95003432597331994
sg34
g753
(S'\x07\xdf\x07\x0e\x11! \x04&\x80'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6841
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6849
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6845
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8946
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.96663024996269087
sg34
g753
(S'\x07\xdf\x07\x0e\x11!&\x03\xffp'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6710
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6717
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8959
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.76666349255901878
sg34
g753
(S'\x07\xdf\x07\x0e\x11!,\x04\x16\xe0'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7144
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7151
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8972
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F1.016658645869029
sg34
g753
(S'\x07\xdf\x07\x0e\x11!2\x00\xda\xc0'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6588
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6595
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8985
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.79979404415826139
sg34
g753
(S'\x07\xdf\x07\x0e\x11!8\x01\xa9\xc8'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6888
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6895
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8998
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.88336296466877684
sg34
g753
(S'\x07\xdf\x07\x0e\x11"\x01\x0ec\x98'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7598
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6835
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7605
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6828
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9011
I2
sg6385
g6835
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.3330856769462116
sg34
g753
(S'\x07\xdf\x07\x0e\x11"\x07\r\x0f\xc0'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7159
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7166
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6581
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9024
I2
sg6385
g6575
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F1.4666470708307315
sg34
g753
(S'\x07\xdf\x07\x0e\x11"\x0e\x03[`'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6794
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6802
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6798
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9037
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F1.2500099784811027
sg34
g753
(S'\x07\xdf\x07\x0e\x11"\x14\x0b\x13\xf0'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6372
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6381
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9050
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F1.2333462008227798
sg34
g753
(S'\x07\xdf\x07\x0e\x11"\x1b\x00.\xe0'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6710
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6717
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6494
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9063
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F1.0333135854452848
sg34
g753
(S'\x07\xdf\x07\x0e\x11"!\x04U`'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6648
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6655
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6622
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9076
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.1499452038860909
sg34
g753
(S'\x07\xdf\x07\x0e\x11"\'\x05 \x80'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6588
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6595
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9089
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.68333747677934298
sg34
g753
(S'\x07\xdf\x07\x0e\x11"-\x08\x16P'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I29
sg56
g57
sg58
Vy
sg42
I571
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I29
sg55
g11
sg56
g57
sg45
F0.66000000000000003
sg42
I571
sg49
F0.01
sg58
Vy
sg59
g63
sg44
I01
sg48
I25
sg47
g643
sg51
F30.050000000000001
sg46
F0.85999999999999943
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I84795728
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\\\x8f\x82?)\\\x8f?\xb8\x1e\x85?\x1f\x85\xeb>\xf6(\\?\xcd\xcc\xcc?\x8f\xc2\xb5?\xaeGa?333?=\nW?\x85\xebQ?\xb8\x1e\x85?\xa4p\xbd?H\xe1z?\\\x8f\x82?\x85\xebQ?\xecQ8?H\xe1z?fff?{\x14.?\x8f\xc2u?\xa4p=?{\x14.?\\\x8f\x82?H\xe1z?fff?\x1f\x85\xeb>\x14\xae\x87?\x14\xae\x87?\x1f\x85\xab?\\\x8fB?\xc3\xf5\xa8?\xaeGa?\\\x8f\x82?\\\x8f\x82?\x00\x00\x80?fff?\x8f\xc2u?)\\\x0f?=\nW?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S"/\xdd,@b\x10P@\xa8\xc6K@B`\x05@\xee|'@\xaa\xf1\xae@/\xdd\x1c@\xe9&\xf1?\x0e-\x02@\xe9&\x91?\xfe\xd4\x9c@\xbaI4@\x0e-\xa2?\xee|\x17@B`\x05@w\xbe\xb3@d;\xf3@!\xb0\n@\x96Cs@\x0e-R@\xa8\xc6[@\xb6\xf3\xdd?u\x93\xa8?\xbaI\x04@\xdb\xf9\xee?!\xb0\x9a@\x96C#@B`U@\xc9v\x16@\x98n\x96@\xdd$\xda@\x7fjZA\xfc\xa9i@b\x100@\xd5x+Ad;\xd3@/\xdd\x0c@\x83\xc0\xea?\xfc\xa9)@\xbaI$@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00`A\x00\x00\xc0A\x00\x00\x10A\x00\x00\x98A\x00\x00\x18B\x00\x00\xd0A\x00\x00@A\x00\x00\x1cB\x00\x00\xb8A\x00\x00\xa8A\x00\x00@@\x00\x00\x0cB\x00\x00\xd8A\x00\x00\x14B\x00\x00\x00B\x00\x00\x88A\x00\x00\x00\x00\x00\x00\x04B\x00\x00 A\x00\x00\xe0@\x00\x00pA\x00\x00\xe8A\x00\x00\x10B\x00\x00\x00A\x00\x00\xe0A\x00\x00PA\x00\x00\x90A\x00\x000A\x00\x00\xc8A\x00\x00\xf0A\x00\x00\x00@\x00\x00\x80?\x00\x00\xa0@\x00\x00\xb0A\x00\x00\xf8A\x00\x00\x80A\x00\x00\xa0A\x00\x00\x08B\x00\x00\xc0@\x00\x00\x80@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\xcd\xcc\x8c?33\xf3?ff\xa6?\xcd\xcc\x8c?\x00\x00\xc0?ff\xe6?ff\xa6?33\xb3?\x00\x00\x80?\x00\x00\x80?\x00\x00\xc0?ff\xe6?\xcd\xcc\x8c?\xcd\xcc\x8c?33\xb3?\x9a\x99\x99?\xcd\xcc\xcc?\x00\x00\x80?ff\xa6?\x9a\x99\x99?33\xb3?ff\xa6?\xcd\xcc\x8c?\xcd\xcc\x8c?ff\xa6?33\xf3?\x00\x00\xc0?\x9a\x99\x99?33\xf3?\x00\x00\x80?33\xb3?\x9a\x99\xd9?\x00\x00\x00@ff\xe6?\x9a\x99\x99?\x00\x00\x80?\x9a\x99\xd9?33\xb3?\xcd\xcc\x8c?33\xb3?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x10\x00\x00\x00\x1f\x00\x00\x00\x1e\x00\x00\x00\n\x00\x00\x00\'\x00\x00\x00 \x00\x00\x00&\x00\x00\x00\x13\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x12\x00\x00\x00\x1b\x00\x00\x00\x06\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00#\x00\x00\x00\x0f\x00\x00\x00\x1a\x00\x00\x00\x03\x00\x00\x00$\x00\x00\x00\t\x00\x00\x00!\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x05\x00\x00\x00\x0c\x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x00\x1d\x00\x00\x00"\x00\x00\x00\x0e\x00\x00\x00\x11\x00\x00\x00%\x00\x00\x00\x0b\x00\x00\x00\x16\x00\x00\x00\r\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g201
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g271
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g166
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g236
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g369
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g285
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g187
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g376
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g264
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g250
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g124
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g348
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g292
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g362
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g327
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g222
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g103
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g334
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g173
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g152
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g208
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g306
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g355
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g159
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g299
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g194
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g229
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g180
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g278
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g313
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g117
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g110
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g138
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g257
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g320
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g215
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g243
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g341
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g145
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g131
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I84795728
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@ff\x86@ff\xa6@\xcd\xcc\xac@\x9a\x99\x89@\xcd\xcc\x9c@\x00\x00\xa0@\x00\x00\xa0@\x9a\x99\x99@\x00\x00\xc0@33\xb3@\x00\x00\xb0@ff\x06@ff\x86@\xcd\xccL@ff\xb6@\x00\x00\xb0@\x00\x00\xc0@33\x83@33\xa3@\xcd\xcc\xac@\x9a\x99\x99@\x00\x00\x80@\x9a\x99\xb9@ff\xa6@\xcd\xcc\x9c@33\xb3@\x9a\x99y@\x9a\x99\xa9@333@fff@ff\x96@ff\x96@\x00\x00\xa0@33\xa3@33\xa3@fff@\x9a\x99\x99@\xcd\xcc\x9c@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\x15\xab\x1a@\xc6\x99\x95A=\x8a\xa8?\x9d\xf1\x8e?\x19\xef\x06Ax\xce\xdb?L(\xe2?@E\x94@\x7f\xca\xcc?\xf9\x91\xa8?M$\x82?f\xce\xac?<\x9a\xd9@b\xa7\xba@\xfd\x03\xa0@\xe1\x01\x80?\xfc\x9b\xb9?\x06\xaej?L\x00\x88@\xb5\xf7\xae?\t\x1a\x11@\x02":A\x89\x8f\xe8?\x87\x8b\x88?\xbf\x02@@i\xf3\x8e?D}\xf7?\x1eU\x87A\xe9\xfb.?oz\xf7?\xbd#\x12@\xfe7\xb3?\xediw?\x819\xb3?ay\x97?s"\xca@\xb2\xcd|@/\xae\xaa?~\x9b\x99?0\x13\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'33\x83@\x00\x00@@\x9a\x999@33\x83@fff@333@\xcd\xcc,@\x00\x00`@333@\x9a\x99Y@333@\x00\x00`@\x9a\x99y@333@\xcd\xccL@\x00\x00`@\x9a\x99Y@\x00\x00\x80@33\x83@\x00\x00@@fff@\x00\x00`@\x00\x00\x80@\x9a\x99\x89@\xcd\xccL@333@ffF@\xcd\xccl@333@33S@fff@\x9a\x999@\xcd\xccL@333@fff@\x00\x00\x80@ff\x86@333@\x00\x00`@\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80\x18;\x05\xa0\xca\x9e\x0c\xa0\xc9\x9e\x0c\x8013\x03 33\x03`03\x03@03\x03\xe0\xed2\x03\x0084\x03\xc003\x03\xc0\xc55\x03\x0013\x03\x00\xcb\x9e\x0c\xc0\xee2\x03 03\x03\xe0\x88\x19\r`\xcb\x9e\x0c\xe0\xc5\x9e\x0c\xa0\xc45\x03\xe0\x95\xa0\x0c`\x96\xa0\x0c\x00\x9c\xa0\x0c\x80\x97\xa0\x0c\xe0\x97\xa0\x0c\x80\x96\xa0\x0c@\x9c\xa0\x0c@\x94\xa0\x0c`\x9d\xa0\x0c\x00\x9b\xa0\x0c`13\x03`\xca\x9e\x0c\xe0\x18;\x05\x80\x16;\x05\xe0\x19;\x05\xa0\x18;\x05@\x18;\x05\xc0\x1d;\x05\x80\x19;\x05 \x1d;\x05`\x19;\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'u\x93\xc8?\xa8\xc6k@\xdb\xf9\xce?^\xba\xf9?/\xdd\x0c@u\x93\xc8?\xa8\xc6\xbb?\x0e-\xc2?\xb6\xf3\x9d?\x06\x81U?\x1dZ\xe4?\xbcts?\xc5 \x80?b\x10`@\x19\x04\xd6>P\x8d\x97?m\xe7;?\x1dZ\x04?b\x10\x10@\xf0\xa7&?\x0e-\x82?P\x8dw?P\x8dw?\x06\x81U?\xbaIt@\x0e-R@\x83\xc0\xea?\xee|\x07@\x91\xed\xcc?#\xdb\x19?\xa8\xc6\xdb?\x83\xc0\x8a?\xbcts?\xbaI\x14@\xc5 \xa0?\xa8\xc6\x9b?\xf8S\x93?\xb6\xf3]?\xbct3?\x91\xed\xac?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I84795728
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'P\xb2F\r\x80\xf61\rx\xb2F\rh\xb3F\r\xb0\xf61\r\xc8\xb2F\r\xb0\xf61\r\xf0\xb2F\r\x80\xf61\r\xf0\xb2F\rx\xb2F\rh\xb3F\rP\xb2F\r\xc8\xb2F\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xd8^\xe1\x04\x80Y\xe1\x04\x00^\xe1\x04`R\xe1\x04xX\xe1\x04\x98\\\xe1\x04\x80_\xe1\x04\x98\xf6\x11\x05\x10\xf4\x11\x058\xfc\x11\x05\xd0\xfd\x11\x05\x98\xf3\x11\x05\x10\xfa\x11\x05(\xf1\x11\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g789
sg83
g790
sg84
g794
sg85
g795
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g800
sg83
g801
sg84
g805
sg85
g806
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g789
sg83
g811
sg84
g794
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g820
sg83
g821
sg84
g825
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g756
sg83
g831
sg84
g761
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g820
sg83
g840
sg84
g825
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g767
sg83
g849
sg84
g772
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g778
sg83
g858
sg84
g783
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g744
sg83
g867
sg84
g749
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g800
sg83
g876
sg84
g805
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I84795728
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I84795728
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'@\xc7H\r\xd8\xe1H\r\x00\xe2H\r(\xe2H\r\x80\xc6H\rP\xe2H\r\xb0\xc6H\r\xd8\xe1H\r8oH\r\x00\xe2H\rx\xe2H\rpoH\r\xe0\xc6H\rX\xf0H\r\xa0\xe2H\rP\xe2H\r(\xe2H\r\xc8\xe2H\r\xe0\x11\xa1\x0cP\xe2H\r\x10\xc7H\r\x00\x12\xa1\x0c\xd8\xe1H\r\x80\xc6H\rP\xc6H\r\xe0\x11\xa1\x0c\x10\xc7H\r\x08\xe4H\r\xb0\xc6H\r\x18\xe3H\r\x80\x17;\x05\xb0\xc6H\r0\xc8H\r\xe0\x11\xa1\x0c\x18\xe3H\r\x10\xc7H\rP\xc6H\r(\xe2H\rpoH\rx\xe2H\r\xf0\xe2H\r\x00\xc8H\r\xa0\xe2H\r\xa0\x11\xa1\x0c\x10\xc7H\rpoH\r\x00\x18;\x05\x00\xe2H\r\x10\xc7H\r\xe0\x11\xa1\x0cp\xc7H\r\xe0\xc6H\r\xd0\xc7H\r\x80\xc6H\r@\xe3H\r\x00\x12\xa1\x0c(\xe2H\r\x00\xe2H\r\xe0\x11\xa1\x0c\xa0\x11\xa1\x0c8oH\r \xf0H\r\xa8oH\r\xa0\x11\xa1\x0c0\xc8H\r0\xe4H\r\x00\x12\xa1\x0c\x10\xc7H\r\xb0\xc6H\r\xe0\xe3H\r(\xe2H\rx\xe2H\r\xf0\xe2H\r\xa0\xe2H\r8oH\r\x00\xe2H\rP\xc6H\r\xc8\xe2H\rP\xe2H\r\x00\x12\xa1\x0cx\xe2H\r\xd0\xc7H\r\x90\xf0H\r\xe0\xc6H\r\xf0\xe2H\rP\xc6H\r0\xe4H\r\xb8\xe3H\r\xa0\xe2H\r\x90\xf0H\r(\xe2H\r\xf0\xe2H\r\xa0\x11\xa1\x0c8oH\r\x80\x17;\x05P\xc6H\r\xb0\xc6H\r\x18\xe3H\rpoH\r\x90\xe3H\r8oH\r\x00\xe2H\r\xe0\x11\xa1\x0cP\xc6H\r@\xe3H\r\xd8\xe1H\rP\xc6H\r\x80\x17;\x05\xe0\x11\xa1\x0c@\xe3H\r\xf0\xe2H\r\xc8\xf0H\r\x80\x17;\x05\x80\xc6H\r\xd8\xe1H\rP\xc6H\r\xe0\xe3H\rP\xe2H\r\xd8\xe1H\r\xa0\xc7H\r\x00\xc8H\r\x00\x12\xa1\x0cx\xe2H\r0\xc8H\r\xf0\xe2H\r\xd8\xe1H\r\x80\xc6H\r \xf0H\r\xf0\xe2H\r\x90\xf0H\r\x10\xc7H\r\x00\x12\xa1\x0c\xb0\xc6H\r\xc8\xe2H\r\xe0\xc6H\r\x80\xc6H\r\x00\xe2H\r@\xe3H\r@\xc7H\r\xf0\xe2H\r\xd0\xc7H\r(\xe2H\r\x80\xc6H\r\x10\xc7H\r\x00\x12\xa1\x0c\xe0\x11\xa1\x0cpoH\r\xa0\x11\xa1\x0c\xa0\x19;\x05\xa0\xe2H\r\xe0\xc6H\r\xb0\xc6H\r\xd8\xe1H\r\x80\x17;\x05 \xf0H\r\xc8\xf0H\r\x80\x17;\x05\xe0\xc6H\r\xa0\x11\xa1\x0c\xa0\xc7H\r@\xe3H\rpoH\r\xa0\xe2H\r\x18\xe3H\r\x80\xc6H\r@\xe3H\r\x00\xc8H\rp\xc7H\r\x08\xe4H\r\xc8\xe2H\r8oH\r\x10\xc7H\rP\xe2H\r\x18\xe3H\rpoH\r@\xe3H\r(\xe2H\r\xe0\x11\xa1\x0c\xa0\xe2H\r\x18\xe3H\r\xb8\xe3H\r\xd8\xe1H\r\x00\xe2H\r\xe0\xc6H\r\xa0\x11\xa1\x0c\xa0\xe2H\r\x80\xc6H\r\xa0\x11\xa1\x0c\x00\x12\xa1\x0c(\xe2H\r8oH\r`\xc8H\r\xa0\xc7H\rx\xe2H\r\x18\xe3H\rx\xe2H\r\x00\x12\xa1\x0c8oH\rP\xe2H\r@\xe3H\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'@h2\r\xa0i2\r\xc0i2\r`\xb0\x16\r@\xb0\x16\r\x00\xb5\x16\r \xd0\x17\r\x00f2\r\xe0`2\r\xe0h2\r@k2\r`k2\r\xe0i2\r\x00j2\r\xa0k2\r@j2\r\xc0k2\r\xe0k2\r\x00\xbc\x16\r`i2\r k2\r`l2\r\xe0l2\r\x80j2\r\x80l2\r\xc0l2\r\xe0j2\r`m2\r@l2\r\x80\x8b\x19\r\x00\x8b\x19\r@\x8d\x19\r\x80\x8a\x19\r\x80\x8c\x19\r\xc0\x8b\x19\r\x80\x8d\x19\r\xc0\x8a\x19\r@\x8f\x19\r\x00\x8f\x19\r@\x8a\x19\r@\x8c\x19\r\xe0\x86\x19\r\x00\x8d\x19\r\xc0\x85\x19\r\xc0\x8c\x19\r\x00\x8c\x19\r\x80\x89\x19\r\xc0\x87\x19\r@\x8e\x19\r\xa0\x86\x19\r`\x87\x19\r\x80\xc0\x9e\x0c\x80\x88\x19\r\x80\x86\x19\r\xc0\x8e\x19\r \x80\x19\r\xc0\x8d\x19\r\x00\x8e\x19\r@\x88\x19\r\xc0\x88\x19\r\x80\x80\x19\r\x00\x89\x19\r@\x89\x19\r\x00\x88\x19\r\x00\x8a\x19\r`\x80\x19\r`\x85\x19\r@\x8b\x19\r\xe0\x80\x19\r@\x80\x19\r\xc0\x89\x19\r\xa0\x80\x19\r\x00\x86\x19\r@\x86\x19\r\x80\x8e\x19\r\xc0\xfe\x18\r@\xff\x18\r\x00\xf2\x18\r`\xfe\x18\r@\xf3\x18\r \xff\x18\r\xa0\xfe\x18\r\x80\xff\x18\r\xc0\xff\x18\r\xa0\xff\x18\r@\xfe\x18\r`\xf0\x18\r@\xf1\x18\r \xf1\x18\r\x00\xf1\x18\r`\xf3\x18\r\x80\xf1\x18\r \x11\xa1\x0c`\xf2\x18\r\xc0\xf2\x18\r\xe0\xf1\x18\r\xa0\xf1\x18\r\xc0\xf1\x18\r\x80\xf2\x18\r\x80\xf3\x18\r\xe0\xf3\x18\r \xf2\x18\r \xf4\x18\r\x00\xf3\x18\r\xe0\xfe\x18\r\x80\xfb\x18\r \xfe\x18\r`\xf1\x18\r\xe0\xf2\x18\r\xa0\xf3\x18\r`\xff\x18\r\x80\xfc\x18\r\x80\xfe\x18\r`;4\x03 \xf3\x18\r@\xf2\x18\r\xe0\xff\x18\r\x0033\x03\x8043\x03\x00\x81\x19\r\xa0\xe1\x19\r\xe0.\x18\r`-\x18\r\x00.\x18\r\x80%\x18\r\xc0/\x18\r\xa0\xb3\x16\r\xa0/\x18\r@\xf4\x18\r\x00\xff\x18\r\x00\xf4\x18\r@\xbc\x16\r\xa0\xf2\x18\r\x00k2\r l2\r\xc0m2\r\x80k2\r\xa0j2\r\xa0l2\r i2\r\x00n2\r m2\r\x80h2\r@n2\r\x80n2\r n2\r\xc0n2\r\xa0n2\r\x00o2\r\xe0n2\r\xa0o2\r\x80m2\r o2\r`n2\r\xa0m2\r\xc0j2\r@m2\r\x80o2\r\xc0o2\r@o2\r j2\r\x00l2\r`o2\r\xc0\x80\x19\r\xe0m2\r \x87\x19\r`j2\r \x10\xbe\x1e@\x12\xbe\x1e`\x10\xbe\x1e\x80\x11\xbe\x1e \x11\xbe\x1e\x80\x10\xbe\x1e\xe0\x11\xbe\x1e@\x11\xbe\x1e\xc0\x11\xbe\x1e`\x12\xbe\x1e\xc0\x12\xbe\x1e\x80\x12\xbe\x1e\x00\x13\xbe\x1e\xe0\x12\xbe\x1e \x12\xbe\x1e`\x13\xbe\x1e\x80\x13\xbe\x1e\xa0\x13\xbe\x1e\xc0\x13\xbe\x1e\xe0\x13\xbe\x1e\xc0\x10\xbe\x1e\x00\x12\xbe\x1e@\x14\xbe\x1e\xe0o2\r\xa0\x12\xbe\x1e \x14\xbe\x1e\x80\x14\xbe\x1e\x00\x15\xbe\x1e`.\x18\r@\x1d;\x05 \x19;\x05\xc0\x18;\x05`\x1d;\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xc1q\xf7?Z\xa8\xea?\x10\xba\xdb?Y\xfa\x9f?w\xbc\x9b?\xd0K\xb5?\xba\x10\x11@\x01\x88(@\xa3\xb6\xfb?0U\x8d@\x1e\x96\xb9?02\xd3?w\x99\xb9?\\V\x95?\x11n\xc6?\x17\xf4\xdf?3B\x84?3\xfd\x9f?\x1d\x92\x99?\x0f\xae{?i\xddM@\xb13\xb3?? \x82?$4\xb3?E\xef\xae?\xfd\x01\x80?\x16\xa8j@\x17\xed\x0e@\x0b\x87\xe8?\x7f\xddM@,1\x93?\xc9\xca\xcc?$\x0e\x91?\x9a\xfa\x7f?\xa4\xdd\x95@)\x00\x80?\xb0v7@lZU?\xc5\x1f\xe2?c\x89\xa8?\xbd\xff\xbf?KRU?\x14f\x86@`\xec\x8e?\xc0WU?\x8b\xc5L?8t\xd7?)\x11\x91?\xef\xc5L?\x1f\xf6]?\\\x88H?\xcd\x81\xa8?\xf5v\x97?$\xfb\x7f?\xb9v\xdf@50\x93?Bx7?:D\x84?|\xbc;?\x8b\xda]?]\xaeJ@\xd7\x00\x80?\x99\xdd\x9d?]\xbb;?<\xdc\x9d?y\x1d\x91?\xd2t\x97?1\x1cb?\xd9c\x86?l\x11\x91?\xcb\xf6]?\x93\x99\x99?j1\xf3?\x0bw\xd7?V\xb6\xbb?\xdcFD?\xe4T\x85@1\xed\x0e@\x8e\xd4\x9d?\xe8\xdd]?\xf5"Q?\x18\x13Q?of\xa6?\x8d\xdd\xfd?\x9fD\x84?z"\xa2?\xae\x88\xa8?g\x9ej?Yy\x97?\xac\x00@?\xba\xcdL?/\x9aY?\xf5\x88Y?4\x81H?\x1d\xb6\x8a?\xa8\x11Q?\x83\xce\x8c?$\x11\x91?\xef\xc9\x8c?*v7?\xfa\x85\x88?\x9f\x9a\x99?\xc0ff?\xc3\xaa\xaa?/\xa9\xaa?\x86\x94\x99?Df\xa6?DD\x04@\x87\x8aH?\xbcR\x95?%A\x84?\xa3L3?\xffu\x97?\xab\xabj?\x03\x1fb?\xd0\xf0.?\x13\x96Y?\xf1\xdfn?]\xbc\x9b?/\xef??b\xb9{?`\xfa\x7f?t\x1d\x91?\xf4\xc9\x8c?O\x10Q?S\xf0.?\xf9!\x82?\x0c\x82\xb7?a`f?\xdb\xa9\xaa?|$b?\x8a\xde]?\xc513?\xb3\xde\xbd?\x1f\x01@?\x82w7?\x924s?U2\x8b@)\xd9]?\xde\xccL?:y7?\x89.3?th&?S\xd0;?\xa5\xdf\x1d?"WU?\xeeC\xc4?L\xcdL?\x1ef&?\xd7\xefn?\xb7uw?)&\x82?:"b?\x81\x98\x99@X\xe5L?\xa333?\x82\x0f\xb1?\xc6q7?\xc5j\x15?N%\x93?\xe8s\x86?\xc3\xf3\x7f?@\x99Y?\xe3\x97\x99?,3\x93?\xf6\xa8j?\xabaf?\x84\xd9]?\xb8\xc6L?!_f?Y\xe4\x8e?\xfaUU?+\xdan?\x9e\xdb\x9d?\x88\xec\x8e?f\xacj?\xcd\x02@?\xc0y7?\\@D?\xdc\xff?@+\xea\x8e?\x9a\xa1H?AVU?\x8b\x11Q?\x04\xab*?\x08\x0eQ?\xb8\xa6j?\xfc43?&\xcdL?\x8a\xab*?\xdb\x16\x82?\xd3DD?[1D?\xc2if?\xbes\xd7?\xc5-3?\xbe23?L\xa7\x8a?\x85\xbeL?\xc1\x99Y?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'P\xf6\x11\x05\xf8\xf6\x11\x05\xe0)\xc1\x04\xc8 \xc1\x04H+\xc1\x04\xe0&\xc1\x04\xd0\'\xc1\x04\xe8$\xc1\x04H"\xc1\x04X*\xc1\x04\xc0+\xc1\x04\xf0(\xc1\x04\xf8,\xc1\x04\x80#\xc1\x04\x90%\xc1\x04h#\xc1\x04h,\xc1\x04\x98#\xc1\x04\x98 \xc1\x04p\'\xc1\x04\xa0$\xc1\x04\xa0-\xc1\x04 )\xc1\x048 \xc1\x04\xb8\'\xc1\x04\xb0/\xc1\x04 ,\xc1\x04\xb0,\xc1\x04\xb0)\xc1\x04\xa8\xb2\xc2\x0c\xd0\xb1\xc2\x0c \xb6\xc2\x0c(\xba\xc2\x0c\xf0\xbe\xc2\x0cH\xbb\xc2\x0c\xc0\xb5\xc2\x0cP\xbc\xc2\x0c\xf0\xb8\xc2\x0c8\xb6\xc2\x0c\x18\xb8\xc2\x0c(\xb7\xc2\x0c\x00\xb2\xc2\x0c\x98\xbf\xc2\x0c\x88\xba\xc2\x0c\xd8\xbe\xc2\x0c\xe8\xb1\xc2\x0c\x10\xb7\xc2\x0c\x00\xbb\xc2\x0c0\xb8\xc2\x0c\xc8\xb6\xc2\x0c\xd0\xba\xc2\x0c\xd0\xbd\xc2\x0c0\xb2\xc2\x0c\x90\xb5\xc2\x0c\x80\xb6\xc2\x0c8\xbc\xc2\x0c\xc8\xb3\xc2\x0c\xe0\xbf\xc2\x0c\xe8\xb4\xc2\x0c \xbc\xc2\x0c`\xbe\xc2\x0cp\xba\xc2\x0ch\xb9\xc2\x0c\x00\xbe\xc2\x0c\xd8\xb8\xc2\x0c\x88\xbd\xc2\x0cX\xba\xc2\x0c\x18\xb2\xc2\x0c`\xb8\xc2\x0c\xa0\xb1\xc2\x0c\xc0\xb2\xc2\x0cX\xb4\xc2\x0c\x98\xb6\xc2\x0cx\xb2\xc2\x0c\xb0\xb0\xc2\x0c\x18\xb5\xc2\x0c\xd0\xb4\xc2\x0c\xa0\xb7\xc2\x0c(\xb1\xc2\x0c\x80\xb0\xc2\x0cP\xb3\xc2\x0c\xa0\xbd\xc2\x0cH\xb5\xc2\x0cH\xbe\xc2\x0cP\xb0\xc2\x0c\xe8\xb7\xc2\x0c8\xb0\xc2\x0c@\xb4\xc2\x0c\xa8\xb8\xc2\x0c\xc8\xb0\xc2\x0cH\xb2\xc2\x0c\xa0\xb4\xc2\x0c8\xb9\xc2\x0c\xc8\xb9\xc2\x0c\xb8\xb7\xc2\x0c\xb8\xb1\xc2\x0cH\xb8\xc2\x0c\xf8\xb0\xc2\x0c\xe0\xb9\xc2\x0c\x98\xb0\xc2\x0c\x00\xb8\xc2\x0ch\xb3\xc2\x0c\x10\xb4\xc2\x0c\xb0\xb6\xc2\x0c\xb8\xb4\xc2\x0c\x10\xb1\xc2\x0c0\xbb\xc2\x0c\x10\xba\xc2\x0cp\xb4\xc2\x0c\x08\xb9\xc2\x0c\x08\xb6\xc2\x0c\xe0\xb6\xc2\x0c`\xb5\xc2\x0c\x88\xb7\xc2\x0c\xf0\xb5\xc2\x0c\xd8\xbb\xc2\x0c\x98\xbc\xc2\x0c\x80\xb3\xc2\x0c \xb0\xc2\x0c\x90\xb8\xc2\x0c\xc8\xbc\xc2\x0c\xb0\xb3\xc2\x0c\xb0\xb9\xc2\x0cx\xb5\xc2\x0c0\xb5\xc2\x0c\xc0\xbe\xc2\x0c\xf8\xbc\xc2\x0c \xb3\xc2\x0c\xc8\xbf\xc2\x0c(\xb4\xc2\x0c`\xbb\xc2\x0c\xf0\xb2\xc2\x0c\xb8\xba\xc2\x0cP\xb6\xc2\x0c\xc0\xbb\xc2\x0c \xb9\xc2\x0c@\xba\xc2\x0c\xa8\xb5\xc2\x0c@\xbd\xc2\x0c\x88\xb1\xc2\x0c\xb0\xbc\xc2\x0cp\xbd\xc2\x0ch\xbc\xc2\x0cP\xbf\xc2\x0c\x88\xb4\xc2\x0c\xe0\xb0\xc2\x0cX\xb7\xc2\x0c\xf8\xb9\xc2\x0c\x90\xb2\xc2\x0c`\xb2\xc2\x0c\xf8\xb6\xc2\x0c\xb8\xbd\xc2\x0c\xa0\xba\xc2\x0c\xd0\xb7\xc2\x0cP\xb9\xc2\x0c@\xb7\xc2\x0cx\xbb\xc2\x0c\x10\xbd\xc2\x0c0\xbe\xc2\x0c\x90\xbe\xc2\x0ch\xb0\xc2\x0c\xe0\xb3\xc2\x0cX\xbd\xc2\x0c\xd8\xb2\xc2\x0c\x80\xb9\xc2\x0c\x08\xbc\xc2\x0c\xe0\xbc\xc2\x0c\xa8\xbb\xc2\x0c\x80\xbc\xc2\x0c\x08\xb3\xc2\x0c\x98\xb9\xc2\x0ch\xbf\xc2\x0c8\xb3\xc2\x0cx\xb8\xc2\x0c\xa8\xbe\xc2\x0cX\xb1\xc2\x0c(\xbd\xc2\x0c \xbf\xc2\x0c\x98\xb3\xc2\x0c\x00\xb5\xc2\x0cp\xb7\xc2\x0c\x08\xbf\xc2\x0ch\xb6\xc2\x0c\x18\xbe\xc2\x0c\xc0\xb8\xc2\x0c\xe8\xbd\xc2\x0c@\xb1\xc2\x0c\xe8\xba\xc2\x0c\x90\xbb\xc2\x0c\xd8\xb5\xc2\x0c\xb0\xbf\xc2\x0c\xb8gU\x02\x80\xbf\xc2\x0cx\xbe\xc2\x0c\x18\xbb\xc2\x0c\xf8\xb3\xc2\x0c\x80\x7f\xc2\x04 v\xc2\x04`~\xc2\x04\x00{\xc2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g920
sg895
g1018
sg910
g927
sg904
g1025
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1037
sg895
g1033
sg910
g1044
sg904
g1041
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g937
sg895
g1050
sg910
g944
sg904
g1057
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1069
sg895
g1065
sg910
g1076
sg904
g1073
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1086
sg895
g1082
sg910
g1093
sg904
g1090
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1103
sg895
g1099
sg910
g1110
sg904
g1107
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1126
sg895
g1116
sg910
g1120
sg904
g1124
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1137
sg895
g1133
sg910
g1144
sg904
g1141
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g988
sg895
g1150
sg910
g995
sg904
g1157
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g954
sg895
g1165
sg910
g961
sg904
g1172
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1184
sg895
g1180
sg910
g1191
sg904
g1188
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1126
sg895
g1116
sg910
g1120
sg904
g1124
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g988
sg895
g1150
sg910
g995
sg904
g1157
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1227
sg895
g1223
sg910
g1234
sg904
g1231
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1244
sg895
g1240
sg910
g1251
sg904
g1248
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1126
sg895
g1116
sg910
g1120
sg904
g1124
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1227
sg895
g1223
sg910
g1234
sg904
g1231
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1332
sg895
g1322
sg910
g1326
sg904
g1330
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1005
sg895
g1339
sg910
g1012
sg904
g1346
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1358
sg895
g1354
sg910
g1365
sg904
g1362
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1184
sg895
g1371
sg910
g1191
sg904
g1378
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1005
sg895
g1339
sg910
g1012
sg904
g1346
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1103
sg895
g1399
sg910
g1110
sg904
g1406
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1126
sg895
g1414
sg910
g1120
sg904
g1421
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1358
sg895
g1429
sg910
g1365
sg904
g1436
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1227
sg895
g1444
sg910
g1234
sg904
g1451
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g908
sg895
g1459
sg910
g900
sg904
g1466
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1086
sg895
g1487
sg910
g1093
sg904
g1494
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1069
sg895
g1065
sg910
g1076
sg904
g1073
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1332
sg895
g1515
sg910
g1326
sg904
g1522
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1069
sg895
g1530
sg910
g1076
sg904
g1537
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1137
sg895
g1133
sg910
g1144
sg904
g1141
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1562
sg895
g1558
sg910
g1569
sg904
g1566
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1227
sg895
g1223
sg910
g1234
sg904
g1231
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1086
sg895
g1487
sg910
g1093
sg904
g1494
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1227
sg895
g1444
sg910
g1234
sg904
g1451
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1126
sg895
g1414
sg910
g1120
sg904
g1421
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g937
sg895
g1050
sg910
g944
sg904
g1057
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1103
sg895
g1399
sg910
g1110
sg904
g1406
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1005
sg895
g1339
sg910
g1012
sg904
g1346
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g971
sg895
g1692
sg910
g978
sg904
g1699
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1711
sg895
g1707
sg910
g1718
sg904
g1715
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1244
sg895
g1240
sg910
g1251
sg904
g1248
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g954
sg895
g1165
sg910
g961
sg904
g1172
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g937
sg895
g1050
sg910
g944
sg904
g1057
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1126
sg895
g1116
sg910
g1120
sg904
g1124
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1562
sg895
g1776
sg910
g1569
sg904
g1783
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1037
sg895
g1791
sg910
g1044
sg904
g1798
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1086
sg895
g1082
sg910
g1093
sg904
g1090
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g971
sg895
g1692
sg910
g978
sg904
g1699
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1562
sg895
g1776
sg910
g1569
sg904
g1783
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1103
sg895
g1399
sg910
g1110
sg904
g1406
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1711
sg895
g1858
sg910
g1718
sg904
g1865
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1244
sg895
g1873
sg910
g1251
sg904
g1880
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1227
sg895
g1444
sg910
g1234
sg904
g1451
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1005
sg895
g1339
sg910
g1012
sg904
g1346
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1137
sg895
g1133
sg910
g1144
sg904
g1141
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1069
sg895
g1530
sg910
g1076
sg904
g1537
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1332
sg895
g1515
sg910
g1326
sg904
g1522
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1137
sg895
g1966
sg910
g1144
sg904
g1973
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1037
sg895
g1791
sg910
g1044
sg904
g1798
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g908
sg895
g1459
sg910
g900
sg904
g1466
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1184
sg895
g1371
sg910
g1191
sg904
g1378
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g988
sg895
g1150
sg910
g995
sg904
g1157
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1244
sg895
g1240
sg910
g1251
sg904
g1248
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1069
sg895
g1530
sg910
g1076
sg904
g1537
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1358
sg895
g1429
sg910
g1365
sg904
g1436
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1103
sg895
g1099
sg910
g1110
sg904
g1107
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1332
sg895
g1515
sg910
g1326
sg904
g1522
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g908
sg895
g1459
sg910
g900
sg904
g1466
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1711
sg895
g1707
sg910
g1718
sg904
g1715
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1037
sg895
g1033
sg910
g1044
sg904
g1041
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1137
sg895
g1966
sg910
g1144
sg904
g1973
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1358
sg895
g1354
sg910
g1365
sg904
g1362
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g954
sg895
g1165
sg910
g961
sg904
g1172
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1332
sg895
g1515
sg910
g1326
sg904
g1522
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1562
sg895
g1558
sg910
g1569
sg904
g1566
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1037
sg895
g1791
sg910
g1044
sg904
g1798
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1184
sg895
g1180
sg910
g1191
sg904
g1188
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1005
sg895
g1339
sg910
g1012
sg904
g1346
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1358
sg895
g1429
sg910
g1365
sg904
g1436
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1086
sg895
g1487
sg910
g1093
sg904
g1494
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g954
sg895
g1165
sg910
g961
sg904
g1172
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1037
sg895
g1033
sg910
g1044
sg904
g1041
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1126
sg895
g1414
sg910
g1120
sg904
g1421
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g908
sg895
g1459
sg910
g900
sg904
g1466
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1711
sg895
g1707
sg910
g1718
sg904
g1715
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g920
sg895
g1018
sg910
g927
sg904
g1025
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g908
sg895
g1459
sg910
g900
sg904
g1466
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1184
sg895
g1371
sg910
g1191
sg904
g1378
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1126
sg895
g1414
sg910
g1120
sg904
g1421
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1711
sg895
g1707
sg910
g1718
sg904
g1715
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1332
sg895
g1515
sg910
g1326
sg904
g1522
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1562
sg895
g1558
sg910
g1569
sg904
g1566
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1184
sg895
g1180
sg910
g1191
sg904
g1188
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1137
sg895
g1966
sg910
g1144
sg904
g1973
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g988
sg895
g1150
sg910
g995
sg904
g1157
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g920
sg895
g1018
sg910
g927
sg904
g1025
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1069
sg895
g1530
sg910
g1076
sg904
g1537
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1244
sg895
g1873
sg910
g1251
sg904
g1880
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1069
sg895
g1530
sg910
g1076
sg904
g1537
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1103
sg895
g1099
sg910
g1110
sg904
g1107
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1332
sg895
g1322
sg910
g1326
sg904
g1330
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g920
sg895
g1018
sg910
g927
sg904
g1025
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g971
sg895
g1692
sg910
g978
sg904
g1699
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1086
sg895
g1082
sg910
g1093
sg904
g1090
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1332
sg895
g1322
sg910
g1326
sg904
g1330
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1358
sg895
g1354
sg910
g1365
sg904
g1362
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1227
sg895
g1223
sg910
g1234
sg904
g1231
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1244
sg895
g1873
sg910
g1251
sg904
g1880
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1184
sg895
g1180
sg910
g1191
sg904
g1188
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1103
sg895
g1099
sg910
g1110
sg904
g1107
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g937
sg895
g1050
sg910
g944
sg904
g1057
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1711
sg895
g1858
sg910
g1718
sg904
g1865
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1332
sg895
g1322
sg910
g1326
sg904
g1330
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g971
sg895
g1692
sg910
g978
sg904
g1699
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1227
sg895
g1223
sg910
g1234
sg904
g1231
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1244
sg895
g1873
sg910
g1251
sg904
g1880
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1126
sg895
g1116
sg910
g1120
sg904
g1124
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1086
sg895
g1487
sg910
g1093
sg904
g1494
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1562
sg895
g1776
sg910
g1569
sg904
g1783
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1244
sg895
g1873
sg910
g1251
sg904
g1880
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1137
sg895
g1966
sg910
g1144
sg904
g1973
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1103
sg895
g1399
sg910
g1110
sg904
g1406
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g920
sg895
g1018
sg910
g927
sg904
g1025
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1184
sg895
g1180
sg910
g1191
sg904
g1188
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1086
sg895
g1082
sg910
g1093
sg904
g1090
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1562
sg895
g1776
sg910
g1569
sg904
g1783
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1184
sg895
g1371
sg910
g1191
sg904
g1378
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1103
sg895
g1399
sg910
g1110
sg904
g1406
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1562
sg895
g1558
sg910
g1569
sg904
g1566
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1711
sg895
g1707
sg910
g1718
sg904
g1715
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1086
sg895
g1082
sg910
g1093
sg904
g1090
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1137
sg895
g1133
sg910
g1144
sg904
g1141
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1358
sg895
g1354
sg910
g1365
sg904
g1362
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g971
sg895
g1692
sg910
g978
sg904
g1699
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1711
sg895
g1858
sg910
g1718
sg904
g1865
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1069
sg895
g1065
sg910
g1076
sg904
g1073
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1332
sg895
g1322
sg910
g1326
sg904
g1330
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1184
sg895
g1371
sg910
g1191
sg904
g1378
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1037
sg895
g1033
sg910
g1044
sg904
g1041
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1227
sg895
g1444
sg910
g1234
sg904
g1451
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1358
sg895
g1429
sg910
g1365
sg904
g1436
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1086
sg895
g1487
sg910
g1093
sg904
g1494
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1711
sg895
g1858
sg910
g1718
sg904
g1865
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g954
sg895
g1165
sg910
g961
sg904
g1172
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1126
sg895
g1414
sg910
g1120
sg904
g1421
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1137
sg895
g1133
sg910
g1144
sg904
g1141
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1358
sg895
g1429
sg910
g1365
sg904
g1436
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1037
sg895
g1791
sg910
g1044
sg904
g1798
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g920
sg895
g916
sg910
g927
sg904
g924
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g937
sg895
g1050
sg910
g944
sg904
g1057
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1103
sg895
g1099
sg910
g1110
sg904
g1107
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1562
sg895
g1558
sg910
g1569
sg904
g1566
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1137
sg895
g1966
sg910
g1144
sg904
g1973
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1562
sg895
g1776
sg910
g1569
sg904
g1783
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1244
sg895
g1240
sg910
g1251
sg904
g1248
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1037
sg895
g1791
sg910
g1044
sg904
g1798
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1227
sg895
g1444
sg910
g1234
sg904
g1451
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1069
sg895
g1065
sg910
g1076
sg904
g1073
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1358
sg895
g1354
sg910
g1365
sg904
g1362
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1069
sg895
g1065
sg910
g1076
sg904
g1073
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1244
sg895
g1240
sg910
g1251
sg904
g1248
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1037
sg895
g1033
sg910
g1044
sg904
g1041
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g988
sg895
g1150
sg910
g995
sg904
g1157
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1711
sg895
g1858
sg910
g1718
sg904
g1865
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I84795728
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'@13\x03x\xc7\x9f\x0c@\xc55\x03\xe0\xc8\x9f\x0c\xb8\xc8\x9f\x0c\x90\xc8\x9f\x0ch\xc8\x9f\x0c`\\\xa0\x0c\x00\xc7\x9f\x0c@\xc8\x9f\x0c\x98\\\xa0\x0c0\xc9\x9f\x0c`\\\xa0\x0c\xf0\xc7\x9f\x0ch\xc8\x9f\x0c@13\x03\xc8\xc7\x9f\x0c\xf0[\xa0\x0c\x80\xc55\x03@\x04\xa0\x0c\x08\xc9\x9f\x0c0\xc9\x9f\x0c\x18\xc8\x9f\x0c\x80\xc55\x03p\x04\xa0\x0c@\x04\xa0\x0c0\xc9\x9f\x0cp\x04\xa0\x0c\xc8\xc7\x9f\x0c(\\\xa0\x0c\xa0\xc55\x03\xc0\x05\xa0\x0c\xf0\x05\xa0\x0c\xa0\xc55\x03\xe0\xc8\x9f\x0c0\x05\xa0\x0c\xd0\x04\xa0\x0c\xe0\xc8\x9f\x0c\x90\xc8\x9f\x0cp\x04\xa0\x0c\xc0\x05\xa0\x0c\xd8\xc6\x9f\x0c\x00\x05\xa0\x0c\xc8\xc7\x9f\x0c\x80\xc55\x03\x90\xc8\x9f\x0c \x06\xa0\x0cx\xc7\x9f\x0c\xa0\xc55\x03\xd0\x04\xa0\x0c\x08\xc9\x9f\x0c\xa0\x04\xa0\x0c\x90\xc8\x9f\x0c\xb8\xc8\x9f\x0c@]\xa0\x0cx\xc7\x9f\x0c\x08\xc9\x9f\x0c@13\x03\xb8\xc8\x9f\x0c\x08\xc9\x9f\x0c\xa0\x04\xa0\x0c\xe0\xc8\x9f\x0c(\\\xa0\x0c\xc8\xc7\x9f\x0c\xf0[\xa0\x0c\xf0\xc7\x9f\x0c\xf0[\xa0\x0c\x90\xc8\x9f\x0c@\xc8\x9f\x0c(\\\xa0\x0cp\x04\xa0\x0c\x80\xc55\x03\x90\xc8\x9f\x0cP\x06\xa0\x0c(\\\xa0\x0c\xf0[\xa0\x0ch\xc8\x9f\x0c\x80\xc55\x03\x00\x05\xa0\x0cp\x04\xa0\x0c\xa0\xc55\x03\xb8\xc8\x9f\x0c\xd8\xc6\x9f\x0c@\xc55\x03@13\x03h\xc8\x9f\x0c@\xc25\x03\xa0\xc55\x03\x08\xc9\x9f\x0cP\x06\xa0\x0ch\xc8\x9f\x0c\x90\xc8\x9f\x0c\x00\xc7\x9f\x0c@\xc8\x9f\x0c@13\x03@\x04\xa0\x0c\x90\x05\xa0\x0c(\\\xa0\x0cp\x04\xa0\x0ch\xc8\x9f\x0c\xd0\x04\xa0\x0c@\xc25\x03\xe0\xc8\x9f\x0cp\x04\xa0\x0c\x08\xc9\x9f\x0c\x00\x05\xa0\x0c(\\\xa0\x0c\xb8\xc8\x9f\x0c\xe0\xc8\x9f\x0ch\xc8\x9f\x0c(\\\xa0\x0ch\xc8\x9f\x0c\xc8\xc7\x9f\x0c`\x05\xa0\x0c\xf0[\xa0\x0cP\xc7\x9f\x0c\xf0[\xa0\x0cp\x04\xa0\x0c\xf0\xc7\x9f\x0c\x18\xc8\x9f\x0c0\xc9\x9f\x0c\xa0\x04\xa0\x0c`\\\xa0\x0ch\xc8\x9f\x0c\xb8\xc8\x9f\x0c@]\xa0\x0c\xd0\x04\xa0\x0c\x00\x05\xa0\x0c\xd0\x04\xa0\x0c\xe0\xc8\x9f\x0c\xf0\xc7\x9f\x0c0\xc9\x9f\x0c@\xc8\x9f\x0c@\x04\xa0\x0c\xb8\xc8\x9f\x0c\xa0\x04\xa0\x0c`\\\xa0\x0c \xc35\x03`\x05\xa0\x0c(\\\xa0\x0c\x98\\\xa0\x0c\x18\xc8\x9f\x0c\xa0\x04\xa0\x0c\x90\xc8\x9f\x0c\xd0\x04\xa0\x0c\x80\xc55\x03`\\\xa0\x0c\xf0\xc7\x9f\x0cp\x04\xa0\x0cP\x06\xa0\x0c@13\x03\xf0\xc7\x9f\x0c(\\\xa0\x0cp\x04\xa0\x0c@\x04\xa0\x0c \x06\xa0\x0c\x90\xc8\x9f\x0c\xb8\xc8\x9f\x0c0\xc9\x9f\x0c\x08\xc9\x9f\x0c\x00\x05\xa0\x0c\x18\xc8\x9f\x0c\x80\xc55\x03@\x04\xa0\x0c@13\x03\x18\xc8\x9f\x0c\xf0\xc7\x9f\x0c\xc8\xc7\x9f\x0c\xf0[\xa0\x0c\x00\x05\xa0\x0c@13\x03\x80\xc55\x03\xa0\xc55\x03\xf0\x05\xa0\x0c \x06\xa0\x0c\x18\xc8\x9f\x0c@\xc8\x9f\x0c\xc8\xc7\x9f\x0c\xb8\xc8\x9f\x0c\xa0\x04\xa0\x0c@\x04\xa0\x0c\x00\x05\xa0\x0c\xa0\x04\xa0\x0c\xf0[\xa0\x0c\xa0\xc55\x03@\x04\xa0\x0c0\xc9\x9f\x0c\x18\xc8\x9f\x0c\xc8\xc7\x9f\x0c\x08\xc9\x9f\x0c\xf0\x05\xa0\x0c(\\\xa0\x0c@]\xa0\x0c\xe0\xc8\x9f\x0c`\x05\xa0\x0c\xe0\xc8\x9f\x0c\xd0\x04\xa0\x0c\x90\x05\xa0\x0c(\xc7\x9f\x0c\x18\xc8\x9f\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S' \x17\xbe\x1e\x80\x17\xbe\x1e\xe0\x17\xbe\x1e \x18\xbe\x1e\xc0\x15\xbe\x1e@\x18\xbe\x1e\xc0\x16\xbe\x1e\xc0\x17\xbe\x1e\x00\x16\xbe\x1e\xa0\x18\xbe\x1e`\x18\xbe\x1e@\x17\xbe\x1e\xa0\x16\xbe\x1e@\x16\xbe\x1e\xa0\x17\xbe\x1e \x15\xbe\x1e\xa0\x19\xbe\x1e\xe0\x15\xbe\x1e@\x19\xbe\x1e\xc0\x18\xbe\x1e\x00\x18\xbe\x1e\x00\x1a\xbe\x1e\x80\x18\xbe\x1e\xa0\x15\xbe\x1e\xc0\x19\xbe\x1e\xe0\x18\xbe\x1e`\x19\xbe\x1e`\x1a\xbe\x1e\x80\x1a\xbe\x1e\xe0\x16\xbe\x1e`\x17\xbe\x1e \x19\xbe\x1e\x00\x1b\xbe\x1e\x80\x1b\xbe\x1e\x80\x19\xbe\x1e\xa0\x1a\xbe\x1e \x1b\xbe\x1e\xa0\x1b\xbe\x1e\xa0\x145\x03@\x1a\xbe\x1e\x80\x1c\xbe\x1e\x00\x1c\xbe\x1e\xc0\x1a\xbe\x1e\xe0\x1a\xbe\x1e\xc0\x1c\xbe\x1e`\x16\xbe\x1e\x00\x19\xbe\x1e \x1d\xbe\x1e\xa0\x1c\xbe\x1e@\x1b\xbe\x1e\xc0\x1b\xbe\x1e\xa0\x1d\xbe\x1e\x00\x1e\xbe\x1e\x80\x1d\xbe\x1e \x1e\xbe\x1e \x1c\xbe\x1e@\x1d\xbe\x1e\xe0\x1b\xbe\x1e\x80\x1e\xbe\x1e@\x1e\xbe\x1e\x00\x17\xbe\x1e`\x1d\xbe\x1e\xe0\x19\xbe\x1e`\x1f\xbe\x1e\xe0\x1d\xbe\x1e\x80\x1f\xbe\x1e`\x1b\xbe\x1e\x00\x1d\xbe\x1e\xa0\x10\xbe\x1e`\x1c\xbe\x1e\xa0\x1f\xbe\x1e \x1a\xbe\x1e\x80\x16\xbe\x1e\xc0\x1f\xbe\x1e\xe0\x1c\xbe\x1e\xc0\x1d\xbe\x1e\xa0\x1e\xbe\x1e\xc0\x1e\xbe\x1e\xe0\x1f\xbe\x1e@\x1c\xbe\x1e \x16\xbe\x1e@\x1f\xbe\x1e \x1f\xbe\x1e\x00\x1a;\x05 \x00\xe4\x1e@\x02\xe4\x1e\x80\x00\xe4\x1e\x80\x01\xe4\x1e \x01\xe4\x1e@\x00\xe4\x1e\xe0\x01\xe4\x1e@\x01\xe4\x1e\xc0\x01\xe4\x1e`\x02\xe4\x1e\xc0\x02\xe4\x1e\x80\x02\xe4\x1e\xa0\x02\xe4\x1e\xe0\x02\xe4\x1e\x00\x03\xe4\x1e`\x03\xe4\x1e@\x03\xe4\x1e\xa0\x00\xe4\x1e\x80\x03\xe4\x1e\xe0\x03\xe4\x1e\xc0\x03\xe4\x1e\x00\x02\xe4\x1e@\x04\xe4\x1e \x04\xe4\x1e\xa0\x01\xe4\x1e`\x04\xe4\x1e\x80\x04\xe4\x1e\xa0\x04\xe4\x1e\xc0\x04\xe4\x1e\xe0\x04\xe4\x1e@\x05\xe4\x1e \x05\xe4\x1e`\x01\xe4\x1e`\x05\xe4\x1e\x80\x05\xe4\x1e\xe0\x05\xe4\x1e\xc0\x05\xe4\x1e\xc0\x00\xe4\x1e@\x06\xe4\x1e`\x06\xe4\x1e\x80\x06\xe4\x1e \x03\xe4\x1e\x00\x01\xe4\x1e\xe0\x06\xe4\x1e\xc0\x06\xe4\x1e\x00\x04\xe4\x1e\x00\x07\xe4\x1e \x07\xe4\x1e\x80\x07\xe4\x1e\xa0\x07\xe4\x1e\xc0\x07\xe4\x1e\xe0\x07\xe4\x1e\x00\x08\xe4\x1e`\x00\xe4\x1e@\x08\xe4\x1e \x08\xe4\x1e\x80\x08\xe4\x1e`\x08\xe4\x1e\x00\x06\xe4\x1e\xe0\x08\xe4\x1e\x00\t\xe4\x1e\x00\x05\xe4\x1e`\x07\xe4\x1e \t\xe4\x1e@\t\xe4\x1e`\t\xe4\x1e\xc0\t\xe4\x1e\xa0\t\xe4\x1e\xa0\x03\xe4\x1e \n\xe4\x1e\x00\n\xe4\x1e`\n\xe4\x1e\x00\x1f\xbe\x1e\xa0\n\xe4\x1e@\n\xe4\x1e\xe0\n\xe4\x1e\x80\t\xe4\x1e\x00\x0b\xe4\x1e\xc0\x0b\xe4\x1e\x80\n\xe4\x1e \x06\xe4\x1e@\x0b\xe4\x1e\xa0\x08\xe4\x1e\xa0\x05\xe4\x1e`\x0c\xe4\x1e@\x0c\xe4\x1e \x0c\xe4\x1e\xc0\x0c\xe4\x1e\xe0\t\xe4\x1e\xa0\x0b\xe4\x1e\x80\x0b\xe4\x1e@\r\xe4\x1e\xe0\x0c\xe4\x1e \r\xe4\x1e\xa0\x0c\xe4\x1e\x00\r\xe4\x1e`\x0b\xe4\x1e@\x07\xe4\x1e\xc0\r\xe4\x1e\xc0\n\xe4\x1e\xe0\r\xe4\x1e\xc0\x08\xe4\x1e\x80\x0c\xe4\x1e\x80\r\xe4\x1e\x00\x0c\xe4\x1e \x0e\xe4\x1e`%\x18\r \x0b\xe4\x1e\x00\x0f\xe4\x1e@\x0e\xe4\x1e \x0f\xe4\x1e`\r\xe4\x1e\xa0\x0e\xe4\x1e`\x0e\xe4\x1e\xa0\x0f\xe4\x1e\xc0\x0e\xe4\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\xaakw?J\xea.?%1\xd3?9\xde]?\xe1\x00@?k\xaa\xca?\xc8\xcdL?\xe7\x99\xb9?\x10\xceL?\x07\xeen?\xfcg&?\x87\x99\x19?I/\x93?6\xaaj?\xe9PU?\xb5\xb9\x9b?z\x80\x88?\xbdZ\x86?da&?\x04\x9aY?\xcc#b?\xf6\xe1\x1d?\xfeJs?\xac\x11Q?\xf0UU?\x9aw7?\x18\x13\x11?2\x93\x19?\x84V&?\xb62\xb3?\xcd\x98Y?\x92!"?g63?#\x9a\x99?\x1623?\\y7?\x0f33?\x8c\xaa*?\xbc\xdf.?\x9co\x15?\x83\xbb;?D\xfa??\x80\x89H?\xf8{Y?=\xab*?.i&?\xf5D\x84?\xa0qw?#\x99Y?\x83\xdf]?\x00\xb6\xaa?\xa6vw?\xaa\xfe\xbf?^!\x82?\xb6\xda]?\x90(\x11?^3\x93?\xdc\xef.?\x9f\x8aH?\x113\xb3?}-3?\x8b"b?\xee\x9aY?\x96\xdf.?\x1dW&?qx7?\xf0\xe7.?\x945D?\x84U\xb5?\x9a \x82?\xe7\xf0\x7f?+\xcf;?\x11\x0cQ?\xe8\xa4*?\x04?D?\xd2s\xb7?\x95yw?\xa6~&?\x0c\xca;?\x06/3?\xd1\x1f\x82?\x8b\xfc\x9f?\x17*s?\x8b\xef\xee?\x9e\xc9\xac?e\x1cb?)\xd9]?{XU?\xf3-\xe2?\x92\x10Q?\x95@D?\rvw?b#b?R\x8cH?\xe2\xc3*?\x92E\x84?\x8a\x81Y?\xd7\xde\xbd?Q\xf1.?A\x1d"?\xc7ED?[\xff\xdf?\xcb\xbd;?@\xf0.?\x9f\xd7\x8c?w\xefn?M\x1f\xa2? \x0eQ?\xd1\x9cY?\x94\xef.?O\\\x95?\xee?D?\xdd-D?[\xefn?d\x92Y?9pw?\xd9\x88w?2\xec.?\x99YU?g\xeen?\x8f\xab*?\x1e\xae*?\xa6oU?*\x89H?\x04\xde\x9d??\x1eb?Iy7?\xf9\xdc]?X\xf0.?\xb5\x89H?Q\x11Q?k\xac*?\xdc73?h\x98Y?e9b?\xed\xb5;?\xf0\x1eb?\x135s?%.3?\x9fUU?\x1e\xfa.?0\x11Q?;s7?z63?\xc6\x86H?\x12z7?\x8c\xb2Y?K\x89H?\xa9\x95\x19?\x8f\xe0]?v\x0cQ?\xe7\x84H?4\x87H?\x02\xa9\xaa?\xc0/3?c\x9aY?\x12\xad;?\xd1\xf9??;1"?\x9d\x97\x99?\x17\xaa\xea?K43?\xe5\x02@?R#\xe2?M33?i\xfe\x7f?\xd9bf?\x8fJ\x95?\xf7?\x84?\x16\xa2*?\xdf.3?\xcf\x99\x19?J\xdf]?[\xcbL?B~&?\xa9\x82H?p \x02@;^\x86?\x83`f?I5b?U\nQ?\xacn7?)\xfd\xbf?\x13\xb6;?\xba\xbc{?"\x11Q?K.3?+\xee\x8e?\xe0\xbaL?\xc3tw?\x9c\x9cj?t\x99Y?\x9a0\xb3?\xbb\xfa??\xfaff?\xd3DD?\x9e\xed.?F.D?\x99\xcc\x8c?\x9e3s?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\x10z\xc2\x04\x00x\xc2\x04h\xfc\x11\x05\xc0\xf5\x11\x05\xd8\xf2\x11\x05\x88\xfa\x11\x05\xf0\xf8\x11\x05\x18\xf8\x11\x05X\xf1\x11\x05\xa8\xfb\x11\x05\xa0\xfd\x11\x05H\xf2\x11\x05\x18\xfb\x11\x05\xa0\xfa\x11\x05 \xff\x11\x05\x10\xf7\x11\x05\x18\xfe\x11\x05\xd0\xfa\x11\x05\x08\xfc\x11\x05p\xf7\x11\x058\xff\x11\x05\x80\xfc\x11\x05\xc8\xff\x11\x05\xf0\xfe\x11\x05`\xf5\x11\x05\x90\xf8\x11\x05x\xfb\x11\x05h\xff\x11\x05\x90\xf2\x11\x05\x18\xf2\x11\x05\xb8\xfd\x11\x05\xd0\xf7\x11\x05\xe8\xf7\x11\x05@\xf1\x11\x05\xb0\xfc\x11\x05\xe0\xf0\x11\x05P\xf9\x11\x05\xc0\xfb\x11\x05\xe0\xfc\x11\x05\xd8\xf8\x11\x05 \xf3\x11\x05\xb8\xfa\x11\x05@\xfd\x11\x05\x88\xf1\x11\x05\xe0\xf6\x11\x05\xb0\xf3\x11\x05\xd0\xf4\x11\x05h\xf6\x11\x05X\xfd\x11\x050\xfe\x11\x05H\xfb\x11\x05\x90\xfe\x11\x05\xe0\xf3\x11\x05\x00\xf5\x11\x05h\xf3\x11\x05\xf0\xf2\x11\x05\x98\xfc\x11\x05\x90\xf5\x11\x05\x80\xff\x11\x05\x80\xf9\x11\x050\xf2\x11\x05`\xf8\x11\x05\xd8\xf5\x11\x05\x00\xf2\x11\x058\xf6\x11\x05\xb0\xf9\x11\x05\xf8\xfc\x11\x05\xa8\xf5\x11\x05\xc8\xfc\x11\x05\xd0\xf1\x11\x05p\xf1\x11\x05\x80\xf6\x11\x05X\xf4\x11\x05(\xfa\x11\x05\xa0\xf7\x11\x05@\xf4\x11\x05`\xf2\x11\x05x\xfe\x11\x05\x18\xf5\x11\x05h\xf9\x11\x05\xa8\xfe\x11\x05\xb8\xf7\x11\x05(\xf4\x11\x05h\xf0\x11\x05H\xfe+\x02\xe0\xf0+\x02@T\xe1\x04hS\xe1\x04(W\xe1\x04\xc8P\xe1\x04\xc8V\xe1\x04pW\xe1\x04\xf0X\xe1\x04pT\xe1\x04\xe8W\xe1\x04\xf8Y\xe1\x04\x88]\xe1\x04\x00R\xe1\x04\x88T\xe1\x04\x80 \xc1\x04\x18(\xc1\x04\xd0!\xc1\x04\x80,\xc1\x04P,\xc1\x04\xe0#\xc1\x04\xa8"\xc1\x04\x90"\xc1\x04\x08)\xc1\x04\xc0"\xc1\x04\xb0&\xc1\x04\xe0 \xc1\x04X$\xc1\x04\xe8-\xc1\x04\x88-\xc1\x04\xc0(\xc1\x04`%\xc1\x04x+\xc1\x04\xc0%\xc1\x04\x98&\xc1\x04P/\xc1\x04\xf0.\xc1\x04\x08,\xc1\x04\xa8+\xc1\x04`+\xc1\x048)\xc1\x04\x98/\xc1\x04h \xc1\x04p-\xc1\x04\xd8"\xc1\x04\xc8,\xc1\x04\xe0/\xc1\x04P \xc1\x04@-\xc1\x04\x80)\xc1\x04\x18"\xc1\x04\xa8.\xc1\x04\x00+\xc1\x04\x18+\xc1\x04X!\xc1\x04`(\xc1\x04\x08&\xc1\x04P)\xc1\x04\x00%\xc1\x04\xf0+\xc1\x04\xa0*\xc1\x04\x00.\xc1\x04(-\xc1\x04\xa0!\xc1\x04\x88*\xc1\x04\xe8*\xc1\x04\xa0\'\xc1\x04h&\xc1\x040"\xc1\x04x.\xc1\x04\x10*\xc1\x04\x88\'\xc1\x04\x80/\xc1\x04\xf8)\xc1\x048,\xc1\x04\x80&\xc1\x04\x90.\xc1\x04\x10-\xc1\x040.\xc1\x04\xb8\xf1\x11\x05\xe8\xfd\x11\x05\x10\xfd\x11\x05\xe8\xfa\x11\x05`\xfb\x11\x050\xf8\x11\x05\x08\xff\x11\x05\xb0\xf0\x11\x05\xf8\xf9\x11\x05 \xfc\x11\x05\xf8\xf3\x11\x05\x88\xfd\x11\x05\xf8\xf0\x11\x05X\xfa\x11\x05\xc8\xf3\x11\x05\xc8\xf6\x11\x05P\xfc\x11\x05\xb0\xff\x11\x05x\xf2\x11\x05(\xf7\x11\x05P\xf0\x11\x05\x90\xfb\x11\x05p\xf4\x11\x05X\xf7\x11\x05\xc8\xf9\x11\x05@\xfa\x11\x05\xb8\xf4\x11\x05\xa8\xf8\x11\x05P\xff\x11\x05p\xfd\x11\x05\x08\xf6\x11\x05\xf0\xfb\x11\x05H\xfe\x11\x05H\xf8\x11\x05\x98\xff\x11\x05\x08\xf9\x11\x05(\xfd\x11\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3766
sg3633
g3790
sg3647
g3760
sg3642
g3797
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3815
sg3633
g3805
sg3647
g3809
sg3642
g3813
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3743
sg3633
g3865
sg3647
g3750
sg3642
g3872
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3638
sg3633
g3880
sg3647
g3648
sg3642
g3887
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3815
sg3633
g3805
sg3647
g3809
sg3642
g3813
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3664
sg3633
g3972
sg3647
g3658
sg3642
g3979
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3815
sg3633
g4000
sg3647
g3809
sg3642
g4007
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3946
sg3633
g4032
sg3647
g3953
sg3642
g4039
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g4090
sg3633
g4086
sg3647
g4097
sg3642
g4094
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4143
sg3633
g4133
sg3647
g4137
sg3642
g4141
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g4107
sg3633
g4150
sg3647
g4114
sg3642
g4157
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3743
sg3633
g3865
sg3647
g3750
sg3642
g3872
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4195
sg3633
g4191
sg3647
g4202
sg3642
g4199
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3726
sg3633
g4221
sg3647
g3733
sg3642
g4228
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g4019
sg3633
g4236
sg3647
g4026
sg3642
g4243
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3946
sg3633
g4032
sg3647
g3953
sg3642
g4039
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3916
sg3633
g4264
sg3647
g3923
sg3642
g4271
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g4283
sg3633
g4279
sg3647
g4290
sg3642
g4287
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3899
sg3633
g4296
sg3647
g3906
sg3642
g4303
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3815
sg3633
g4000
sg3647
g3809
sg3642
g4007
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3726
sg3633
g4221
sg3647
g3733
sg3642
g4228
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g4195
sg3633
g4337
sg3647
g4202
sg3642
g4344
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4107
sg3633
g4150
sg3647
g4114
sg3642
g4157
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g4195
sg3633
g4337
sg3647
g4202
sg3642
g4344
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g4143
sg3633
g4133
sg3647
g4137
sg3642
g4141
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3664
sg3633
g3654
sg3647
g3658
sg3642
g3662
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3681
sg3633
g4469
sg3647
g3675
sg3642
g4476
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3709
sg3633
g4497
sg3647
g3716
sg3642
g4504
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g4143
sg3633
g4525
sg3647
g4137
sg3642
g4532
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g4090
sg3633
g4086
sg3647
g4097
sg3642
g4094
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3726
sg3633
g4221
sg3647
g3733
sg3642
g4228
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3766
sg3633
g3790
sg3647
g3760
sg3642
g3797
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g4090
sg3633
g4644
sg3647
g4097
sg3642
g4651
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g4019
sg3633
g4236
sg3647
g4026
sg3642
g4243
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3815
sg3633
g4000
sg3647
g3809
sg3642
g4007
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3726
sg3633
g4221
sg3647
g3733
sg3642
g4228
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g4283
sg3633
g4698
sg3647
g4290
sg3642
g4705
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4090
sg3633
g4086
sg3647
g4097
sg3642
g4094
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3815
sg3633
g3805
sg3647
g3809
sg3642
g3813
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g4283
sg3633
g4279
sg3647
g4290
sg3642
g4287
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3916
sg3633
g4264
sg3647
g3923
sg3642
g4271
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3743
sg3633
g3865
sg3647
g3750
sg3642
g3872
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3638
sg3633
g3880
sg3647
g3648
sg3642
g3887
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4107
sg3633
g4150
sg3647
g4114
sg3642
g4157
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3681
sg3633
g4469
sg3647
g3675
sg3642
g4476
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g4283
sg3633
g4698
sg3647
g4290
sg3642
g4705
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3783
sg3633
g4947
sg3647
g3777
sg3642
g4954
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3899
sg3633
g4296
sg3647
g3906
sg3642
g4303
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g4090
sg3633
g4086
sg3647
g4097
sg3642
g4094
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4019
sg3633
g4236
sg3647
g4026
sg3642
g4243
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3743
sg3633
g3865
sg3647
g3750
sg3642
g3872
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4195
sg3633
g4337
sg3647
g4202
sg3642
g4344
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3638
sg3633
g3880
sg3647
g3648
sg3642
g3887
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g4019
sg3633
g4236
sg3647
g4026
sg3642
g4243
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3681
sg3633
g4469
sg3647
g3675
sg3642
g4476
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4283
sg3633
g4698
sg3647
g4290
sg3642
g4705
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4090
sg3633
g4644
sg3647
g4097
sg3642
g4651
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3709
sg3633
g4497
sg3647
g3716
sg3642
g4504
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3692
sg3633
g5157
sg3647
g3699
sg3642
g5164
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4090
sg3633
g4644
sg3647
g4097
sg3642
g4651
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3899
sg3633
g4296
sg3647
g3906
sg3642
g4303
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3709
sg3633
g4497
sg3647
g3716
sg3642
g4504
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3916
sg3633
g4264
sg3647
g3923
sg3642
g4271
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3852
sg3633
g5289
sg3647
g3859
sg3642
g5296
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3783
sg3633
g4947
sg3647
g3777
sg3642
g4954
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3664
sg3633
g3972
sg3647
g3658
sg3642
g3979
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4143
sg3633
g4133
sg3647
g4137
sg3642
g4141
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3766
sg3633
g3790
sg3647
g3760
sg3642
g3797
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3743
sg3633
g3865
sg3647
g3750
sg3642
g3872
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3709
sg3633
g4497
sg3647
g3716
sg3642
g4504
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g4107
sg3633
g4150
sg3647
g4114
sg3642
g4157
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4195
sg3633
g4337
sg3647
g4202
sg3642
g4344
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g4283
sg3633
g4279
sg3647
g4290
sg3642
g4287
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4195
sg3633
g4191
sg3647
g4202
sg3642
g4199
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3692
sg3633
g5157
sg3647
g3699
sg3642
g5164
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3852
sg3633
g5289
sg3647
g3859
sg3642
g5296
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3664
sg3633
g3972
sg3647
g3658
sg3642
g3979
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g4143
sg3633
g4525
sg3647
g4137
sg3642
g4532
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3766
sg3633
g3790
sg3647
g3760
sg3642
g3797
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3692
sg3633
g5157
sg3647
g3699
sg3642
g5164
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3852
sg3633
g5289
sg3647
g3859
sg3642
g5296
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g4090
sg3633
g4644
sg3647
g4097
sg3642
g4651
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3815
sg3633
g3805
sg3647
g3809
sg3642
g3813
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3783
sg3633
g4947
sg3647
g3777
sg3642
g4954
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g4143
sg3633
g4525
sg3647
g4137
sg3642
g4532
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3726
sg3633
g4221
sg3647
g3733
sg3642
g4228
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g4195
sg3633
g4191
sg3647
g4202
sg3642
g4199
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3815
sg3633
g4000
sg3647
g3809
sg3642
g4007
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3766
sg3633
g3790
sg3647
g3760
sg3642
g3797
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4019
sg3633
g4236
sg3647
g4026
sg3642
g4243
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g4283
sg3633
g4279
sg3647
g4290
sg3642
g4287
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3638
sg3633
g3880
sg3647
g3648
sg3642
g3887
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3852
sg3633
g5289
sg3647
g3859
sg3642
g5296
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g4090
sg3633
g4644
sg3647
g4097
sg3642
g4651
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3946
sg3633
g4032
sg3647
g3953
sg3642
g4039
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g4195
sg3633
g4191
sg3647
g4202
sg3642
g4199
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3709
sg3633
g4497
sg3647
g3716
sg3642
g4504
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3664
sg3633
g3972
sg3647
g3658
sg3642
g3979
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3681
sg3633
g4469
sg3647
g3675
sg3642
g4476
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g4283
sg3633
g4698
sg3647
g4290
sg3642
g4705
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3815
sg3633
g3805
sg3647
g3809
sg3642
g3813
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3946
sg3633
g4032
sg3647
g3953
sg3642
g4039
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3638
sg3633
g3880
sg3647
g3648
sg3642
g3887
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3916
sg3633
g4264
sg3647
g3923
sg3642
g4271
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g4283
sg3633
g4698
sg3647
g4290
sg3642
g4705
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3815
sg3633
g4000
sg3647
g3809
sg3642
g4007
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g4143
sg3633
g4525
sg3647
g4137
sg3642
g4532
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4195
sg3633
g4337
sg3647
g4202
sg3642
g4344
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3783
sg3633
g4947
sg3647
g3777
sg3642
g4954
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3766
sg3633
g3756
sg3647
g3760
sg3642
g3764
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3899
sg3633
g4296
sg3647
g3906
sg3642
g4303
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g4143
sg3633
g4133
sg3647
g4137
sg3642
g4141
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4283
sg3633
g4279
sg3647
g4290
sg3642
g4287
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4143
sg3633
g4133
sg3647
g4137
sg3642
g4141
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3916
sg3633
g4264
sg3647
g3923
sg3642
g4271
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g4107
sg3633
g4103
sg3647
g4114
sg3642
g4111
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3946
sg3633
g4032
sg3647
g3953
sg3642
g4039
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3664
sg3633
g3972
sg3647
g3658
sg3642
g3979
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3783
sg3633
g4947
sg3647
g3777
sg3642
g4954
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3899
sg3633
g4296
sg3647
g3906
sg3642
g4303
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3681
sg3633
g4469
sg3647
g3675
sg3642
g4476
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g4143
sg3633
g4525
sg3647
g4137
sg3642
g4532
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g4090
sg3633
g4086
sg3647
g4097
sg3642
g4094
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4107
sg3633
g4150
sg3647
g4114
sg3642
g4157
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3692
sg3633
g5157
sg3647
g3699
sg3642
g5164
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3852
sg3633
g5289
sg3647
g3859
sg3642
g5296
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3692
sg3633
g5157
sg3647
g3699
sg3642
g5164
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g4195
sg3633
g4191
sg3647
g4202
sg3642
g4199
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3899
sg3633
g3895
sg3647
g3906
sg3642
g3903
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3783
sg3633
g3773
sg3647
g3777
sg3642
g3781
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I84795728
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\x90+\x04\x1f\xc0+\x04\x1f\xc8"\x05\x1f\x80$\x05\x1f0\x03\x05\x1f\x18#\x05\x1f\xa0\x03\x05\x1f@#\x05\x1f \x11\x05\x1fh#\x05\x1f\x18#\x05\x1f \x11\x05\x1f\xe0,\x04\x1f\xc0+\x04\x1f0\x03\x05\x1f\xf0+\x04\x1f\x90+\x04\x1f\xf0+\x04\x1f\xb8#\x05\x1f\xa0\x03\x05\x1fp-\x04\x1f@#\x05\x1fh\x03\x05\x1f\xa0\x11\x05\x1f\xf0+\x04\x1f\xc8"\x05\x1f \x11\x05\x1f\xe0#\x05\x1f\x90#\x05\x1f\x08$\x05\x1fP,\x04\x1f\xa0\x11\x05\x1f@\x11\x05\x1f\xc8"\x05\x1f\x18#\x05\x1f0$\x05\x1f@\x11\x05\x1f\xc0\x11\x05\x1f\xf0"\x05\x1f\xc0+\x04\x1fh\x03\x05\x1f\xf0"\x05\x1f@\x11\x05\x1f ,\x04\x1f@\x11\x05\x1f\xb8#\x05\x1fh\x03\x05\x1f`\x11\x05\x1fP,\x04\x1f@\x11\x05\x1fP,\x04\x1f\x90+\x04\x1f\x90#\x05\x1f\xe0#\x05\x1f@#\x05\x1f\x08$\x05\x1fh#\x05\x1f0$\x05\x1fP,\x04\x1f\xc8"\x05\x1f0\x03\x05\x1f`\x11\x05\x1f ,\x04\x1f0\x03\x05\x1f\x18#\x05\x1f\x90#\x05\x1f ,\x04\x1f\xe0#\x05\x1fh\x03\x05\x1f\xd8\x03\x05\x1f\x80\x04\x05\x1f\xa0\x03\x05\x1fh#\x05\x1f\x90#\x05\x1f\xc8"\x05\x1f0\x03\x05\x1f\xc0+\x04\x1f\xb8#\x05\x1f\xf8$\x05\x1f %\x05\x1f`\x11\x05\x1f\xa0-\x04\x1f@#\x05\x1f@-\x04\x1f ,\x04\x1f\x08$\x05\x1f\x18#\x05\x1f ,\x04\x1fh#\x05\x1f\x10\x04\x05\x1f\x90#\x05\x1f \x11\x05\x1fP,\x04\x1f@#\x05\x1f\xf0+\x04\x1f\x80$\x05\x1f\x08$\x05\x1f\xc8"\x05\x1f@\x11\x05\x1f\x08$\x05\x1f\x10\x04\x05\x1f0$\x05\x1f\xe0#\x05\x1fH\x04\x05\x1f\x18#\x05\x1fh\x03\x05\x1f\x80\x04\x05\x1f\x18#\x05\x1f0$\x05\x1f\xf0+\x04\x1f\xf8$\x05\x1f\xf0+\x04\x1f@\x11\x05\x1f\xa0\x11\x05\x1f\xe0#\x05\x1f\x08$\x05\x1f\xc0+\x04\x1f\xa8$\x05\x1f0$\x05\x1f\x90#\x05\x1f\xc0\x11\x05\x1f\xa0\x03\x05\x1f\xf0+\x04\x1f\xc0\x11\x05\x1fP,\x04\x1f\xf0"\x05\x1f\x18#\x05\x1f\xf0"\x05\x1f\xa0\x11\x05\x1f\xc0+\x04\x1f@\x11\x05\x1f\xb8#\x05\x1fh#\x05\x1f ,\x04\x1f`\x11\x05\x1fH\x04\x05\x1fh#\x05\x1f\xc8"\x05\x1fh#\x05\x1fP,\x04\x1f\x80$\x05\x1f \x11\x05\x1f0$\x05\x1f\x90#\x05\x1f\x80\x04\x05\x1f0\x03\x05\x1f\xc0+\x04\x1f\x80\x04\x05\x1f\xf0+\x04\x1f\xa8$\x05\x1fh\x03\x05\x1f\x18#\x05\x1f\xc0+\x04\x1f ,\x04\x1f\xc8"\x05\x1f\xf0"\x05\x1f0\x03\x05\x1f\x08$\x05\x1f\xb8#\x05\x1fP,\x04\x1f@#\x05\x1f ,\x04\x1f\x80\x04\x05\x1f@-\x04\x1f\xc8"\x05\x1f\x90#\x05\x1f\xf0"\x05\x1f\xb8#\x05\x1f\x08$\x05\x1f`\x11\x05\x1f \x11\x05\x1f@#\x05\x1f\xf8$\x05\x1fh#\x05\x1f@#\x05\x1f\xe0#\x05\x1fh\x03\x05\x1f0$\x05\x1f\xf0+\x04\x1f\x18#\x05\x1f\xb8#\x05\x1fh\x03\x05\x1fh#\x05\x1f\x90+\x04\x1f\xf0"\x05\x1f\xb8#\x05\x1f0\x03\x05\x1f ,\x04\x1fP,\x04\x1f@#\x05\x1f\x90+\x04\x1f\x80,\x04\x1f\xc8"\x05\x1f %\x05\x1f\xe0,\x04\x1f\xe0#\x05\x1f\x90+\x04\x1f@#\x05\x1f\xf0+\x04\x1f\xc0+\x04\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'\xa0\r\xe4\x1e`\x12\x05\x1f\x00\x13\x05\x1f \x13\x05\x1f\xa0\x13\x05\x1f`\x13\x05\x1f\xe0\x13\x05\x1f\x80\x12\x05\x1f\x00\x14\x05\x1f@\x14\x05\x1f`\x14\x05\x1f\x80\x14\x05\x1f\xa0\x14\x05\x1f\xc0\x14\x05\x1f\xe0\x12\x05\x1f\x00\x15\x05\x1f \x15\x05\x1f\x00\x12\x05\x1f\xc0\x13\x05\x1f\x80\x15\x05\x1f`\x15\x05\x1f\xe0\x11\x05\x1f\xe0\x15\x05\x1f\x00\x16\x05\x1f\x80\x13\x05\x1f@\x16\x05\x1f`\x16\x05\x1f\xe0\x14\x05\x1f\xa0\x16\x05\x1f\x80\x16\x05\x1f \x12\x05\x1f\x00\x17\x05\x1f\xe0\x16\x05\x1f@\x12\x05\x1f \x17\x05\x1f\x80\x17\x05\x1f`\x17\x05\x1f \x16\x05\x1f\xa0\x17\x05\x1f\xc0\x17\x05\x1f \x18\x05\x1f\x00\x18\x05\x1f\xc0\x15\x05\x1f@\x18\x05\x1f`\x18\x05\x1f\xc0\x18\x05\x1f\xa0\x18\x05\x1f\x00\x19\x05\x1f\xe0\x18\x05\x1f@\x19\x05\x1f \x19\x05\x1f@\x15\x05\x1f`\x19\x05\x1f\xc0\x19\x05\x1f\xa0\x19\x05\x1f \x14\x05\x1f\xa0\x12\x05\x1f@\x13\x05\x1f\xa0\x15\x05\x1f\xa0\x1a\x05\x1f\xc0\x16\x05\x1f\xc0\x12\x05\x1f\x80\x18\x05\x1f\x00\x1a\x05\x1f@\x17\x05\x1f\xe0\x1a\x05\x1f \x1b\x05\x1f@\x1a\x05\x1f\xa0\x1b\x05\x1f\x80\x1b\x05\x1f\xe0\x1b\x05\x1f\xc0\x1b\x05\x1f \x1c\x05\x1f\x00\x1c\x05\x1f\x80\x19\x05\x1f@\x1c\x05\x1f\xa0\x1c\x05\x1f\x80\x1c\x05\x1f\xe0\x1c\x05\x1f\xc0\x1c\x05\x1f \x1d\x05\x1f\xe0\x0e\xe4\x1e`\x1c\x05\x1f\x80\x1a\x05\x1f\x80\x1d\x05\x1f \x1e\x05\x1f\xe0\x17\x05\x1f\xc0\x1a\x05\x1f@\x1e\x05\x1f\xa0\x1e\x05\x1f\xc0\x1e\x05\x1f \x1a\x05\x1f\xa0\x1d\x05\x1f\x00\x1e\x05\x1f\xc0\x1d\x05\x1f\x80\x1f\x05\x1f\x00\x1d\x05\x1f@\x1f\x05\x1f`\x1d\x05\x1f`\x1f\x05\x1f\x00\x1b\x05\x1f\xe0\x1f\x05\x1f\xe0\x1d\x05\x1f\xc0\x1f\x05\x1f@\x1b\x05\x1f \x1f\x05\x1f`\x1b\x05\x1f`\x1e\x05\x1f\xa0\x1f\x05\x1f\xe0\x19\x05\x1f@\x1d\x05\x1f\x80\x1e\x05\x1f\xe0\x1e\xbe\x1e\xe0\x1e\x05\x1f@\xa2,\x1f \xa2,\x1f\xc0\xa0,\x1f@\xa1,\x1f\x00\xa2,\x1f\xe0\xa0,\x1f`\xa0,\x1f\x00\xa1,\x1f@\xa0,\x1f\xc0\xa2,\x1f\xa0\xa2,\x1f\x80\xa2,\x1f`\x1a\x05\x1f\xc0\xa1,\x1f \xa1,\x1f\xa0\xa3,\x1f \xa0,\x1f\x00\xa3,\x1f\xe0\xa3,\x1f`\xa1,\x1f`\xa3,\x1f\x80\xa4,\x1f\xa0\xa4,\x1f\xc0\xa4,\x1f\x80\xa3,\x1f \xa4,\x1f@\xa5,\x1f\x00\x1f\x05\x1f\xa0\xa0,\x1f\x80\xa5,\x1f\xe0\xa2,\x1f\xe0\xa1,\x1f@\xa4,\x1f`\xa4,\x1f`\xa2,\x1f@\xa3,\x1f\x80\xa6,\x1f\x80\xa1,\x1f`\xa5,\x1f\xe0\xa4,\x1f\xe0\xa5,\x1f \xa7,\x1f\x00\xa4,\x1f\xc0\xa3,\x1f\x00\xa7,\x1f\xc0\xa6,\x1f\x00\xa5,\x1f \xa6,\x1f\xa0\xa1,\x1f\xa0\xa6,\x1f\xc0\xa5,\x1f\x00\xa8,\x1f\xa0\xa7,\x1f\xc0\xa8,\x1f\x80\xa7,\x1f\xe0\xa8,\x1f\xe0\xa6,\x1f\xa0\xa8,\x1f`\xa9,\x1f\x80\xa8,\x1f\xc0\xa7,\x1f\xc0\xa9,\x1f@\xa8,\x1f\xe0\xa7,\x1f\x00\xa9,\x1f\x00\xa6,\x1f`\xaa,\x1f \xa5,\x1f\x80\xaa,\x1f`\xa6,\x1f\xa0\xa5,\x1f\xc0\xaa,\x1f@\xa7,\x1f \xaa,\x1f\xa0\xa9,\x1f\x00\xab,\x1f`\xab,\x1f \xa9,\x1f@\xa9,\x1f@\xa6,\x1f@\xab,\x1f`\xa8,\x1f\x80\xab,\x1f\x80\xa9,\x1f\xa0\xac,\x1f \xa8,\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xaa\x80H?J\x18Q?\x1c\xbc{?\xabg&?2\x8fY?;\x8aH?5\xd8\x1d?Q\xbc;?\xff\x95Y?\xaa%b?\xc7ID?\xe7}f?\x04\x98Y?U?D?\x19\x18b?\x7f\xec.?Ib&?\xcdv7?\xec\xdd.?\xb4V\x15?\x11\x0cQ?\xd6z7?b\xb9\x9b?\xe0\x89H?P\x9aY?L\xab*?\x98gf?\xf3R\x15?j5s?\xeb}f?n\xde]?\x11\xdb]?\xdd\xe7.?w\xcdL?k\xbb;?\xb3\xf2n?+\xed.?\x08\x1fb?I\x9b\x19?\xea\xaa\x8a?\xce\xb4{?\x88\x07/?\x8d#"?_\xa9*?\xca\xf4\xff>&\x11b?\xd0\x10\x11?\xe6!\x82?\xcd\xcc\x8c?4\x9a\x19?\xb5\xe0\x1d?\xbc\x18"?\xc6b&?\xe8!b?\x0e\xefn?H\xfc??\x17\x98Y?\xae`f?\xda43?2#"?a:D?\x1c\x96Y?\x9a/3?H\xb6;?P\x87H?\t,Q?\x18 \x82?l\x11\x91?\xb1\xe4;?HFD?\xf7x7?\xaa\xf0.?\x81\xa8\x8a?|\xef\x8e?\x18\x00@?\xc5\x1ab?\xa8DD?\x9cgw?\xdb\x85H?7\xff??G(b?\xf5\xac;?5\xfa??CFU?\x95h&?mgf?2q7?-\xef\x8e?\xb5\xab*?\x1b#b?\xb8\xa8j?[\xb6;? ED?\xdc\xe9.?x\x00\x80?\x15\x05@?\xbe\xab*?;\xbd;?,/3?Ltw?\xa7\x15\x91?[;s?\xd2\x83H?\xbd43?\r\x89H?\xe6\xb6;?\x82UU?\xc0\xfc\x0f@\xc9\x0fQ?\xda\x0eQ?\xfa+s?\x10\xa8j?\xbfpw?~\xf6\x8e?A\xf9\x9f?\xe7SU?}\xfb\xff?\xfe\xc5L?w\xf3n?\xccU\x95?\xba\xcdL?\x16CD?L\xee\x8e?\xb9PU?\xb4CD?\xc2\xd7]?\xb2\xce]?V\xb6;?\x1f\xb7;?\xe1\x94\x88?\xbe\x1d"?\xf0qH?u\xf0.?\x10\x95Y?\xc1\xaa*?%\xb1\x19?\xe2/3?=\x9cY?fww?hc\x86?\x93\xf6\xae?\xe6F\x15?\xb2c\x86?\x13\xeb\x8e?\x9d\xa9j?\xcd>\x93?\x974s?v\x8bH?\x1b\x8f7?"\x1e"?\x83\x99Y?\xc9*Q?\x1bE\x84?\xaes7?\xf2\nQ?\x8c/3?\t\x81H?\xe1(Q?\xfd\x16\x82?\xf6\xf2.?\xd2\x13Q?\x00\xba;?\xda\x12Q?\x8a\xd3L?, \x82?\xed4s?\xaa3\x93?\x19\xe6\x8e?\xb5\x9cY?\xccgf?\xe2\x0bQ?\xd8f&?<\x12Q?\xa8\xc3L?\xafm&?6\x84H?]\xceL?]\xbd;?X\xa6j?\x9b\xbd;?Rh7?\x92\x10Q?}\x0bQ?3\xea.?%i&?\xec\x95*?\xbd\x93Y?s5s?\x14uw?\x0fDD?\xdf!\x82?M\xbfL?\x13$b?\x8d\xa2\xaa?\x17\xbb\xbb?T\x00\xa0?J\xde\x9d?\x9fC\x84?h1\x93?4\xef.?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'`.\xc1\x04p!\xc1\x040\x9b\xc2\x04p\x91\xc2\x04\xc8\x9c\xc2\x04H\x9e\xc2\x04\xf0\x9e\xc2\x04x\x9b\xc2\x04\x10\x9d\xc2\x04\x10\x97\xc2\x040\x98\xc2\x04\x00\x9e\xc2\x04 \x99\xc2\x04\x90\x95\xc2\x04\x80\x93\xc2\x04`\x98\xc2\x04 \x9f\xc2\x04\xa8\x9e\xc2\x04X\x9d\xc2\x04x\x9e\xc2\x04(\x9a\xc2\x04X\x97\xc2\x04\xf8\x96\xc2\x04\x88\x91\xc2\x04\xb0\x9c\xc2\x04h\x99\xc2\x04\xb0\x99\xc2\x04p\x94\xc2\x04\x80\x96\xc2\x04\x08\x99\xc2\x04\x80\x9f\xc2\x040\x9e\xc2\x04\x00\x9b\xc2\x04\xc8\x99\xc2\x04\xa0\x9d\xc2\x04 \x9c\xc2\x04\x90\x9b\xc2\x048\x9f\xc2\x04\xb0\x9f\xc2\x04h\x9c\xc2\x04\x18\x9b\xc2\x04x\x95\xc2\x04\x18\x9b\xf6\x04\xc8\x99\xf6\x04P\x90\xf6\x04`\x92\xf6\x04\xb8\x94\xf6\x04(\x91\xf6\x04\xa8\x92\xf6\x04\xf8\x93\xf6\x04(\x9a\xf6\x04 \x96\xf6\x04h\x99\xf6\x04\xb0\x93\xf6\x04\xc0\x98\xf6\x04\x08\x96\xf6\x04\x00\x98\xf6\x04H\x9e\xf6\x04\x88\x9a\xf6\x04@\x94\xf6\x04h\x93\xf6\x04\xb8\x91\xf6\x04\x08\x93\xf6\x04\xe8\x94\xf6\x04\x08\x9c\xf6\x04\x80\x90\xf6\x04x\x98\xf6\x04\xf8\x99\xf6\x04X\x91\xf6\x04\x08\x99\xf6\x04\xf8\x96\xf6\x04\xd0\x9d\xf6\x04`\x98\xf6\x04h\x90\xf6\x04\xd0\x91\xf6\x04\xd0\x97\xf6\x04x\x92\xf6\x04\x90\x95\xf6\x04h\x9f\xf6\x04H\x98\xc2\x04\xd8\x92\xc2\x04\x98\x9c\xc2\x04p\x9a\xc2\x04\xb8\x94\xc2\x04\xb0\x93\xc2\x04\x18\x95\xc2\x04\xc0\x9e\xc2\x04\x18\x98\xc2\x04\xc8\x9f\xc2\x048\x99\xc2\x04\xf0\x98\xc2\x04\x00\x92\xc2\x04\x98\x99\xc2\x04\x90\x9e\xc2\x04\xa8\x9b\xc2\x04`\x95\xc2\x04P\x90\xc2\x04\xd8\x9e\xc2\x04\x88\x9d\xc2\x04\xc0\x98\xc2\x04(\x97\xc2\x04\xd0\x91\xc2\x04P\x9f\xc2\x04(\x9d\xc2\x04\xd0\x97\xc2\x04\x00\x98\xc2\x04\x10\x91\xc2\x04\xf8\x99\xc2\x04h\x9f\xc2\x04@\x9d\xc2\x04\xf8\x9c\xc2\x04\xc0\x95\xc2\x04X\x9a\xc2\x04p\x9d\xc2\x04\xd8\x98\xc2\x04H\x95\xc2\x04h\x93\xc2\x04\x10\x9a\xc2\x04\x80\x9c\xc2\x04\xd8\x9b\xc2\x04\x88\x97\xc2\x04\xc8\x96\xc2\x04H\x9b\xc2\x04\xe0\x93\xc2\x04\xd0\x94\xc2\x04\xb8\x91\xc2\x048\x90\xc2\x04`\x92\xc2\x04\xe0\x90\xc2\x04X\x94\xc2\x04 \x93\xc2\x04P\x99\xc2\x04P\x93\xc2\x040\x95\xc2\x04@\x91\xc2\x04\x90\x98\xc2\x04\xf8\x93\xc2\x04\xe0\x9f\xc2\x04\xc8\x93\xc2\x04\x88\x94\xc2\x04\x80\x90\xc2\x04\xb0\x90\xc2\x04\x98\x93\xc2\x04\x08\x96\xc2\x04\x98\x96\xc2\x04@\x94\xc2\x04`\x9b\xc2\x04\xf0\x9b\xc2\x04P\x96\xc2\x04\x08\x9c\xc2\x04\xb8\x9a\xc2\x04\xc0\x9b\xc2\x040\x92\xc2\x04P\x9c\xc2\x04\xf0\x92\xc2\x04h\x90\xc2\x04\xf8\x90\xc2\x04\xa0\x94\xc2\x04\xa8\x92\xc2\x048\x96\xc2\x04@\x97\xc2\x04(\x94\xc2\x04\x00\x95\xc2\x04\x80\x99\xc2\x04\xd0\x9d\xc2\x04\xe8\x94\xc2\x04(\x91\xc2\x04\xd0\x9a\xc2\x04\xe0\x96\xc2\x04\x18\x9e\xc2\x04\xc0\x92\xc2\x04\xe0\x99\xc2\x04X\x91\xc2\x04\x88\x9a\xc2\x04h\x96\xc2\x04 \x90\xc2\x04x\x98\xc2\x04 \x96\xc2\x04x\x92\xc2\x04\x98\x9f\xc2\x04\x90\x92\xc2\x04\xe8\x91\xc2\x04\xa8\x95\xc2\x04\xa0\x97\xc2\x04\xe8\x9a\xc2\x04\xb0\x96\xc2\x04\xb8\x9d\xc2\x04\xe8\x97\xc2\x04\xd8\x95\xc2\x04\x08\x93\xc2\x04\xc8\x90\xc2\x04\xa8\x98\xc2\x04\x18\x92\xc2\x048\x9c\xc2\x04\x08\x9f\xc2\x04\xa0\x91\xc2\x04`\x9e\xc2\x04\xa0\x9a\xc2\x04@\x9a\xc2\x04\x98\x90\xc2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6436
sg6371
g6426
sg6385
g6430
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6464
sg6371
g6541
sg6385
g6471
sg6380
g6548
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6511
sg6371
g6556
sg6385
g6518
sg6380
g6563
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6581
sg6371
g6571
sg6385
g6575
sg6380
g6579
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6396
sg6371
g6588
sg6385
g6403
sg6380
g6595
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6447
sg6371
g6603
sg6385
g6454
sg6380
g6610
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6622
sg6371
g6648
sg6385
g6629
sg6380
g6655
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6703
sg6371
g6693
sg6385
g6697
sg6380
g6701
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6494
sg6371
g6710
sg6385
g6501
sg6380
g6717
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6511
sg6371
g6556
sg6385
g6518
sg6380
g6563
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6581
sg6371
g6571
sg6385
g6575
sg6380
g6579
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6828
sg6371
g6824
sg6385
g6835
sg6380
g6832
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6875
sg6371
g6871
sg6385
g6882
sg6380
g6879
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6875
sg6371
g6933
sg6385
g6882
sg6380
g6940
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6920
sg6371
g6948
sg6385
g6927
sg6380
g6955
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6436
sg6371
g6426
sg6385
g6430
sg6380
g6434
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6396
sg6371
g6588
sg6385
g6403
sg6380
g6595
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6729
sg6371
g6989
sg6385
g6736
sg6380
g6996
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6436
sg6371
g7004
sg6385
g6430
sg6380
g7011
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6875
sg6371
g6933
sg6385
g6882
sg6380
g6940
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6703
sg6371
g6693
sg6385
g6697
sg6380
g6701
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6875
sg6371
g6871
sg6385
g6882
sg6380
g6879
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6667
sg6371
g7058
sg6385
g6674
sg6380
g7065
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6729
sg6371
g6989
sg6385
g6736
sg6380
g6996
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g7090
sg6371
g7086
sg6385
g7097
sg6380
g7094
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6845
sg6371
g7103
sg6385
g6852
sg6380
g7110
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6875
sg6371
g6933
sg6385
g6882
sg6380
g6940
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6845
sg6371
g7103
sg6385
g6852
sg6380
g7110
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6376
sg6371
g7144
sg6385
g6386
sg6380
g7151
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6581
sg6371
g7159
sg6385
g6575
sg6380
g7166
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6494
sg6371
g6710
sg6385
g6501
sg6380
g6717
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6828
sg6371
g6824
sg6385
g6835
sg6380
g6832
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6528
sg6371
g7213
sg6385
g6535
sg6380
g7220
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6920
sg6371
g6948
sg6385
g6927
sg6380
g6955
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g7090
sg6371
g7280
sg6385
g7097
sg6380
g7287
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6703
sg6371
g7295
sg6385
g6697
sg6380
g7302
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6447
sg6371
g6603
sg6385
g6454
sg6380
g6610
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6464
sg6371
g6541
sg6385
g6471
sg6380
g6548
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6581
sg6371
g6571
sg6385
g6575
sg6380
g6579
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6703
sg6371
g6693
sg6385
g6697
sg6380
g6701
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6798
sg6371
g7362
sg6385
g6805
sg6380
g7369
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6729
sg6371
g6989
sg6385
g6736
sg6380
g6996
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6528
sg6371
g7213
sg6385
g6535
sg6380
g7220
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g7090
sg6371
g7086
sg6385
g7097
sg6380
g7094
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6376
sg6371
g7144
sg6385
g6386
sg6380
g7151
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6581
sg6371
g7159
sg6385
g6575
sg6380
g7166
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6798
sg6371
g7362
sg6385
g6805
sg6380
g7369
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6828
sg6371
g6824
sg6385
g6835
sg6380
g6832
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g7090
sg6371
g7086
sg6385
g7097
sg6380
g7094
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6703
sg6371
g6693
sg6385
g6697
sg6380
g6701
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6828
sg6371
g7598
sg6385
g6835
sg6380
g7605
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6464
sg6371
g6541
sg6385
g6471
sg6380
g6548
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6703
sg6371
g6693
sg6385
g6697
sg6380
g6701
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6729
sg6371
g6989
sg6385
g6736
sg6380
g6996
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6581
sg6371
g6571
sg6385
g6575
sg6380
g6579
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6511
sg6371
g6556
sg6385
g6518
sg6380
g6563
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6494
sg6371
g6710
sg6385
g6501
sg6380
g6717
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6622
sg6371
g6648
sg6385
g6629
sg6380
g6655
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6436
sg6371
g7004
sg6385
g6430
sg6380
g7011
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6828
sg6371
g7598
sg6385
g6835
sg6380
g7605
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6875
sg6371
g6871
sg6385
g6882
sg6380
g6879
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6828
sg6371
g6824
sg6385
g6835
sg6380
g6832
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6920
sg6371
g6948
sg6385
g6927
sg6380
g6955
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6875
sg6371
g6871
sg6385
g6882
sg6380
g6879
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6729
sg6371
g6989
sg6385
g6736
sg6380
g6996
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g7090
sg6371
g7086
sg6385
g7097
sg6380
g7094
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6798
sg6371
g7362
sg6385
g6805
sg6380
g7369
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6875
sg6371
g6933
sg6385
g6882
sg6380
g6940
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6828
sg6371
g7598
sg6385
g6835
sg6380
g7605
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6447
sg6371
g6603
sg6385
g6454
sg6380
g6610
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6581
sg6371
g7159
sg6385
g6575
sg6380
g7166
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6920
sg6371
g6948
sg6385
g6927
sg6380
g6955
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6376
sg6371
g7144
sg6385
g6386
sg6380
g7151
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6845
sg6371
g7103
sg6385
g6852
sg6380
g7110
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6436
sg6371
g7004
sg6385
g6430
sg6380
g7011
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6464
sg6371
g6541
sg6385
g6471
sg6380
g6548
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6436
sg6371
g6426
sg6385
g6430
sg6380
g6434
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6511
sg6371
g6556
sg6385
g6518
sg6380
g6563
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6875
sg6371
g6871
sg6385
g6882
sg6380
g6879
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6667
sg6371
g7058
sg6385
g6674
sg6380
g7065
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6703
sg6371
g7295
sg6385
g6697
sg6380
g7302
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g7090
sg6371
g7086
sg6385
g7097
sg6380
g7094
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6875
sg6371
g6933
sg6385
g6882
sg6380
g6940
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6528
sg6371
g7213
sg6385
g6535
sg6380
g7220
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6528
sg6371
g7213
sg6385
g6535
sg6380
g7220
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6845
sg6371
g7103
sg6385
g6852
sg6380
g7110
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6436
sg6371
g6426
sg6385
g6430
sg6380
g6434
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6581
sg6371
g7159
sg6385
g6575
sg6380
g7166
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g7090
sg6371
g7280
sg6385
g7097
sg6380
g7287
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6447
sg6371
g6603
sg6385
g6454
sg6380
g6610
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g7090
sg6371
g7280
sg6385
g7097
sg6380
g7287
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6622
sg6371
g6648
sg6385
g6629
sg6380
g6655
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6396
sg6371
g6588
sg6385
g6403
sg6380
g6595
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6703
sg6371
g7295
sg6385
g6697
sg6380
g7302
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6436
sg6371
g6426
sg6385
g6430
sg6380
g6434
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6828
sg6371
g6824
sg6385
g6835
sg6380
g6832
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6845
sg6371
g7103
sg6385
g6852
sg6380
g7110
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6703
sg6371
g7295
sg6385
g6697
sg6380
g7302
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g7090
sg6371
g7280
sg6385
g7097
sg6380
g7287
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6667
sg6371
g6663
sg6385
g6674
sg6380
g6671
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6581
sg6371
g6571
sg6385
g6575
sg6380
g6579
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6436
sg6371
g7004
sg6385
g6430
sg6380
g7011
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6667
sg6371
g7058
sg6385
g6674
sg6380
g7065
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6828
sg6371
g7598
sg6385
g6835
sg6380
g7605
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g7090
sg6371
g7280
sg6385
g7097
sg6380
g7287
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6511
sg6371
g6556
sg6385
g6518
sg6380
g6563
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6798
sg6371
g7362
sg6385
g6805
sg6380
g7369
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6528
sg6371
g7213
sg6385
g6535
sg6380
g7220
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6798
sg6371
g7362
sg6385
g6805
sg6380
g7369
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6920
sg6371
g6948
sg6385
g6927
sg6380
g6955
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6622
sg6371
g6648
sg6385
g6629
sg6380
g6655
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6464
sg6371
g6541
sg6385
g6471
sg6380
g6548
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6667
sg6371
g7058
sg6385
g6674
sg6380
g7065
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6376
sg6371
g7144
sg6385
g6386
sg6380
g7151
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6436
sg6371
g7004
sg6385
g6430
sg6380
g7011
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6667
sg6371
g7058
sg6385
g6674
sg6380
g7065
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6447
sg6371
g6603
sg6385
g6454
sg6380
g6610
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6703
sg6371
g7295
sg6385
g6697
sg6380
g7302
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6494
sg6371
g6710
sg6385
g6501
sg6380
g6717
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6376
sg6371
g7144
sg6385
g6386
sg6380
g7151
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6396
sg6371
g6588
sg6385
g6403
sg6380
g6595
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6413
sg6371
g6888
sg6385
g6420
sg6380
g6895
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6828
sg6371
g7598
sg6385
g6835
sg6380
g7605
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6581
sg6371
g7159
sg6385
g6575
sg6380
g7166
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6494
sg6371
g6710
sg6385
g6501
sg6380
g6717
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6622
sg6371
g6648
sg6385
g6629
sg6380
g6655
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6396
sg6371
g6588
sg6385
g6403
sg6380
g6595
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.