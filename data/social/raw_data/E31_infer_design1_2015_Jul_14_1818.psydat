ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E31_infer_design1_2015_Jul_14_1818
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xac\xc4\xe1"\x14\x06N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_14_1818
p67
sVparticipant
p68
VE31
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.20026411612707307
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F24.916301929439214
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P11'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F23.449999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F1.5399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\t\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p103
sg21
F1.8999999999999999
sg70
Vy
sa(dp104
g64
g65
sg20
F5.8339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.51999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x02\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p110
sg21
F2
sg70
Vy
sa(dp111
g64
g65
sg20
F7.0339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.19999999999999848
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'"\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p117
sg21
F1.8999999999999999
sg70
Vy
sa(dp118
g64
g65
sg20
F4.9009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F2.0200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x1c\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p124
sg21
F1.2
sg70
Vy
sa(dp125
g64
g65
sg20
F27.100000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F1.2799999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\n\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p131
sg21
F1.8
sg70
Vy
sa(dp132
g64
g65
sg20
F9.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.99999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x19\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p138
sg21
F1.8
sg70
Vy
sa(dp139
g64
g65
sg20
F7.7009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F1.9800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x0c\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V18-mms.png
p145
sg21
F1.3999999999999999
sg70
Vy
sa(dp146
g64
g65
sg20
F6.5170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.53999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\r\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p152
sg21
F1.2
sg70
Vy
sa(dp153
g64
g65
sg20
F8.234
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F1.0399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x10\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V22-daim.png
p159
sg21
F1.3999999999999999
sg70
Vy
sa(dp160
g64
g65
sg20
F6.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F2.0000000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1e\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p166
sg21
F1.1000000000000001
sg70
Vy
sa(dp167
g64
g65
sg20
F9.2170000000000005
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.27999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x0f\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p173
sg21
F1.8
sg70
Vy
sa(dp174
g64
g65
sg20
F9.6010000000000009
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.059999999999998943
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x06\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V7-olives.png
p180
sg21
F1.3999999999999999
sg70
Vy
sa(dp181
g64
g65
sg20
F40
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.5000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x00\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p187
sg21
F1.3
sg70
Vy
sa(dp188
g64
g65
sg20
F5.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F2.02
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x1f\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p194
sg21
F1.7
sg70
Vy
sa(dp195
g64
g65
sg20
F5.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.55999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x07\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p201
sg21
F1.8999999999999999
sg70
Vy
sa(dp202
g64
g65
sg20
F27.884
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.0999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x12\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p208
sg21
F1.3999999999999999
sg70
Vy
sa(dp209
g64
g65
sg20
F9.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.4000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x08\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p215
sg21
F1.1000000000000001
sg70
Vy
sa(dp216
g64
g65
sg20
F15.867000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F1.5199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x0b\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p222
sg21
F1.8999999999999999
sg70
Vy
sa(dp223
g64
g65
sg20
F8.1170000000000009
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.55999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x1a\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V35-raisins.png
p229
sg21
F1.8999999999999999
sg70
Vy
sa(dp230
g64
g65
sg20
F12.117000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F1.0199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x16\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p236
sg21
F1.6000000000000001
sg70
Vy
sa(dp237
g64
g65
sg20
F10.884
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'#\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p243
sg21
F1.6000000000000001
sg70
Vy
sa(dp244
g64
g65
sg20
F7.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.47999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x0e\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p250
sg21
F1.6000000000000001
sg70
Vy
sa(dp251
g64
g65
sg20
F6.8840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.99999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x01\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p257
sg21
F1.8999999999999999
sg70
Vy
sa(dp258
g64
g65
sg20
F36.082999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F1.3199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S"'\x00\x00\x00"
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V51-mars.png
p264
sg21
F1.7
sg70
Vy
sa(dp265
g64
g65
sg20
F8.2509999999999994
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F1.7800000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x13\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p271
sg21
F1.1000000000000001
sg70
Vy
sa(dp272
g64
g65
sg20
F5.0170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x03\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V4-corn.png
p278
sg21
F1.3999999999999999
sg70
Vy
sa(dp279
g64
g65
sg20
F4.3840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.85999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'%\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p285
sg21
F1.5
sg70
Vy
sa(dp286
g64
g65
sg20
F12.584
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F2.5400000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x1b\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p292
sg21
F1.7
sg70
Vy
sa(dp293
g64
g65
sg20
F8.6839999999999993
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F2.5200000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S' \x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p299
sg21
F1.3999999999999999
sg70
Vy
sa(dp300
g64
g65
sg20
F5.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.11999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x14\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p306
sg21
F1.8999999999999999
sg70
Vy
sa(dp307
g64
g65
sg20
F10.884
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.99999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x04\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p313
sg21
F1.8999999999999999
sg70
Vy
sa(dp314
g64
g65
sg20
F31.234000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'$\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V48-twix.png
p320
sg21
F1
sg70
Vy
sa(dp321
g64
g65
sg20
F7.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x15\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V29-beans.png
p327
sg21
F1.5
sg70
Vy
sa(dp328
g64
g65
sg20
F21.199999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x18\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p334
sg21
F1.1000000000000001
sg70
Vy
sa(dp335
g64
g65
sg20
F13.933999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F1.0399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x11\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p341
sg21
F1.7
sg70
Vy
sa(dp342
g64
g65
sg20
F5.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F2.2800000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x17\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p348
sg21
F1.3999999999999999
sg70
Vy
sa(dp349
g64
g65
sg20
F3.9670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.97999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x1d\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V40-sardines.png
p355
sg21
F1.3999999999999999
sg70
Vy
sa(dp356
g64
g65
sg20
F5.1340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.19999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x05\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p362
sg21
F1.1000000000000001
sg70
Vy
sa(dp363
g64
g65
sg20
F4.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F2.0400000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'!\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V44-crunch.png
p369
sg21
F1
sg70
Vy
sa(dp370
g64
g65
sg20
F4.0339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.039999999999998717
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'&\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V50-polo.png
p376
sg21
F1.8
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F43.566361173106998
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'29-beans.png'
p381
sg26
F5.0000000000000009
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F7.4167207405298541
sg27
F100.032
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p390
sg26
F5.5
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F2.7500079827841546
sg27
F7.5670000000000002
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p399
sg26
F4.4000000000000012
sg28
F3
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F2.5001699192725937
sg27
F2.117
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'22-daim.png'
p408
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.4167369911956484
sg27
F1.0840000000000001
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p417
sg26
F5.4999999999999991
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.4834397134400206
sg27
F1.284
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p426
sg26
F4.0000000000000009
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.3334101201180601
sg27
F3.4169999999999998
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p435
sg26
F5.1000000000000005
sg28
F4
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F5.4334389721843763
sg27
F5.0339999999999998
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'25-kitkat.png'
p444
sg26
F4
sg28
F4
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F30.566257396905712
sg27
F2.3170000000000002
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'50-polo.png'
p453
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F2.566838144481153
sg27
F0.751
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p462
sg26
F4.6000000000000014
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F6.0334070980643446
sg27
F11.084
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p471
sg26
F5.0000000000000018
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F5.8171192525369406
sg27
F1.651
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'40-sardines.png'
p480
sg26
F2.5999999999999992
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F6.8000737267175282
sg27
F9.4499999999999993
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p489
sg26
F4.9000000000000012
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F2.9667594000165991
sg27
F3.7509999999999999
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'46-pistachios.png'
p498
sg26
F5.3999999999999995
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F6.4333286386972759
sg27
F16.949999999999999
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p507
sg26
F3
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F5.8334679953040904
sg27
F3.4340000000000002
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'5-pineapple.png'
p516
sg26
F1.9999999999999991
sg28
F3
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F10.633236950710852
sg27
F1.8009999999999999
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p525
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F3.3668120863912918
sg27
F1.7010000000000001
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'51-mars.png'
p534
sg26
F5.5
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F2.4002551069861511
sg27
F1.617
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'48-twix.png'
p543
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'left'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.8000933985786105
sg27
F1.0009999999999999
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p552
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F4.3167771331973199
sg27
F1.8169999999999999
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p561
sg26
F4.8000000000000016
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.2499632221733918
sg27
F1.0509999999999999
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p570
sg26
F5.2999999999999998
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.8668434473329398
sg27
F1.2010000000000001
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p579
sg26
F4.6000000000000005
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F13.983169439165067
sg27
F3.3010000000000002
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p588
sg26
F3.1000000000000001
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'right'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F6.1167596280938596
sg27
F1.6839999999999999
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'35-raisins.png'
p597
sg26
F4.8000000000000007
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F3.0168228631519014
sg27
F0.91700000000000004
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p606
sg26
F5.5999999999999996
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F2.6668205253372435
sg27
F1.5169999999999999
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p615
sg26
F4.9000000000000004
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.7666195872443495
sg27
F0.88400000000000001
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'49-yorkie.png'
p624
sg26
F5.799999999999998
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.0500306767025904
sg27
F2.2669999999999999
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'44-crunch.png'
p633
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F2.2334243180703197
sg27
F1.3009999999999999
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p642
sg26
F4.2000000000000011
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F4.1333623944701685
sg27
F1.034
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p651
sg26
F5.0000000000000009
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F2.7501405540278938
sg27
F1.3169999999999999
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'4-corn.png'
p660
sg26
F5.2000000000000002
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F9.1833925009705126
sg27
F1.367
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'38-maltesers.png'
p669
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.3665891386226576
sg27
F1.0009999999999999
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p678
sg26
F5.1000000000000005
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F2.2335015800199471
sg27
F0.83399999999999996
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'31-hobnobs.png'
p687
sg26
F5.0000000000000018
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F7.9832860448368592
sg27
F2.0009999999999999
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p696
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F3.9335587139503332
sg27
F0.63400000000000001
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'18-mms.png'
p705
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.3667071697927895
sg27
F1.117
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p714
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.5997602883835498
sg27
F0.63400000000000001
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'7-olives.png'
p723
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F6.5500837051986309
sg27
F0.751
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p732
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F13.583160087902797
sg27
F1.9670000000000001
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F270.028106244019
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F4.1838808763277484
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'53-cheestrings.png'
p744
sg83
S'47-picnic.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'47-picnic.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x0e\x12)\x1c\r2\xe8'
tRp754
sa(dp755
g64
g65
sg82
S'32-hovis_crackers.png'
p756
sg83
S'32-hovis_crackers.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x0e\x12)%\x07\xbcx'
tRp765
sa(dp766
g64
g65
sg82
S'11-snickers.png'
p767
sg83
S'11-snickers.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'54-frubes_yogurt.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x0e\x12)1\x01\x05\xb8'
tRp776
sa(dp777
g64
g65
sg82
S'12-topic.png'
p778
sg83
S'12-topic.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'39-mackerel.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x0e\x12)8\x03\xef\xd0'
tRp787
sa(dp788
g64
g65
sg82
g744
sg83
S'53-cheestrings.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x0e\x12*\x03\x07\xd0\x00'
tRp796
sa(dp797
g64
g65
sg82
g756
sg83
S'24-food_doctor_apple_walnut_bar.png'
p798
sg56
g57
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p801
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p802
sS'practice_loop.thisIndex'
p803
g60
(g99
S'\x05\x00\x00\x00'
tRp804
sg34
g753
(S'\x07\xdf\x07\x0e\x12*\n\x01\xb1\x98'
tRp805
sa(dp806
g64
g65
sg82
S'52-aero_mousse.png'
p807
sg83
S'52-aero_mousse.png'
p808
sg56
g57
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p811
I0
sg84
S'14-discos_salt_vinegar.png'
p812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\x0e\x12*\x10\x07\x04\xe0'
tRp816
sa(dp817
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p818
sg83
S'37-nakd_cashew_cookie.png'
p819
sg56
g57
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p822
I0
sg84
S'9-yu_mango_pieces.png'
p823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\x0e\x12*\x16\r\x88\xd8'
tRp827
sa(dp828
g64
g65
sg82
g807
sg83
S'14-discos_salt_vinegar.png'
p829
sg56
g57
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p832
I0
sg84
g812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\x0e\x12*\x1e\x02\xa3\xc8'
tRp836
sa(dp837
g64
g65
sg82
S'15-walnut_whip.png'
p838
sg83
S'15-walnut_whip.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'28-maple_pecan.png'
p843
sg33
g843
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x0e\x12*&\x0c1\x18'
tRp847
sa(dp848
g64
g65
sg82
g778
sg83
S'39-mackerel.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x0e\x12*.\x08\xaa\xc0'
tRp856
sa(dp857
g64
g65
sg82
g838
sg83
S'28-maple_pecan.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x0e\x12*5\tq\xf8'
tRp865
sa(dp866
g64
g65
sg82
g818
sg83
S'9-yu_mango_pieces.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x0e\x12+\x00\x04\xfdX'
tRp874
sa(dp875
g64
g65
sg82
g767
sg83
S'54-frubes_yogurt.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x0e\x12+\x07\x06\xba\xa8'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F99.314806240712642
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'25-kitkat.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'25-kitkat.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'31-hobnobs.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'31-hobnobs.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.3331940147363639
sg34
g753
(S'\x07\xdf\x07\x0e\x12.\t\x08\x02\xc8'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'16-skips_prawn.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'16-skips_prawn.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'42-mrkipling_lemon_slices.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
S'42-mrkipling_lemon_slices.png'
p926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p927
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.3997233965128544
sg34
g753
(S'\x07\xdf\x07\x0e\x12.\x10\rN@'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'23-crunchie_redo.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'23-crunchie_redo.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'33-ambrosia_rice.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
S'33-ambrosia_rice.png'
p943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p944
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.8000101495417766
sg34
g753
(S'\x07\xdf\x07\x0e\x12.\x17\x04\x8f\xf8'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'21-nakd_banana_crunch.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'21-nakd_banana_crunch.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'1-treacle_cookies.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'1-treacle_cookies.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.8166582467310946
sg34
g753
(S'\x07\xdf\x07\x0e\x12.\x1e\x02\x03\xa0'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'20-fruit_pastilles.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'2-steamed_puddings.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'2-steamed_puddings.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'20-fruit_pastilles.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vy
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.5001687788717391
sg34
g753
(S'\x07\xdf\x07\x0e\x12.$\x0f2\xa0'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'51-mars.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'51-mars.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vy
sS'block_loop.thisTrialN'
p997
I0
sg39
F3.2832272003142862
sg34
g753
(S'\x07\xdf\x07\x0e\x12.+\x07\xe3\x88'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'48-twix.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'48-twix.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'50-polo.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'50-polo.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vy
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.2833446612858097
sg34
g753
(S'\x07\xdf\x07\x0e\x12.3\x0c\xb2\x00'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'27-hartleys_raspberries_jelly.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'right'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1022
g60
(g99
S'\x07\x00\x00\x00'
tRp1023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1024
I0
sg904
S'51-mars.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1027
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1028
Nsg70
Vy
sS'block_loop.thisTrialN'
p1029
I0
sg39
F1.2166536281183653
sg34
g753
(S'\x07\xdf\x07\x0e\x12.:\x02I\xf0'
tRp1030
sa(dp1031
S'trial_loop.thisTrialN'
p1032
I8
sg895
g1001
sS'block_loop.thisIndex'
p1033
g889
sg38
S'left'
p1034
sg59
g63
sS'trial_loop.thisN'
p1035
I8
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1036
g60
(g99
S'\x08\x00\x00\x00'
tRp1037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1038
I0
sg904
g1009
sS'block_loop.thisRepN'
p1039
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1040
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1041
Nsg70
Vy
sS'block_loop.thisTrialN'
p1042
I0
sg39
F1.3332416263438063
sg34
g753
(S'\x07\xdf\x07\x0e\x12/\x04\x06.\x08'
tRp1043
sa(dp1044
S'trial_loop.thisTrialN'
p1045
I9
sg895
S'36-fig_rolls.png'
p1046
sS'block_loop.thisIndex'
p1047
g889
sg38
S'left'
p1048
sg59
g63
sS'trial_loop.thisN'
p1049
I9
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1050
sg64
g65
sS'trial_loop.thisIndex'
p1051
g60
(g99
S'\t\x00\x00\x00'
tRp1052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1053
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1054
sS'block_loop.thisRepN'
p1055
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1056
I0
sg909
S'36-fig_rolls.png'
p1057
sg55
g11
sS'block_loop.thisTrial'
p1058
Nsg70
Vy
sS'block_loop.thisTrialN'
p1059
I0
sg39
F1.7836574153770925
sg34
g753
(S'\x07\xdf\x07\x0e\x12/\n\x0b\xbf\xd0'
tRp1060
sa(dp1061
S'trial_loop.thisTrialN'
p1062
I10
sg895
S'2-steamed_puddings.png'
p1063
sS'block_loop.thisIndex'
p1064
g889
sg38
S'left'
p1065
sg59
g63
sS'trial_loop.thisN'
p1066
I10
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1067
g60
(g99
S'\n\x00\x00\x00'
tRp1068
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1069
I0
sg904
S'20-fruit_pastilles.png'
p1070
sS'block_loop.thisRepN'
p1071
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1072
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1073
Nsg70
Vy
sS'block_loop.thisTrialN'
p1074
I0
sg39
F1.6000225798743486
sg34
g753
(S'\x07\xdf\x07\x0e\x12/\x11\x08\xf8\xe0'
tRp1075
sa(dp1076
S'trial_loop.thisTrialN'
p1077
I11
sg895
S'50-polo.png'
p1078
sS'block_loop.thisIndex'
p1079
g889
sg38
S'right'
p1080
sg59
g63
sS'trial_loop.thisN'
p1081
I11
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1082
g60
(g99
S'\x0b\x00\x00\x00'
tRp1083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1084
I0
sg904
S'48-twix.png'
p1085
sS'block_loop.thisRepN'
p1086
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1087
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1088
Nsg70
Vy
sS'block_loop.thisTrialN'
p1089
I0
sg39
F2.2666566501720808
sg34
g753
(S'\x07\xdf\x07\x0e\x12/\x18\x03S\x90'
tRp1090
sa(dp1091
S'trial_loop.thisTrialN'
p1092
I12
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1093
sS'block_loop.thisIndex'
p1094
g889
sg38
S'left'
p1095
sg59
g63
sS'trial_loop.thisN'
p1096
I12
sg33
S'8-liquorice_catherine_wheels.png'
p1097
sg64
g65
sS'trial_loop.thisIndex'
p1098
g60
(g99
S'\x0c\x00\x00\x00'
tRp1099
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1100
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1101
sS'block_loop.thisRepN'
p1102
I0
sg907
S'17-jacobs_mini_cheddars_redo.png'
p1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1104
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1105
Nsg70
Vy
sS'block_loop.thisTrialN'
p1106
I0
sg39
F2.366556637283793
sg34
g753
(S'\x07\xdf\x07\x0e\x12/\x1f\x07\xe7p'
tRp1107
sa(dp1108
S'trial_loop.thisTrialN'
p1109
I13
sg895
S'30-spaghetti_hoops.png'
p1110
sS'block_loop.thisIndex'
p1111
g889
sg38
S'right'
p1112
sg59
g63
sS'trial_loop.thisN'
p1113
I13
sg33
S'19-caramello_redo.png'
p1114
sg64
g65
sS'trial_loop.thisIndex'
p1115
g60
(g99
S'\r\x00\x00\x00'
tRp1116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1117
I0
sg904
S'19-caramello_redo.png'
p1118
sS'block_loop.thisRepN'
p1119
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1120
I0
sg909
S'30-spaghetti_hoops.png'
p1121
sg55
g11
sS'block_loop.thisTrial'
p1122
Nsg70
Vy
sS'block_loop.thisTrialN'
p1123
I0
sg39
F2.083235924354085
sg34
g753
(S'\x07\xdf\x07\x0e\x12/&\x0e)\x00'
tRp1124
sa(dp1125
S'trial_loop.thisTrialN'
p1126
I14
sg895
S'3-ellas_strawberries_apples.png'
p1127
sS'block_loop.thisIndex'
p1128
g889
sg38
S'right'
p1129
sg59
g63
sS'trial_loop.thisN'
p1130
I14
sg33
S'3-ellas_strawberries_apples.png'
p1131
sg64
g65
sS'trial_loop.thisIndex'
p1132
g60
(g99
S'\x0e\x00\x00\x00'
tRp1133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1134
I0
sg904
S'13-mccoys_steak_crisps.png'
p1135
sS'block_loop.thisRepN'
p1136
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1137
I0
sg909
S'13-mccoys_steak_crisps.png'
p1138
sg55
g11
sS'block_loop.thisTrial'
p1139
Nsg70
Vy
sS'block_loop.thisTrialN'
p1140
I0
sg39
F2.3169832601015514
sg34
g753
(S'\x07\xdf\x07\x0e\x12/.\x00\xa4\x10'
tRp1141
sa(dp1142
S'trial_loop.thisTrialN'
p1143
I15
sg895
S'49-yorkie.png'
p1144
sS'block_loop.thisIndex'
p1145
g889
sg38
S'left'
p1146
sg59
g63
sS'trial_loop.thisN'
p1147
I15
sg33
S'49-yorkie.png'
p1148
sg64
g65
sS'trial_loop.thisIndex'
p1149
g60
(g99
S'\x0f\x00\x00\x00'
tRp1150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1151
I0
sg904
S'35-raisins.png'
p1152
sS'block_loop.thisRepN'
p1153
I0
sg907
S'35-raisins.png'
p1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1155
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p1156
Nsg70
Vy
sS'block_loop.thisTrialN'
p1157
I0
sg39
F2.583373342291452
sg34
g753
(S'\x07\xdf\x07\x0e\x12/5\x05\xf3p'
tRp1158
sa(dp1159
S'trial_loop.thisTrialN'
p1160
I16
sg895
g1127
sS'block_loop.thisIndex'
p1161
g889
sg38
S'left'
p1162
sg59
g63
sS'trial_loop.thisN'
p1163
I16
sg33
g1131
sg64
g65
sS'trial_loop.thisIndex'
p1164
g60
(g99
S'\x10\x00\x00\x00'
tRp1165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1166
I0
sg904
g1135
sS'block_loop.thisRepN'
p1167
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1168
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vy
sS'block_loop.thisTrialN'
p1170
I0
sg39
F2.0499981753637257
sg34
g753
(S'\x07\xdf\x07\x0e\x120\x01\x00\x07\xd0'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
g967
sS'block_loop.thisIndex'
p1174
g889
sg38
S'right'
p1175
sg59
g63
sS'trial_loop.thisN'
p1176
I17
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1177
g60
(g99
S'\x11\x00\x00\x00'
tRp1178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1179
I0
sg904
g975
sS'block_loop.thisRepN'
p1180
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1181
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vy
sS'block_loop.thisTrialN'
p1183
I0
sg39
F1.1500315890189086
sg34
g753
(S'\x07\xdf\x07\x0e\x120\x08\x01L\x08'
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'26-walkers_smoky_bacon.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'left'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
S'44-crunch.png'
p1191
sg64
g65
sS'trial_loop.thisIndex'
p1192
g60
(g99
S'\x12\x00\x00\x00'
tRp1193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1194
I0
sg904
S'44-crunch.png'
p1195
sS'block_loop.thisRepN'
p1196
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1197
I0
sg909
S'26-walkers_smoky_bacon.png'
p1198
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vy
sS'block_loop.thisTrialN'
p1200
I0
sg39
F1.7999967498653859
sg34
g753
(S'\x07\xdf\x07\x0e\x120\x0e\x04=\xf0'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
S'42-mrkipling_lemon_slices.png'
p1204
sS'block_loop.thisIndex'
p1205
g889
sg38
S'left'
p1206
sg59
g63
sS'trial_loop.thisN'
p1207
I19
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p1208
g60
(g99
S'\x13\x00\x00\x00'
tRp1209
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1210
I0
sg904
S'16-skips_prawn.png'
p1211
sS'block_loop.thisRepN'
p1212
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1213
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vy
sS'block_loop.thisTrialN'
p1215
I0
sg39
F2.9001892490123282
sg34
g753
(S'\x07\xdf\x07\x0e\x120\x15\x01\xb1\x98'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
S'18-mms.png'
p1219
sS'block_loop.thisIndex'
p1220
g889
sg38
S'left'
p1221
sg59
g63
sS'trial_loop.thisN'
p1222
I20
sg33
S'18-mms.png'
p1223
sg64
g65
sS'trial_loop.thisIndex'
p1224
g60
(g99
S'\x14\x00\x00\x00'
tRp1225
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1226
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1227
sS'block_loop.thisRepN'
p1228
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1229
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1230
sg55
g11
sS'block_loop.thisTrial'
p1231
Nsg70
Vy
sS'block_loop.thisTrialN'
p1232
I0
sg39
F3.2166815678647254
sg34
g753
(S'\x07\xdf\x07\x0e\x120\x1d\x00\x8c\xa0'
tRp1233
sa(dp1234
S'trial_loop.thisTrialN'
p1235
I21
sg895
g1144
sS'block_loop.thisIndex'
p1236
g889
sg38
S'left'
p1237
sg59
g63
sS'trial_loop.thisN'
p1238
I21
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p1239
g60
(g99
S'\x15\x00\x00\x00'
tRp1240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1241
I0
sg904
g1152
sS'block_loop.thisRepN'
p1242
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1243
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p1244
Nsg70
Vy
sS'block_loop.thisTrialN'
p1245
I0
sg39
F2.5998837364459177
sg34
g753
(S'\x07\xdf\x07\x0e\x120%\x04e\x00'
tRp1246
sa(dp1247
S'trial_loop.thisTrialN'
p1248
I22
sg895
g1187
sS'block_loop.thisIndex'
p1249
g889
sg38
S'left'
p1250
sg59
g63
sS'trial_loop.thisN'
p1251
I22
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1252
g60
(g99
S'\x16\x00\x00\x00'
tRp1253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1254
I0
sg904
g1195
sS'block_loop.thisRepN'
p1255
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1256
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p1257
Nsg70
Vy
sS'block_loop.thisTrialN'
p1258
I0
sg39
F5.4165890245822084
sg34
g753
(S'\x07\xdf\x07\x0e\x120,\r\xfa '
tRp1259
sa(dp1260
S'trial_loop.thisTrialN'
p1261
I23
sg895
S'35-raisins.png'
p1262
sS'block_loop.thisIndex'
p1263
g889
sg38
S'left'
p1264
sg59
g63
sS'trial_loop.thisN'
p1265
I23
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p1266
g60
(g99
S'\x17\x00\x00\x00'
tRp1267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1268
I0
sg904
S'49-yorkie.png'
p1269
sS'block_loop.thisRepN'
p1270
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1271
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p1272
Nsg70
Vy
sS'block_loop.thisTrialN'
p1273
I0
sg39
F1.0000128294741444
sg34
g753
(S'\x07\xdf\x07\x0e\x1207\x05\x9d\x80'
tRp1274
sa(dp1275
S'trial_loop.thisTrialN'
p1276
I24
sg895
S'41-peanuts_redo.png'
p1277
sS'block_loop.thisIndex'
p1278
g889
sg38
S'left'
p1279
sg59
g63
sS'trial_loop.thisN'
p1280
I24
sg33
S'41-peanuts_redo.png'
p1281
sg64
g65
sS'trial_loop.thisIndex'
p1282
g60
(g99
S'\x18\x00\x00\x00'
tRp1283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1284
I0
sg904
S'45-chewy_nougat_redo.png'
p1285
sS'block_loop.thisRepN'
p1286
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1287
I0
sg909
S'45-chewy_nougat_redo.png'
p1288
sg55
g11
sS'block_loop.thisTrial'
p1289
Nsg70
Vy
sS'block_loop.thisTrialN'
p1290
I0
sg39
F2.3166499788458168
sg34
g753
(S'\x07\xdf\x07\x0e\x121\x01\x061\xf0'
tRp1291
sa(dp1292
S'trial_loop.thisTrialN'
p1293
I25
sg895
g1078
sS'block_loop.thisIndex'
p1294
g889
sg38
S'right'
p1295
sg59
g63
sS'trial_loop.thisN'
p1296
I25
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1297
g60
(g99
S'\x19\x00\x00\x00'
tRp1298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1299
I0
sg904
g1085
sS'block_loop.thisRepN'
p1300
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1301
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1302
Nsg70
Vy
sS'block_loop.thisTrialN'
p1303
I0
sg39
F1.8166445619572187
sg34
g753
(S'\x07\xdf\x07\x0e\x121\x08\x0b}h'
tRp1304
sa(dp1305
S'trial_loop.thisTrialN'
p1306
I26
sg895
g950
sS'block_loop.thisIndex'
p1307
g889
sg38
S'right'
p1308
sg59
g63
sS'trial_loop.thisN'
p1309
I26
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1310
g60
(g99
S'\x1a\x00\x00\x00'
tRp1311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1312
I0
sg904
g958
sS'block_loop.thisRepN'
p1313
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1314
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1315
Nsg70
Vy
sS'block_loop.thisTrialN'
p1316
I0
sg39
F1.8999996578822902
sg34
g753
(S'\x07\xdf\x07\x0e\x121\x0f\t/\x90'
tRp1317
sa(dp1318
S'trial_loop.thisTrialN'
p1319
I27
sg895
g1001
sS'block_loop.thisIndex'
p1320
g889
sg38
S'left'
p1321
sg59
g63
sS'trial_loop.thisN'
p1322
I27
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1323
g60
(g99
S'\x1b\x00\x00\x00'
tRp1324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1325
I0
sg904
g1009
sS'block_loop.thisRepN'
p1326
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1327
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1328
Nsg70
Vy
sS'block_loop.thisTrialN'
p1329
I0
sg39
F1.9166870987937727
sg34
g753
(S'\x07\xdf\x07\x0e\x121\x16\x08M\x00'
tRp1330
sa(dp1331
S'trial_loop.thisTrialN'
p1332
I28
sg895
g1110
sS'block_loop.thisIndex'
p1333
g889
sg38
S'left'
p1334
sg59
g63
sS'trial_loop.thisN'
p1335
I28
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p1336
g60
(g99
S'\x1c\x00\x00\x00'
tRp1337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1338
I0
sg904
g1118
sS'block_loop.thisRepN'
p1339
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1340
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p1341
Nsg70
Vy
sS'block_loop.thisTrialN'
p1342
I0
sg39
F4.2332552540974575
sg34
g753
(S'\x07\xdf\x07\x0e\x121\x1d\x07jp'
tRp1343
sa(dp1344
S'trial_loop.thisTrialN'
p1345
I29
sg895
g1018
sS'block_loop.thisIndex'
p1346
g889
sg38
S'right'
p1347
sg59
g63
sS'trial_loop.thisN'
p1348
I29
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1349
g60
(g99
S'\x1d\x00\x00\x00'
tRp1350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1351
I0
sg904
g1025
sS'block_loop.thisRepN'
p1352
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1353
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1354
Nsg70
Vy
sS'block_loop.thisTrialN'
p1355
I0
sg39
F1.8998995879737777
sg34
g753
(S'\x07\xdf\x07\x0e\x121&\x0by\x80'
tRp1356
sa(dp1357
S'trial_loop.thisTrialN'
p1358
I30
sg895
g1046
sS'block_loop.thisIndex'
p1359
g889
sg38
S'left'
p1360
sg59
g63
sS'trial_loop.thisN'
p1361
I30
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1362
g60
(g99
S'\x1e\x00\x00\x00'
tRp1363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1364
I0
sg904
g1054
sS'block_loop.thisRepN'
p1365
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1366
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1367
Nsg70
Vy
sS'block_loop.thisTrialN'
p1368
I0
sg39
F2.633262324561656
sg34
g753
(S'\x07\xdf\x07\x0e\x121-\n\x96\xf0'
tRp1369
sa(dp1370
S'trial_loop.thisTrialN'
p1371
I31
sg895
S'22-daim.png'
p1372
sS'block_loop.thisIndex'
p1373
g889
sg38
S'left'
p1374
sg59
g63
sS'trial_loop.thisN'
p1375
I31
sg33
S'22-daim.png'
p1376
sg64
g65
sS'trial_loop.thisIndex'
p1377
g60
(g99
S'\x1f\x00\x00\x00'
tRp1378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1379
I0
sg904
S'7-olives.png'
p1380
sS'block_loop.thisRepN'
p1381
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1382
I0
sg909
S'7-olives.png'
p1383
sg55
g11
sS'block_loop.thisTrial'
p1384
Nsg70
Vy
sS'block_loop.thisTrialN'
p1385
I0
sg39
F1.9832760663557565
sg34
g753
(S'\x07\xdf\x07\x0e\x1215\x05f\xd0'
tRp1386
sa(dp1387
S'trial_loop.thisTrialN'
p1388
I32
sg895
g1127
sS'block_loop.thisIndex'
p1389
g889
sg38
S'left'
p1390
sg59
g63
sS'trial_loop.thisN'
p1391
I32
sg33
g1131
sg64
g65
sS'trial_loop.thisIndex'
p1392
g60
(g99
S' \x00\x00\x00'
tRp1393
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1394
I0
sg904
g1135
sS'block_loop.thisRepN'
p1395
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1396
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p1397
Nsg70
Vy
sS'block_loop.thisTrialN'
p1398
I0
sg39
F2.9498957676405553
sg34
g753
(S'\x07\xdf\x07\x0e\x122\x00\x05\xb4\xf0'
tRp1399
sa(dp1400
S'trial_loop.thisTrialN'
p1401
I33
sg895
S'38-maltesers.png'
p1402
sS'block_loop.thisIndex'
p1403
g889
sg38
S'left'
p1404
sg59
g63
sS'trial_loop.thisN'
p1405
I33
sg33
S'38-maltesers.png'
p1406
sg64
g65
sS'trial_loop.thisIndex'
p1407
g60
(g99
S'!\x00\x00\x00'
tRp1408
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1409
I0
sg904
S'6-sour_patch_kids.png'
p1410
sS'block_loop.thisRepN'
p1411
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1412
I0
sg909
S'6-sour_patch_kids.png'
p1413
sg55
g11
sS'block_loop.thisTrial'
p1414
Nsg70
Vy
sS'block_loop.thisTrialN'
p1415
I0
sg39
F1.533086076084146
sg34
g753
(S'\x07\xdf\x07\x0e\x122\x08\x05\x82('
tRp1416
sa(dp1417
S'trial_loop.thisTrialN'
p1418
I34
sg895
g1063
sS'block_loop.thisIndex'
p1419
g889
sg38
S'left'
p1420
sg59
g63
sS'trial_loop.thisN'
p1421
I34
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1422
g60
(g99
S'"\x00\x00\x00'
tRp1423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1424
I0
sg904
g1070
sS'block_loop.thisRepN'
p1425
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1426
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1427
Nsg70
Vy
sS'block_loop.thisTrialN'
p1428
I0
sg39
F0.98339751872117631
sg34
g753
(S'\x07\xdf\x07\x0e\x122\x0e\r\xeeh'
tRp1429
sa(dp1430
S'trial_loop.thisTrialN'
p1431
I35
sg895
g1372
sS'block_loop.thisIndex'
p1432
g889
sg38
S'left'
p1433
sg59
g63
sS'trial_loop.thisN'
p1434
I35
sg33
g1383
sg64
g65
sS'trial_loop.thisIndex'
p1435
g60
(g99
S'#\x00\x00\x00'
tRp1436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1437
I0
sg904
g1380
sS'block_loop.thisRepN'
p1438
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1439
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p1440
Nsg70
Vy
sS'block_loop.thisTrialN'
p1441
I0
sg39
F1.1165178637638746
sg34
g753
(S'\x07\xdf\x07\x0e\x122\x14\x0eDX'
tRp1442
sa(dp1443
S'trial_loop.thisTrialN'
p1444
I36
sg895
S'10-bounty_redo.png'
p1445
sS'block_loop.thisIndex'
p1446
g889
sg38
S'left'
p1447
sg59
g63
sS'trial_loop.thisN'
p1448
I36
sg33
S'4-corn.png'
p1449
sg64
g65
sS'trial_loop.thisIndex'
p1450
g60
(g99
S'$\x00\x00\x00'
tRp1451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1452
I0
sg904
S'4-corn.png'
p1453
sS'block_loop.thisRepN'
p1454
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1455
I0
sg909
S'10-bounty_redo.png'
p1456
sg55
g11
sS'block_loop.thisTrial'
p1457
Nsg70
Vy
sS'block_loop.thisTrialN'
p1458
I0
sg39
F2.0832424816398998
sg34
g753
(S'\x07\xdf\x07\x0e\x122\x1b\x01<h'
tRp1459
sa(dp1460
S'trial_loop.thisTrialN'
p1461
I37
sg895
g984
sS'block_loop.thisIndex'
p1462
g889
sg38
S'left'
p1463
sg59
g63
sS'trial_loop.thisN'
p1464
I37
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1465
g60
(g99
S'%\x00\x00\x00'
tRp1466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1467
I0
sg904
g992
sS'block_loop.thisRepN'
p1468
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1469
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1470
Nsg70
Vy
sS'block_loop.thisTrialN'
p1471
I0
sg39
F3.7998764378971828
sg34
g753
(S'\x07\xdf\x07\x0e\x122"\x034P'
tRp1472
sa(dp1473
S'trial_loop.thisTrialN'
p1474
I38
sg895
S'4-corn.png'
p1475
sS'block_loop.thisIndex'
p1476
g889
sg38
S'left'
p1477
sg59
g63
sS'trial_loop.thisN'
p1478
I38
sg33
g1456
sg64
g65
sS'trial_loop.thisIndex'
p1479
g60
(g99
S'&\x00\x00\x00'
tRp1480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1481
I0
sg904
S'10-bounty_redo.png'
p1482
sS'block_loop.thisRepN'
p1483
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1484
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p1485
Nsg70
Vy
sS'block_loop.thisTrialN'
p1486
I0
sg39
F1.8169875365929329
sg34
g753
(S'\x07\xdf\x07\x0e\x122+\x00\x9c@'
tRp1487
sa(dp1488
S'trial_loop.thisTrialN'
p1489
I39
sg895
S'40-sardines.png'
p1490
sS'block_loop.thisIndex'
p1491
g889
sg38
S'left'
p1492
sg59
g63
sS'trial_loop.thisN'
p1493
I39
sg33
S'40-sardines.png'
p1494
sg64
g65
sS'trial_loop.thisIndex'
p1495
g60
(g99
S"'\x00\x00\x00"
tRp1496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1497
I0
sg904
S'5-pineapple.png'
p1498
sS'block_loop.thisRepN'
p1499
I0
sg907
S'5-pineapple.png'
p1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1501
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p1502
Nsg70
Vy
sS'block_loop.thisTrialN'
p1503
I0
sg39
F5.816544206951221
sg34
g753
(S'\x07\xdf\x07\x0e\x1221\r\x8c\xc0'
tRp1504
sa(dp1505
S'trial_loop.thisTrialN'
p1506
I40
sg895
S'19-caramello_redo.png'
p1507
sS'block_loop.thisIndex'
p1508
g889
sg38
S'right'
p1509
sg59
g63
sS'trial_loop.thisN'
p1510
I40
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p1511
g60
(g99
S'(\x00\x00\x00'
tRp1512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1513
I0
sg904
S'30-spaghetti_hoops.png'
p1514
sS'block_loop.thisRepN'
p1515
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1516
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p1517
Nsg70
Vy
sS'block_loop.thisTrialN'
p1518
I0
sg39
F2.3666090955848631
sg34
g753
(S'\x07\xdf\x07\x0e\x123\x00\x0b#\x90'
tRp1519
sa(dp1520
S'trial_loop.thisTrialN'
p1521
I41
sg895
g1402
sS'block_loop.thisIndex'
p1522
g889
sg38
S'left'
p1523
sg59
g63
sS'trial_loop.thisN'
p1524
I41
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p1525
g60
(g99
S')\x00\x00\x00'
tRp1526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1527
I0
sg904
g1410
sS'block_loop.thisRepN'
p1528
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1529
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p1530
Nsg70
Vy
sS'block_loop.thisTrialN'
p1531
I0
sg39
F1.0163113947382953
sg34
g753
(S'\x07\xdf\x07\x0e\x123\x08\x02"\xe0'
tRp1532
sa(dp1533
S'trial_loop.thisTrialN'
p1534
I42
sg895
g1490
sS'block_loop.thisIndex'
p1535
g889
sg38
S'left'
p1536
sg59
g63
sS'trial_loop.thisN'
p1537
I42
sg33
g1500
sg64
g65
sS'trial_loop.thisIndex'
p1538
g60
(g99
S'*\x00\x00\x00'
tRp1539
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1540
I0
sg904
g1498
sS'block_loop.thisRepN'
p1541
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1542
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p1543
Nsg70
Vy
sS'block_loop.thisTrialN'
p1544
I0
sg39
F1.0001385583309457
sg34
g753
(S'\x07\xdf\x07\x0e\x123\x0e\x02\xf1\xe8'
tRp1545
sa(dp1546
S'trial_loop.thisTrialN'
p1547
I43
sg895
g896
sS'block_loop.thisIndex'
p1548
g889
sg38
S'right'
p1549
sg59
g63
sS'trial_loop.thisN'
p1550
I43
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1551
g60
(g99
S'+\x00\x00\x00'
tRp1552
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1553
I0
sg904
g905
sS'block_loop.thisRepN'
p1554
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1555
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1556
Nsg70
Vy
sS'block_loop.thisTrialN'
p1557
I0
sg39
F5.2331950981133559
sg34
g753
(S'\x07\xdf\x07\x0e\x123\x14\x03G\xd8'
tRp1558
sa(dp1559
S'trial_loop.thisTrialN'
p1560
I44
sg895
g1078
sS'block_loop.thisIndex'
p1561
g889
sg38
S'right'
p1562
sg59
g63
sS'trial_loop.thisN'
p1563
I44
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1564
g60
(g99
S',\x00\x00\x00'
tRp1565
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1566
I0
sg904
g1085
sS'block_loop.thisRepN'
p1567
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1568
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1569
Nsg70
Vy
sS'block_loop.thisTrialN'
p1570
I0
sg39
F1.2000055309290474
sg34
g753
(S'\x07\xdf\x07\x0e\x123\x1e\x07S\x00'
tRp1571
sa(dp1572
S'trial_loop.thisTrialN'
p1573
I45
sg895
g1046
sS'block_loop.thisIndex'
p1574
g889
sg38
S'right'
p1575
sg59
g63
sS'trial_loop.thisN'
p1576
I45
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1577
g60
(g99
S'-\x00\x00\x00'
tRp1578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1579
I0
sg904
g1054
sS'block_loop.thisRepN'
p1580
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1581
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1582
Nsg70
Vy
sS'block_loop.thisTrialN'
p1583
I0
sg39
F4.8499627089913702
sg34
g753
(S'\x07\xdf\x07\x0e\x123$\n\xfc\x80'
tRp1584
sa(dp1585
S'trial_loop.thisTrialN'
p1586
I46
sg895
S'43-mrporky_pork_crackles_redo.png'
p1587
sS'block_loop.thisIndex'
p1588
g889
sg38
S'left'
p1589
sg59
g63
sS'trial_loop.thisN'
p1590
I46
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p1591
g60
(g99
S'.\x00\x00\x00'
tRp1592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1593
I0
sg904
S'18-mms.png'
p1594
sS'block_loop.thisRepN'
p1595
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1596
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p1597
Nsg70
Vy
sS'block_loop.thisTrialN'
p1598
I0
sg39
F2.4999928725155769
sg34
g753
(S'\x07\xdf\x07\x0e\x123.\tN\xd0'
tRp1599
sa(dp1600
S'trial_loop.thisTrialN'
p1601
I47
sg895
S'46-pistachios.png'
p1602
sS'block_loop.thisIndex'
p1603
g889
sg38
S'right'
p1604
sg59
g63
sS'trial_loop.thisN'
p1605
I47
sg33
S'46-pistachios.png'
p1606
sg64
g65
sS'trial_loop.thisIndex'
p1607
g60
(g99
S'/\x00\x00\x00'
tRp1608
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1609
I0
sg904
S'29-beans.png'
p1610
sS'block_loop.thisRepN'
p1611
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1612
I0
sg909
S'29-beans.png'
p1613
sg55
g11
sS'block_loop.thisTrial'
p1614
Nsg70
Vy
sS'block_loop.thisTrialN'
p1615
I0
sg39
F6.6665539573514252
sg34
g753
(S'\x07\xdf\x07\x0e\x1236\x01\xf7\xe8'
tRp1616
sa(dp1617
S'trial_loop.thisTrialN'
p1618
I48
sg895
g1187
sS'block_loop.thisIndex'
p1619
g889
sg38
S'left'
p1620
sg59
g63
sS'trial_loop.thisN'
p1621
I48
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1622
g60
(g99
S'0\x00\x00\x00'
tRp1623
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1624
I0
sg904
g1195
sS'block_loop.thisRepN'
p1625
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1626
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p1627
Nsg70
Vy
sS'block_loop.thisTrialN'
p1628
I0
sg39
F8.4331367667655286
sg34
g753
(S'\x07\xdf\x07\x0e\x124\x05\x0c\xa6H'
tRp1629
sa(dp1630
S'trial_loop.thisTrialN'
p1631
I49
sg895
g1001
sS'block_loop.thisIndex'
p1632
g889
sg38
S'left'
p1633
sg59
g63
sS'trial_loop.thisN'
p1634
I49
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1635
g60
(g99
S'1\x00\x00\x00'
tRp1636
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1637
I0
sg904
g1009
sS'block_loop.thisRepN'
p1638
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1639
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1640
Nsg70
Vy
sS'block_loop.thisTrialN'
p1641
I0
sg39
F1.0833103353106708
sg34
g753
(S'\x07\xdf\x07\x0e\x124\x13\x04\xb3 '
tRp1642
sa(dp1643
S'trial_loop.thisTrialN'
p1644
I50
sg895
g1093
sS'block_loop.thisIndex'
p1645
g889
sg38
S'left'
p1646
sg59
g63
sS'trial_loop.thisN'
p1647
I50
sg33
g1097
sg64
g65
sS'trial_loop.thisIndex'
p1648
g60
(g99
S'2\x00\x00\x00'
tRp1649
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1650
I0
sg904
g1101
sS'block_loop.thisRepN'
p1651
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1652
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1653
Nsg70
Vy
sS'block_loop.thisTrialN'
p1654
I0
sg39
F2.1333743686482194
sg34
g753
(S'\x07\xdf\x07\x0e\x124\x19\x06tX'
tRp1655
sa(dp1656
S'trial_loop.thisTrialN'
p1657
I51
sg895
g1187
sS'block_loop.thisIndex'
p1658
g889
sg38
S'right'
p1659
sg59
g63
sS'trial_loop.thisN'
p1660
I51
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1661
g60
(g99
S'3\x00\x00\x00'
tRp1662
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1663
I0
sg904
g1195
sS'block_loop.thisRepN'
p1664
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1665
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p1666
Nsg70
Vy
sS'block_loop.thisTrialN'
p1667
I0
sg39
F1.8665740283540799
sg34
g753
(S'\x07\xdf\x07\x0e\x124 \x08\xe5X'
tRp1668
sa(dp1669
S'trial_loop.thisTrialN'
p1670
I52
sg895
g1490
sS'block_loop.thisIndex'
p1671
g889
sg38
S'left'
p1672
sg59
g63
sS'trial_loop.thisN'
p1673
I52
sg33
g1494
sg64
g65
sS'trial_loop.thisIndex'
p1674
g60
(g99
S'4\x00\x00\x00'
tRp1675
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1676
I0
sg904
g1498
sS'block_loop.thisRepN'
p1677
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1678
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p1679
Nsg70
Vy
sS'block_loop.thisTrialN'
p1680
I0
sg39
F4.8332652895951469
sg34
g753
(S"\x07\xdf\x07\x0e\x124'\x07\x89\xb0"
tRp1681
sa(dp1682
S'trial_loop.thisTrialN'
p1683
I53
sg895
g1445
sS'block_loop.thisIndex'
p1684
g889
sg38
S'left'
p1685
sg59
g63
sS'trial_loop.thisN'
p1686
I53
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p1687
g60
(g99
S'5\x00\x00\x00'
tRp1688
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1689
I0
sg904
g1453
sS'block_loop.thisRepN'
p1690
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1691
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p1692
Nsg70
Vy
sS'block_loop.thisTrialN'
p1693
I0
sg39
F2.616668111171748
sg34
g753
(S'\x07\xdf\x07\x0e\x1241\x05b\xe8'
tRp1694
sa(dp1695
S'trial_loop.thisTrialN'
p1696
I54
sg895
g1587
sS'block_loop.thisIndex'
p1697
g889
sg38
S'left'
p1698
sg59
g63
sS'trial_loop.thisN'
p1699
I54
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p1700
g60
(g99
S'6\x00\x00\x00'
tRp1701
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1702
I0
sg904
g1594
sS'block_loop.thisRepN'
p1703
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1704
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p1705
Nsg70
Vy
sS'block_loop.thisTrialN'
p1706
I0
sg39
F1.116530693238019
sg34
g753
(S'\x07\xdf\x07\x0e\x1248\x0f6\x88'
tRp1707
sa(dp1708
S'trial_loop.thisTrialN'
p1709
I55
sg895
g1110
sS'block_loop.thisIndex'
p1710
g889
sg38
S'right'
p1711
sg59
g63
sS'trial_loop.thisN'
p1712
I55
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p1713
g60
(g99
S'7\x00\x00\x00'
tRp1714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1715
I0
sg904
g1118
sS'block_loop.thisRepN'
p1716
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1717
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p1718
Nsg70
Vy
sS'block_loop.thisTrialN'
p1719
I0
sg39
F1.4333317747878027
sg34
g753
(S'\x07\xdf\x07\x0e\x125\x03\x02m\x18'
tRp1720
sa(dp1721
S'trial_loop.thisTrialN'
p1722
I56
sg895
g916
sS'block_loop.thisIndex'
p1723
g889
sg38
S'left'
p1724
sg59
g63
sS'trial_loop.thisN'
p1725
I56
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p1726
g60
(g99
S'8\x00\x00\x00'
tRp1727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1728
I0
sg904
g924
sS'block_loop.thisRepN'
p1729
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1730
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p1731
Nsg70
Vy
sS'block_loop.thisTrialN'
p1732
I0
sg39
F1.5332226387217815
sg34
g753
(S'\x07\xdf\x07\x0e\x125\t\tn\x10'
tRp1733
sa(dp1734
S'trial_loop.thisTrialN'
p1735
I57
sg895
g933
sS'block_loop.thisIndex'
p1736
g889
sg38
S'right'
p1737
sg59
g63
sS'trial_loop.thisN'
p1738
I57
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1739
g60
(g99
S'9\x00\x00\x00'
tRp1740
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1741
I0
sg904
g941
sS'block_loop.thisRepN'
p1742
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1743
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p1744
Nsg70
Vy
sS'block_loop.thisTrialN'
p1745
I0
sg39
F3.7831422406743513
sg34
g753
(S'\x07\xdf\x07\x0e\x125\x10\x02\xd2\xa8'
tRp1746
sa(dp1747
S'trial_loop.thisTrialN'
p1748
I58
sg895
S'31-hobnobs.png'
p1749
sS'block_loop.thisIndex'
p1750
g889
sg38
S'left'
p1751
sg59
g63
sS'trial_loop.thisN'
p1752
I58
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1753
g60
(g99
S':\x00\x00\x00'
tRp1754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1755
I0
sg904
S'25-kitkat.png'
p1756
sS'block_loop.thisRepN'
p1757
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1758
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1759
Nsg70
Vy
sS'block_loop.thisTrialN'
p1760
I0
sg39
F4.0502544797709561
sg34
g753
(S'\x07\xdf\x07\x0e\x125\x18\x0f>X'
tRp1761
sa(dp1762
S'trial_loop.thisTrialN'
p1763
I59
sg895
g1144
sS'block_loop.thisIndex'
p1764
g889
sg38
S'left'
p1765
sg59
g63
sS'trial_loop.thisN'
p1766
I59
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p1767
g60
(g99
S';\x00\x00\x00'
tRp1768
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1769
I0
sg904
g1152
sS'block_loop.thisRepN'
p1770
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1771
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p1772
Nsg70
Vy
sS'block_loop.thisTrialN'
p1773
I0
sg39
F3.1999684680013161
sg34
g753
(S'\x07\xdf\x07\x0e\x125"\x014\x98'
tRp1774
sa(dp1775
S'trial_loop.thisTrialN'
p1776
I60
sg895
g984
sS'block_loop.thisIndex'
p1777
g889
sg38
S'left'
p1778
sg59
g63
sS'trial_loop.thisN'
p1779
I60
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1780
g60
(g99
S'<\x00\x00\x00'
tRp1781
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1782
I0
sg904
g992
sS'block_loop.thisRepN'
p1783
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1784
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1785
Nsg70
Vy
sS'block_loop.thisTrialN'
p1786
I0
sg39
F1.733341354130971
sg34
g753
(S'\x07\xdf\x07\x0e\x125*\x04\xcex'
tRp1787
sa(dp1788
S'trial_loop.thisTrialN'
p1789
I61
sg895
S'1-treacle_cookies.png'
p1790
sS'block_loop.thisIndex'
p1791
g889
sg38
S'right'
p1792
sg59
g63
sS'trial_loop.thisN'
p1793
I61
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1794
g60
(g99
S'=\x00\x00\x00'
tRp1795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1796
I0
sg904
S'21-nakd_banana_crunch.png'
p1797
sS'block_loop.thisRepN'
p1798
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1799
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1800
Nsg70
Vy
sS'block_loop.thisTrialN'
p1801
I0
sg39
F2.8000514889608894
sg34
g753
(S'\x07\xdf\x07\x0e\x1251\x01O\xf0'
tRp1802
sa(dp1803
S'trial_loop.thisTrialN'
p1804
I62
sg895
g1402
sS'block_loop.thisIndex'
p1805
g889
sg38
S'left'
p1806
sg59
g63
sS'trial_loop.thisN'
p1807
I62
sg33
g1413
sg64
g65
sS'trial_loop.thisIndex'
p1808
g60
(g99
S'>\x00\x00\x00'
tRp1809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1810
I0
sg904
g1410
sS'block_loop.thisRepN'
p1811
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1812
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p1813
Nsg70
Vy
sS'block_loop.thisTrialN'
p1814
I0
sg39
F2.8667105909880775
sg34
g753
(S'\x07\xdf\x07\x0e\x1258\r\xfe\x08'
tRp1815
sa(dp1816
S'trial_loop.thisTrialN'
p1817
I63
sg895
S'33-ambrosia_rice.png'
p1818
sS'block_loop.thisIndex'
p1819
g889
sg38
S'left'
p1820
sg59
g63
sS'trial_loop.thisN'
p1821
I63
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p1822
g60
(g99
S'?\x00\x00\x00'
tRp1823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1824
I0
sg904
S'23-crunchie_redo.png'
p1825
sS'block_loop.thisRepN'
p1826
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1827
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p1828
Nsg70
Vy
sS'block_loop.thisTrialN'
p1829
I0
sg39
F7.1998775212778128
sg34
g753
(S'\x07\xdf\x07\x0e\x126\x04\x0c_\xf8'
tRp1830
sa(dp1831
S'trial_loop.thisTrialN'
p1832
I64
sg895
g1277
sS'block_loop.thisIndex'
p1833
g889
sg38
S'left'
p1834
sg59
g63
sS'trial_loop.thisN'
p1835
I64
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p1836
g60
(g99
S'@\x00\x00\x00'
tRp1837
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1838
I0
sg904
g1285
sS'block_loop.thisRepN'
p1839
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1840
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p1841
Nsg70
Vy
sS'block_loop.thisTrialN'
p1842
I0
sg39
F1.4832381481282937
sg34
g753
(S'\x07\xdf\x07\x0e\x126\x11\x00\xde\xa8'
tRp1843
sa(dp1844
S'trial_loop.thisTrialN'
p1845
I65
sg895
g896
sS'block_loop.thisIndex'
p1846
g889
sg38
S'left'
p1847
sg59
g63
sS'trial_loop.thisN'
p1848
I65
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1849
g60
(g99
S'A\x00\x00\x00'
tRp1850
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1851
I0
sg904
g905
sS'block_loop.thisRepN'
p1852
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1853
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1854
Nsg70
Vy
sS'block_loop.thisTrialN'
p1855
I0
sg39
F3.1663991483510472
sg34
g753
(S'\x07\xdf\x07\x0e\x126\x17\x08\x93P'
tRp1856
sa(dp1857
S'trial_loop.thisTrialN'
p1858
I66
sg895
g1078
sS'block_loop.thisIndex'
p1859
g889
sg38
S'right'
p1860
sg59
g63
sS'trial_loop.thisN'
p1861
I66
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1862
g60
(g99
S'B\x00\x00\x00'
tRp1863
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1864
I0
sg904
g1085
sS'block_loop.thisRepN'
p1865
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1866
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1867
Nsg70
Vy
sS'block_loop.thisTrialN'
p1868
I0
sg39
F1.283536533213919
sg34
g753
(S'\x07\xdf\x07\x0e\x126\x1f\x0b\xb4\x18'
tRp1869
sa(dp1870
S'trial_loop.thisTrialN'
p1871
I67
sg895
g1372
sS'block_loop.thisIndex'
p1872
g889
sg38
S'left'
p1873
sg59
g63
sS'trial_loop.thisN'
p1874
I67
sg33
g1383
sg64
g65
sS'trial_loop.thisIndex'
p1875
g60
(g99
S'C\x00\x00\x00'
tRp1876
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1877
I0
sg904
g1380
sS'block_loop.thisRepN'
p1878
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1879
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p1880
Nsg70
Vy
sS'block_loop.thisTrialN'
p1881
I0
sg39
F1.3333248753842781
sg34
g753
(S'\x07\xdf\x07\x0e\x126&\x01L\x08'
tRp1882
sa(dp1883
S'trial_loop.thisTrialN'
p1884
I68
sg895
g1001
sS'block_loop.thisIndex'
p1885
g889
sg38
S'left'
p1886
sg59
g63
sS'trial_loop.thisN'
p1887
I68
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1888
g60
(g99
S'D\x00\x00\x00'
tRp1889
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1890
I0
sg904
g1009
sS'block_loop.thisRepN'
p1891
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1892
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1893
Nsg70
Vy
sS'block_loop.thisTrialN'
p1894
I0
sg39
F0.85001174609715235
sg34
g753
(S'\x07\xdf\x07\x0e\x126,\x06\xdd\xd0'
tRp1895
sa(dp1896
S'trial_loop.thisTrialN'
p1897
I69
sg895
g1127
sS'block_loop.thisIndex'
p1898
g889
sg38
S'left'
p1899
sg59
g63
sS'trial_loop.thisN'
p1900
I69
sg33
g1131
sg64
g65
sS'trial_loop.thisIndex'
p1901
g60
(g99
S'E\x00\x00\x00'
tRp1902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1903
I0
sg904
g1135
sS'block_loop.thisRepN'
p1904
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1905
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p1906
Nsg70
Vy
sS'block_loop.thisTrialN'
p1907
I0
sg39
F1.1999855739704799
sg34
g753
(S'\x07\xdf\x07\x0e\x1262\x05\x10\xe0'
tRp1908
sa(dp1909
S'trial_loop.thisTrialN'
p1910
I70
sg895
S'5-pineapple.png'
p1911
sS'block_loop.thisIndex'
p1912
g889
sg38
S'right'
p1913
sg59
g63
sS'trial_loop.thisN'
p1914
I70
sg33
g1500
sg64
g65
sS'trial_loop.thisIndex'
p1915
g60
(g99
S'F\x00\x00\x00'
tRp1916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1917
I0
sg904
S'40-sardines.png'
p1918
sS'block_loop.thisRepN'
p1919
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1920
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p1921
Nsg70
Vy
sS'block_loop.thisTrialN'
p1922
I0
sg39
F3.1999530726316152
sg34
g753
(S'\x07\xdf\x07\x0e\x1268\x08\xba`'
tRp1923
sa(dp1924
S'trial_loop.thisTrialN'
p1925
I71
sg895
S'29-beans.png'
p1926
sS'block_loop.thisIndex'
p1927
g889
sg38
S'left'
p1928
sg59
g63
sS'trial_loop.thisN'
p1929
I71
sg33
g1613
sg64
g65
sS'trial_loop.thisIndex'
p1930
g60
(g99
S'G\x00\x00\x00'
tRp1931
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1932
I0
sg904
S'46-pistachios.png'
p1933
sS'block_loop.thisRepN'
p1934
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1935
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p1936
Nsg70
Vy
sS'block_loop.thisTrialN'
p1937
I0
sg39
F1.6170108007063391
sg34
g753
(S'\x07\xdf\x07\x0e\x127\x04\x0cT@'
tRp1938
sa(dp1939
S'trial_loop.thisTrialN'
p1940
I72
sg895
g1587
sS'block_loop.thisIndex'
p1941
g889
sg38
S'left'
p1942
sg59
g63
sS'trial_loop.thisN'
p1943
I72
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p1944
g60
(g99
S'H\x00\x00\x00'
tRp1945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1946
I0
sg904
g1594
sS'block_loop.thisRepN'
p1947
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1948
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p1949
Nsg70
Vy
sS'block_loop.thisTrialN'
p1950
I0
sg39
F1.3666686813703564
sg34
g753
(S'\x07\xdf\x07\x0e\x127\x0b\x06\xedp'
tRp1951
sa(dp1952
S'trial_loop.thisTrialN'
p1953
I73
sg895
g967
sS'block_loop.thisIndex'
p1954
g889
sg38
S'right'
p1955
sg59
g63
sS'trial_loop.thisN'
p1956
I73
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1957
g60
(g99
S'I\x00\x00\x00'
tRp1958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1959
I0
sg904
g975
sS'block_loop.thisRepN'
p1960
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1961
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1962
Nsg70
Vy
sS'block_loop.thisTrialN'
p1963
I0
sg39
F1.9998768370387552
sg34
g753
(S'\x07\xdf\x07\x0e\x127\x11\x0c\xf8P'
tRp1964
sa(dp1965
S'trial_loop.thisTrialN'
p1966
I74
sg895
S'7-olives.png'
p1967
sS'block_loop.thisIndex'
p1968
g889
sg38
S'right'
p1969
sg59
g63
sS'trial_loop.thisN'
p1970
I74
sg33
g1383
sg64
g65
sS'trial_loop.thisIndex'
p1971
g60
(g99
S'J\x00\x00\x00'
tRp1972
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1973
I0
sg904
S'22-daim.png'
p1974
sS'block_loop.thisRepN'
p1975
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1976
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p1977
Nsg70
Vy
sS'block_loop.thisTrialN'
p1978
I0
sg39
F6.2998981054552132
sg34
g753
(S'\x07\xdf\x07\x0e\x127\x18\r\x84\xf0'
tRp1979
sa(dp1980
S'trial_loop.thisTrialN'
p1981
I75
sg895
g1602
sS'block_loop.thisIndex'
p1982
g889
sg38
S'right'
p1983
sg59
g63
sS'trial_loop.thisN'
p1984
I75
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p1985
g60
(g99
S'K\x00\x00\x00'
tRp1986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1987
I0
sg904
g1610
sS'block_loop.thisRepN'
p1988
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1989
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p1990
Nsg70
Vy
sS'block_loop.thisTrialN'
p1991
I0
sg39
F1.8837384406397177
sg34
g753
(S'\x07\xdf\x07\x0e\x127$\x0388'
tRp1992
sa(dp1993
S'trial_loop.thisTrialN'
p1994
I76
sg895
g1790
sS'block_loop.thisIndex'
p1995
g889
sg38
S'right'
p1996
sg59
g63
sS'trial_loop.thisN'
p1997
I76
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1998
g60
(g99
S'L\x00\x00\x00'
tRp1999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2000
I0
sg904
g1797
sS'block_loop.thisRepN'
p2001
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2002
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2003
Nsg70
Vy
sS'block_loop.thisTrialN'
p2004
I0
sg39
F1.5000008552960935
sg34
g753
(S'\x07\xdf\x07\x0e\x127+\x02\x1b\x10'
tRp2005
sa(dp2006
S'trial_loop.thisTrialN'
p2007
I77
sg895
g1507
sS'block_loop.thisIndex'
p2008
g889
sg38
S'left'
p2009
sg59
g63
sS'trial_loop.thisN'
p2010
I77
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p2011
g60
(g99
S'M\x00\x00\x00'
tRp2012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2013
I0
sg904
g1514
sS'block_loop.thisRepN'
p2014
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2015
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p2016
Nsg70
Vy
sS'block_loop.thisTrialN'
p2017
I0
sg39
F2.1334165633670636
sg34
g753
(S'\x07\xdf\x07\x0e\x1271\nH\xd0'
tRp2018
sa(dp2019
S'trial_loop.thisTrialN'
p2020
I78
sg895
g1967
sS'block_loop.thisIndex'
p2021
g889
sg38
S'left'
p2022
sg59
g63
sS'trial_loop.thisN'
p2023
I78
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p2024
g60
(g99
S'N\x00\x00\x00'
tRp2025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2026
I0
sg904
g1974
sS'block_loop.thisRepN'
p2027
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2028
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p2029
Nsg70
Vy
sS'block_loop.thisTrialN'
p2030
I0
sg39
F1.1166803704472841
sg34
g753
(S'\x07\xdf\x07\x0e\x1278\x0c\xb9\xd0'
tRp2031
sa(dp2032
S'trial_loop.thisTrialN'
p2033
I79
sg895
S'6-sour_patch_kids.png'
p2034
sS'block_loop.thisIndex'
p2035
g889
sg38
S'right'
p2036
sg59
g63
sS'trial_loop.thisN'
p2037
I79
sg33
g1413
sg64
g65
sS'trial_loop.thisIndex'
p2038
g60
(g99
S'O\x00\x00\x00'
tRp2039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2040
I0
sg904
S'38-maltesers.png'
p2041
sS'block_loop.thisRepN'
p2042
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2043
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p2044
Nsg70
Vy
sS'block_loop.thisTrialN'
p2045
I0
sg39
F1.6163975517920335
sg34
g753
(S'\x07\xdf\x07\x0e\x128\x02\x0e\xf8\x08'
tRp2046
sa(dp2047
S'trial_loop.thisTrialN'
p2048
I80
sg895
g1187
sS'block_loop.thisIndex'
p2049
g889
sg38
S'right'
p2050
sg59
g63
sS'trial_loop.thisN'
p2051
I80
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2052
g60
(g99
S'P\x00\x00\x00'
tRp2053
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2054
I0
sg904
g1195
sS'block_loop.thisRepN'
p2055
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2056
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p2057
Nsg70
Vy
sS'block_loop.thisTrialN'
p2058
I0
sg39
F1.8337014917524357
sg34
g753
(S'\x07\xdf\x07\x0e\x128\t\t\x8dP'
tRp2059
sa(dp2060
S'trial_loop.thisTrialN'
p2061
I81
sg895
g950
sS'block_loop.thisIndex'
p2062
g889
sg38
S'left'
p2063
sg59
g63
sS'trial_loop.thisN'
p2064
I81
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2065
g60
(g99
S'Q\x00\x00\x00'
tRp2066
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2067
I0
sg904
g958
sS'block_loop.thisRepN'
p2068
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2069
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2070
Nsg70
Vy
sS'block_loop.thisTrialN'
p2071
I0
sg39
F1.1666605845457525
sg34
g753
(S'\x07\xdf\x07\x0e\x128\x10\x07\xb8\x90'
tRp2072
sa(dp2073
S'trial_loop.thisTrialN'
p2074
I82
sg895
g916
sS'block_loop.thisIndex'
p2075
g889
sg38
S'right'
p2076
sg59
g63
sS'trial_loop.thisN'
p2077
I82
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2078
g60
(g99
S'R\x00\x00\x00'
tRp2079
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2080
I0
sg904
g924
sS'block_loop.thisRepN'
p2081
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2082
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2083
Nsg70
Vy
sS'block_loop.thisTrialN'
p2084
I0
sg39
F1.3165675851050764
sg34
g753
(S'\x07\xdf\x07\x0e\x128\x16\n\xaax'
tRp2085
sa(dp2086
S'trial_loop.thisTrialN'
p2087
I83
sg895
g1262
sS'block_loop.thisIndex'
p2088
g889
sg38
S'right'
p2089
sg59
g63
sS'trial_loop.thisN'
p2090
I83
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p2091
g60
(g99
S'S\x00\x00\x00'
tRp2092
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2093
I0
sg904
g1269
sS'block_loop.thisRepN'
p2094
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2095
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p2096
Nsg70
Vy
sS'block_loop.thisTrialN'
p2097
I0
sg39
F1.550009009140922
sg34
g753
(S'\x07\xdf\x07\x0e\x128\x1d\x00\xbb\x80'
tRp2098
sa(dp2099
S'trial_loop.thisTrialN'
p2100
I84
sg895
g1204
sS'block_loop.thisIndex'
p2101
g889
sg38
S'left'
p2102
sg59
g63
sS'trial_loop.thisN'
p2103
I84
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2104
g60
(g99
S'T\x00\x00\x00'
tRp2105
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2106
I0
sg904
g1211
sS'block_loop.thisRepN'
p2107
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2108
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2109
Nsg70
Vy
sS'block_loop.thisTrialN'
p2110
I0
sg39
F1.116553216095781
sg34
g753
(S'\x07\xdf\x07\x0e\x128#\t\xa4\xc0'
tRp2111
sa(dp2112
S'trial_loop.thisTrialN'
p2113
I85
sg895
g1967
sS'block_loop.thisIndex'
p2114
g889
sg38
S'left'
p2115
sg59
g63
sS'trial_loop.thisN'
p2116
I85
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p2117
g60
(g99
S'U\x00\x00\x00'
tRp2118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2119
I0
sg904
g1974
sS'block_loop.thisRepN'
p2120
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2121
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p2122
Nsg70
Vy
sS'block_loop.thisTrialN'
p2123
I0
sg39
F1.0167416098083777
sg34
g753
(S'\x07\xdf\x07\x0e\x128)\x0b\xdf\x10'
tRp2124
sa(dp2125
S'trial_loop.thisTrialN'
p2126
I86
sg895
g1219
sS'block_loop.thisIndex'
p2127
g889
sg38
S'left'
p2128
sg59
g63
sS'trial_loop.thisN'
p2129
I86
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p2130
g60
(g99
S'V\x00\x00\x00'
tRp2131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2132
I0
sg904
g1227
sS'block_loop.thisRepN'
p2133
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2134
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p2135
Nsg70
Vy
sS'block_loop.thisTrialN'
p2136
I0
sg39
F2.4332242922973819
sg34
g753
(S'\x07\xdf\x07\x0e\x128/\x0c\xae\x18'
tRp2137
sa(dp2138
S'trial_loop.thisTrialN'
p2139
I87
sg895
S'13-mccoys_steak_crisps.png'
p2140
sS'block_loop.thisIndex'
p2141
g889
sg38
S'right'
p2142
sg59
g63
sS'trial_loop.thisN'
p2143
I87
sg33
g1138
sg64
g65
sS'trial_loop.thisIndex'
p2144
g60
(g99
S'W\x00\x00\x00'
tRp2145
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2146
I0
sg904
S'3-ellas_strawberries_apples.png'
p2147
sS'block_loop.thisRepN'
p2148
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2149
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p2150
Nsg70
Vy
sS'block_loop.thisTrialN'
p2151
I0
sg39
F1.0832430518385081
sg34
g753
(S'\x07\xdf\x07\x0e\x1287\x04\x9f\x98'
tRp2152
sa(dp2153
S'trial_loop.thisTrialN'
p2154
I88
sg895
g1602
sS'block_loop.thisIndex'
p2155
g889
sg38
S'left'
p2156
sg59
g63
sS'trial_loop.thisN'
p2157
I88
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p2158
g60
(g99
S'X\x00\x00\x00'
tRp2159
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2160
I0
sg904
g1610
sS'block_loop.thisRepN'
p2161
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2162
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p2163
Nsg70
Vy
sS'block_loop.thisTrialN'
p2164
I0
sg39
F1.5332348979973176
sg34
g753
(S'\x07\xdf\x07\x0e\x129\x01\x06d\xb8'
tRp2165
sa(dp2166
S'trial_loop.thisTrialN'
p2167
I89
sg895
g1749
sS'block_loop.thisIndex'
p2168
g889
sg38
S'right'
p2169
sg59
g63
sS'trial_loop.thisN'
p2170
I89
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2171
g60
(g99
S'Y\x00\x00\x00'
tRp2172
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2173
I0
sg904
g1756
sS'block_loop.thisRepN'
p2174
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2175
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2176
Nsg70
Vy
sS'block_loop.thisTrialN'
p2177
I0
sg39
F1.4999883109230723
sg34
g753
(S'\x07\xdf\x07\x0e\x129\x07\x0f\x0b\x90'
tRp2178
sa(dp2179
S'trial_loop.thisTrialN'
p2180
I90
sg895
S'45-chewy_nougat_redo.png'
p2181
sS'block_loop.thisIndex'
p2182
g889
sg38
S'right'
p2183
sg59
g63
sS'trial_loop.thisN'
p2184
I90
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p2185
g60
(g99
S'Z\x00\x00\x00'
tRp2186
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2187
I0
sg904
S'41-peanuts_redo.png'
p2188
sS'block_loop.thisRepN'
p2189
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2190
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p2191
Nsg70
Vy
sS'block_loop.thisTrialN'
p2192
I0
sg39
F2.149983692313981
sg34
g753
(S'\x07\xdf\x07\x0e\x129\x0e\x07\xfa\xf8'
tRp2193
sa(dp2194
S'trial_loop.thisTrialN'
p2195
I91
sg895
g933
sS'block_loop.thisIndex'
p2196
g889
sg38
S'right'
p2197
sg59
g63
sS'trial_loop.thisN'
p2198
I91
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2199
g60
(g99
S'[\x00\x00\x00'
tRp2200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2201
I0
sg904
g941
sS'block_loop.thisRepN'
p2202
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2203
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2204
Nsg70
Vy
sS'block_loop.thisTrialN'
p2205
I0
sg39
F1.9499795868796355
sg34
g753
(S'\x07\xdf\x07\x0e\x129\x15\n\xaax'
tRp2206
sa(dp2207
S'trial_loop.thisTrialN'
p2208
I92
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p2209
sS'block_loop.thisIndex'
p2210
g889
sg38
S'right'
p2211
sg59
g63
sS'trial_loop.thisN'
p2212
I92
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p2213
g60
(g99
S'\\\x00\x00\x00'
tRp2214
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2215
I0
sg904
S'36-fig_rolls.png'
p2216
sS'block_loop.thisRepN'
p2217
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2218
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2219
Nsg70
Vy
sS'block_loop.thisTrialN'
p2220
I0
sg39
F2.349974683169421
sg34
g753
(S'\x07\xdf\x07\x0e\x129\x1c\n{\x98'
tRp2221
sa(dp2222
S'trial_loop.thisTrialN'
p2223
I93
sg895
g1204
sS'block_loop.thisIndex'
p2224
g889
sg38
S'left'
p2225
sg59
g63
sS'trial_loop.thisN'
p2226
I93
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2227
g60
(g99
S']\x00\x00\x00'
tRp2228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2229
I0
sg904
g1211
sS'block_loop.thisRepN'
p2230
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2231
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2232
Nsg70
Vy
sS'block_loop.thisTrialN'
p2233
I0
sg39
F1.8997906799850171
sg34
g753
(S'\x07\xdf\x07\x0e\x129$\x01\x01\xd0'
tRp2234
sa(dp2235
S'trial_loop.thisTrialN'
p2236
I94
sg895
g1967
sS'block_loop.thisIndex'
p2237
g889
sg38
S'left'
p2238
sg59
g63
sS'trial_loop.thisN'
p2239
I94
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p2240
g60
(g99
S'^\x00\x00\x00'
tRp2241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2242
I0
sg904
g1974
sS'block_loop.thisRepN'
p2243
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2244
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p2245
Nsg70
Vy
sS'block_loop.thisTrialN'
p2246
I0
sg39
F0.99998460463029915
sg34
g753
(S'\x07\xdf\x07\x0e\x129*\x0f&\xe8'
tRp2247
sa(dp2248
S'trial_loop.thisTrialN'
p2249
I95
sg895
g984
sS'block_loop.thisIndex'
p2250
g889
sg38
S'left'
p2251
sg59
g63
sS'trial_loop.thisN'
p2252
I95
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2253
g60
(g99
S'_\x00\x00\x00'
tRp2254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2255
I0
sg904
g992
sS'block_loop.thisRepN'
p2256
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2257
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2258
Nsg70
Vy
sS'block_loop.thisTrialN'
p2259
I0
sg39
F1.2664724759306409
sg34
g753
(S'\x07\xdf\x07\x0e\x1291\x00u0'
tRp2260
sa(dp2261
S'trial_loop.thisTrialN'
p2262
I96
sg895
g1445
sS'block_loop.thisIndex'
p2263
g889
sg38
S'right'
p2264
sg59
g63
sS'trial_loop.thisN'
p2265
I96
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p2266
g60
(g99
S'`\x00\x00\x00'
tRp2267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2268
I0
sg904
g1453
sS'block_loop.thisRepN'
p2269
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2270
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p2271
Nsg70
Vy
sS'block_loop.thisTrialN'
p2272
I0
sg39
F3.0999544411097304
sg34
g753
(S'\x07\xdf\x07\x0e\x1297\x05\x10\xe0'
tRp2273
sa(dp2274
S'trial_loop.thisTrialN'
p2275
I97
sg895
g2209
sS'block_loop.thisIndex'
p2276
g889
sg38
S'right'
p2277
sg59
g63
sS'trial_loop.thisN'
p2278
I97
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p2279
g60
(g99
S'a\x00\x00\x00'
tRp2280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2281
I0
sg904
g2216
sS'block_loop.thisRepN'
p2282
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2283
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2284
Nsg70
Vy
sS'block_loop.thisTrialN'
p2285
I0
sg39
F3.5332839351030998
sg34
g753
(S'\x07\xdf\x07\x0e\x12:\x03\x07\x04\xe0'
tRp2286
sa(dp2287
S'trial_loop.thisTrialN'
p2288
I98
sg895
g1262
sS'block_loop.thisIndex'
p2289
g889
sg38
S'left'
p2290
sg59
g63
sS'trial_loop.thisN'
p2291
I98
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p2292
g60
(g99
S'b\x00\x00\x00'
tRp2293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2294
I0
sg904
g1269
sS'block_loop.thisRepN'
p2295
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2296
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p2297
Nsg70
Vy
sS'block_loop.thisTrialN'
p2298
I0
sg39
F1.1499084260576637
sg34
g753
(S'\x07\xdf\x07\x0e\x12:\x0c\x00\x9c@'
tRp2299
sa(dp2300
S'trial_loop.thisTrialN'
p2301
I99
sg895
g2034
sS'block_loop.thisIndex'
p2302
g889
sg38
S'left'
p2303
sg59
g63
sS'trial_loop.thisN'
p2304
I99
sg33
g1413
sg64
g65
sS'trial_loop.thisIndex'
p2305
g60
(g99
S'c\x00\x00\x00'
tRp2306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2307
I0
sg904
g2041
sS'block_loop.thisRepN'
p2308
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2309
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p2310
Nsg70
Vy
sS'block_loop.thisTrialN'
p2311
I0
sg39
F2.7664254345181689
sg34
g753
(S'\x07\xdf\x07\x0e\x12:\x12\x03O\xa8'
tRp2312
sa(dp2313
S'trial_loop.thisTrialN'
p2314
I100
sg895
g1926
sS'block_loop.thisIndex'
p2315
g889
sg38
S'right'
p2316
sg59
g63
sS'trial_loop.thisN'
p2317
I100
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p2318
g60
(g99
S'd\x00\x00\x00'
tRp2319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2320
I0
sg904
g1933
sS'block_loop.thisRepN'
p2321
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2322
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p2323
Nsg70
Vy
sS'block_loop.thisTrialN'
p2324
I0
sg39
F3.0499676697218092
sg34
g753
(S'\x07\xdf\x07\x0e\x12:\x1a\x00Bh'
tRp2325
sa(dp2326
S'trial_loop.thisTrialN'
p2327
I101
sg895
g896
sS'block_loop.thisIndex'
p2328
g889
sg38
S'left'
p2329
sg59
g63
sS'trial_loop.thisN'
p2330
I101
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2331
g60
(g99
S'e\x00\x00\x00'
tRp2332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2333
I0
sg904
g905
sS'block_loop.thisRepN'
p2334
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2335
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2336
Nsg70
Vy
sS'block_loop.thisTrialN'
p2337
I0
sg39
F1.6000000570202246
sg34
g753
(S'\x07\xdf\x07\x0e\x12:"\x01~\xd0'
tRp2338
sa(dp2339
S'trial_loop.thisTrialN'
p2340
I102
sg895
g1219
sS'block_loop.thisIndex'
p2341
g889
sg38
S'right'
p2342
sg59
g63
sS'trial_loop.thisN'
p2343
I102
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p2344
g60
(g99
S'f\x00\x00\x00'
tRp2345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2346
I0
sg904
g1227
sS'block_loop.thisRepN'
p2347
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2348
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p2349
Nsg70
Vy
sS'block_loop.thisTrialN'
p2350
I0
sg39
F1.6999137289058126
sg34
g753
(S'\x07\xdf\x07\x0e\x12:(\x0b\x1b\xc0'
tRp2351
sa(dp2352
S'trial_loop.thisTrialN'
p2353
I103
sg895
g1926
sS'block_loop.thisIndex'
p2354
g889
sg38
S'right'
p2355
sg59
g63
sS'trial_loop.thisN'
p2356
I103
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p2357
g60
(g99
S'g\x00\x00\x00'
tRp2358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2359
I0
sg904
g1933
sS'block_loop.thisRepN'
p2360
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2361
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p2362
Nsg70
Vy
sS'block_loop.thisTrialN'
p2363
I0
sg39
F2.2499666433650418
sg34
g753
(S'\x07\xdf\x07\x0e\x12:/\x07$ '
tRp2364
sa(dp2365
S'trial_loop.thisTrialN'
p2366
I104
sg895
g1046
sS'block_loop.thisIndex'
p2367
g889
sg38
S'left'
p2368
sg59
g63
sS'trial_loop.thisN'
p2369
I104
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2370
g60
(g99
S'h\x00\x00\x00'
tRp2371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2372
I0
sg904
g1054
sS'block_loop.thisRepN'
p2373
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2374
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2375
Nsg70
Vy
sS'block_loop.thisTrialN'
p2376
I0
sg39
F2.100026856369368
sg34
g753
(S'\x07\xdf\x07\x0e\x12:6\x0b}h'
tRp2377
sa(dp2378
S'trial_loop.thisTrialN'
p2379
I105
sg895
g967
sS'block_loop.thisIndex'
p2380
g889
sg38
S'right'
p2381
sg59
g63
sS'trial_loop.thisN'
p2382
I105
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2383
g60
(g99
S'i\x00\x00\x00'
tRp2384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2385
I0
sg904
g975
sS'block_loop.thisRepN'
p2386
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2387
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2388
Nsg70
Vy
sS'block_loop.thisTrialN'
p2389
I0
sg39
F1.2166727297808393
sg34
g753
(S'\x07\xdf\x07\x0e\x12;\x01\ruP'
tRp2390
sa(dp2391
S'trial_loop.thisTrialN'
p2392
I106
sg895
g1475
sS'block_loop.thisIndex'
p2393
g889
sg38
S'left'
p2394
sg59
g63
sS'trial_loop.thisN'
p2395
I106
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p2396
g60
(g99
S'j\x00\x00\x00'
tRp2397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2398
I0
sg904
g1482
sS'block_loop.thisRepN'
p2399
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2400
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p2401
Nsg70
Vy
sS'block_loop.thisTrialN'
p2402
I0
sg39
F2.0332941986816877
sg34
g753
(S'\x07\xdf\x07\x0e\x12;\x08\x02\x1b\x10'
tRp2403
sa(dp2404
S'trial_loop.thisTrialN'
p2405
I107
sg895
g984
sS'block_loop.thisIndex'
p2406
g889
sg38
S'left'
p2407
sg59
g63
sS'trial_loop.thisN'
p2408
I107
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2409
g60
(g99
S'k\x00\x00\x00'
tRp2410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2411
I0
sg904
g992
sS'block_loop.thisRepN'
p2412
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2413
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2414
Nsg70
Vy
sS'block_loop.thisTrialN'
p2415
I0
sg39
F1.4667023801230243
sg34
g753
(S'\x07\xdf\x07\x0e\x12;\x0f\x03\x1c\xe0'
tRp2416
sa(dp2417
S'trial_loop.thisTrialN'
p2418
I108
sg895
g1911
sS'block_loop.thisIndex'
p2419
g889
sg38
S'right'
p2420
sg59
g63
sS'trial_loop.thisN'
p2421
I108
sg33
g1500
sg64
g65
sS'trial_loop.thisIndex'
p2422
g60
(g99
S'l\x00\x00\x00'
tRp2423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2424
I0
sg904
g1918
sS'block_loop.thisRepN'
p2425
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2426
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2427
Nsg70
Vy
sS'block_loop.thisTrialN'
p2428
I0
sg39
F3.6997728897804336
sg34
g753
(S'\x07\xdf\x07\x0e\x12;\x15\n\x96\xf0'
tRp2429
sa(dp2430
S'trial_loop.thisTrialN'
p2431
I109
sg895
g1818
sS'block_loop.thisIndex'
p2432
g889
sg38
S'left'
p2433
sg59
g63
sS'trial_loop.thisN'
p2434
I109
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2435
g60
(g99
S'm\x00\x00\x00'
tRp2436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2437
I0
sg904
g1825
sS'block_loop.thisRepN'
p2438
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2439
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2440
Nsg70
Vy
sS'block_loop.thisTrialN'
p2441
I0
sg39
F1.633377219641261
sg34
g753
(S'\x07\xdf\x07\x0e\x12;\x1e\x06\x8f\xb0'
tRp2442
sa(dp2443
S'trial_loop.thisTrialN'
p2444
I110
sg895
g1144
sS'block_loop.thisIndex'
p2445
g889
sg38
S'right'
p2446
sg59
g63
sS'trial_loop.thisN'
p2447
I110
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p2448
g60
(g99
S'n\x00\x00\x00'
tRp2449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2450
I0
sg904
g1152
sS'block_loop.thisRepN'
p2451
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2452
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p2453
Nsg70
Vy
sS'block_loop.thisTrialN'
p2454
I0
sg39
F1.8999814115159097
sg34
g753
(S'\x07\xdf\x07\x0e\x12;%\x01cx'
tRp2455
sa(dp2456
S'trial_loop.thisTrialN'
p2457
I111
sg895
g1507
sS'block_loop.thisIndex'
p2458
g889
sg38
S'left'
p2459
sg59
g63
sS'trial_loop.thisN'
p2460
I111
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p2461
g60
(g99
S'o\x00\x00\x00'
tRp2462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2463
I0
sg904
g1514
sS'block_loop.thisRepN'
p2464
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2465
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p2466
Nsg70
Vy
sS'block_loop.thisTrialN'
p2467
I0
sg39
F2.8999665863448172
sg34
g753
(S'\x07\xdf\x07\x0e\x12;,\x00\x80\xe8'
tRp2468
sa(dp2469
S'trial_loop.thisTrialN'
p2470
I112
sg895
g1818
sS'block_loop.thisIndex'
p2471
g889
sg38
S'left'
p2472
sg59
g63
sS'trial_loop.thisN'
p2473
I112
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2474
g60
(g99
S'p\x00\x00\x00'
tRp2475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2476
I0
sg904
g1825
sS'block_loop.thisRepN'
p2477
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2478
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2479
Nsg70
Vy
sS'block_loop.thisTrialN'
p2480
I0
sg39
F1.4000244615308475
sg34
g753
(S'\x07\xdf\x07\x0e\x12;3\x0e\x9e0'
tRp2481
sa(dp2482
S'trial_loop.thisTrialN'
p2483
I113
sg895
S'44-crunch.png'
p2484
sS'block_loop.thisIndex'
p2485
g889
sg38
S'left'
p2486
sg59
g63
sS'trial_loop.thisN'
p2487
I113
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2488
g60
(g99
S'q\x00\x00\x00'
tRp2489
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2490
I0
sg904
S'26-walkers_smoky_bacon.png'
p2491
sS'block_loop.thisRepN'
p2492
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2493
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p2494
Nsg70
Vy
sS'block_loop.thisTrialN'
p2495
I0
sg39
F1.0499026670477178
sg34
g753
(S'\x07\xdf\x07\x0e\x12;:\x06\x1eh'
tRp2496
sa(dp2497
S'trial_loop.thisTrialN'
p2498
I114
sg895
g1063
sS'block_loop.thisIndex'
p2499
g889
sg38
S'left'
p2500
sg59
g63
sS'trial_loop.thisN'
p2501
I114
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2502
g60
(g99
S'r\x00\x00\x00'
tRp2503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2504
I0
sg904
g1070
sS'block_loop.thisRepN'
p2505
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2506
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2507
Nsg70
Vy
sS'block_loop.thisTrialN'
p2508
I0
sg39
F0.85002856696155504
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x00\x04\x07f\x88'
tRp2509
sa(dp2510
S'trial_loop.thisTrialN'
p2511
I115
sg895
S'8-liquorice_catherine_wheels.png'
p2512
sS'block_loop.thisIndex'
p2513
g889
sg38
S'left'
p2514
sg59
g63
sS'trial_loop.thisN'
p2515
I115
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2516
g60
(g99
S's\x00\x00\x00'
tRp2517
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2518
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p2519
sS'block_loop.thisRepN'
p2520
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vy
sS'block_loop.thisTrialN'
p2523
I0
sg39
F1.4000612393610936
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x00\n\x05\x95\xb0'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1475
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1482
sS'block_loop.thisRepN'
p2533
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vy
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.8999902495961578
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x00\x10\x0c\x19\xa8'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1204
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1211
sS'block_loop.thisRepN'
p2546
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vy
sS'block_loop.thisTrialN'
p2549
I0
sg39
F2.1831718339963118
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x00\x17\x0b7\x18'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1445
sS'block_loop.thisIndex'
p2553
g889
sg38
S'right'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1453
sS'block_loop.thisRepN'
p2559
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vy
sS'block_loop.thisTrialN'
p2562
I0
sg39
F0.94991429910442093
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x00\x1e\x0ec\x98'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1790
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1797
sS'block_loop.thisRepN'
p2572
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vy
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.350035409352131
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x00$\x0e<\x88'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g2512
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g2519
sS'block_loop.thisRepN'
p2585
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vy
sS'block_loop.thisTrialN'
p2588
I0
sg39
F1.1333712325540546
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x00+\x04\xc6\xa8'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1262
sS'block_loop.thisIndex'
p2592
g889
sg38
S'left'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1269
sS'block_loop.thisRepN'
p2598
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vy
sS'block_loop.thisTrialN'
p2601
I0
sg39
F0.93316157041772385
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x001\x07?x'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1445
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1453
sS'block_loop.thisRepN'
p2611
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vy
sS'block_loop.thisTrialN'
p2614
I0
sg39
F2.0498864163819235
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x007\x06\xdd\xd0'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1093
sS'block_loop.thisIndex'
p2618
g889
sg38
S'left'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1101
sS'block_loop.thisRepN'
p2624
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vy
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.5166643478587503
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01\x02\x08"\x08'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1018
sS'block_loop.thisIndex'
p2631
g889
sg38
S'right'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1025
sS'block_loop.thisRepN'
p2637
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vy
sS'block_loop.thisTrialN'
p2640
I0
sg39
F1.2000086670232122
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01\t\x01L\x08'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1926
sS'block_loop.thisIndex'
p2644
g889
sg38
S'right'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1933
sS'block_loop.thisRepN'
p2650
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vy
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.4666664575925097
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01\x0f\x04\xb7\x08'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g2181
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g2188
sS'block_loop.thisRepN'
p2663
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vy
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.349915382481413
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01\x15\x0ck\xb0'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1790
sS'block_loop.thisIndex'
p2670
g889
sg38
S'right'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1797
sS'block_loop.thisRepN'
p2676
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vy
sS'block_loop.thisTrialN'
p2679
I0
sg39
F0.85000861000298755
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01\x1c\x02\xf9\xb8'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1402
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1410
sS'block_loop.thisRepN'
p2689
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vy
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.7166276840689534
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01"\x01(\xe0'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g2209
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g2216
sS'block_loop.thisRepN'
p2702
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vy
sS'block_loop.thisTrialN'
p2705
I0
sg39
F2.0832935144426301
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01(\x0c\xae\x18'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1219
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1227
sS'block_loop.thisRepN'
p2715
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.2999531296518398
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x01/\x0eg\x80'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1749
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1756
sS'block_loop.thisRepN'
p2728
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.4499730295938207
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x016\x04=\xf0'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1926
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1933
sS'block_loop.thisRepN'
p2741
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.86696775069140131
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x02\x00\x0b\xb4\x18'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g2512
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g2519
sS'block_loop.thisRepN'
p2754
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F5.3332729872818163
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x02\x06\n!\xc0'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g2484
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g2491
sS'block_loop.thisRepN'
p2767
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F3.3166183328066836
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x02\x11\x00\x94p'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1911
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1500
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1918
sS'block_loop.thisRepN'
p2780
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F4.249933856928692
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x02\x19\x05\xdc\x00'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1093
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1101
sS'block_loop.thisRepN'
p2793
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.7998844206849753
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x02"\n)\x90'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g950
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g958
sS'block_loop.thisRepN'
p2806
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F8.3331809001610964
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x02)\x07\x9d8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1490
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1494
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1498
sS'block_loop.thisRepN'
p2819
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.0166740412387298
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x026\r>\xa0'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g2140
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1138
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g2147
sS'block_loop.thisRepN'
p2832
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.850014597090194
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03\x00\x0e\r\xa8'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1093
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1101
sS'block_loop.thisRepN'
p2845
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F2.2166011698209331
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03\x06\x0c<\xd0'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1277
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1285
sS'block_loop.thisRepN'
p2858
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.1165398164193903
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03\x0e\x00\xa0('
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g2140
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1131
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g2147
sS'block_loop.thisRepN'
p2871
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.0165896518046793
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03\x14\x03\x18\xf8'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1078
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1085
sS'block_loop.thisRepN'
p2884
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.96646033069191617
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03\x1a\x03\xa9\x80'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1063
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1070
sS'block_loop.thisRepN'
p2897
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F1.0500013114578906
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03 \x03\xc0\xf0'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g2209
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g2216
sS'block_loop.thisRepN'
p2910
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.9164940864684468
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03&\x05\t\x10'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1018
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1025
sS'block_loop.thisRepN'
p2923
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.96663053506199503
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x03-\x04e\x00'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g896
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g905
sS'block_loop.thisRepN'
p2936
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.5499958945692924
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x033\x04=\xf0'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1818
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1825
sS'block_loop.thisRepN'
p2949
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F2.0002819633555191
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x039\r#H'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1277
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1285
sS'block_loop.thisRepN'
p2962
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.3499738278696896
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x04\x04\r\xaf\xe8'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1204
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1211
sS'block_loop.thisRepN'
p2975
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.349906829502288
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x04\x0b\x04:\x08'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1602
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1610
sS'block_loop.thisRepN'
p2988
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.4832127742774901
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x04\x11\n\nP'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1402
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1410
sS'block_loop.thisRepN'
p3001
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F3.0663531903192052
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x04\x18\x02\xbb8'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g933
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g941
sS'block_loop.thisRepN'
p3014
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.3500428219376772
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x04 \x0428'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1587
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1594
sS'block_loop.thisRepN'
p3027
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.6834013390543987
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x04&\t\xfe\x98'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1602
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1606
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1610
sS'block_loop.thisRepN'
p3040
I0
sg907
g1606
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1613
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.366624490954564
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x04-\x05\xc8x'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1219
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1227
sS'block_loop.thisRepN'
p3053
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.1667030643657199
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x043\x0b\xd3X'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1507
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1514
sS'block_loop.thisRepN'
p3066
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F2.6500176191475475
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x049\x0f\x03\xc0'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1127
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1131
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1135
sS'block_loop.thisRepN'
p3079
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.1167108760855626
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05\x05\n\x0e8'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1911
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1500
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1918
sS'block_loop.thisRepN'
p3092
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F3.116535825025494
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05\x0b\x0cH\x88'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g950
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g958
sS'block_loop.thisRepN'
p3105
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.8499934997307719
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05\x13\x0e\xb5\xa0'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1490
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1494
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1498
sS'block_loop.thisRepN'
p3118
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F2.216649636728107
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05\x1a\x0c\xe0\xe0'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1749
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1756
sS'block_loop.thisRepN'
p3131
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.2166770062722208
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05"\x01~\xd0'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g2209
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g2216
sS'block_loop.thisRepN'
p3144
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.4837108430183434
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05(\x05b\xe8'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g2484
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g2491
sS'block_loop.thisRepN'
p3157
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.1500059300669818
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05.\r\x1bx'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g933
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g941
sS'block_loop.thisRepN'
p3170
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.0165868008079997
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x055\x00\xcb '
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g2484
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g2491
sS'block_loop.thisRepN'
p3183
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.83336707009948441
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x05;\x01[\xa8'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1475
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1482
sS'block_loop.thisRepN'
p3196
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.3000112899353553
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x06\x04\x0e\x92x'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1749
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1756
sS'block_loop.thisRepN'
p3209
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.4000144830533827
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x06\x0b\x04e\x00'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1790
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1797
sS'block_loop.thisRepN'
p3222
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.0999176632794843
sg34
g753
(S"\x07\xdf\x07\x0e\x13\x06\x11\x0b'x"
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g2512
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1097
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g2519
sS'block_loop.thisRepN'
p3235
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.7833070281558321
sg34
g753
(S"\x07\xdf\x07\x0e\x13\x06\x17\r'0"
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1587
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1594
sS'block_loop.thisRepN'
p3248
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.2166778615719522
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x06\x1e\n\\X'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g916
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g924
sS'block_loop.thisRepN'
p3261
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.5498122905228229
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x06$\x0eDX'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g2034
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g2041
sS'block_loop.thisRepN'
p3274
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F5.9499761656879855
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x06+\x07\xe7p'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g2140
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1131
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g2147
sS'block_loop.thisRepN'
p3287
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F3.1498673717360361
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x066\x07\xa1 '
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1110
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1121
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1118
sS'block_loop.thisRepN'
p3300
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.1500076406664448
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07\x02\nL\xb8'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g2140
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1138
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g2147
sS'block_loop.thisRepN'
p3313
I0
sg907
g1131
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1138
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.88335042029211763
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07\x08\r>\xa0'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g2181
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g2188
sS'block_loop.thisRepN'
p3326
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F1.1500233211336308
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07\x0e\x0b\xe6\xe0'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1110
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1118
sS'block_loop.thisRepN'
p3339
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.85002828186406987
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07\x14\x0e\x9e0'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1262
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1148
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1269
sS'block_loop.thisRepN'
p3352
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F1.4166009987602592
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07\x1a\x0c\xcdX'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1911
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1500
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1918
sS'block_loop.thisRepN'
p3365
I0
sg907
g1500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.5666944543590944
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07!\x04\x8c\x10'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1046
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1054
sS'block_loop.thisRepN'
p3378
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F1.1499848327075597
sg34
g753
(S"\x07\xdf\x07\x0e\x13\x07'\r\xac\x00"
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g2484
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g2491
sS'block_loop.thisRepN'
p3391
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.98331084849269246
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07.\x01!\x10'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g2034
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g2041
sS'block_loop.thisRepN'
p3404
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.8500861570537381
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x074\x01w\x00'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1277
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1285
sS'block_loop.thisRepN'
p3417
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.1999912759565632
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x07:\x0e\xe0\x98'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1372
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1380
sS'block_loop.thisRepN'
p3430
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F2.7666247190354625
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x08\x05\x03G\xd8'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1063
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1070
sS'block_loop.thisRepN'
p3443
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F1.0166634925590188
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x08\r\x00:\x98'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g2181
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g2188
sS'block_loop.thisRepN'
p3456
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.93335857413694612
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x08\x13\x01\t\xa0'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g967
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g975
sS'block_loop.thisRepN'
p3469
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.75003706293136929
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x08\x19\x00ix'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g2181
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1281
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g2188
sS'block_loop.thisRepN'
p3482
I0
sg907
g1281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1288
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.8666683962692332
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x08\x1e\x0co\x98'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g2512
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1097
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g2519
sS'block_loop.thisRepN'
p3495
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F6.9165485404628271
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x08$\n\xdd@'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1967
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1974
sS'block_loop.thisRepN'
p3508
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F2.099983236152184
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x080\n\x16\x08'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1018
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1025
sS'block_loop.thisRepN'
p3521
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.4670319550859858
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x087\x0c\x8a\xf0'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1507
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1514
sS'block_loop.thisRepN'
p3534
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.9166226663182897
sg34
g753
(S'\x07\xdf\x07\x0e\x13\t\x02\x04\xfdX'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1372
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1380
sS'block_loop.thisRepN'
p3547
I0
sg907
g1376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1383
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.2667025511836982
sg34
g753
(S'\x07\xdf\x07\x0e\x13\t\x08\x04"\x98'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1818
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1825
sS'block_loop.thisRepN'
p3560
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.8165635937148181
sg34
g753
(S'\x07\xdf\x07\x0e\x13\t\x0e\x08\xbeH'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1144
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1154
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1152
sS'block_loop.thisRepN'
p3573
I0
sg907
g1154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1148
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.0165819541180099
sg34
g753
(S'\x07\xdf\x07\x0e\x13\t\x15\x06l\x88'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g916
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g924
sS'block_loop.thisRepN'
p3586
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.91693969690459198
sg34
g753
(S'\x07\xdf\x07\x0e\x13\t\x1b\x07;\x90'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1475
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1449
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1482
sS'block_loop.thisRepN'
p3599
I0
sg907
g1449
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1456
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.3832346699164191
sg34
g753
(S'\x07\xdf\x07\x0e\x13\t!\x06\x9bh'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g2034
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1413
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g2041
sS'block_loop.thisRepN'
p3612
I0
sg907
g1406
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.9830662331660278
sg34
g753
(S"\x07\xdf\x07\x0e\x13\t'\x0c\xe4\xc8"
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F26.016600200480752
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'43-mrporky_pork_crackles_redo.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'18-mms.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'18-mms.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'43-mrporky_pork_crackles_redo.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F2.5664658046007389
sg34
g753
(S'\x07\xdf\x07\x0e\x13\n;\x00\xf20'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'20-fruit_pastilles.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'2-steamed_puddings.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'2-steamed_puddings.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'20-fruit_pastilles.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.0499611124359944
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b\x06\n\x0e8'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'1-treacle_cookies.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'1-treacle_cookies.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'21-nakd_banana_crunch.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
S'21-nakd_banana_crunch.png'
p3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3682
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.183335766181699
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b\x0c\x0bVX'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
g3654
sS'block_loop.thisIndex'
p3688
g3627
sg38
S'right'
p3689
sg59
g63
sS'trial_loop.thisN'
p3690
I3
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3691
g60
(g99
S'\x03\x00\x00\x00'
tRp3692
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3693
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3694
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3695
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3696
Nsg70
Vy
sS'block_loop.thisTrialN'
p3697
I0
sg39
F0.76664011440152535
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b\x12\x0e\x86\xc0'
tRp3698
sa(dp3699
S'trial_loop.thisTrialN'
p3700
I4
sg3633
S'40-sardines.png'
p3701
sS'block_loop.thisIndex'
p3702
g3627
sg38
S'right'
p3703
sg59
g63
sS'trial_loop.thisN'
p3704
I4
sg33
S'5-pineapple.png'
p3705
sg64
g65
sS'trial_loop.thisIndex'
p3706
g60
(g99
S'\x04\x00\x00\x00'
tRp3707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3708
I0
sg3642
S'5-pineapple.png'
p3709
sS'block_loop.thisRepN'
p3710
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3711
I1
sg3647
S'40-sardines.png'
p3712
sg55
g11
sS'block_loop.thisTrial'
p3713
Nsg70
Vy
sS'block_loop.thisTrialN'
p3714
I0
sg39
F1.2333319458484766
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b\x18\x0b\x858'
tRp3715
sa(dp3716
S'trial_loop.thisTrialN'
p3717
I5
sg3633
S'27-hartleys_raspberries_jelly.png'
p3718
sS'block_loop.thisIndex'
p3719
g3627
sg38
S'right'
p3720
sg59
g63
sS'trial_loop.thisN'
p3721
I5
sg33
S'51-mars.png'
p3722
sg64
g65
sS'trial_loop.thisIndex'
p3723
g60
(g99
S'\x05\x00\x00\x00'
tRp3724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3725
I0
sg3642
S'51-mars.png'
p3726
sS'block_loop.thisRepN'
p3727
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3728
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3729
sg55
g11
sS'block_loop.thisTrial'
p3730
Nsg70
Vy
sS'block_loop.thisTrialN'
p3731
I0
sg39
F0.88330252358719008
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b\x1f\x00e\x90'
tRp3732
sa(dp3733
S'trial_loop.thisTrialN'
p3734
I6
sg3633
S'41-peanuts_redo.png'
p3735
sS'block_loop.thisIndex'
p3736
g3627
sg38
S'left'
p3737
sg59
g63
sS'trial_loop.thisN'
p3738
I6
sg33
S'45-chewy_nougat_redo.png'
p3739
sg64
g65
sS'trial_loop.thisIndex'
p3740
g60
(g99
S'\x06\x00\x00\x00'
tRp3741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3742
I0
sg3642
S'45-chewy_nougat_redo.png'
p3743
sS'block_loop.thisRepN'
p3744
I1
sg3645
S'41-peanuts_redo.png'
p3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3746
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p3747
Nsg70
Vy
sS'block_loop.thisTrialN'
p3748
I0
sg39
F1.0166697647473484
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b$\x0eS\xf8'
tRp3749
sa(dp3750
S'trial_loop.thisTrialN'
p3751
I7
sg3633
S'33-ambrosia_rice.png'
p3752
sS'block_loop.thisIndex'
p3753
g3627
sg38
S'left'
p3754
sg59
g63
sS'trial_loop.thisN'
p3755
I7
sg33
S'23-crunchie_redo.png'
p3756
sg64
g65
sS'trial_loop.thisIndex'
p3757
g60
(g99
S'\x07\x00\x00\x00'
tRp3758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3759
I0
sg3642
S'23-crunchie_redo.png'
p3760
sS'block_loop.thisRepN'
p3761
I1
sg3645
S'33-ambrosia_rice.png'
p3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3763
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p3764
Nsg70
Vy
sS'block_loop.thisTrialN'
p3765
I0
sg39
F1.1500127724575577
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b*\x0f#\x00'
tRp3766
sa(dp3767
S'trial_loop.thisTrialN'
p3768
I8
sg3633
S'21-nakd_banana_crunch.png'
p3769
sS'block_loop.thisIndex'
p3770
g3627
sg38
S'left'
p3771
sg59
g63
sS'trial_loop.thisN'
p3772
I8
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p3773
g60
(g99
S'\x08\x00\x00\x00'
tRp3774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3775
I0
sg3642
S'1-treacle_cookies.png'
p3776
sS'block_loop.thisRepN'
p3777
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3778
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p3779
Nsg70
Vy
sS'block_loop.thisTrialN'
p3780
I0
sg39
F0.81664171096417704
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b1\x02\x94('
tRp3781
sa(dp3782
S'trial_loop.thisTrialN'
p3783
I9
sg3633
g3718
sS'block_loop.thisIndex'
p3784
g3627
sg38
S'right'
p3785
sg59
g63
sS'trial_loop.thisN'
p3786
I9
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p3787
g60
(g99
S'\t\x00\x00\x00'
tRp3788
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3789
I0
sg3642
g3726
sS'block_loop.thisRepN'
p3790
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3791
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p3792
Nsg70
Vy
sS'block_loop.thisTrialN'
p3793
I0
sg39
F0.86666868136671837
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0b7\x00J8'
tRp3794
sa(dp3795
S'trial_loop.thisTrialN'
p3796
I10
sg3633
g3701
sS'block_loop.thisIndex'
p3797
g3627
sg38
S'right'
p3798
sg59
g63
sS'trial_loop.thisN'
p3799
I10
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p3800
g60
(g99
S'\n\x00\x00\x00'
tRp3801
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3802
I0
sg3642
g3709
sS'block_loop.thisRepN'
p3803
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3804
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p3805
Nsg70
Vy
sS'block_loop.thisTrialN'
p3806
I0
sg39
F1.5670029319626337
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c\x00\x0e8\xa0'
tRp3807
sa(dp3808
S'trial_loop.thisTrialN'
p3809
I11
sg3633
S'51-mars.png'
p3810
sS'block_loop.thisIndex'
p3811
g3627
sg38
S'left'
p3812
sg59
g63
sS'trial_loop.thisN'
p3813
I11
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p3814
g60
(g99
S'\x0b\x00\x00\x00'
tRp3815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3816
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3817
sS'block_loop.thisRepN'
p3818
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3819
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p3820
Nsg70
Vy
sS'block_loop.thisTrialN'
p3821
I0
sg39
F2.3666495797078824
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c\x07\x08\x1a8'
tRp3822
sa(dp3823
S'trial_loop.thisTrialN'
p3824
I12
sg3633
S'45-chewy_nougat_redo.png'
p3825
sS'block_loop.thisIndex'
p3826
g3627
sg38
S'right'
p3827
sg59
g63
sS'trial_loop.thisN'
p3828
I12
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p3829
g60
(g99
S'\x0c\x00\x00\x00'
tRp3830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3831
I0
sg3642
S'41-peanuts_redo.png'
p3832
sS'block_loop.thisRepN'
p3833
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3834
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p3835
Nsg70
Vy
sS'block_loop.thisTrialN'
p3836
I0
sg39
F1.1666731289224117
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c\x0e\x0e\x1dH'
tRp3837
sa(dp3838
S'trial_loop.thisTrialN'
p3839
I13
sg3633
g3634
sS'block_loop.thisIndex'
p3840
g3627
sg38
S'right'
p3841
sg59
g63
sS'trial_loop.thisN'
p3842
I13
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p3843
g60
(g99
S'\r\x00\x00\x00'
tRp3844
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3845
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3846
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3847
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3848
Nsg70
Vy
sS'block_loop.thisTrialN'
p3849
I0
sg39
F1.200043164059025
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c\x15\x01\xcc\xf0'
tRp3850
sa(dp3851
S'trial_loop.thisTrialN'
p3852
I14
sg3633
S'22-daim.png'
p3853
sS'block_loop.thisIndex'
p3854
g3627
sg38
S'left'
p3855
sg59
g63
sS'trial_loop.thisN'
p3856
I14
sg33
S'7-olives.png'
p3857
sg64
g65
sS'trial_loop.thisIndex'
p3858
g60
(g99
S'\x0e\x00\x00\x00'
tRp3859
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3860
I0
sg3642
S'7-olives.png'
p3861
sS'block_loop.thisRepN'
p3862
I1
sg3645
S'22-daim.png'
p3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3864
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p3865
Nsg70
Vy
sS'block_loop.thisTrialN'
p3866
I0
sg39
F1.5666551106369297
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c\x1b\x05vp'
tRp3867
sa(dp3868
S'trial_loop.thisTrialN'
p3869
I15
sg3633
g3752
sS'block_loop.thisIndex'
p3870
g3627
sg38
S'left'
p3871
sg59
g63
sS'trial_loop.thisN'
p3872
I15
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p3873
g60
(g99
S'\x0f\x00\x00\x00'
tRp3874
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3875
I0
sg3642
g3760
sS'block_loop.thisRepN'
p3876
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3877
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p3878
Nsg70
Vy
sS'block_loop.thisTrialN'
p3879
I0
sg39
F1.0500289661031275
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c!\x0e\x9aH'
tRp3880
sa(dp3881
S'trial_loop.thisTrialN'
p3882
I16
sg3633
S'5-pineapple.png'
p3883
sS'block_loop.thisIndex'
p3884
g3627
sg38
S'left'
p3885
sg59
g63
sS'trial_loop.thisN'
p3886
I16
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p3887
g60
(g99
S'\x10\x00\x00\x00'
tRp3888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3889
I0
sg3642
S'40-sardines.png'
p3890
sS'block_loop.thisRepN'
p3891
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3892
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p3893
Nsg70
Vy
sS'block_loop.thisTrialN'
p3894
I0
sg39
F0.86668835323143867
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c(\x00\xa0('
tRp3895
sa(dp3896
S'trial_loop.thisTrialN'
p3897
I17
sg3633
S'13-mccoys_steak_crisps.png'
p3898
sS'block_loop.thisIndex'
p3899
g3627
sg38
S'right'
p3900
sg59
g63
sS'trial_loop.thisN'
p3901
I17
sg33
S'3-ellas_strawberries_apples.png'
p3902
sg64
g65
sS'trial_loop.thisIndex'
p3903
g60
(g99
S'\x11\x00\x00\x00'
tRp3904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3905
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3906
sS'block_loop.thisRepN'
p3907
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3908
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3909
sg55
g11
sS'block_loop.thisTrial'
p3910
Nsg70
Vy
sS'block_loop.thisTrialN'
p3911
I0
sg39
F0.91661525373274344
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c-\x0eP\x10'
tRp3912
sa(dp3913
S'trial_loop.thisTrialN'
p3914
I18
sg3633
S'8-liquorice_catherine_wheels.png'
p3915
sS'block_loop.thisIndex'
p3916
g3627
sg38
S'right'
p3917
sg59
g63
sS'trial_loop.thisN'
p3918
I18
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3919
sg64
g65
sS'trial_loop.thisIndex'
p3920
g60
(g99
S'\x12\x00\x00\x00'
tRp3921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3922
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3923
sS'block_loop.thisRepN'
p3924
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3925
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3926
sg55
g11
sS'block_loop.thisTrial'
p3927
Nsg70
Vy
sS'block_loop.thisTrialN'
p3928
I0
sg39
F3.1999567789243883
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0c3\r\xaf\xe8'
tRp3929
sa(dp3930
S'trial_loop.thisTrialN'
p3931
I19
sg3633
S'30-spaghetti_hoops.png'
p3932
sS'block_loop.thisIndex'
p3933
g3627
sg38
S'right'
p3934
sg59
g63
sS'trial_loop.thisN'
p3935
I19
sg33
S'19-caramello_redo.png'
p3936
sg64
g65
sS'trial_loop.thisIndex'
p3937
g60
(g99
S'\x13\x00\x00\x00'
tRp3938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3939
I0
sg3642
S'19-caramello_redo.png'
p3940
sS'block_loop.thisRepN'
p3941
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3942
I1
sg3647
S'30-spaghetti_hoops.png'
p3943
sg55
g11
sS'block_loop.thisTrial'
p3944
Nsg70
Vy
sS'block_loop.thisTrialN'
p3945
I0
sg39
F1.666656308054371
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r\x00\x01\xcc\xf0'
tRp3946
sa(dp3947
S'trial_loop.thisTrialN'
p3948
I20
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3949
sS'block_loop.thisIndex'
p3950
g3627
sg38
S'left'
p3951
sg59
g63
sS'trial_loop.thisN'
p3952
I20
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p3953
g60
(g99
S'\x14\x00\x00\x00'
tRp3954
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3955
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3956
sS'block_loop.thisRepN'
p3957
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3958
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p3959
Nsg70
Vy
sS'block_loop.thisTrialN'
p3960
I0
sg39
F2.1000553663143364
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r\x06\x0c\x9a\x90'
tRp3961
sa(dp3962
S'trial_loop.thisTrialN'
p3963
I21
sg3633
S'44-crunch.png'
p3964
sS'block_loop.thisIndex'
p3965
g3627
sg38
S'left'
p3966
sg59
g63
sS'trial_loop.thisN'
p3967
I21
sg33
S'44-crunch.png'
p3968
sg64
g65
sS'trial_loop.thisIndex'
p3969
g60
(g99
S'\x15\x00\x00\x00'
tRp3970
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3971
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3972
sS'block_loop.thisRepN'
p3973
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3974
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3975
sg55
g11
sS'block_loop.thisTrial'
p3976
Nsg70
Vy
sS'block_loop.thisTrialN'
p3977
I0
sg39
F2.9165861735891667
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r\r\x0e\x92x'
tRp3978
sa(dp3979
S'trial_loop.thisTrialN'
p3980
I22
sg3633
S'36-fig_rolls.png'
p3981
sS'block_loop.thisIndex'
p3982
g3627
sg38
S'left'
p3983
sg59
g63
sS'trial_loop.thisN'
p3984
I22
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3985
sg64
g65
sS'trial_loop.thisIndex'
p3986
g60
(g99
S'\x16\x00\x00\x00'
tRp3987
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3988
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3989
sS'block_loop.thisRepN'
p3990
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3991
I1
sg3647
S'36-fig_rolls.png'
p3992
sg55
g11
sS'block_loop.thisTrial'
p3993
Nsg70
Vy
sS'block_loop.thisTrialN'
p3994
I0
sg39
F2.2166379476511793
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r\x15\r\xe6\x98'
tRp3995
sa(dp3996
S'trial_loop.thisTrialN'
p3997
I23
sg3633
g3671
sS'block_loop.thisIndex'
p3998
g3627
sg38
S'right'
p3999
sg59
g63
sS'trial_loop.thisN'
p4000
I23
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4001
g60
(g99
S'\x17\x00\x00\x00'
tRp4002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4003
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4004
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4005
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4006
Nsg70
Vy
sS'block_loop.thisTrialN'
p4007
I0
sg39
F0.81665083414554829
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r\x1d\x02\x84\x88'
tRp4008
sa(dp4009
S'trial_loop.thisTrialN'
p4010
I24
sg3633
g3825
sS'block_loop.thisIndex'
p4011
g3627
sg38
S'right'
p4012
sg59
g63
sS'trial_loop.thisN'
p4013
I24
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p4014
g60
(g99
S'\x18\x00\x00\x00'
tRp4015
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4016
I0
sg3642
g3832
sS'block_loop.thisRepN'
p4017
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4018
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p4019
Nsg70
Vy
sS'block_loop.thisTrialN'
p4020
I0
sg39
F1.133325046444952
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r#\x00:\x98'
tRp4021
sa(dp4022
S'trial_loop.thisTrialN'
p4023
I25
sg3633
S'16-skips_prawn.png'
p4024
sS'block_loop.thisIndex'
p4025
g3627
sg38
S'right'
p4026
sg59
g63
sS'trial_loop.thisN'
p4027
I25
sg33
S'42-mrkipling_lemon_slices.png'
p4028
sg64
g65
sS'trial_loop.thisIndex'
p4029
g60
(g99
S'\x19\x00\x00\x00'
tRp4030
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4031
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p4032
sS'block_loop.thisRepN'
p4033
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4034
I1
sg3647
S'16-skips_prawn.png'
p4035
sg55
g11
sS'block_loop.thisTrial'
p4036
Nsg70
Vy
sS'block_loop.thisTrialN'
p4037
I0
sg39
F0.89992182573041646
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r)\x02\xb3h'
tRp4038
sa(dp4039
S'trial_loop.thisTrialN'
p4040
I26
sg3633
S'3-ellas_strawberries_apples.png'
p4041
sS'block_loop.thisIndex'
p4042
g3627
sg38
S'left'
p4043
sg59
g63
sS'trial_loop.thisN'
p4044
I26
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p4045
g60
(g99
S'\x1a\x00\x00\x00'
tRp4046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4047
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4048
sS'block_loop.thisRepN'
p4049
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4050
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p4051
Nsg70
Vy
sS'block_loop.thisTrialN'
p4052
I0
sg39
F0.85001687788462732
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r/\x01\x9e\x10'
tRp4053
sa(dp4054
S'trial_loop.thisTrialN'
p4055
I27
sg3633
g3825
sS'block_loop.thisIndex'
p4056
g3627
sg38
S'right'
p4057
sg59
g63
sS'trial_loop.thisN'
p4058
I27
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p4059
g60
(g99
S'\x1b\x00\x00\x00'
tRp4060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4061
I0
sg3642
g3832
sS'block_loop.thisRepN'
p4062
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4063
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p4064
Nsg70
Vy
sS'block_loop.thisTrialN'
p4065
I0
sg39
F1.0166061875715968
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r4\x0f\x0fx'
tRp4066
sa(dp4067
S'trial_loop.thisTrialN'
p4068
I28
sg3633
g3883
sS'block_loop.thisIndex'
p4069
g3627
sg38
S'left'
p4070
sg59
g63
sS'trial_loop.thisN'
p4071
I28
sg33
g3712
sg64
g65
sS'trial_loop.thisIndex'
p4072
g60
(g99
S'\x1c\x00\x00\x00'
tRp4073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4074
I0
sg3642
g3890
sS'block_loop.thisRepN'
p4075
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4076
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p4077
Nsg70
Vy
sS'block_loop.thisTrialN'
p4078
I0
sg39
F1.0166671988517919
sg34
g753
(S'\x07\xdf\x07\x0e\x13\r;\x00\x9c@'
tRp4079
sa(dp4080
S'trial_loop.thisTrialN'
p4081
I29
sg3633
S'23-crunchie_redo.png'
p4082
sS'block_loop.thisIndex'
p4083
g3627
sg38
S'right'
p4084
sg59
g63
sS'trial_loop.thisN'
p4085
I29
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p4086
g60
(g99
S'\x1d\x00\x00\x00'
tRp4087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4088
I0
sg3642
S'33-ambrosia_rice.png'
p4089
sS'block_loop.thisRepN'
p4090
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4091
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p4092
Nsg70
Vy
sS'block_loop.thisTrialN'
p4093
I0
sg39
F1.0333383890974801
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e\x05\x01g`'
tRp4094
sa(dp4095
S'trial_loop.thisTrialN'
p4096
I30
sg3633
g3898
sS'block_loop.thisIndex'
p4097
g3627
sg38
S'right'
p4098
sg59
g63
sS'trial_loop.thisN'
p4099
I30
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p4100
g60
(g99
S'\x1e\x00\x00\x00'
tRp4101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4102
I0
sg3642
g3906
sS'block_loop.thisRepN'
p4103
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4104
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p4105
Nsg70
Vy
sS'block_loop.thisTrialN'
p4106
I0
sg39
F1.0003706292809511
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e\x0b\x02t\xe8'
tRp4107
sa(dp4108
S'trial_loop.thisTrialN'
p4109
I31
sg3633
g3932
sS'block_loop.thisIndex'
p4110
g3627
sg38
S'right'
p4111
sg59
g63
sS'trial_loop.thisN'
p4112
I31
sg33
g3936
sg64
g65
sS'trial_loop.thisIndex'
p4113
g60
(g99
S'\x1f\x00\x00\x00'
tRp4114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4115
I0
sg3642
g3940
sS'block_loop.thisRepN'
p4116
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4117
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p4118
Nsg70
Vy
sS'block_loop.thisTrialN'
p4119
I0
sg39
F0.88330280868467526
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e\x11\x03\x05p'
tRp4120
sa(dp4121
S'trial_loop.thisTrialN'
p4122
I32
sg3633
S'6-sour_patch_kids.png'
p4123
sS'block_loop.thisIndex'
p4124
g3627
sg38
S'left'
p4125
sg59
g63
sS'trial_loop.thisN'
p4126
I32
sg33
S'38-maltesers.png'
p4127
sg64
g65
sS'trial_loop.thisIndex'
p4128
g60
(g99
S' \x00\x00\x00'
tRp4129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4130
I0
sg3642
S'38-maltesers.png'
p4131
sS'block_loop.thisRepN'
p4132
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4133
I1
sg3647
S'6-sour_patch_kids.png'
p4134
sg55
g11
sS'block_loop.thisTrial'
p4135
Nsg70
Vy
sS'block_loop.thisTrialN'
p4136
I0
sg39
F1.5330974800635886
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e\x17\x01\xad\xb0'
tRp4137
sa(dp4138
S'trial_loop.thisTrialN'
p4139
I33
sg3633
S'19-caramello_redo.png'
p4140
sS'block_loop.thisIndex'
p4141
g3627
sg38
S'left'
p4142
sg59
g63
sS'trial_loop.thisN'
p4143
I33
sg33
g3936
sg64
g65
sS'trial_loop.thisIndex'
p4144
g60
(g99
S'!\x00\x00\x00'
tRp4145
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4146
I0
sg3642
S'30-spaghetti_hoops.png'
p4147
sS'block_loop.thisRepN'
p4148
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4149
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p4150
Nsg70
Vy
sS'block_loop.thisTrialN'
p4151
I0
sg39
F1.0333788732168614
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e\x1d\nXp'
tRp4152
sa(dp4153
S'trial_loop.thisTrialN'
p4154
I34
sg3633
S'25-kitkat.png'
p4155
sS'block_loop.thisIndex'
p4156
g3627
sg38
S'left'
p4157
sg59
g63
sS'trial_loop.thisN'
p4158
I34
sg33
S'25-kitkat.png'
p4159
sg64
g65
sS'trial_loop.thisIndex'
p4160
g60
(g99
S'"\x00\x00\x00'
tRp4161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4162
I0
sg3642
S'31-hobnobs.png'
p4163
sS'block_loop.thisRepN'
p4164
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4165
I1
sg3647
S'31-hobnobs.png'
p4166
sg55
g11
sS'block_loop.thisTrial'
p4167
Nsg70
Vy
sS'block_loop.thisTrialN'
p4168
I0
sg39
F5.3999263873229211
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e#\x0bb\x10'
tRp4169
sa(dp4170
S'trial_loop.thisTrialN'
p4171
I35
sg3633
S'10-bounty_redo.png'
p4172
sS'block_loop.thisIndex'
p4173
g3627
sg38
S'right'
p4174
sg59
g63
sS'trial_loop.thisN'
p4175
I35
sg33
S'4-corn.png'
p4176
sg64
g65
sS'trial_loop.thisIndex'
p4177
g60
(g99
S'#\x00\x00\x00'
tRp4178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4179
I0
sg3642
S'4-corn.png'
p4180
sS'block_loop.thisRepN'
p4181
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4182
I1
sg3647
S'10-bounty_redo.png'
p4183
sg55
g11
sS'block_loop.thisTrial'
p4184
Nsg70
Vy
sS'block_loop.thisTrialN'
p4185
I0
sg39
F1.0670553902600659
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e.\x02\x8cX'
tRp4186
sa(dp4187
S'trial_loop.thisTrialN'
p4188
I36
sg3633
S'18-mms.png'
p4189
sS'block_loop.thisIndex'
p4190
g3627
sg38
S'left'
p4191
sg59
g63
sS'trial_loop.thisN'
p4192
I36
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4193
g60
(g99
S'$\x00\x00\x00'
tRp4194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4195
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p4196
sS'block_loop.thisRepN'
p4197
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4198
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4199
Nsg70
Vy
sS'block_loop.thisTrialN'
p4200
I0
sg39
F1.8333607979147928
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e4\x04\x12\xf8'
tRp4201
sa(dp4202
S'trial_loop.thisTrialN'
p4203
I37
sg3633
S'46-pistachios.png'
p4204
sS'block_loop.thisIndex'
p4205
g3627
sg38
S'left'
p4206
sg59
g63
sS'trial_loop.thisN'
p4207
I37
sg33
S'29-beans.png'
p4208
sg64
g65
sS'trial_loop.thisIndex'
p4209
g60
(g99
S'%\x00\x00\x00'
tRp4210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4211
I0
sg3642
S'29-beans.png'
p4212
sS'block_loop.thisRepN'
p4213
I1
sg3645
S'46-pistachios.png'
p4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4215
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p4216
Nsg70
Vy
sS'block_loop.thisTrialN'
p4217
I0
sg39
F0.9165807567005686
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0e;\x02:P'
tRp4218
sa(dp4219
S'trial_loop.thisTrialN'
p4220
I38
sg3633
g3810
sS'block_loop.thisIndex'
p4221
g3627
sg38
S'left'
p4222
sg59
g63
sS'trial_loop.thisN'
p4223
I38
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4224
g60
(g99
S'&\x00\x00\x00'
tRp4225
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4226
I0
sg3642
g3817
sS'block_loop.thisRepN'
p4227
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4228
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p4229
Nsg70
Vy
sS'block_loop.thisTrialN'
p4230
I0
sg39
F0.71666275129973656
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f\x05\x01_\x90'
tRp4231
sa(dp4232
S'trial_loop.thisTrialN'
p4233
I39
sg3633
g4123
sS'block_loop.thisIndex'
p4234
g3627
sg38
S'left'
p4235
sg59
g63
sS'trial_loop.thisN'
p4236
I39
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p4237
g60
(g99
S"'\x00\x00\x00"
tRp4238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4239
I0
sg3642
g4131
sS'block_loop.thisRepN'
p4240
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4241
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p4242
Nsg70
Vy
sS'block_loop.thisTrialN'
p4243
I0
sg39
F1.683005335922644
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f\n\x0c\xe8\xb0'
tRp4244
sa(dp4245
S'trial_loop.thisTrialN'
p4246
I40
sg3633
S'49-yorkie.png'
p4247
sS'block_loop.thisIndex'
p4248
g3627
sg38
S'right'
p4249
sg59
g63
sS'trial_loop.thisN'
p4250
I40
sg33
S'35-raisins.png'
p4251
sg64
g65
sS'trial_loop.thisIndex'
p4252
g60
(g99
S'(\x00\x00\x00'
tRp4253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4254
I0
sg3642
S'35-raisins.png'
p4255
sS'block_loop.thisRepN'
p4256
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4257
I1
sg3647
S'49-yorkie.png'
p4258
sg55
g11
sS'block_loop.thisTrial'
p4259
Nsg70
Vy
sS'block_loop.thisTrialN'
p4260
I0
sg39
F0.7503697739848576
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f\x11\x08t\x10'
tRp4261
sa(dp4262
S'trial_loop.thisTrialN'
p4263
I41
sg3633
S'26-walkers_smoky_bacon.png'
p4264
sS'block_loop.thisIndex'
p4265
g3627
sg38
S'right'
p4266
sg59
g63
sS'trial_loop.thisN'
p4267
I41
sg33
g3968
sg64
g65
sS'trial_loop.thisIndex'
p4268
g60
(g99
S')\x00\x00\x00'
tRp4269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4270
I0
sg3642
S'44-crunch.png'
p4271
sS'block_loop.thisRepN'
p4272
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4273
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p4274
Nsg70
Vy
sS'block_loop.thisTrialN'
p4275
I0
sg39
F1.0000096933799796
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f\x17\x057\xf0'
tRp4276
sa(dp4277
S'trial_loop.thisTrialN'
p4278
I42
sg3633
g3654
sS'block_loop.thisIndex'
p4279
g3627
sg38
S'right'
p4280
sg59
g63
sS'trial_loop.thisN'
p4281
I42
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4282
g60
(g99
S'*\x00\x00\x00'
tRp4283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4284
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4285
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4286
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4287
Nsg70
Vy
sS'block_loop.thisTrialN'
p4288
I0
sg39
F0.86658343663293635
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f\x1d\x05\xc8x'
tRp4289
sa(dp4290
S'trial_loop.thisTrialN'
p4291
I43
sg3633
g4140
sS'block_loop.thisIndex'
p4292
g3627
sg38
S'left'
p4293
sg59
g63
sS'trial_loop.thisN'
p4294
I43
sg33
g3936
sg64
g65
sS'trial_loop.thisIndex'
p4295
g60
(g99
S'+\x00\x00\x00'
tRp4296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4297
I0
sg3642
g4147
sS'block_loop.thisRepN'
p4298
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4299
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p4300
Nsg70
Vy
sS'block_loop.thisTrialN'
p4301
I0
sg39
F1.0499120753302122
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f#\x046 '
tRp4302
sa(dp4303
S'trial_loop.thisTrialN'
p4304
I44
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4305
sS'block_loop.thisIndex'
p4306
g3627
sg38
S'right'
p4307
sg59
g63
sS'trial_loop.thisN'
p4308
I44
sg33
g3992
sg64
g65
sS'trial_loop.thisIndex'
p4309
g60
(g99
S',\x00\x00\x00'
tRp4310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4311
I0
sg3642
S'36-fig_rolls.png'
p4312
sS'block_loop.thisRepN'
p4313
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4314
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p4315
Nsg70
Vy
sS'block_loop.thisTrialN'
p4316
I0
sg39
F0.99999600860974169
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f)\x05~@'
tRp4317
sa(dp4318
S'trial_loop.thisTrialN'
p4319
I45
sg3633
S'35-raisins.png'
p4320
sS'block_loop.thisIndex'
p4321
g3627
sg38
S'left'
p4322
sg59
g63
sS'trial_loop.thisN'
p4323
I45
sg33
g4251
sg64
g65
sS'trial_loop.thisIndex'
p4324
g60
(g99
S'-\x00\x00\x00'
tRp4325
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4326
I0
sg3642
S'49-yorkie.png'
p4327
sS'block_loop.thisRepN'
p4328
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4329
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p4330
Nsg70
Vy
sS'block_loop.thisTrialN'
p4331
I0
sg39
F0.79991521142437705
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f/\x06\x0e\xc8'
tRp4332
sa(dp4333
S'trial_loop.thisTrialN'
p4334
I46
sg3633
S'7-olives.png'
p4335
sS'block_loop.thisIndex'
p4336
g3627
sg38
S'right'
p4337
sg59
g63
sS'trial_loop.thisN'
p4338
I46
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p4339
g60
(g99
S'.\x00\x00\x00'
tRp4340
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4341
I0
sg3642
S'22-daim.png'
p4342
sS'block_loop.thisRepN'
p4343
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4344
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4345
Nsg70
Vy
sS'block_loop.thisTrialN'
p4346
I0
sg39
F1.6999895653607382
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f5\x03K\xc0'
tRp4347
sa(dp4348
S'trial_loop.thisTrialN'
p4349
I47
sg3633
g4305
sS'block_loop.thisIndex'
p4350
g3627
sg38
S'right'
p4351
sg59
g63
sS'trial_loop.thisN'
p4352
I47
sg33
g3992
sg64
g65
sS'trial_loop.thisIndex'
p4353
g60
(g99
S'/\x00\x00\x00'
tRp4354
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4355
I0
sg3642
g4312
sS'block_loop.thisRepN'
p4356
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4357
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p4358
Nsg70
Vy
sS'block_loop.thisTrialN'
p4359
I0
sg39
F0.81669131826492958
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x0f;\x0e\x92x'
tRp4360
sa(dp4361
S'trial_loop.thisTrialN'
p4362
I48
sg3633
S'38-maltesers.png'
p4363
sS'block_loop.thisIndex'
p4364
g3627
sg38
S'left'
p4365
sg59
g63
sS'trial_loop.thisN'
p4366
I48
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p4367
g60
(g99
S'0\x00\x00\x00'
tRp4368
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4369
I0
sg3642
S'6-sour_patch_kids.png'
p4370
sS'block_loop.thisRepN'
p4371
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4372
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p4373
Nsg70
Vy
sS'block_loop.thisTrialN'
p4374
I0
sg39
F2.3997179796242563
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x10\x05\x0cH\x88'
tRp4375
sa(dp4376
S'trial_loop.thisTrialN'
p4377
I49
sg3633
g3752
sS'block_loop.thisIndex'
p4378
g3627
sg38
S'left'
p4379
sg59
g63
sS'trial_loop.thisN'
p4380
I49
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p4381
g60
(g99
S'1\x00\x00\x00'
tRp4382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4383
I0
sg3642
g3760
sS'block_loop.thisRepN'
p4384
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4385
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p4386
Nsg70
Vy
sS'block_loop.thisTrialN'
p4387
I0
sg39
F0.91666086964323767
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x10\r\x03\xc4\xd8'
tRp4388
sa(dp4389
S'trial_loop.thisTrialN'
p4390
I50
sg3633
g3735
sS'block_loop.thisIndex'
p4391
g3627
sg38
S'left'
p4392
sg59
g63
sS'trial_loop.thisN'
p4393
I50
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p4394
g60
(g99
S'2\x00\x00\x00'
tRp4395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4396
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4397
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4398
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p4399
Nsg70
Vy
sS'block_loop.thisTrialN'
p4400
I0
sg39
F1.416671988525195
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x10\x13\x02\xe60'
tRp4401
sa(dp4402
S'trial_loop.thisTrialN'
p4403
I51
sg3633
g4189
sS'block_loop.thisIndex'
p4404
g3627
sg38
S'left'
p4405
sg59
g63
sS'trial_loop.thisN'
p4406
I51
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4407
g60
(g99
S'3\x00\x00\x00'
tRp4408
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4409
I0
sg3642
g4196
sS'block_loop.thisRepN'
p4410
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4411
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4412
Nsg70
Vy
sS'block_loop.thisTrialN'
p4413
I0
sg39
F1.2999069435390993
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x10\x19\t\xa8\xa8'
tRp4414
sa(dp4415
S'trial_loop.thisTrialN'
p4416
I52
sg3633
g3853
sS'block_loop.thisIndex'
p4417
g3627
sg38
S'left'
p4418
sg59
g63
sS'trial_loop.thisN'
p4419
I52
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p4420
g60
(g99
S'4\x00\x00\x00'
tRp4421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4422
I0
sg3642
g3861
sS'block_loop.thisRepN'
p4423
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4424
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4425
Nsg70
Vy
sS'block_loop.thisTrialN'
p4426
I0
sg39
F1.0833539555278549
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x10\x1f\x0e\xc1X'
tRp4427
sa(dp4428
S'trial_loop.thisTrialN'
p4429
I53
sg3633
g3671
sS'block_loop.thisIndex'
p4430
g3627
sg38
S'right'
p4431
sg59
g63
sS'trial_loop.thisN'
p4432
I53
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4433
g60
(g99
S'5\x00\x00\x00'
tRp4434
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4435
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4436
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4437
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4438
Nsg70
Vy
sS'block_loop.thisTrialN'
p4439
I0
sg39
F0.99999401291279355
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x10&\x01z\xe8'
tRp4440
sa(dp4441
S'trial_loop.thisTrialN'
p4442
I54
sg3633
g3718
sS'block_loop.thisIndex'
p4443
g3627
sg38
S'right'
p4444
sg59
g63
sS'trial_loop.thisN'
p4445
I54
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4446
g60
(g99
S'6\x00\x00\x00'
tRp4447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4448
I0
sg3642
g3726
sS'block_loop.thisRepN'
p4449
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4450
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p4451
Nsg70
Vy
sS'block_loop.thisTrialN'
p4452
I0
sg39
F0.70005969982230454
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x10,\x01\xd0\xd8'
tRp4453
sa(dp4454
S'trial_loop.thisTrialN'
p4455
I55
sg3633
g3964
sS'block_loop.thisIndex'
p4456
g3627
sg38
S'left'
p4457
sg59
g63
sS'trial_loop.thisN'
p4458
I55
sg33
g3968
sg64
g65
sS'trial_loop.thisIndex'
p4459
g60
(g99
S'7\x00\x00\x00'
tRp4460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4461
I0
sg3642
g3972
sS'block_loop.thisRepN'
p4462
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4463
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p4464
Nsg70
Vy
sS'block_loop.thisTrialN'
p4465
I0
sg39
F1.3166516894452798
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x101\r\x1f`'
tRp4466
sa(dp4467
S'trial_loop.thisTrialN'
p4468
I56
sg3633
g3981
sS'block_loop.thisIndex'
p4469
g3627
sg38
S'left'
p4470
sg59
g63
sS'trial_loop.thisN'
p4471
I56
sg33
g3985
sg64
g65
sS'trial_loop.thisIndex'
p4472
g60
(g99
S'8\x00\x00\x00'
tRp4473
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4474
I0
sg3642
g3989
sS'block_loop.thisRepN'
p4475
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4476
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p4477
Nsg70
Vy
sS'block_loop.thisTrialN'
p4478
I0
sg39
F0.76667290084151318
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x108\x030h'
tRp4479
sa(dp4480
S'trial_loop.thisTrialN'
p4481
I57
sg3633
g3810
sS'block_loop.thisIndex'
p4482
g3627
sg38
S'left'
p4483
sg59
g63
sS'trial_loop.thisN'
p4484
I57
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4485
g60
(g99
S'9\x00\x00\x00'
tRp4486
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4487
I0
sg3642
g3817
sS'block_loop.thisRepN'
p4488
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4489
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p4490
Nsg70
Vy
sS'block_loop.thisTrialN'
p4491
I0
sg39
F0.76667290084151318
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11\x02\x00.\xe0'
tRp4492
sa(dp4493
S'trial_loop.thisTrialN'
p4494
I58
sg3633
g3915
sS'block_loop.thisIndex'
p4495
g3627
sg38
S'left'
p4496
sg59
g63
sS'trial_loop.thisN'
p4497
I58
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p4498
g60
(g99
S':\x00\x00\x00'
tRp4499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4500
I0
sg3642
g3923
sS'block_loop.thisRepN'
p4501
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4502
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg70
Vy
sS'block_loop.thisTrialN'
p4504
I0
sg39
F1.0166677690540382
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11\x07\x0c5\x00'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I59
sg3633
g3964
sS'block_loop.thisIndex'
p4508
g3627
sg38
S'left'
p4509
sg59
g63
sS'trial_loop.thisN'
p4510
I59
sg33
g3968
sg64
g65
sS'trial_loop.thisIndex'
p4511
g60
(g99
S';\x00\x00\x00'
tRp4512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4513
I0
sg3642
g3972
sS'block_loop.thisRepN'
p4514
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4515
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p4516
Nsg70
Vy
sS'block_loop.thisTrialN'
p4517
I0
sg39
F0.91658018650196027
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11\r\r\x04\x08'
tRp4518
sa(dp4519
S'trial_loop.thisTrialN'
p4520
I60
sg3633
g4204
sS'block_loop.thisIndex'
p4521
g3627
sg38
S'left'
p4522
sg59
g63
sS'trial_loop.thisN'
p4523
I60
sg33
g4208
sg64
g65
sS'trial_loop.thisIndex'
p4524
g60
(g99
S'<\x00\x00\x00'
tRp4525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4526
I0
sg3642
g4212
sS'block_loop.thisRepN'
p4527
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4528
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p4529
Nsg70
Vy
sS'block_loop.thisTrialN'
p4530
I0
sg39
F0.78325456985839992
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11\x13\x0cc\xe0'
tRp4531
sa(dp4532
S'trial_loop.thisTrialN'
p4533
I61
sg3633
g4155
sS'block_loop.thisIndex'
p4534
g3627
sg38
S'left'
p4535
sg59
g63
sS'trial_loop.thisN'
p4536
I61
sg33
g4166
sg64
g65
sS'trial_loop.thisIndex'
p4537
g60
(g99
S'=\x00\x00\x00'
tRp4538
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4539
I0
sg3642
g4163
sS'block_loop.thisRepN'
p4540
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4541
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p4542
Nsg70
Vy
sS'block_loop.thisTrialN'
p4543
I0
sg39
F0.93366363054519752
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11\x19\tbX'
tRp4544
sa(dp4545
S'trial_loop.thisTrialN'
p4546
I62
sg3633
g4363
sS'block_loop.thisIndex'
p4547
g3627
sg38
S'left'
p4548
sg59
g63
sS'trial_loop.thisN'
p4549
I62
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p4550
g60
(g99
S'>\x00\x00\x00'
tRp4551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4552
I0
sg3642
g4370
sS'block_loop.thisRepN'
p4553
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4554
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p4555
Nsg70
Vy
sS'block_loop.thisTrialN'
p4556
I0
sg39
F2.199698763921333
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11\x1f\t\x00\xb0'
tRp4557
sa(dp4558
S'trial_loop.thisTrialN'
p4559
I63
sg3633
g3634
sS'block_loop.thisIndex'
p4560
g3627
sg38
S'right'
p4561
sg59
g63
sS'trial_loop.thisN'
p4562
I63
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4563
g60
(g99
S'?\x00\x00\x00'
tRp4564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4565
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4566
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4567
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4568
Nsg70
Vy
sS'block_loop.thisTrialN'
p4569
I0
sg39
F1.6166567071923055
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11&\x0c\xa2`'
tRp4570
sa(dp4571
S'trial_loop.thisTrialN'
p4572
I64
sg3633
g4123
sS'block_loop.thisIndex'
p4573
g3627
sg38
S'right'
p4574
sg59
g63
sS'trial_loop.thisN'
p4575
I64
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p4576
g60
(g99
S'@\x00\x00\x00'
tRp4577
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4578
I0
sg3642
g4131
sS'block_loop.thisRepN'
p4579
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4580
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p4581
Nsg70
Vy
sS'block_loop.thisTrialN'
p4582
I0
sg39
F1.0163170967280166
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x11-\x07;\x90'
tRp4583
sa(dp4584
S'trial_loop.thisTrialN'
p4585
I65
sg3633
g4264
sS'block_loop.thisIndex'
p4586
g3627
sg38
S'right'
p4587
sg59
g63
sS'trial_loop.thisN'
p4588
I65
sg33
g3968
sg64
g65
sS'trial_loop.thisIndex'
p4589
g60
(g99
S'A\x00\x00\x00'
tRp4590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4591
I0
sg3642
g4271
sS'block_loop.thisRepN'
p4592
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4593
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p4594
Nsg70
Vy
sS'block_loop.thisTrialN'
p4595
I0
sg39
F0.93334916585445171
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x113\x08\n\x98'
tRp4596
sa(dp4597
S'trial_loop.thisTrialN'
p4598
I66
sg3633
g4024
sS'block_loop.thisIndex'
p4599
g3627
sg38
S'right'
p4600
sg59
g63
sS'trial_loop.thisN'
p4601
I66
sg33
g4035
sg64
g65
sS'trial_loop.thisIndex'
p4602
g60
(g99
S'B\x00\x00\x00'
tRp4603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4604
I0
sg3642
g4032
sS'block_loop.thisRepN'
p4605
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4606
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p4607
Nsg70
Vy
sS'block_loop.thisTrialN'
p4608
I0
sg39
F0.73327236006298335
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x119\x07jp'
tRp4609
sa(dp4610
S'trial_loop.thisTrialN'
p4611
I67
sg3633
g4189
sS'block_loop.thisIndex'
p4612
g3627
sg38
S'left'
p4613
sg59
g63
sS'trial_loop.thisN'
p4614
I67
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4615
g60
(g99
S'C\x00\x00\x00'
tRp4616
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4617
I0
sg3642
g4196
sS'block_loop.thisRepN'
p4618
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4619
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4620
Nsg70
Vy
sS'block_loop.thisTrialN'
p4621
I0
sg39
F1.1333740835470962
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12\x03\x03\xef\xd0'
tRp4622
sa(dp4623
S'trial_loop.thisTrialN'
p4624
I68
sg3633
g4172
sS'block_loop.thisIndex'
p4625
g3627
sg38
S'right'
p4626
sg59
g63
sS'trial_loop.thisN'
p4627
I68
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p4628
g60
(g99
S'D\x00\x00\x00'
tRp4629
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4630
I0
sg3642
g4180
sS'block_loop.thisRepN'
p4631
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4632
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p4633
Nsg70
Vy
sS'block_loop.thisTrialN'
p4634
I0
sg39
F1.5500218386187044
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12\t\x06h\xa0'
tRp4635
sa(dp4636
S'trial_loop.thisTrialN'
p4637
I69
sg3633
g4189
sS'block_loop.thisIndex'
p4638
g3627
sg38
S'left'
p4639
sg59
g63
sS'trial_loop.thisN'
p4640
I69
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4641
g60
(g99
S'E\x00\x00\x00'
tRp4642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4643
I0
sg3642
g4196
sS'block_loop.thisRepN'
p4644
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4645
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4646
Nsg70
Vy
sS'block_loop.thisTrialN'
p4647
I0
sg39
F0.81672524509849609
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12\x10\x00\x0b\xb8'
tRp4648
sa(dp4649
S'trial_loop.thisTrialN'
p4650
I70
sg3633
g3949
sS'block_loop.thisIndex'
p4651
g3627
sg38
S'left'
p4652
sg59
g63
sS'trial_loop.thisN'
p4653
I70
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p4654
g60
(g99
S'F\x00\x00\x00'
tRp4655
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4656
I0
sg3642
g3956
sS'block_loop.thisRepN'
p4657
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4658
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p4659
Nsg70
Vy
sS'block_loop.thisTrialN'
p4660
I0
sg39
F1.1666443338763202
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12\x15\r\x04\x08'
tRp4661
sa(dp4662
S'trial_loop.thisTrialN'
p4663
I71
sg3633
g4247
sS'block_loop.thisIndex'
p4664
g3627
sg38
S'right'
p4665
sg59
g63
sS'trial_loop.thisN'
p4666
I71
sg33
g4251
sg64
g65
sS'trial_loop.thisIndex'
p4667
g60
(g99
S'G\x00\x00\x00'
tRp4668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4669
I0
sg3642
g4255
sS'block_loop.thisRepN'
p4670
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4671
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p4672
Nsg70
Vy
sS'block_loop.thisTrialN'
p4673
I0
sg39
F0.70001322861207882
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12\x1c\x00\xf20'
tRp4674
sa(dp4675
S'trial_loop.thisTrialN'
p4676
I72
sg3633
g3915
sS'block_loop.thisIndex'
p4677
g3627
sg38
S'right'
p4678
sg59
g63
sS'trial_loop.thisN'
p4679
I72
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p4680
g60
(g99
S'H\x00\x00\x00'
tRp4681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4682
I0
sg3642
g3923
sS'block_loop.thisRepN'
p4683
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4684
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p4685
Nsg70
Vy
sS'block_loop.thisTrialN'
p4686
I0
sg39
F1.0833588022142067
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12!\x0c\x028'
tRp4687
sa(dp4688
S'trial_loop.thisTrialN'
p4689
I73
sg3633
g4320
sS'block_loop.thisIndex'
p4690
g3627
sg38
S'left'
p4691
sg59
g63
sS'trial_loop.thisN'
p4692
I73
sg33
g4258
sg64
g65
sS'trial_loop.thisIndex'
p4693
g60
(g99
S'I\x00\x00\x00'
tRp4694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4695
I0
sg3642
g4327
sS'block_loop.thisRepN'
p4696
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4697
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p4698
Nsg70
Vy
sS'block_loop.thisTrialN'
p4699
I0
sg39
F0.85001630768965697
sg34
g753
(S"\x07\xdf\x07\x0e\x13\x12'\r\xc3p"
tRp4700
sa(dp4701
S'trial_loop.thisTrialN'
p4702
I74
sg3633
S'4-corn.png'
p4703
sS'block_loop.thisIndex'
p4704
g3627
sg38
S'left'
p4705
sg59
g63
sS'trial_loop.thisN'
p4706
I74
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p4707
g60
(g99
S'J\x00\x00\x00'
tRp4708
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4709
I0
sg3642
S'10-bounty_redo.png'
p4710
sS'block_loop.thisRepN'
p4711
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4712
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p4713
Nsg70
Vy
sS'block_loop.thisTrialN'
p4714
I0
sg39
F1.0332423105828639
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12-\x0b\xf6\x80'
tRp4715
sa(dp4716
S'trial_loop.thisTrialN'
p4717
I75
sg3633
g3654
sS'block_loop.thisIndex'
p4718
g3627
sg38
S'right'
p4719
sg59
g63
sS'trial_loop.thisN'
p4720
I75
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4721
g60
(g99
S'K\x00\x00\x00'
tRp4722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4723
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4724
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4725
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4726
Nsg70
Vy
sS'block_loop.thisTrialN'
p4727
I0
sg39
F1.1999097375119163
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x123\r\x00 '
tRp4728
sa(dp4729
S'trial_loop.thisTrialN'
p4730
I76
sg3633
g4041
sS'block_loop.thisIndex'
p4731
g3627
sg38
S'left'
p4732
sg59
g63
sS'trial_loop.thisN'
p4733
I76
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p4734
g60
(g99
S'L\x00\x00\x00'
tRp4735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4736
I0
sg3642
g4048
sS'block_loop.thisRepN'
p4737
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4738
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p4739
Nsg70
Vy
sS'block_loop.thisTrialN'
p4740
I0
sg39
F3.5836476079566637
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x12:\x01g`'
tRp4741
sa(dp4742
S'trial_loop.thisTrialN'
p4743
I77
sg3633
g4264
sS'block_loop.thisIndex'
p4744
g3627
sg38
S'right'
p4745
sg59
g63
sS'trial_loop.thisN'
p4746
I77
sg33
g3975
sg64
g65
sS'trial_loop.thisIndex'
p4747
g60
(g99
S'M\x00\x00\x00'
tRp4748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4749
I0
sg3642
g4271
sS'block_loop.thisRepN'
p4750
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4751
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p4752
Nsg70
Vy
sS'block_loop.thisTrialN'
p4753
I0
sg39
F0.79978406567533966
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x13\x06\n\xba\x18'
tRp4754
sa(dp4755
S'trial_loop.thisTrialN'
p4756
I78
sg3633
g3981
sS'block_loop.thisIndex'
p4757
g3627
sg38
S'left'
p4758
sg59
g63
sS'trial_loop.thisN'
p4759
I78
sg33
g3985
sg64
g65
sS'trial_loop.thisIndex'
p4760
g60
(g99
S'N\x00\x00\x00'
tRp4761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4762
I0
sg3642
g3989
sS'block_loop.thisRepN'
p4763
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4764
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p4765
Nsg70
Vy
sS'block_loop.thisTrialN'
p4766
I0
sg39
F1.1999995438418409
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x13\x0c\x085\x90'
tRp4767
sa(dp4768
S'trial_loop.thisTrialN'
p4769
I79
sg3633
g3932
sS'block_loop.thisIndex'
p4770
g3627
sg38
S'right'
p4771
sg59
g63
sS'trial_loop.thisN'
p4772
I79
sg33
g3936
sg64
g65
sS'trial_loop.thisIndex'
p4773
g60
(g99
S'O\x00\x00\x00'
tRp4774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4775
I0
sg3642
g3940
sS'block_loop.thisRepN'
p4776
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4777
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p4778
Nsg70
Vy
sS'block_loop.thisTrialN'
p4779
I0
sg39
F1.1332973917960771
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x13\x12\x0b\xdf\x10'
tRp4780
sa(dp4781
S'trial_loop.thisTrialN'
p4782
I80
sg3633
S'29-beans.png'
p4783
sS'block_loop.thisIndex'
p4784
g3627
sg38
S'right'
p4785
sg59
g63
sS'trial_loop.thisN'
p4786
I80
sg33
g4208
sg64
g65
sS'trial_loop.thisIndex'
p4787
g60
(g99
S'P\x00\x00\x00'
tRp4788
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4789
I0
sg3642
S'46-pistachios.png'
p4790
sS'block_loop.thisRepN'
p4791
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4792
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p4793
Nsg70
Vy
sS'block_loop.thisTrialN'
p4794
I0
sg39
F1.0833724869917205
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x13\x18\x0eW\xe0'
tRp4795
sa(dp4796
S'trial_loop.thisTrialN'
p4797
I81
sg3633
g3769
sS'block_loop.thisIndex'
p4798
g3627
sg38
S'left'
p4799
sg59
g63
sS'trial_loop.thisN'
p4800
I81
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4801
g60
(g99
S'Q\x00\x00\x00'
tRp4802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4803
I0
sg3642
g3776
sS'block_loop.thisRepN'
p4804
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4805
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4806
Nsg70
Vy
sS'block_loop.thisTrialN'
p4807
I0
sg39
F1.0667460573567951
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x13\x1f\x00\xd6\xd8'
tRp4808
sa(dp4809
S'trial_loop.thisTrialN'
p4810
I82
sg3633
g4305
sS'block_loop.thisIndex'
p4811
g3627
sg38
S'right'
p4812
sg59
g63
sS'trial_loop.thisN'
p4813
I82
sg33
g3992
sg64
g65
sS'trial_loop.thisIndex'
p4814
g60
(g99
S'R\x00\x00\x00'
tRp4815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4816
I0
sg3642
g4312
sS'block_loop.thisRepN'
p4817
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4818
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p4819
Nsg70
Vy
sS'block_loop.thisTrialN'
p4820
I0
sg39
F0.86653439953079214
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x13%\x02]x'
tRp4821
sa(dp4822
S'trial_loop.thisTrialN'
p4823
I83
sg3633
g4172
sS'block_loop.thisIndex'
p4824
g3627
sg38
S'right'
p4825
sg59
g63
sS'trial_loop.thisN'
p4826
I83
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p4827
g60
(g99
S'S\x00\x00\x00'
tRp4828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4829
I0
sg3642
g4180
sS'block_loop.thisRepN'
p4830
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4831
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p4832
Nsg70
Vy
sS'block_loop.thisTrialN'
p4833
I0
sg39
F0.98332168226625072
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x13+\x00\xc78'
tRp4834
sa(dp4835
S'trial_loop.thisTrialN'
p4836
I84
sg3633
S'48-twix.png'
p4837
sS'block_loop.thisIndex'
p4838
g3627
sg38
S'left'
p4839
sg59
g63
sS'trial_loop.thisN'
p4840
I84
sg33
S'48-twix.png'
p4841
sg64
g65
sS'trial_loop.thisIndex'
p4842
g60
(g99
S'T\x00\x00\x00'
tRp4843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4844
I0
sg3642
S'50-polo.png'
p4845
sS'block_loop.thisRepN'
p4846
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4847
I1
sg3647
S'50-polo.png'
p4848
sg55
g11
sS'block_loop.thisTrial'
p4849
Nsg70
Vy
sS'block_loop.thisTrialN'
p4850
I0
sg39
F0.96666702779111802
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x131\x01\x1d('
tRp4851
sa(dp4852
S'trial_loop.thisTrialN'
p4853
I85
sg3633
g3964
sS'block_loop.thisIndex'
p4854
g3627
sg38
S'left'
p4855
sg59
g63
sS'trial_loop.thisN'
p4856
I85
sg33
g3968
sg64
g65
sS'trial_loop.thisIndex'
p4857
g60
(g99
S'U\x00\x00\x00'
tRp4858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4859
I0
sg3642
g3972
sS'block_loop.thisRepN'
p4860
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4861
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p4862
Nsg70
Vy
sS'block_loop.thisTrialN'
p4863
I0
sg39
F0.83330406312234118
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x137\x014\x98'
tRp4864
sa(dp4865
S'trial_loop.thisTrialN'
p4866
I86
sg3633
g3949
sS'block_loop.thisIndex'
p4867
g3627
sg38
S'left'
p4868
sg59
g63
sS'trial_loop.thisN'
p4869
I86
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p4870
g60
(g99
S'V\x00\x00\x00'
tRp4871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4872
I0
sg3642
g3956
sS'block_loop.thisRepN'
p4873
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4874
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p4875
Nsg70
Vy
sS'block_loop.thisTrialN'
p4876
I0
sg39
F1.2503720547792909
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14\x00\x0ekh'
tRp4877
sa(dp4878
S'trial_loop.thisTrialN'
p4879
I87
sg3633
g3853
sS'block_loop.thisIndex'
p4880
g3627
sg38
S'left'
p4881
sg59
g63
sS'trial_loop.thisN'
p4882
I87
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p4883
g60
(g99
S'W\x00\x00\x00'
tRp4884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4885
I0
sg3642
g3861
sS'block_loop.thisRepN'
p4886
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4887
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4888
Nsg70
Vy
sS'block_loop.thisTrialN'
p4889
I0
sg39
F1.616647298913449
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14\x07\x03K\xc0'
tRp4890
sa(dp4891
S'trial_loop.thisTrialN'
p4892
I88
sg3633
g4140
sS'block_loop.thisIndex'
p4893
g3627
sg38
S'left'
p4894
sg59
g63
sS'trial_loop.thisN'
p4895
I88
sg33
g3943
sg64
g65
sS'trial_loop.thisIndex'
p4896
g60
(g99
S'X\x00\x00\x00'
tRp4897
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4898
I0
sg3642
g4147
sS'block_loop.thisRepN'
p4899
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4900
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p4901
Nsg70
Vy
sS'block_loop.thisTrialN'
p4902
I0
sg39
F1.399914128047385
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14\r\ra\xc8'
tRp4903
sa(dp4904
S'trial_loop.thisTrialN'
p4905
I89
sg3633
g4335
sS'block_loop.thisIndex'
p4906
g3627
sg38
S'right'
p4907
sg59
g63
sS'trial_loop.thisN'
p4908
I89
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p4909
g60
(g99
S'Y\x00\x00\x00'
tRp4910
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4911
I0
sg3642
g4342
sS'block_loop.thisRepN'
p4912
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4913
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4914
Nsg70
Vy
sS'block_loop.thisTrialN'
p4915
I0
sg39
F1.0166848750195641
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14\x14\x04\xa3\x80'
tRp4916
sa(dp4917
S'trial_loop.thisTrialN'
p4918
I90
sg3633
g3898
sS'block_loop.thisIndex'
p4919
g3627
sg38
S'right'
p4920
sg59
g63
sS'trial_loop.thisN'
p4921
I90
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p4922
g60
(g99
S'Z\x00\x00\x00'
tRp4923
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4924
I0
sg3642
g3906
sS'block_loop.thisRepN'
p4925
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4926
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p4927
Nsg70
Vy
sS'block_loop.thisTrialN'
p4928
I0
sg39
F0.68332464730337961
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14\x1a\x05r\x88'
tRp4929
sa(dp4930
S'trial_loop.thisTrialN'
p4931
I91
sg3633
S'31-hobnobs.png'
p4932
sS'block_loop.thisIndex'
p4933
g3627
sg38
S'right'
p4934
sg59
g63
sS'trial_loop.thisN'
p4935
I91
sg33
g4166
sg64
g65
sS'trial_loop.thisIndex'
p4936
g60
(g99
S'[\x00\x00\x00'
tRp4937
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4938
I0
sg3642
S'25-kitkat.png'
p4939
sS'block_loop.thisRepN'
p4940
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4941
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p4942
Nsg70
Vy
sS'block_loop.thisTrialN'
p4943
I0
sg39
F0.8003975996907684
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14 \x01\x05\xb8'
tRp4944
sa(dp4945
S'trial_loop.thisTrialN'
p4946
I92
sg3633
g3949
sS'block_loop.thisIndex'
p4947
g3627
sg38
S'left'
p4948
sg59
g63
sS'trial_loop.thisN'
p4949
I92
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p4950
g60
(g99
S'\\\x00\x00\x00'
tRp4951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4952
I0
sg3642
g3956
sS'block_loop.thisRepN'
p4953
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4954
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p4955
Nsg70
Vy
sS'block_loop.thisTrialN'
p4956
I0
sg39
F1.3666495797078824
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14%\r\xbf\x88'
tRp4957
sa(dp4958
S'trial_loop.thisTrialN'
p4959
I93
sg3633
g4204
sS'block_loop.thisIndex'
p4960
g3627
sg38
S'left'
p4961
sg59
g63
sS'trial_loop.thisN'
p4962
I93
sg33
g4214
sg64
g65
sS'trial_loop.thisIndex'
p4963
g60
(g99
S']\x00\x00\x00'
tRp4964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4965
I0
sg3642
g4212
sS'block_loop.thisRepN'
p4966
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4967
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p4968
Nsg70
Vy
sS'block_loop.thisTrialN'
p4969
I0
sg39
F0.9665438648298732
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x14,\x04\x88('
tRp4970
sa(dp4971
S'trial_loop.thisTrialN'
p4972
I94
sg3633
g4247
sS'block_loop.thisIndex'
p4973
g3627
sg38
S'right'
p4974
sg59
g63
sS'trial_loop.thisN'
p4975
I94
sg33
g4251
sg64
g65
sS'trial_loop.thisIndex'
p4976
g60
(g99
S'^\x00\x00\x00'
tRp4977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4978
I0
sg3642
g4255
sS'block_loop.thisRepN'
p4979
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4980
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p4981
Nsg70
Vy
sS'block_loop.thisTrialN'
p4982
I0
sg39
F1.3498974212197936
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x142\x04\x9f\x98'
tRp4983
sa(dp4984
S'trial_loop.thisTrialN'
p4985
I95
sg3633
S'50-polo.png'
p4986
sS'block_loop.thisIndex'
p4987
g3627
sg38
S'right'
p4988
sg59
g63
sS'trial_loop.thisN'
p4989
I95
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p4990
g60
(g99
S'_\x00\x00\x00'
tRp4991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4992
I0
sg3642
S'48-twix.png'
p4993
sS'block_loop.thisRepN'
p4994
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vy
sS'block_loop.thisTrialN'
p4997
I0
sg39
F0.88326660105667543
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x148\nk\xf8'
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g3718
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'right'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g3726
sS'block_loop.thisRepN'
p5007
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5008
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vy
sS'block_loop.thisTrialN'
p5010
I0
sg39
F1.2336800522753038
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x15\x02\tR\xb8'
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
S'42-mrkipling_lemon_slices.png'
p5014
sS'block_loop.thisIndex'
p5015
g3627
sg38
S'left'
p5016
sg59
g63
sS'trial_loop.thisN'
p5017
I97
sg33
g4035
sg64
g65
sS'trial_loop.thisIndex'
p5018
g60
(g99
S'a\x00\x00\x00'
tRp5019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5020
I0
sg3642
S'16-skips_prawn.png'
p5021
sS'block_loop.thisRepN'
p5022
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vy
sS'block_loop.thisTrialN'
p5025
I0
sg39
F1.0166230084359995
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x15\x08\r:\xb8'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g4703
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g4183
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g4710
sS'block_loop.thisRepN'
p5035
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vy
sS'block_loop.thisTrialN'
p5038
I0
sg39
F1.133358117978787
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x15\x0e\x0e\t\xc0'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g3883
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'left'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g3890
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vy
sS'block_loop.thisTrialN'
p5051
I0
sg39
F1.4000084959661763
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x15\x15\x01@P'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g4986
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'right'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g4993
sS'block_loop.thisRepN'
p5061
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vy
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.83325217502351734
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x15\x1b\x08\x02\xc8'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g4783
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'right'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g4208
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g4790
sS'block_loop.thisRepN'
p5074
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vy
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.7337088473213953
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x15!\x05\xf3p'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g4082
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'right'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g4089
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vy
sS'block_loop.thisTrialN'
p5090
I0
sg39
F1.1165996873023687
sg34
g753
(S"\x07\xdf\x07\x0e\x13\x15'\x02>8"
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4986
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'right'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4993
sS'block_loop.thisRepN'
p5100
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vy
sS'block_loop.thisTrialN'
p5103
I0
sg39
F0.74991447016509483
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x15-\x04\xb7\x08'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g3671
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'right'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vy
sS'block_loop.thisTrialN'
p5116
I0
sg39
F1.1999670425066142
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x153\x01<h'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4320
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'left'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g4258
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4327
sS'block_loop.thisRepN'
p5126
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vy
sS'block_loop.thisTrialN'
p5129
I0
sg39
F0.99992102745454758
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x159\x04\xe5\xe8'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g3671
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'right'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vy
sS'block_loop.thisTrialN'
p5142
I0
sg39
F0.81669388416048605
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16\x03\x05vp'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4305
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'right'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3985
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4312
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vy
sS'block_loop.thisTrialN'
p5155
I0
sg39
F0.88335355638628243
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16\t\x03,\x80'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g4155
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'left'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g4159
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g4163
sS'block_loop.thisRepN'
p5165
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vy
sS'block_loop.thisTrialN'
p5168
I0
sg39
F1.0666690805082908
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16\x0f\x01\xd4\xc0'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g3883
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'left'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g3712
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g3890
sS'block_loop.thisRepN'
p5178
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vy
sS'block_loop.thisTrialN'
p5181
I0
sg39
F1.066678203689662
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16\x15\x03[`'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4932
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'right'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4159
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4939
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vy
sS'block_loop.thisTrialN'
p5194
I0
sg39
F0.98330058491046657
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16\x1b\x04\xe2\x00'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
S'2-steamed_puddings.png'
p5198
sS'block_loop.thisIndex'
p5199
g3627
sg38
S'left'
p5200
sg59
g63
sS'trial_loop.thisN'
p5201
I111
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5202
g60
(g99
S'o\x00\x00\x00'
tRp5203
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5204
I0
sg3642
S'20-fruit_pastilles.png'
p5205
sS'block_loop.thisRepN'
p5206
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vy
sS'block_loop.thisTrialN'
p5209
I0
sg39
F1.0500172770261997
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16!\x054\x08'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g3915
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'right'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g3923
sS'block_loop.thisRepN'
p5219
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vy
sS'block_loop.thisTrialN'
p5222
I0
sg39
F1.8667955506243743
sg34
g753
(S"\x07\xdf\x07\x0e\x13\x16'\x06|("
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g5198
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'left'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g5205
sS'block_loop.thisRepN'
p5232
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vy
sS'block_loop.thisTrialN'
p5235
I0
sg39
F1.2000018246362743
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16.\x04\xe2\x00'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g3898
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'right'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g3906
sS'block_loop.thisRepN'
p5245
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vy
sS'block_loop.thisTrialN'
p5248
I0
sg39
F1.000013969874999
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x164\x08\x8b\x80'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g4155
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'left'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g4159
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g4163
sS'block_loop.thisRepN'
p5258
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vy
sS'block_loop.thisTrialN'
p5261
I0
sg39
F0.88332761233687052
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x16:\x08\xe1p'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g4041
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'left'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g4048
sS'block_loop.thisRepN'
p5271
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vy
sS'block_loop.thisTrialN'
p5274
I0
sg39
F1.4170320691264351
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17\x04\x07\xc80'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g4024
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'right'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g4032
sS'block_loop.thisRepN'
p5284
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vy
sS'block_loop.thisTrialN'
p5287
I0
sg39
F0.98324641601357143
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17\n\x0e\x8a\xa8'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g4123
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'right'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g4131
sS'block_loop.thisRepN'
p5297
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vy
sS'block_loop.thisTrialN'
p5300
I0
sg39
F1.3330514650115219
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17\x10\x0e\xe0\x98'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g3752
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'left'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vy
sS'block_loop.thisTrialN'
p5313
I0
sg39
F1.1000000570202246
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17\x17\x05,8'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3949
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3956
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vy
sS'block_loop.thisTrialN'
p5326
I0
sg39
F1.3500068994071626
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17\x1d\x07+\xf0'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4932
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'right'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g4159
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4939
sS'block_loop.thisRepN'
p5336
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vy
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.90001391285477439
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17#\x0c\xfc8'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g3825
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g3832
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vy
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.78334523148441804
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17)\x0b\xe2\xf8'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g5014
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g5021
sS'block_loop.thisRepN'
p5362
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vy
sS'block_loop.thisTrialN'
p5365
I0
sg39
F1.0832427667410229
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x17/\t\x1c\x08'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4335
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'right'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4342
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vy
sS'block_loop.thisTrialN'
p5378
I0
sg39
F1.2999229091074085
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x175\n\xe1('
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4837
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'left'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4845
sS'block_loop.thisRepN'
p5388
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vy
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.88328712821385125
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18\x00\x00\xb3\xb0'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g3735
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g3743
sS'block_loop.thisRepN'
p5401
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vy
sS'block_loop.thisTrialN'
p5404
I0
sg39
F1.0333512185752625
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18\x05\x0e\xdc\xb0'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4082
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4089
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vy
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.83324533263657941
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18\x0c\x00\xa7\xf8'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4986
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'right'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4993
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vy
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.76669970019065659
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18\x11\r\xda\xe0'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g5014
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g5021
sS'block_loop.thisRepN'
p5440
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vy
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.89990614526323043
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18\x17\n\x9e\xc0'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g4363
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g4370
sS'block_loop.thisRepN'
p5453
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vy
sS'block_loop.thisTrialN'
p5456
I0
sg39
F1.6996346165469731
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18\x1d\t\xc0\x18'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g3853
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g3861
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vy
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.85000490371021442
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18$\x05\x89\xf8'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4204
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g4214
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4212
sS'block_loop.thisRepN'
p5479
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vy
sS'block_loop.thisTrialN'
p5482
I0
sg39
F1.1833446042655851
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x18*\x03\xf7\xa0'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g3769
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g3776
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vy
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.9664988191179873
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x180\x07(\x08'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4247
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g4258
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4255
sS'block_loop.thisRepN'
p5505
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vy
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.65000478966976516
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x186\x07?x'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4305
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3992
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4312
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vy
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.71664479003447923
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19\x00\x02U\xa8'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g4783
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g4214
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g4790
sS'block_loop.thisRepN'
p5531
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vy
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.7334140544917318
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19\x05\r\xde\xc8'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g3825
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g3832
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vy
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.733343064726796
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19\x0b\n)\x90'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4024
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4032
sS'block_loop.thisRepN'
p5557
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vy
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.66656849742503255
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19\x11\x06\xae\xf0'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4140
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3936
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4147
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vy
sS'block_loop.thisTrialN'
p5573
I0
sg39
F1.2666580756704207
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19\x17\x02\x03\xa0'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4335
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3857
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4342
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vy
sS'block_loop.thisTrialN'
p5586
I0
sg39
F1.0666958798537962
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19\x1d\x06\x9fP'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3701
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3709
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vy
sS'block_loop.thisTrialN'
p5599
I0
sg39
F1.3666658303736767
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19#\x08%\xf0'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g4335
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g4342
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.69984216894590645
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19)\x0e0\xd0'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4264
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3968
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4271
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.0998991318156186
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x19/\n=\x18'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3853
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3863
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3861
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3863
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F1.499963507270877
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x195\x0c<\xd0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g3769
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g3776
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.9333648463289137
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a\x00\x05(P'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3654
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.75002109735578415
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a\x06\x04\x88('
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4024
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g4035
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4032
sS'block_loop.thisRepN'
p5674
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.66658531829307321
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a\x0c\x01L\x08'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4783
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4214
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4790
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.68335401254807948
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a\x11\x0b\xe2\xf8'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g5198
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g5205
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.7499178913567448
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a\x17\x07\xb0\xc0'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4155
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4159
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4163
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.81669331396187772
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a\x1d\x04t\xa0'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3932
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3936
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3940
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F1.0499938988723443
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a#\x02*\xb0'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3810
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3817
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F1.1665927308749815
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a)\x03r\xd0'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3735
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3743
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.78371671606146265
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a/\x06d\xb8'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g3915
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3919
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g3923
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3919
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3926
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F1.1166413118226046
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a5\x03\xa1\xb0'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3718
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3729
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3726
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.59999891661936999
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1a;\x05\xdc\x00'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4932
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g4166
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4939
sS'block_loop.thisRepN'
p5791
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.98334648592208396
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b\x05\x00>\x80'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g3964
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3975
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g3972
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.93329442676258623
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b\x0b\x00\x90\x88'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4932
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g4159
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4939
sS'block_loop.thisRepN'
p5817
I1
sg3645
g4159
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g4166
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.58325388561934233
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b\x10\x0f6\x88'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4082
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4089
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.75028795044272556
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b\x16\tZ\x88'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4703
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g4183
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4710
sS'block_loop.thisRepN'
p5843
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.90001419795225956
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b\x1c\x06\x1a\x80'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g3634
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.0831466882264067
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b"\x05\x01@'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3883
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3890
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F1.1499634502506524
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b(\x06\xc2x'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3634
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.4666664575961477
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b.\t\xb8H'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4703
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4710
sS'block_loop.thisRepN'
p5895
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.95002577299237601
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b5\x01\xec0'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3769
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3776
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.76667033494595671
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1b;\x01\xc9\x08'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4172
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4180
sS'block_loop.thisRepN'
p5921
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.3499997719191015
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c\x04\x0e\t\xc0'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4837
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4845
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.5499870564854064
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c\x0b\x04\x93\xe0'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4041
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3909
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4048
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.85004652823045035
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c\x11\ry8'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4264
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3968
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4271
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3968
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3975
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.71705105675209779
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c\x17\x0b\xacH'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4041
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4048
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.78341051925963257
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c\x1d\x07\xf3('
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4140
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3936
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4147
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.2166804274675087
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c#\x050 '
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g3810
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g3817
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.9000059300706198
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c)\x08\xd9\xa0'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4363
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4370
sS'block_loop.thisRepN'
p6012
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F2.883084992707154
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c/\x07\xfa\xf8'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4320
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4258
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4327
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.81695959684657282
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1c7\x06\x9bh'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4082
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4089
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.80004236577951815
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d\x01\x04Qx'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4247
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g4251
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4255
sS'block_loop.thisRepN'
p6051
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.68337653540220344
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d\x07\x01\xc9\x08'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g5198
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g5205
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.76664923758653458
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d\x0c\x0c\x9ex'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3932
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3943
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3940
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3936
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3943
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F1.0666573914313631
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d\x12\t\x9c\xf0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g3898
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3902
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g3906
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3902
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3909
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.53330303676557378
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d\x18\x0b#\x90'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4837
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4845
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.83338075487336027
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d\x1e\x04\x8f\xf8'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g5014
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g5021
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.84989742121979361
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d$\x02\x80\xa0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g3701
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g3709
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.78336775434217998
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d*\x00\xb3\xb0'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4986
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4993
sS'block_loop.thisRepN'
p6142
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.73333536704012658
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d/\r/\x00'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3701
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3709
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3712
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.76665665017208084
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d5\t\xb4`'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4172
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4180
sS'block_loop.thisRepN'
p6168
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.6500067853667133
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1d;\x06\xb6\xc0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3752
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3760
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.88371363699116046
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e\x05\x01\xcc\xf0'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4783
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g4214
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4790
sS'block_loop.thisRepN'
p6194
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.73332738425960997
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e\x0b\x00u0'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g3981
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3985
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g3989
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.86669177442308865
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e\x10\x0c<\xd0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3735
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3743
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.78335064837301616
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e\x16\n\xaax'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4189
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4196
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.83337362738893717
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e\x1c\x07\xe7p'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4123
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4131
sS'block_loop.thisRepN'
p6246
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.2830760976066813
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e"\x05\xdc\x00'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4204
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4214
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4212
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4214
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g4208
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.76669970019065659
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e(\n\xb60'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4837
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g4841
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4845
sS'block_loop.thisRepN'
p6272
I1
sg3645
g4841
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g4848
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.68335116155139985
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e.\x07\xb4\xa8'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4703
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4710
sS'block_loop.thisRepN'
p6285
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g4183
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F1.2500037062927731
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e4\x03G\xd8'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4320
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4258
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4327
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4258
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.86644858459840179
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1e:\x07\xa5\x08'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g5198
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g5205
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.81669388416412403
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1f\x04\x06\x12\xb0'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g5014
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g5021
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.84989571062396863
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1f\n\x03\xc8\xc0'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3981
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'left'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3985
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3989
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3985
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3992
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.75033214085851796
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1f\x10\x01\xf7\xe8'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4363
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4127
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4370
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4127
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g4134
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F1.4830080728788744
sg34
g753
(S'\x07\xdf\x07\x0e\x13\x1f\x15\r\xfe\x08'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F20.150204074183421
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'29-beans.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'46-pistachios.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'46-pistachios.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'29-beans.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.0665074291209748
sg34
g753
(S'\x07\xdf\x07\x0e\x13 "\x04\xd6H'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'40-sardines.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'5-pineapple.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'5-pineapple.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'40-sardines.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.85000290801690426
sg34
g753
(S'\x07\xdf\x07\x0e\x13 (\x06Y\x00'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'1-treacle_cookies.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'21-nakd_banana_crunch.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'21-nakd_banana_crunch.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'1-treacle_cookies.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vy
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.73335846009649686
sg34
g753
(S'\x07\xdf\x07\x0e\x13 .\x04\x8c\x10'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'10-bounty_redo.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'4-corn.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'4-corn.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'10-bounty_redo.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vy
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.71667985726890038
sg34
g753
(S'\x07\xdf\x07\x0e\x13 4\x01\x11p'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'45-chewy_nougat_redo.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'41-peanuts_redo.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'41-peanuts_redo.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6385
S'45-chewy_nougat_redo.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vy
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.83336450420756591
sg34
g753
(S'\x07\xdf\x07\x0e\x13 9\x0c\\\x10'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'48-twix.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'left'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'48-twix.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'50-polo.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6470
I2
sg6385
S'50-polo.png'
p6471
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vy
sS'block_loop.thisTrialN'
p6473
I0
sg39
F0.79997679290318047
sg34
g753
(S'\x07\xdf\x07\x0e\x13!\x03\nP\xa0'
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
g6426
sS'block_loop.thisIndex'
p6477
g6365
sg38
S'right'
p6478
sg59
g63
sS'trial_loop.thisN'
p6479
I6
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6483
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6484
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vy
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.78334323578746989
sg34
g753
(S'\x07\xdf\x07\x0e\x13!\t\x07\xc80'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'23-crunchie_redo.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'right'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
S'33-ambrosia_rice.png'
p6494
sg64
g65
sS'trial_loop.thisIndex'
p6495
g60
(g99
S'\x07\x00\x00\x00'
tRp6496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6497
I0
sg6380
S'33-ambrosia_rice.png'
p6498
sS'block_loop.thisRepN'
p6499
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6500
I2
sg6385
S'23-crunchie_redo.png'
p6501
sg55
g11
sS'block_loop.thisTrial'
p6502
Nsg70
Vy
sS'block_loop.thisTrialN'
p6503
I0
sg39
F1.1665821821989084
sg34
g753
(S'\x07\xdf\x07\x0e\x13!\x0f\x05\x05('
tRp6504
sa(dp6505
S'trial_loop.thisTrialN'
p6506
I8
sg6371
S'44-crunch.png'
p6507
sS'block_loop.thisIndex'
p6508
g6365
sg38
S'left'
p6509
sg59
g63
sS'trial_loop.thisN'
p6510
I8
sg33
S'44-crunch.png'
p6511
sg64
g65
sS'trial_loop.thisIndex'
p6512
g60
(g99
S'\x08\x00\x00\x00'
tRp6513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6514
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6515
sS'block_loop.thisRepN'
p6516
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6517
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6518
sg55
g11
sS'block_loop.thisTrial'
p6519
Nsg70
Vy
sS'block_loop.thisTrialN'
p6520
I0
sg39
F0.86668635753449053
sg34
g753
(S'\x07\xdf\x07\x0e\x13!\x15\x085\x90'
tRp6521
sa(dp6522
S'trial_loop.thisTrialN'
p6523
I9
sg6371
S'30-spaghetti_hoops.png'
p6524
sS'block_loop.thisIndex'
p6525
g6365
sg38
S'right'
p6526
sg59
g63
sS'trial_loop.thisN'
p6527
I9
sg33
S'19-caramello_redo.png'
p6528
sg64
g65
sS'trial_loop.thisIndex'
p6529
g60
(g99
S'\t\x00\x00\x00'
tRp6530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6531
I0
sg6380
S'19-caramello_redo.png'
p6532
sS'block_loop.thisRepN'
p6533
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6534
I2
sg6385
S'30-spaghetti_hoops.png'
p6535
sg55
g11
sS'block_loop.thisTrial'
p6536
Nsg70
Vy
sS'block_loop.thisTrialN'
p6537
I0
sg39
F0.78339027719630394
sg34
g753
(S'\x07\xdf\x07\x0e\x13!\x1b\x06\xa38'
tRp6538
sa(dp6539
S'trial_loop.thisTrialN'
p6540
I10
sg6371
g6392
sS'block_loop.thisIndex'
p6541
g6365
sg38
S'right'
p6542
sg59
g63
sS'trial_loop.thisN'
p6543
I10
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6544
g60
(g99
S'\n\x00\x00\x00'
tRp6545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6546
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6547
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6548
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6549
Nsg70
Vy
sS'block_loop.thisTrialN'
p6550
I0
sg39
F0.95005542333092308
sg34
g753
(S'\x07\xdf\x07\x0e\x13!!\x03\xe00'
tRp6551
sa(dp6552
S'trial_loop.thisTrialN'
p6553
I11
sg6371
S'3-ellas_strawberries_apples.png'
p6554
sS'block_loop.thisIndex'
p6555
g6365
sg38
S'left'
p6556
sg59
g63
sS'trial_loop.thisN'
p6557
I11
sg33
S'3-ellas_strawberries_apples.png'
p6558
sg64
g65
sS'trial_loop.thisIndex'
p6559
g60
(g99
S'\x0b\x00\x00\x00'
tRp6560
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6561
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6562
sS'block_loop.thisRepN'
p6563
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6564
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6565
sg55
g11
sS'block_loop.thisTrial'
p6566
Nsg70
Vy
sS'block_loop.thisTrialN'
p6567
I0
sg39
F1.2170980981572939
sg34
g753
(S"\x07\xdf\x07\x0e\x13!'\x03z\xa0"
tRp6568
sa(dp6569
S'trial_loop.thisTrialN'
p6570
I12
sg6371
S'8-liquorice_catherine_wheels.png'
p6571
sS'block_loop.thisIndex'
p6572
g6365
sg38
S'right'
p6573
sg59
g63
sS'trial_loop.thisN'
p6574
I12
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6575
sg64
g65
sS'trial_loop.thisIndex'
p6576
g60
(g99
S'\x0c\x00\x00\x00'
tRp6577
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6578
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6579
sS'block_loop.thisRepN'
p6580
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6581
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6582
sg55
g11
sS'block_loop.thisTrial'
p6583
Nsg70
Vy
sS'block_loop.thisTrialN'
p6584
I0
sg39
F1.5000108337771962
sg34
g753
(S'\x07\xdf\x07\x0e\x13!-\x07b\xa0'
tRp6585
sa(dp6586
S'trial_loop.thisTrialN'
p6587
I13
sg6371
S'41-peanuts_redo.png'
p6588
sS'block_loop.thisIndex'
p6589
g6365
sg38
S'left'
p6590
sg59
g63
sS'trial_loop.thisN'
p6591
I13
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6592
g60
(g99
S'\r\x00\x00\x00'
tRp6593
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6594
I0
sg6380
S'45-chewy_nougat_redo.png'
p6595
sS'block_loop.thisRepN'
p6596
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6597
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6598
Nsg70
Vy
sS'block_loop.thisTrialN'
p6599
I0
sg39
F0.76665493957625586
sg34
g753
(S'\x07\xdf\x07\x0e\x13!4\x00N '
tRp6600
sa(dp6601
S'trial_loop.thisTrialN'
p6602
I14
sg6371
g6460
sS'block_loop.thisIndex'
p6603
g6365
sg38
S'left'
p6604
sg59
g63
sS'trial_loop.thisN'
p6605
I14
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6606
g60
(g99
S'\x0e\x00\x00\x00'
tRp6607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6608
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6609
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6610
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6611
Nsg70
Vy
sS'block_loop.thisTrialN'
p6612
I0
sg39
F0.73338468924703193
sg34
g753
(S'\x07\xdf\x07\x0e\x13!9\x0cT@'
tRp6613
sa(dp6614
S'trial_loop.thisTrialN'
p6615
I15
sg6371
S'27-hartleys_raspberries_jelly.png'
p6616
sS'block_loop.thisIndex'
p6617
g6365
sg38
S'right'
p6618
sg59
g63
sS'trial_loop.thisN'
p6619
I15
sg33
S'51-mars.png'
p6620
sg64
g65
sS'trial_loop.thisIndex'
p6621
g60
(g99
S'\x0f\x00\x00\x00'
tRp6622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6623
I0
sg6380
S'51-mars.png'
p6624
sS'block_loop.thisRepN'
p6625
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6626
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6627
sg55
g11
sS'block_loop.thisTrial'
p6628
Nsg70
Vy
sS'block_loop.thisTrialN'
p6629
I0
sg39
F0.76673647801726474
sg34
g753
(S'\x07\xdf\x07\x0e\x13"\x03\x08\xd9\xa0'
tRp6630
sa(dp6631
S'trial_loop.thisTrialN'
p6632
I16
sg6371
S'4-corn.png'
p6633
sS'block_loop.thisIndex'
p6634
g6365
sg38
S'left'
p6635
sg59
g63
sS'trial_loop.thisN'
p6636
I16
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6637
g60
(g99
S'\x10\x00\x00\x00'
tRp6638
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6639
I0
sg6380
S'10-bounty_redo.png'
p6640
sS'block_loop.thisRepN'
p6641
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6642
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6643
Nsg70
Vy
sS'block_loop.thisTrialN'
p6644
I0
sg39
F1.1170395957524306
sg34
g753
(S'\x07\xdf\x07\x0e\x13"\t\x05\xd8\x18'
tRp6645
sa(dp6646
S'trial_loop.thisTrialN'
p6647
I17
sg6371
S'16-skips_prawn.png'
p6648
sS'block_loop.thisIndex'
p6649
g6365
sg38
S'right'
p6650
sg59
g63
sS'trial_loop.thisN'
p6651
I17
sg33
S'16-skips_prawn.png'
p6652
sg64
g65
sS'trial_loop.thisIndex'
p6653
g60
(g99
S'\x11\x00\x00\x00'
tRp6654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6655
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6656
sS'block_loop.thisRepN'
p6657
I2
sg6383
S'42-mrkipling_lemon_slices.png'
p6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6659
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p6660
Nsg70
Vy
sS'block_loop.thisTrialN'
p6661
I0
sg39
F0.73323700773471501
sg34
g753
(S'\x07\xdf\x07\x0e\x13"\x0f\x08\x16P'
tRp6662
sa(dp6663
S'trial_loop.thisTrialN'
p6664
I18
sg6371
S'13-mccoys_steak_crisps.png'
p6665
sS'block_loop.thisIndex'
p6666
g6365
sg38
S'right'
p6667
sg59
g63
sS'trial_loop.thisN'
p6668
I18
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p6669
g60
(g99
S'\x12\x00\x00\x00'
tRp6670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6671
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6672
sS'block_loop.thisRepN'
p6673
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6674
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p6675
Nsg70
Vy
sS'block_loop.thisTrialN'
p6676
I0
sg39
F0.833235924354085
sg34
g753
(S'\x07\xdf\x07\x0e\x13"\x15\x04\x9b\xb0'
tRp6677
sa(dp6678
S'trial_loop.thisTrialN'
p6679
I19
sg6371
S'50-polo.png'
p6680
sS'block_loop.thisIndex'
p6681
g6365
sg38
S'right'
p6682
sg59
g63
sS'trial_loop.thisN'
p6683
I19
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6684
g60
(g99
S'\x13\x00\x00\x00'
tRp6685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6686
I0
sg6380
S'48-twix.png'
p6687
sS'block_loop.thisRepN'
p6688
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6689
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6690
Nsg70
Vy
sS'block_loop.thisTrialN'
p6691
I0
sg39
F0.68336285063196556
sg34
g753
(S'\x07\xdf\x07\x0e\x13"\x1b\x02\x8cX'
tRp6692
sa(dp6693
S'trial_loop.thisTrialN'
p6694
I20
sg6371
g6633
sS'block_loop.thisIndex'
p6695
g6365
sg38
S'left'
p6696
sg59
g63
sS'trial_loop.thisN'
p6697
I20
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6698
g60
(g99
S'\x14\x00\x00\x00'
tRp6699
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6700
I0
sg6380
g6640
sS'block_loop.thisRepN'
p6701
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6702
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6703
Nsg70
Vy
sS'block_loop.thisTrialN'
p6704
I0
sg39
F0.66668709879377275
sg34
g753
(S'\x07\xdf\x07\x0e\x13" \ra\xc8'
tRp6705
sa(dp6706
S'trial_loop.thisTrialN'
p6707
I21
sg6371
S'38-maltesers.png'
p6708
sS'block_loop.thisIndex'
p6709
g6365
sg38
S'left'
p6710
sg59
g63
sS'trial_loop.thisN'
p6711
I21
sg33
S'38-maltesers.png'
p6712
sg64
g65
sS'trial_loop.thisIndex'
p6713
g60
(g99
S'\x15\x00\x00\x00'
tRp6714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6715
I0
sg6380
S'6-sour_patch_kids.png'
p6716
sS'block_loop.thisRepN'
p6717
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6718
I2
sg6385
S'6-sour_patch_kids.png'
p6719
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vy
sS'block_loop.thisTrialN'
p6721
I0
sg39
F0.84975515659243683
sg34
g753
(S'\x07\xdf\x07\x0e\x13"&\x08\xf4\xf8'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
S'35-raisins.png'
p6725
sS'block_loop.thisIndex'
p6726
g6365
sg38
S'left'
p6727
sg59
g63
sS'trial_loop.thisN'
p6728
I22
sg33
S'35-raisins.png'
p6729
sg64
g65
sS'trial_loop.thisIndex'
p6730
g60
(g99
S'\x16\x00\x00\x00'
tRp6731
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6732
I0
sg6380
S'49-yorkie.png'
p6733
sS'block_loop.thisRepN'
p6734
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6735
I2
sg6385
S'49-yorkie.png'
p6736
sg55
g11
sS'block_loop.thisTrial'
p6737
Nsg70
Vy
sS'block_loop.thisTrialN'
p6738
I0
sg39
F0.83369464936913573
sg34
g753
(S'\x07\xdf\x07\x0e\x13",\x07$ '
tRp6739
sa(dp6740
S'trial_loop.thisTrialN'
p6741
I23
sg6371
g6633
sS'block_loop.thisIndex'
p6742
g6365
sg38
S'left'
p6743
sg59
g63
sS'trial_loop.thisN'
p6744
I23
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6745
g60
(g99
S'\x17\x00\x00\x00'
tRp6746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6747
I0
sg6380
g6640
sS'block_loop.thisRepN'
p6748
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6749
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vy
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.71668612945722998
sg34
g753
(S'\x07\xdf\x07\x0e\x13"2\x05\x14\xc8'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
g6409
sS'block_loop.thisIndex'
p6755
g6365
sg38
S'right'
p6756
sg59
g63
sS'trial_loop.thisN'
p6757
I24
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6758
g60
(g99
S'\x18\x00\x00\x00'
tRp6759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6760
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6761
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6762
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6763
Nsg70
Vy
sS'block_loop.thisTrialN'
p6764
I0
sg39
F1.2665859455082682
sg34
g753
(S'\x07\xdf\x07\x0e\x13"8\x01!\x10'
tRp6765
sa(dp6766
S'trial_loop.thisTrialN'
p6767
I25
sg6371
S'49-yorkie.png'
p6768
sS'block_loop.thisIndex'
p6769
g6365
sg38
S'right'
p6770
sg59
g63
sS'trial_loop.thisN'
p6771
I25
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p6772
g60
(g99
S'\x19\x00\x00\x00'
tRp6773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6774
I0
sg6380
S'35-raisins.png'
p6775
sS'block_loop.thisRepN'
p6776
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6777
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p6778
Nsg70
Vy
sS'block_loop.thisTrialN'
p6779
I0
sg39
F1.050003877353447
sg34
g753
(S'\x07\xdf\x07\x0e\x13#\x02\x05\xc0\xa8'
tRp6780
sa(dp6781
S'trial_loop.thisTrialN'
p6782
I26
sg6371
g6648
sS'block_loop.thisIndex'
p6783
g6365
sg38
S'right'
p6784
sg59
g63
sS'trial_loop.thisN'
p6785
I26
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p6786
g60
(g99
S'\x1a\x00\x00\x00'
tRp6787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6788
I0
sg6380
g6656
sS'block_loop.thisRepN'
p6789
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6790
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p6791
Nsg70
Vy
sS'block_loop.thisTrialN'
p6792
I0
sg39
F0.6499024389704573
sg34
g753
(S'\x07\xdf\x07\x0e\x13#\x08\x07\x08\xc8'
tRp6793
sa(dp6794
S'trial_loop.thisTrialN'
p6795
I27
sg6371
g6460
sS'block_loop.thisIndex'
p6796
g6365
sg38
S'left'
p6797
sg59
g63
sS'trial_loop.thisN'
p6798
I27
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6799
g60
(g99
S'\x1b\x00\x00\x00'
tRp6800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6801
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6802
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6803
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6804
Nsg70
Vy
sS'block_loop.thisTrialN'
p6805
I0
sg39
F0.70001037761903717
sg34
g753
(S'\x07\xdf\x07\x0e\x13#\x0e\x02]x'
tRp6806
sa(dp6807
S'trial_loop.thisTrialN'
p6808
I28
sg6371
g6392
sS'block_loop.thisIndex'
p6809
g6365
sg38
S'right'
p6810
sg59
g63
sS'trial_loop.thisN'
p6811
I28
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6812
g60
(g99
S'\x1c\x00\x00\x00'
tRp6813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6814
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6815
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6816
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6817
Nsg70
Vy
sS'block_loop.thisTrialN'
p6818
I0
sg39
F0.80035198378027417
sg34
g753
(S'\x07\xdf\x07\x0e\x13#\x13\rm\x80'
tRp6819
sa(dp6820
S'trial_loop.thisTrialN'
p6821
I29
sg6371
S'46-pistachios.png'
p6822
sS'block_loop.thisIndex'
p6823
g6365
sg38
S'left'
p6824
sg59
g63
sS'trial_loop.thisN'
p6825
I29
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6826
g60
(g99
S'\x1d\x00\x00\x00'
tRp6827
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6828
I0
sg6380
S'29-beans.png'
p6829
sS'block_loop.thisRepN'
p6830
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6831
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6832
Nsg70
Vy
sS'block_loop.thisTrialN'
p6833
I0
sg39
F1.0833798995772668
sg34
g753
(S'\x07\xdf\x07\x0e\x13#\x19\n\xe5\x10'
tRp6834
sa(dp6835
S'trial_loop.thisTrialN'
p6836
I30
sg6371
S'19-caramello_redo.png'
p6837
sS'block_loop.thisIndex'
p6838
g6365
sg38
S'left'
p6839
sg59
g63
sS'trial_loop.thisN'
p6840
I30
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p6841
g60
(g99
S'\x1e\x00\x00\x00'
tRp6842
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6843
I0
sg6380
S'30-spaghetti_hoops.png'
p6844
sS'block_loop.thisRepN'
p6845
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6846
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p6847
Nsg70
Vy
sS'block_loop.thisTrialN'
p6848
I0
sg39
F0.79992347930601682
sg34
g753
(S'\x07\xdf\x07\x0e\x13#\x1f\x0c\xa6H'
tRp6849
sa(dp6850
S'trial_loop.thisTrialN'
p6851
I31
sg6371
S'36-fig_rolls.png'
p6852
sS'block_loop.thisIndex'
p6853
g6365
sg38
S'left'
p6854
sg59
g63
sS'trial_loop.thisN'
p6855
I31
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6856
sg64
g65
sS'trial_loop.thisIndex'
p6857
g60
(g99
S'\x1f\x00\x00\x00'
tRp6858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6859
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6860
sS'block_loop.thisRepN'
p6861
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6862
I2
sg6385
S'36-fig_rolls.png'
p6863
sg55
g11
sS'block_loop.thisTrial'
p6864
Nsg70
Vy
sS'block_loop.thisTrialN'
p6865
I0
sg39
F0.71669040594861144
sg34
g753
(S'\x07\xdf\x07\x0e\x13#%\n!\xc0'
tRp6866
sa(dp6867
S'trial_loop.thisTrialN'
p6868
I32
sg6371
g6837
sS'block_loop.thisIndex'
p6869
g6365
sg38
S'left'
p6870
sg59
g63
sS'trial_loop.thisN'
p6871
I32
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p6872
g60
(g99
S' \x00\x00\x00'
tRp6873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6874
I0
sg6380
g6844
sS'block_loop.thisRepN'
p6875
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6876
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p6877
Nsg70
Vy
sS'block_loop.thisTrialN'
p6878
I0
sg39
F0.81666537421551766
sg34
g753
(S'\x07\xdf\x07\x0e\x13#+\x06h\xa0'
tRp6879
sa(dp6880
S'trial_loop.thisTrialN'
p6881
I33
sg6371
g6409
sS'block_loop.thisIndex'
p6882
g6365
sg38
S'right'
p6883
sg59
g63
sS'trial_loop.thisN'
p6884
I33
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6885
g60
(g99
S'!\x00\x00\x00'
tRp6886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6887
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6888
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6889
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6890
Nsg70
Vy
sS'block_loop.thisTrialN'
p6891
I0
sg39
F1.0333232788252644
sg34
g753
(S'\x07\xdf\x07\x0e\x13#1\x04\x1e\xb0'
tRp6892
sa(dp6893
S'trial_loop.thisTrialN'
p6894
I34
sg6371
g6725
sS'block_loop.thisIndex'
p6895
g6365
sg38
S'left'
p6896
sg59
g63
sS'trial_loop.thisN'
p6897
I34
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p6898
g60
(g99
S'"\x00\x00\x00'
tRp6899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6900
I0
sg6380
g6733
sS'block_loop.thisRepN'
p6901
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6902
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p6903
Nsg70
Vy
sS'block_loop.thisTrialN'
p6904
I0
sg39
F0.80004151047978667
sg34
g753
(S'\x07\xdf\x07\x0e\x13#7\x04\xed\xb8'
tRp6905
sa(dp6906
S'trial_loop.thisTrialN'
p6907
I35
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6908
sS'block_loop.thisIndex'
p6909
g6365
sg38
S'right'
p6910
sg59
g63
sS'trial_loop.thisN'
p6911
I35
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p6912
g60
(g99
S'#\x00\x00\x00'
tRp6913
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6914
I0
sg6380
S'36-fig_rolls.png'
p6915
sS'block_loop.thisRepN'
p6916
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6917
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p6918
Nsg70
Vy
sS'block_loop.thisTrialN'
p6919
I0
sg39
F1.2166752956763958
sg34
g753
(S'\x07\xdf\x07\x0e\x13$\x01\x02eH'
tRp6920
sa(dp6921
S'trial_loop.thisTrialN'
p6922
I36
sg6371
g6708
sS'block_loop.thisIndex'
p6923
g6365
sg38
S'left'
p6924
sg59
g63
sS'trial_loop.thisN'
p6925
I36
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p6926
g60
(g99
S'$\x00\x00\x00'
tRp6927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6928
I0
sg6380
g6716
sS'block_loop.thisRepN'
p6929
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6930
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p6931
Nsg70
Vy
sS'block_loop.thisTrialN'
p6932
I0
sg39
F0.91640057384574902
sg34
g753
(S'\x07\xdf\x07\x0e\x13$\x07\x06MH'
tRp6933
sa(dp6934
S'trial_loop.thisTrialN'
p6935
I37
sg6371
S'51-mars.png'
p6936
sS'block_loop.thisIndex'
p6937
g6365
sg38
S'left'
p6938
sg59
g63
sS'trial_loop.thisN'
p6939
I37
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p6940
g60
(g99
S'%\x00\x00\x00'
tRp6941
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6942
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6943
sS'block_loop.thisRepN'
p6944
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6945
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p6946
Nsg70
Vy
sS'block_loop.thisTrialN'
p6947
I0
sg39
F0.73333194584847661
sg34
g753
(S'\x07\xdf\x07\x0e\x13$\r\x05r\x88'
tRp6948
sa(dp6949
S'trial_loop.thisTrialN'
p6950
I38
sg6371
g6822
sS'block_loop.thisIndex'
p6951
g6365
sg38
S'left'
p6952
sg59
g63
sS'trial_loop.thisN'
p6953
I38
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6954
g60
(g99
S'&\x00\x00\x00'
tRp6955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6956
I0
sg6380
g6829
sS'block_loop.thisRepN'
p6957
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6958
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6959
Nsg70
Vy
sS'block_loop.thisTrialN'
p6960
I0
sg39
F0.83335195983090671
sg34
g753
(S'\x07\xdf\x07\x0e\x13$\x13\x01\xf7\xe8'
tRp6961
sa(dp6962
S'trial_loop.thisTrialN'
p6963
I39
sg6371
g6524
sS'block_loop.thisIndex'
p6964
g6365
sg38
S'right'
p6965
sg59
g63
sS'trial_loop.thisN'
p6966
I39
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p6967
g60
(g99
S"'\x00\x00\x00"
tRp6968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6969
I0
sg6380
g6532
sS'block_loop.thisRepN'
p6970
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6971
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p6972
Nsg70
Vy
sS'block_loop.thisTrialN'
p6973
I0
sg39
F1.0335031765789608
sg34
g753
(S'\x07\xdf\x07\x0e\x13$\x18\x0f*\xd0'
tRp6974
sa(dp6975
S'trial_loop.thisTrialN'
p6976
I40
sg6371
S'21-nakd_banana_crunch.png'
p6977
sS'block_loop.thisIndex'
p6978
g6365
sg38
S'left'
p6979
sg59
g63
sS'trial_loop.thisN'
p6980
I40
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6981
g60
(g99
S'(\x00\x00\x00'
tRp6982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6983
I0
sg6380
S'1-treacle_cookies.png'
p6984
sS'block_loop.thisRepN'
p6985
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6986
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6987
Nsg70
Vy
sS'block_loop.thisTrialN'
p6988
I0
sg39
F0.74993670792537159
sg34
g753
(S'\x07\xdf\x07\x0e\x13$\x1f\x00\xf6\x18'
tRp6989
sa(dp6990
S'trial_loop.thisTrialN'
p6991
I41
sg6371
S'25-kitkat.png'
p6992
sS'block_loop.thisIndex'
p6993
g6365
sg38
S'left'
p6994
sg59
g63
sS'trial_loop.thisN'
p6995
I41
sg33
S'31-hobnobs.png'
p6996
sg64
g65
sS'trial_loop.thisIndex'
p6997
g60
(g99
S')\x00\x00\x00'
tRp6998
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6999
I0
sg6380
S'31-hobnobs.png'
p7000
sS'block_loop.thisRepN'
p7001
I2
sg6383
S'25-kitkat.png'
p7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7003
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7004
Nsg70
Vy
sS'block_loop.thisTrialN'
p7005
I0
sg39
F1.0332522890639666
sg34
g753
(S'\x07\xdf\x07\x0e\x13$$\x0c\xf8P'
tRp7006
sa(dp7007
S'trial_loop.thisTrialN'
p7008
I42
sg6371
S'7-olives.png'
p7009
sS'block_loop.thisIndex'
p7010
g6365
sg38
S'right'
p7011
sg59
g63
sS'trial_loop.thisN'
p7012
I42
sg33
S'22-daim.png'
p7013
sg64
g65
sS'trial_loop.thisIndex'
p7014
g60
(g99
S'*\x00\x00\x00'
tRp7015
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7016
I0
sg6380
S'22-daim.png'
p7017
sS'block_loop.thisRepN'
p7018
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7019
I2
sg6385
S'7-olives.png'
p7020
sg55
g11
sS'block_loop.thisTrial'
p7021
Nsg70
Vy
sS'block_loop.thisTrialN'
p7022
I0
sg39
F1.1666315044021758
sg34
g753
(S'\x07\xdf\x07\x0e\x13$*\x0e\x05\xd8'
tRp7023
sa(dp7024
S'trial_loop.thisTrialN'
p7025
I43
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7026
sS'block_loop.thisIndex'
p7027
g6365
sg38
S'right'
p7028
sg59
g63
sS'trial_loop.thisN'
p7029
I43
sg33
S'43-mrporky_pork_crackles_redo.png'
p7030
sg64
g65
sS'trial_loop.thisIndex'
p7031
g60
(g99
S'+\x00\x00\x00'
tRp7032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7033
I0
sg6380
S'18-mms.png'
p7034
sS'block_loop.thisRepN'
p7035
I2
sg6383
S'18-mms.png'
p7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7037
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p7038
Nsg70
Vy
sS'block_loop.thisTrialN'
p7039
I0
sg39
F0.8999355105079303
sg34
g753
(S'\x07\xdf\x07\x0e\x13$1\x01\xb5\x80'
tRp7040
sa(dp7041
S'trial_loop.thisTrialN'
p7042
I44
sg6371
g6992
sS'block_loop.thisIndex'
p7043
g6365
sg38
S'left'
p7044
sg59
g63
sS'trial_loop.thisN'
p7045
I44
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7046
g60
(g99
S',\x00\x00\x00'
tRp7047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7048
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7049
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7050
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7051
Nsg70
Vy
sS'block_loop.thisTrialN'
p7052
I0
sg39
F0.73336729818038293
sg34
g753
(S'\x07\xdf\x07\x0e\x13$7\x00\x9c@'
tRp7053
sa(dp7054
S'trial_loop.thisTrialN'
p7055
I45
sg6371
g6852
sS'block_loop.thisIndex'
p7056
g6365
sg38
S'left'
p7057
sg59
g63
sS'trial_loop.thisN'
p7058
I45
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p7059
g60
(g99
S'-\x00\x00\x00'
tRp7060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7061
I0
sg6380
g6860
sS'block_loop.thisRepN'
p7062
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7063
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7064
Nsg70
Vy
sS'block_loop.thisTrialN'
p7065
I0
sg39
F1.1503708573618496
sg34
g753
(S'\x07\xdf\x07\x0e\x13%\x00\x0cc\xe0'
tRp7066
sa(dp7067
S'trial_loop.thisTrialN'
p7068
I46
sg6371
g6524
sS'block_loop.thisIndex'
p7069
g6365
sg38
S'right'
p7070
sg59
g63
sS'trial_loop.thisN'
p7071
I46
sg33
g6535
sg64
g65
sS'trial_loop.thisIndex'
p7072
g60
(g99
S'.\x00\x00\x00'
tRp7073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7074
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7075
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7076
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7077
Nsg70
Vy
sS'block_loop.thisTrialN'
p7078
I0
sg39
F1.21668612945723
sg34
g753
(S'\x07\xdf\x07\x0e\x13%\x06\x0f\x1b0'
tRp7079
sa(dp7080
S'trial_loop.thisTrialN'
p7081
I47
sg6371
S'5-pineapple.png'
p7082
sS'block_loop.thisIndex'
p7083
g6365
sg38
S'left'
p7084
sg59
g63
sS'trial_loop.thisN'
p7085
I47
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7086
g60
(g99
S'/\x00\x00\x00'
tRp7087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7088
I0
sg6380
S'40-sardines.png'
p7089
sS'block_loop.thisRepN'
p7090
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7091
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7092
Nsg70
Vy
sS'block_loop.thisTrialN'
p7093
I0
sg39
F0.81670471794132027
sg34
g753
(S'\x07\xdf\x07\x0e\x13%\r\x03\xbd\x08'
tRp7094
sa(dp7095
S'trial_loop.thisTrialN'
p7096
I48
sg6371
S'42-mrkipling_lemon_slices.png'
p7097
sS'block_loop.thisIndex'
p7098
g6365
sg38
S'left'
p7099
sg59
g63
sS'trial_loop.thisN'
p7100
I48
sg33
g6652
sg64
g65
sS'trial_loop.thisIndex'
p7101
g60
(g99
S'0\x00\x00\x00'
tRp7102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7103
I0
sg6380
S'16-skips_prawn.png'
p7104
sS'block_loop.thisRepN'
p7105
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7106
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p7107
Nsg70
Vy
sS'block_loop.thisTrialN'
p7108
I0
sg39
F0.96654472012596671
sg34
g753
(S'\x07\xdf\x07\x0e\x13%\x13\x01s\x18'
tRp7109
sa(dp7110
S'trial_loop.thisTrialN'
p7111
I49
sg6371
g6908
sS'block_loop.thisIndex'
p7112
g6365
sg38
S'right'
p7113
sg59
g63
sS'trial_loop.thisN'
p7114
I49
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p7115
g60
(g99
S'1\x00\x00\x00'
tRp7116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7117
I0
sg6380
g6915
sS'block_loop.thisRepN'
p7118
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7119
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7120
Nsg70
Vy
sS'block_loop.thisTrialN'
p7121
I0
sg39
F0.70001664980736678
sg34
g753
(S'\x07\xdf\x07\x0e\x13%\x19\x01\x8a\x88'
tRp7122
sa(dp7123
S'trial_loop.thisTrialN'
p7124
I50
sg6371
S'26-walkers_smoky_bacon.png'
p7125
sS'block_loop.thisIndex'
p7126
g6365
sg38
S'right'
p7127
sg59
g63
sS'trial_loop.thisN'
p7128
I50
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7129
g60
(g99
S'2\x00\x00\x00'
tRp7130
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7131
I0
sg6380
S'44-crunch.png'
p7132
sS'block_loop.thisRepN'
p7133
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7134
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7135
Nsg70
Vy
sS'block_loop.thisTrialN'
p7136
I0
sg39
F0.91657961629971396
sg34
g753
(S'\x07\xdf\x07\x0e\x13%\x1e\x0c\x9a\x90'
tRp7137
sa(dp7138
S'trial_loop.thisTrialN'
p7139
I51
sg6371
g6616
sS'block_loop.thisIndex'
p7140
g6365
sg38
S'right'
p7141
sg59
g63
sS'trial_loop.thisN'
p7142
I51
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7143
g60
(g99
S'3\x00\x00\x00'
tRp7144
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7145
I0
sg6380
g6624
sS'block_loop.thisRepN'
p7146
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7147
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7148
Nsg70
Vy
sS'block_loop.thisTrialN'
p7149
I0
sg39
F0.93359035998946638
sg34
g753
(S'\x07\xdf\x07\x0e\x13%$\x0b\xfeP'
tRp7150
sa(dp7151
S'trial_loop.thisTrialN'
p7152
I52
sg6371
g6392
sS'block_loop.thisIndex'
p7153
g6365
sg38
S'right'
p7154
sg59
g63
sS'trial_loop.thisN'
p7155
I52
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7156
g60
(g99
S'4\x00\x00\x00'
tRp7157
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7158
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7159
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7160
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7161
Nsg70
Vy
sS'block_loop.thisTrialN'
p7162
I0
sg39
F0.90000792576392996
sg34
g753
(S'\x07\xdf\x07\x0e\x13%*\x0b^('
tRp7163
sa(dp7164
S'trial_loop.thisTrialN'
p7165
I53
sg6371
g6977
sS'block_loop.thisIndex'
p7166
g6365
sg38
S'left'
p7167
sg59
g63
sS'trial_loop.thisN'
p7168
I53
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7169
g60
(g99
S'5\x00\x00\x00'
tRp7170
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7171
I0
sg6380
g6984
sS'block_loop.thisRepN'
p7172
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7173
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7174
Nsg70
Vy
sS'block_loop.thisTrialN'
p7175
I0
sg39
F0.83325987270654878
sg34
g753
(S'\x07\xdf\x07\x0e\x13%0\nD\xe8'
tRp7176
sa(dp7177
S'trial_loop.thisTrialN'
p7178
I54
sg6371
g6665
sS'block_loop.thisIndex'
p7179
g6365
sg38
S'right'
p7180
sg59
g63
sS'trial_loop.thisN'
p7181
I54
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p7182
g60
(g99
S'6\x00\x00\x00'
tRp7183
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7184
I0
sg6380
g6672
sS'block_loop.thisRepN'
p7185
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7186
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p7187
Nsg70
Vy
sS'block_loop.thisTrialN'
p7188
I0
sg39
F0.70003888756400556
sg34
g753
(S'\x07\xdf\x07\x0e\x13%6\x085\x90'
tRp7189
sa(dp7190
S'trial_loop.thisTrialN'
p7191
I55
sg6371
g7125
sS'block_loop.thisIndex'
p7192
g6365
sg38
S'right'
p7193
sg59
g63
sS'trial_loop.thisN'
p7194
I55
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7195
g60
(g99
S'7\x00\x00\x00'
tRp7196
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7197
I0
sg6380
g7132
sS'block_loop.thisRepN'
p7198
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7199
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7200
Nsg70
Vy
sS'block_loop.thisTrialN'
p7201
I0
sg39
F0.63326631595919025
sg34
g753
(S'\x07\xdf\x07\x0e\x13&\x00\x04A\xd8'
tRp7202
sa(dp7203
S'trial_loop.thisTrialN'
p7204
I56
sg6371
g6708
sS'block_loop.thisIndex'
p7205
g6365
sg38
S'left'
p7206
sg59
g63
sS'trial_loop.thisN'
p7207
I56
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7208
g60
(g99
S'8\x00\x00\x00'
tRp7209
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7210
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7211
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7212
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7213
Nsg70
Vy
sS'block_loop.thisTrialN'
p7214
I0
sg39
F1.1497236816139775
sg34
g753
(S'\x07\xdf\x07\x0e\x13&\x05\x0e_\xb0'
tRp7215
sa(dp7216
S'trial_loop.thisTrialN'
p7217
I57
sg6371
g6648
sS'block_loop.thisIndex'
p7218
g6365
sg38
S'right'
p7219
sg59
g63
sS'trial_loop.thisN'
p7220
I57
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p7221
g60
(g99
S'9\x00\x00\x00'
tRp7222
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7223
I0
sg6380
g6656
sS'block_loop.thisRepN'
p7224
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7225
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p7226
Nsg70
Vy
sS'block_loop.thisTrialN'
p7227
I0
sg39
F0.66692259093906614
sg34
g753
(S'\x07\xdf\x07\x0e\x13&\x0c\x02\x0fX'
tRp7228
sa(dp7229
S'trial_loop.thisTrialN'
p7230
I58
sg6371
S'2-steamed_puddings.png'
p7231
sS'block_loop.thisIndex'
p7232
g6365
sg38
S'left'
p7233
sg59
g63
sS'trial_loop.thisN'
p7234
I58
sg33
S'2-steamed_puddings.png'
p7235
sg64
g65
sS'trial_loop.thisIndex'
p7236
g60
(g99
S':\x00\x00\x00'
tRp7237
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7238
I0
sg6380
S'20-fruit_pastilles.png'
p7239
sS'block_loop.thisRepN'
p7240
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7241
I2
sg6385
S'20-fruit_pastilles.png'
p7242
sg55
g11
sS'block_loop.thisTrial'
p7243
Nsg70
Vy
sS'block_loop.thisTrialN'
p7244
I0
sg39
F1.3666609836836869
sg34
g753
(S'\x07\xdf\x07\x0e\x13&\x11\x0c\xa6H'
tRp7245
sa(dp7246
S'trial_loop.thisTrialN'
p7247
I59
sg6371
S'33-ambrosia_rice.png'
p7248
sS'block_loop.thisIndex'
p7249
g6365
sg38
S'left'
p7250
sg59
g63
sS'trial_loop.thisN'
p7251
I59
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7252
g60
(g99
S';\x00\x00\x00'
tRp7253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7254
I0
sg6380
S'23-crunchie_redo.png'
p7255
sS'block_loop.thisRepN'
p7256
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7257
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7258
Nsg70
Vy
sS'block_loop.thisTrialN'
p7259
I0
sg39
F0.8666626942831499
sg34
g753
(S'\x07\xdf\x07\x0e\x13&\x18\x03n\xe8'
tRp7260
sa(dp7261
S'trial_loop.thisTrialN'
p7262
I60
sg6371
S'6-sour_patch_kids.png'
p7263
sS'block_loop.thisIndex'
p7264
g6365
sg38
S'right'
p7265
sg59
g63
sS'trial_loop.thisN'
p7266
I60
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7267
g60
(g99
S'<\x00\x00\x00'
tRp7268
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7269
I0
sg6380
S'38-maltesers.png'
p7270
sS'block_loop.thisRepN'
p7271
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vy
sS'block_loop.thisTrialN'
p7274
I0
sg39
F1.9497013298168895
sg34
g753
(S'\x07\xdf\x07\x0e\x13&\x1e\x01\xdc\x90'
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
g7009
sS'block_loop.thisIndex'
p7278
g6365
sg38
S'right'
p7279
sg59
g63
sS'trial_loop.thisN'
p7280
I61
sg33
g7020
sg64
g65
sS'trial_loop.thisIndex'
p7281
g60
(g99
S'=\x00\x00\x00'
tRp7282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7283
I0
sg6380
g7017
sS'block_loop.thisRepN'
p7284
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vy
sS'block_loop.thisTrialN'
p7287
I0
sg39
F0.71668356355803553
sg34
g753
(S'\x07\xdf\x07\x0e\x13&%\x01\xb1\x98'
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6852
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'left'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6860
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vy
sS'block_loop.thisTrialN'
p7300
I0
sg39
F0.91666115474436083
sg34
g753
(S'\x07\xdf\x07\x0e\x13&*\r:\xb8'
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p7304
sS'block_loop.thisIndex'
p7305
g6365
sg38
S'left'
p7306
sg59
g63
sS'trial_loop.thisN'
p7307
I63
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p7308
g60
(g99
S'?\x00\x00\x00'
tRp7309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7310
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p7311
sS'block_loop.thisRepN'
p7312
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7313
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p7314
Nsg70
Vy
sS'block_loop.thisTrialN'
p7315
I0
sg39
F1.7834022513743548
sg34
g753
(S'\x07\xdf\x07\x0e\x13&0\x0c_\xf8'
tRp7316
sa(dp7317
S'trial_loop.thisTrialN'
p7318
I64
sg6371
g7082
sS'block_loop.thisIndex'
p7319
g6365
sg38
S'left'
p7320
sg59
g63
sS'trial_loop.thisN'
p7321
I64
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7322
g60
(g99
S'@\x00\x00\x00'
tRp7323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7324
I0
sg6380
g7089
sS'block_loop.thisRepN'
p7325
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7326
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7327
Nsg70
Vy
sS'block_loop.thisTrialN'
p7328
I0
sg39
F0.96658235325594433
sg34
g753
(S'\x07\xdf\x07\x0e\x13&7\t\x95 '
tRp7329
sa(dp7330
S'trial_loop.thisTrialN'
p7331
I65
sg6371
g6571
sS'block_loop.thisIndex'
p7332
g6365
sg38
S'right'
p7333
sg59
g63
sS'trial_loop.thisN'
p7334
I65
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p7335
g60
(g99
S'A\x00\x00\x00'
tRp7336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7337
I0
sg6380
g6579
sS'block_loop.thisRepN'
p7338
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7339
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p7340
Nsg70
Vy
sS'block_loop.thisTrialN'
p7341
I0
sg39
F1.0332445913772972
sg34
g753
(S"\x07\xdf\x07\x0e\x13'\x01\t\xac\x90"
tRp7342
sa(dp7343
S'trial_loop.thisTrialN'
p7344
I66
sg6371
g6680
sS'block_loop.thisIndex'
p7345
g6365
sg38
S'right'
p7346
sg59
g63
sS'trial_loop.thisN'
p7347
I66
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7348
g60
(g99
S'B\x00\x00\x00'
tRp7349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7350
I0
sg6380
g6687
sS'block_loop.thisRepN'
p7351
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7352
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7353
Nsg70
Vy
sS'block_loop.thisTrialN'
p7354
I0
sg39
F0.71665134732393199
sg34
g753
(S"\x07\xdf\x07\x0e\x13'\x07\n{\x98"
tRp7355
sa(dp7356
S'trial_loop.thisTrialN'
p7357
I67
sg6371
g7263
sS'block_loop.thisIndex'
p7358
g6365
sg38
S'right'
p7359
sg59
g63
sS'trial_loop.thisN'
p7360
I67
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7361
g60
(g99
S'C\x00\x00\x00'
tRp7362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7363
I0
sg6380
g7270
sS'block_loop.thisRepN'
p7364
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7365
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7366
Nsg70
Vy
sS'block_loop.thisTrialN'
p7367
I0
sg39
F1.5332548549595231
sg34
g753
(S"\x07\xdf\x07\x0e\x13'\r\x06\xc2x"
tRp7368
sa(dp7369
S'trial_loop.thisTrialN'
p7370
I68
sg6371
g6372
sS'block_loop.thisIndex'
p7371
g6365
sg38
S'right'
p7372
sg59
g63
sS'trial_loop.thisN'
p7373
I68
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7374
g60
(g99
S'D\x00\x00\x00'
tRp7375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7376
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7377
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7378
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7379
Nsg70
Vy
sS'block_loop.thisTrialN'
p7380
I0
sg39
F0.90001562345059938
sg34
g753
(S"\x07\xdf\x07\x0e\x13'\x14\x00*\xf8"
tRp7381
sa(dp7382
S'trial_loop.thisTrialN'
p7383
I69
sg6371
g7026
sS'block_loop.thisIndex'
p7384
g6365
sg38
S'right'
p7385
sg59
g63
sS'trial_loop.thisN'
p7386
I69
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p7387
g60
(g99
S'E\x00\x00\x00'
tRp7388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7389
I0
sg6380
g7034
sS'block_loop.thisRepN'
p7390
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7391
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p7392
Nsg70
Vy
sS'block_loop.thisTrialN'
p7393
I0
sg39
F1.5499913329767878
sg34
g753
(S"\x07\xdf\x07\x0e\x13'\x19\x0eS\xf8"
tRp7394
sa(dp7395
S'trial_loop.thisTrialN'
p7396
I70
sg6371
g7125
sS'block_loop.thisIndex'
p7397
g6365
sg38
S'right'
p7398
sg59
g63
sS'trial_loop.thisN'
p7399
I70
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7400
g60
(g99
S'F\x00\x00\x00'
tRp7401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7402
I0
sg6380
g7132
sS'block_loop.thisRepN'
p7403
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7404
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7405
Nsg70
Vy
sS'block_loop.thisTrialN'
p7406
I0
sg39
F0.88337294314987957
sg34
g753
(S"\x07\xdf\x07\x0e\x13' \x07\xf7\x10"
tRp7407
sa(dp7408
S'trial_loop.thisTrialN'
p7409
I71
sg6371
g6616
sS'block_loop.thisIndex'
p7410
g6365
sg38
S'right'
p7411
sg59
g63
sS'trial_loop.thisN'
p7412
I71
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7413
g60
(g99
S'G\x00\x00\x00'
tRp7414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7415
I0
sg6380
g6624
sS'block_loop.thisRepN'
p7416
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7417
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vy
sS'block_loop.thisTrialN'
p7419
I0
sg39
F0.80001100483787013
sg34
g753
(S"\x07\xdf\x07\x0e\x13'&\x06\xdd\xd0"
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
g7304
sS'block_loop.thisIndex'
p7423
g6365
sg38
S'left'
p7424
sg59
g63
sS'trial_loop.thisN'
p7425
I72
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p7426
g60
(g99
S'H\x00\x00\x00'
tRp7427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7428
I0
sg6380
g7311
sS'block_loop.thisRepN'
p7429
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7430
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p7431
Nsg70
Vy
sS'block_loop.thisTrialN'
p7432
I0
sg39
F1.2336672228011594
sg34
g753
(S"\x07\xdf\x07\x0e\x13',\x04YH"
tRp7433
sa(dp7434
S'trial_loop.thisTrialN'
p7435
I73
sg6371
g6372
sS'block_loop.thisIndex'
p7436
g6365
sg38
S'right'
p7437
sg59
g63
sS'trial_loop.thisN'
p7438
I73
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7439
g60
(g99
S'I\x00\x00\x00'
tRp7440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7441
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7442
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7443
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7444
Nsg70
Vy
sS'block_loop.thisTrialN'
p7445
I0
sg39
F0.73335817499901168
sg34
g753
(S"\x07\xdf\x07\x0e\x13'2\x08=`"
tRp7446
sa(dp7447
S'trial_loop.thisTrialN'
p7448
I74
sg6371
g6571
sS'block_loop.thisIndex'
p7449
g6365
sg38
S'right'
p7450
sg59
g63
sS'trial_loop.thisN'
p7451
I74
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p7452
g60
(g99
S'J\x00\x00\x00'
tRp7453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7454
I0
sg6380
g6579
sS'block_loop.thisRepN'
p7455
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7456
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p7457
Nsg70
Vy
sS'block_loop.thisTrialN'
p7458
I0
sg39
F2.0166118895613181
sg34
g753
(S"\x07\xdf\x07\x0e\x13'8\x04\xc2\xc0"
tRp7459
sa(dp7460
S'trial_loop.thisTrialN'
p7461
I75
sg6371
g7082
sS'block_loop.thisIndex'
p7462
g6365
sg38
S'left'
p7463
sg59
g63
sS'trial_loop.thisN'
p7464
I75
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7465
g60
(g99
S'K\x00\x00\x00'
tRp7466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7467
I0
sg6380
g7089
sS'block_loop.thisRepN'
p7468
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7469
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7470
Nsg70
Vy
sS'block_loop.thisTrialN'
p7471
I0
sg39
F0.85003483915352263
sg34
g753
(S'\x07\xdf\x07\x0e\x13(\x03\x05\x89\xf8'
tRp7472
sa(dp7473
S'trial_loop.thisTrialN'
p7474
I76
sg6371
g7097
sS'block_loop.thisIndex'
p7475
g6365
sg38
S'left'
p7476
sg59
g63
sS'trial_loop.thisN'
p7477
I76
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p7478
g60
(g99
S'L\x00\x00\x00'
tRp7479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7480
I0
sg6380
g7104
sS'block_loop.thisRepN'
p7481
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7482
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p7483
Nsg70
Vy
sS'block_loop.thisTrialN'
p7484
I0
sg39
F0.99990677247842541
sg34
g753
(S'\x07\xdf\x07\x0e\x13(\t\x03\xbd\x08'
tRp7485
sa(dp7486
S'trial_loop.thisTrialN'
p7487
I77
sg6371
g6633
sS'block_loop.thisIndex'
p7488
g6365
sg38
S'left'
p7489
sg59
g63
sS'trial_loop.thisN'
p7490
I77
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p7491
g60
(g99
S'M\x00\x00\x00'
tRp7492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7493
I0
sg6380
g6640
sS'block_loop.thisRepN'
p7494
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7495
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7496
Nsg70
Vy
sS'block_loop.thisTrialN'
p7497
I0
sg39
F0.85001687788462732
sg34
g753
(S'\x07\xdf\x07\x0e\x13(\x0f\x04M\x90'
tRp7498
sa(dp7499
S'trial_loop.thisTrialN'
p7500
I78
sg6371
g6490
sS'block_loop.thisIndex'
p7501
g6365
sg38
S'right'
p7502
sg59
g63
sS'trial_loop.thisN'
p7503
I78
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7504
g60
(g99
S'N\x00\x00\x00'
tRp7505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7506
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7507
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7508
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7509
Nsg70
Vy
sS'block_loop.thisTrialN'
p7510
I0
sg39
F0.91659073518167133
sg34
g753
(S'\x07\xdf\x07\x0e\x13(\x15\x02|\xb8'
tRp7511
sa(dp7512
S'trial_loop.thisTrialN'
p7513
I79
sg6371
g6426
sS'block_loop.thisIndex'
p7514
g6365
sg38
S'right'
p7515
sg59
g63
sS'trial_loop.thisN'
p7516
I79
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p7517
g60
(g99
S'O\x00\x00\x00'
tRp7518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7519
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7520
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7521
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7522
Nsg70
Vy
sS'block_loop.thisTrialN'
p7523
I0
sg39
F0.9832395736266335
sg34
g753
(S'\x07\xdf\x07\x0e\x13(\x1b\x01\xa1\xf8'
tRp7524
sa(dp7525
S'trial_loop.thisTrialN'
p7526
I80
sg6371
S'18-mms.png'
p7527
sS'block_loop.thisIndex'
p7528
g6365
sg38
S'left'
p7529
sg59
g63
sS'trial_loop.thisN'
p7530
I80
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p7531
g60
(g99
S'P\x00\x00\x00'
tRp7532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7533
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7534
sS'block_loop.thisRepN'
p7535
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7536
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p7537
Nsg70
Vy
sS'block_loop.thisTrialN'
p7538
I0
sg39
F1.28337117553383
sg34
g753
(S'\x07\xdf\x07\x0e\x13(!\x01\xf4\x00'
tRp7539
sa(dp7540
S'trial_loop.thisTrialN'
p7541
I81
sg6371
g6908
sS'block_loop.thisIndex'
p7542
g6365
sg38
S'right'
p7543
sg59
g63
sS'trial_loop.thisN'
p7544
I81
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p7545
g60
(g99
S'Q\x00\x00\x00'
tRp7546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7547
I0
sg6380
g6915
sS'block_loop.thisRepN'
p7548
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7549
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7550
Nsg70
Vy
sS'block_loop.thisTrialN'
p7551
I0
sg39
F0.79996624422710738
sg34
g753
(S"\x07\xdf\x07\x0e\x13('\x06\xce0"
tRp7552
sa(dp7553
S'trial_loop.thisTrialN'
p7554
I82
sg6371
g7263
sS'block_loop.thisIndex'
p7555
g6365
sg38
S'right'
p7556
sg59
g63
sS'trial_loop.thisN'
p7557
I82
sg33
g6719
sg64
g65
sS'trial_loop.thisIndex'
p7558
g60
(g99
S'R\x00\x00\x00'
tRp7559
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7560
I0
sg6380
g7270
sS'block_loop.thisRepN'
p7561
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7562
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vy
sS'block_loop.thisTrialN'
p7564
I0
sg39
F0.71632148726348532
sg34
g753
(S'\x07\xdf\x07\x0e\x13(-\x04I\xa8'
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
g6977
sS'block_loop.thisIndex'
p7568
g6365
sg38
S'left'
p7569
sg59
g63
sS'trial_loop.thisN'
p7570
I83
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7571
g60
(g99
S'S\x00\x00\x00'
tRp7572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7573
I0
sg6380
g6984
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7575
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vy
sS'block_loop.thisTrialN'
p7577
I0
sg39
F0.74995723508254741
sg34
g753
(S'\x07\xdf\x07\x0e\x13(3\x00U\xf0'
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g7263
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'right'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g7270
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7588
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vy
sS'block_loop.thisTrialN'
p7590
I0
sg39
F0.63307872052246239
sg34
g753
(S'\x07\xdf\x07\x0e\x13(8\x0cX('
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
g6648
sS'block_loop.thisIndex'
p7594
g6365
sg38
S'right'
p7595
sg59
g63
sS'trial_loop.thisN'
p7596
I85
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p7597
g60
(g99
S'U\x00\x00\x00'
tRp7598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7599
I0
sg6380
g6656
sS'block_loop.thisRepN'
p7600
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7601
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p7602
Nsg70
Vy
sS'block_loop.thisTrialN'
p7603
I0
sg39
F0.68310939722141484
sg34
g753
(S'\x07\xdf\x07\x0e\x13)\x02\x073\xc0'
tRp7604
sa(dp7605
S'trial_loop.thisTrialN'
p7606
I86
sg6371
g7026
sS'block_loop.thisIndex'
p7607
g6365
sg38
S'right'
p7608
sg59
g63
sS'trial_loop.thisN'
p7609
I86
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p7610
g60
(g99
S'V\x00\x00\x00'
tRp7611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7612
I0
sg6380
g7034
sS'block_loop.thisRepN'
p7613
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7614
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p7615
Nsg70
Vy
sS'block_loop.thisTrialN'
p7616
I0
sg39
F1.3165747125894995
sg34
g753
(S'\x07\xdf\x07\x0e\x13)\x08\x03\x01\x88'
tRp7617
sa(dp7618
S'trial_loop.thisTrialN'
p7619
I87
sg6371
S'31-hobnobs.png'
p7620
sS'block_loop.thisIndex'
p7621
g6365
sg38
S'right'
p7622
sg59
g63
sS'trial_loop.thisN'
p7623
I87
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7624
g60
(g99
S'W\x00\x00\x00'
tRp7625
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7626
I0
sg6380
S'25-kitkat.png'
p7627
sS'block_loop.thisRepN'
p7628
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7629
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7630
Nsg70
Vy
sS'block_loop.thisTrialN'
p7631
I0
sg39
F0.78331700663693482
sg34
g753
(S'\x07\xdf\x07\x0e\x13)\x0e\x08T\xd0'
tRp7632
sa(dp7633
S'trial_loop.thisTrialN'
p7634
I88
sg6371
g6936
sS'block_loop.thisIndex'
p7635
g6365
sg38
S'left'
p7636
sg59
g63
sS'trial_loop.thisN'
p7637
I88
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7638
g60
(g99
S'X\x00\x00\x00'
tRp7639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7640
I0
sg6380
g6943
sS'block_loop.thisRepN'
p7641
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7642
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7643
Nsg70
Vy
sS'block_loop.thisTrialN'
p7644
I0
sg39
F0.89993693600263214
sg34
g753
(S'\x07\xdf\x07\x0e\x13)\x14\x05\x91\xc8'
tRp7645
sa(dp7646
S'trial_loop.thisTrialN'
p7647
I89
sg6371
g6554
sS'block_loop.thisIndex'
p7648
g6365
sg38
S'left'
p7649
sg59
g63
sS'trial_loop.thisN'
p7650
I89
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p7651
g60
(g99
S'Y\x00\x00\x00'
tRp7652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7653
I0
sg6380
g6562
sS'block_loop.thisRepN'
p7654
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vy
sS'block_loop.thisTrialN'
p7657
I0
sg39
F0.98334534552122932
sg34
g753
(S'\x07\xdf\x07\x0e\x13)\x1a\x04x\x88'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g7231
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'left'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g7239
sS'block_loop.thisRepN'
p7667
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vy
sS'block_loop.thisTrialN'
p7670
I0
sg39
F1.0499112200304808
sg34
g753
(S'\x07\xdf\x07\x0e\x13) \x04\xcex'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g6616
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'right'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g6624
sS'block_loop.thisRepN'
p7680
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vy
sS'block_loop.thisTrialN'
p7683
I0
sg39
F1.2500068423869379
sg34
g753
(S'\x07\xdf\x07\x0e\x13)&\x06\x16\x98'
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g6725
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'left'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g6733
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vy
sS'block_loop.thisTrialN'
p7696
I0
sg39
F0.68334574466280174
sg34
g753
(S'\x07\xdf\x07\x0e\x13),\n90'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g6936
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'left'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g6943
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vy
sS'block_loop.thisTrialN'
p7709
I0
sg39
F0.88366374458564678
sg34
g753
(S'\x07\xdf\x07\x0e\x13)2\x06\x06\xf8'
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
g6768
sS'block_loop.thisIndex'
p7713
g6365
sg38
S'right'
p7714
sg59
g63
sS'trial_loop.thisN'
p7715
I94
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p7716
g60
(g99
S'^\x00\x00\x00'
tRp7717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7718
I0
sg6380
g6775
sS'block_loop.thisRepN'
p7719
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7720
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p7721
Nsg70
Vy
sS'block_loop.thisTrialN'
p7722
I0
sg39
F0.64992923831596272
sg34
g753
(S'\x07\xdf\x07\x0e\x13)8\x04\xb3 '
tRp7723
sa(dp7724
S'trial_loop.thisTrialN'
p7725
I95
sg6371
g6443
sS'block_loop.thisIndex'
p7726
g6365
sg38
S'right'
p7727
sg59
g63
sS'trial_loop.thisN'
p7728
I95
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7729
g60
(g99
S'_\x00\x00\x00'
tRp7730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7731
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7732
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7733
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7734
Nsg70
Vy
sS'block_loop.thisTrialN'
p7735
I0
sg39
F0.88332647193965386
sg34
g753
(S'\x07\xdf\x07\x0e\x13*\x01\x0f\x0b\x90'
tRp7736
sa(dp7737
S'trial_loop.thisTrialN'
p7738
I96
sg6371
g6507
sS'block_loop.thisIndex'
p7739
g6365
sg38
S'left'
p7740
sg59
g63
sS'trial_loop.thisN'
p7741
I96
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7742
g60
(g99
S'`\x00\x00\x00'
tRp7743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7744
I0
sg6380
g6515
sS'block_loop.thisRepN'
p7745
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7746
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7747
Nsg70
Vy
sS'block_loop.thisTrialN'
p7748
I0
sg39
F0.93327076350760763
sg34
g753
(S'\x07\xdf\x07\x0e\x13*\x07\r\xf2P'
tRp7749
sa(dp7750
S'trial_loop.thisTrialN'
p7751
I97
sg6371
g6588
sS'block_loop.thisIndex'
p7752
g6365
sg38
S'left'
p7753
sg59
g63
sS'trial_loop.thisN'
p7754
I97
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7755
g60
(g99
S'a\x00\x00\x00'
tRp7756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7757
I0
sg6380
g6595
sS'block_loop.thisRepN'
p7758
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7759
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7760
Nsg70
Vy
sS'block_loop.thisTrialN'
p7761
I0
sg39
F0.91668367760212277
sg34
g753
(S'\x07\xdf\x07\x0e\x13*\r\rR('
tRp7762
sa(dp7763
S'trial_loop.thisTrialN'
p7764
I98
sg6371
g6372
sS'block_loop.thisIndex'
p7765
g6365
sg38
S'right'
p7766
sg59
g63
sS'trial_loop.thisN'
p7767
I98
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7768
g60
(g99
S'b\x00\x00\x00'
tRp7769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7770
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7771
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7772
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7773
Nsg70
Vy
sS'block_loop.thisTrialN'
p7774
I0
sg39
F1.0833322879698244
sg34
g753
(S'\x07\xdf\x07\x0e\x13*\x13\x0c\xb5\xe8'
tRp7775
sa(dp7776
S'trial_loop.thisTrialN'
p7777
I99
sg6371
g6665
sS'block_loop.thisIndex'
p7778
g6365
sg38
S'right'
p7779
sg59
g63
sS'trial_loop.thisN'
p7780
I99
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p7781
g60
(g99
S'c\x00\x00\x00'
tRp7782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7783
I0
sg6380
g6672
sS'block_loop.thisRepN'
p7784
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7785
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p7786
Nsg70
Vy
sS'block_loop.thisTrialN'
p7787
I0
sg39
F0.63365775749844033
sg34
g753
(S'\x07\xdf\x07\x0e\x13*\x19\x0ew '
tRp7788
sa(dp7789
S'trial_loop.thisTrialN'
p7790
I100
sg6371
g6616
sS'block_loop.thisIndex'
p7791
g6365
sg38
S'right'
p7792
sg59
g63
sS'trial_loop.thisN'
p7793
I100
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p7794
g60
(g99
S'd\x00\x00\x00'
tRp7795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7796
I0
sg6380
g6624
sS'block_loop.thisRepN'
p7797
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7798
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p7799
Nsg70
Vy
sS'block_loop.thisTrialN'
p7800
I0
sg39
F0.96666389170059119
sg34
g753
(S'\x07\xdf\x07\x0e\x13*\x1f\tR\xb8'
tRp7801
sa(dp7802
S'trial_loop.thisTrialN'
p7803
I101
sg6371
S'20-fruit_pastilles.png'
p7804
sS'block_loop.thisIndex'
p7805
g6365
sg38
S'right'
p7806
sg59
g63
sS'trial_loop.thisN'
p7807
I101
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p7808
g60
(g99
S'e\x00\x00\x00'
tRp7809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7810
I0
sg6380
S'2-steamed_puddings.png'
p7811
sS'block_loop.thisRepN'
p7812
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vy
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.63335298618767411
sg34
g753
(S'\x07\xdf\x07\x0e\x13*%\tj('
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6708
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'left'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vy
sS'block_loop.thisTrialN'
p7828
I0
sg39
F0.7497542442761187
sg34
g753
(S'\x07\xdf\x07\x0e\x13*+\x04A\xd8'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6680
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'right'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6687
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vy
sS'block_loop.thisTrialN'
p7841
I0
sg39
F1.1165592031793494
sg34
g753
(S'\x07\xdf\x07\x0e\x13*1\x00\xc78'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g6507
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'left'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g6515
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vy
sS'block_loop.thisTrialN'
p7854
I0
sg39
F1.0166754667370697
sg34
g753
(S'\x07\xdf\x07\x0e\x13*7\x03@\x08'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g7248
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'left'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g7255
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vy
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.91685274157498498
sg34
g753
(S'\x07\xdf\x07\x0e\x13+\x01\x04\x0f\x10'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g6992
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'left'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7877
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vy
sS'block_loop.thisTrialN'
p7880
I0
sg39
F1.0499793587987369
sg34
g753
(S'\x07\xdf\x07\x0e\x13+\x07\x034P'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g7804
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g7811
sS'block_loop.thisRepN'
p7890
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vy
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.81666337851856952
sg34
g753
(S'\x07\xdf\x07\x0e\x13+\r\x04|p'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6588
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'left'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6595
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vy
sS'block_loop.thisTrialN'
p7906
I0
sg39
F1.0500101495417766
sg34
g753
(S'\x07\xdf\x07\x0e\x13+\x13\x022\x80'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6426
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vy
sS'block_loop.thisTrialN'
p7919
I0
sg39
F1.0832935144426301
sg34
g753
(S'\x07\xdf\x07\x0e\x13+\x19\x03z\xa0'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g6992
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'left'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7929
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vy
sS'block_loop.thisTrialN'
p7932
I0
sg39
F0.74999258741445374
sg34
g753
(S'\x07\xdf\x07\x0e\x13+\x1f\x05;\xd8'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g7304
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'left'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g7311
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vy
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.90001362775365124
sg34
g753
(S'\x07\xdf\x07\x0e\x13+%\x01\xff\xb8'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g7620
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'right'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g7627
sS'block_loop.thisRepN'
p7955
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vy
sS'block_loop.thisTrialN'
p7958
I0
sg39
F0.96667672117473558
sg34
g753
(S'\x07\xdf\x07\x0e\x13++\x00\xe6x'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6524
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'right'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vy
sS'block_loop.thisTrialN'
p7971
I0
sg39
F1.3999899644986726
sg34
g753
(S'\x07\xdf\x07\x0e\x13+1\x00\xfd\xe8'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g7097
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'left'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g7104
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vy
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.7998145713172562
sg34
g753
(S'\x07\xdf\x07\x0e\x13+7\x07\x81\xe0'
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g6588
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'left'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g6595
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vy
sS'block_loop.thisTrialN'
p7997
I0
sg39
F1.3166699358080223
sg34
g753
(S'\x07\xdf\x07\x0e\x13,\x01\x04\xf9p'
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g7804
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'right'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g7811
sS'block_loop.thisRepN'
p8007
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vy
sS'block_loop.thisTrialN'
p8010
I0
sg39
F0.7000195008040464
sg34
g753
(S'\x07\xdf\x07\x0e\x13,\x07\nP\xa0'
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g6554
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'left'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g6562
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vy
sS'block_loop.thisTrialN'
p8023
I0
sg39
F0.88331335736438632
sg34
g753
(S'\x07\xdf\x07\x0e\x13,\r\x06Y\x00'
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g6443
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'right'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8033
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vy
sS'block_loop.thisTrialN'
p8036
I0
sg39
F1.0833280114784429
sg34
g753
(S'\x07\xdf\x07\x0e\x13,\x13\x05\x05('
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g7231
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'left'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g7242
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g7239
sS'block_loop.thisRepN'
p8046
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vy
sS'block_loop.thisTrialN'
p8049
I0
sg39
F0.73332139716876554
sg34
g753
(S'\x07\xdf\x07\x0e\x13,\x19\x06\xc6`'
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6443
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'right'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vy
sS'block_loop.thisTrialN'
p8062
I0
sg39
F0.71669582283357158
sg34
g753
(S'\x07\xdf\x07\x0e\x13,\x1f\x03K\xc0'
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
g7248
sS'block_loop.thisIndex'
p8066
g6365
sg38
S'left'
p8067
sg59
g63
sS'trial_loop.thisN'
p8068
I121
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8069
g60
(g99
S'y\x00\x00\x00'
tRp8070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8071
I0
sg6380
g7255
sS'block_loop.thisRepN'
p8072
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8073
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8074
Nsg70
Vy
sS'block_loop.thisTrialN'
p8075
I0
sg39
F0.86706126330682309
sg34
g753
(S'\x07\xdf\x07\x0e\x13,$\x0e\x9aH'
tRp8076
sa(dp8077
S'trial_loop.thisTrialN'
p8078
I122
sg6371
g6725
sS'block_loop.thisIndex'
p8079
g6365
sg38
S'left'
p8080
sg59
g63
sS'trial_loop.thisN'
p8081
I122
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8082
g60
(g99
S'z\x00\x00\x00'
tRp8083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8084
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8085
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8086
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8087
Nsg70
Vy
sS'block_loop.thisTrialN'
p8088
I0
sg39
F0.71670180992441601
sg34
g753
(S'\x07\xdf\x07\x0e\x13,*\r\x07\xf0'
tRp8089
sa(dp8090
S'trial_loop.thisTrialN'
p8091
I123
sg6371
g6648
sS'block_loop.thisIndex'
p8092
g6365
sg38
S'right'
p8093
sg59
g63
sS'trial_loop.thisN'
p8094
I123
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p8095
g60
(g99
S'{\x00\x00\x00'
tRp8096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8097
I0
sg6380
g6656
sS'block_loop.thisRepN'
p8098
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8099
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p8100
Nsg70
Vy
sS'block_loop.thisTrialN'
p8101
I0
sg39
F0.73305825037823524
sg34
g753
(S'\x07\xdf\x07\x0e\x13,0\tN\xd0'
tRp8102
sa(dp8103
S'trial_loop.thisTrialN'
p8104
I124
sg6371
g7620
sS'block_loop.thisIndex'
p8105
g6365
sg38
S'right'
p8106
sg59
g63
sS'trial_loop.thisN'
p8107
I124
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p8108
g60
(g99
S'|\x00\x00\x00'
tRp8109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8110
I0
sg6380
g7627
sS'block_loop.thisRepN'
p8111
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8112
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8113
Nsg70
Vy
sS'block_loop.thisTrialN'
p8114
I0
sg39
F0.63330936597412801
sg34
g753
(S'\x07\xdf\x07\x0e\x13,6\x05\xd40'
tRp8115
sa(dp8116
S'trial_loop.thisTrialN'
p8117
I125
sg6371
g6554
sS'block_loop.thisIndex'
p8118
g6365
sg38
S'left'
p8119
sg59
g63
sS'trial_loop.thisN'
p8120
I125
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p8121
g60
(g99
S'}\x00\x00\x00'
tRp8122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8123
I0
sg6380
g6562
sS'block_loop.thisRepN'
p8124
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8125
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8126
Nsg70
Vy
sS'block_loop.thisTrialN'
p8127
I0
sg39
F0.86677416816382902
sg34
g753
(S'\x07\xdf\x07\x0e\x13-\x00\x00\xaf\xc8'
tRp8128
sa(dp8129
S'trial_loop.thisTrialN'
p8130
I126
sg6371
g6460
sS'block_loop.thisIndex'
p8131
g6365
sg38
S'left'
p8132
sg59
g63
sS'trial_loop.thisN'
p8133
I126
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8134
g60
(g99
S'~\x00\x00\x00'
tRp8135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8136
I0
sg6380
g6468
sS'block_loop.thisRepN'
p8137
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8138
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8139
Nsg70
Vy
sS'block_loop.thisTrialN'
p8140
I0
sg39
F0.78327994370920351
sg34
g753
(S'\x07\xdf\x07\x0e\x13-\x05\x0e_\xb0'
tRp8141
sa(dp8142
S'trial_loop.thisTrialN'
p8143
I127
sg6371
g6977
sS'block_loop.thisIndex'
p8144
g6365
sg38
S'left'
p8145
sg59
g63
sS'trial_loop.thisN'
p8146
I127
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8147
g60
(g99
S'\x7f\x00\x00\x00'
tRp8148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8149
I0
sg6380
g6984
sS'block_loop.thisRepN'
p8150
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8151
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8152
Nsg70
Vy
sS'block_loop.thisTrialN'
p8153
I0
sg39
F0.78336832453715033
sg34
g753
(S'\x07\xdf\x07\x0e\x13-\x0b\x0b\x98\xc0'
tRp8154
sa(dp8155
S'trial_loop.thisTrialN'
p8156
I128
sg6371
g6837
sS'block_loop.thisIndex'
p8157
g6365
sg38
S'left'
p8158
sg59
g63
sS'trial_loop.thisN'
p8159
I128
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8160
g60
(g99
S'\x80\x00\x00\x00'
tRp8161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8162
I0
sg6380
g6844
sS'block_loop.thisRepN'
p8163
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8164
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8165
Nsg70
Vy
sS'block_loop.thisTrialN'
p8166
I0
sg39
F1.3499829510510608
sg34
g753
(S'\x07\xdf\x07\x0e\x13-\x11\x08\xd5\xb8'
tRp8167
sa(dp8168
S'trial_loop.thisTrialN'
p8169
I129
sg6371
g7009
sS'block_loop.thisIndex'
p8170
g6365
sg38
S'right'
p8171
sg59
g63
sS'trial_loop.thisN'
p8172
I129
sg33
g7020
sg64
g65
sS'trial_loop.thisIndex'
p8173
g60
(g99
S'\x81\x00\x00\x00'
tRp8174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8175
I0
sg6380
g7017
sS'block_loop.thisRepN'
p8176
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8177
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p8178
Nsg70
Vy
sS'block_loop.thisTrialN'
p8179
I0
sg39
F1.1165911343196058
sg34
g753
(S'\x07\xdf\x07\x0e\x13-\x17\x0e\xa6\x00'
tRp8180
sa(dp8181
S'trial_loop.thisTrialN'
p8182
I130
sg6371
g6708
sS'block_loop.thisIndex'
p8183
g6365
sg38
S'left'
p8184
sg59
g63
sS'trial_loop.thisN'
p8185
I130
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8186
g60
(g99
S'\x82\x00\x00\x00'
tRp8187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8188
I0
sg6380
g6716
sS'block_loop.thisRepN'
p8189
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8190
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8191
Nsg70
Vy
sS'block_loop.thisTrialN'
p8192
I0
sg39
F1.0164120348454162
sg34
g753
(S'\x07\xdf\x07\x0e\x13-\x1e\x01\x9e\x10'
tRp8193
sa(dp8194
S'trial_loop.thisTrialN'
p8195
I131
sg6371
g7620
sS'block_loop.thisIndex'
p8196
g6365
sg38
S'right'
p8197
sg59
g63
sS'trial_loop.thisN'
p8198
I131
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p8199
g60
(g99
S'\x83\x00\x00\x00'
tRp8200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8201
I0
sg6380
g7627
sS'block_loop.thisRepN'
p8202
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8203
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8204
Nsg70
Vy
sS'block_loop.thisTrialN'
p8205
I0
sg39
F0.69999783324237796
sg34
g753
(S'\x07\xdf\x07\x0e\x13-$\x02m\x18'
tRp8206
sa(dp8207
S'trial_loop.thisTrialN'
p8208
I132
sg6371
S'22-daim.png'
p8209
sS'block_loop.thisIndex'
p8210
g6365
sg38
S'left'
p8211
sg59
g63
sS'trial_loop.thisN'
p8212
I132
sg33
g7013
sg64
g65
sS'trial_loop.thisIndex'
p8213
g60
(g99
S'\x84\x00\x00\x00'
tRp8214
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8215
I0
sg6380
S'7-olives.png'
p8216
sS'block_loop.thisRepN'
p8217
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vy
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.63333188882825198
sg34
g753
(S'\x07\xdf\x07\x0e\x13-)\r} '
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6725
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'left'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vy
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.71658377875428414
sg34
g753
(S'\x07\xdf\x07\x0e\x13-/\x08\x93P'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6680
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6687
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vy
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.74999258741445374
sg34
g753
(S'\x07\xdf\x07\x0e\x13-5\x04\x9f\x98'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6571
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6579
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F1.1166909191269951
sg34
g753
(S'\x07\xdf\x07\x0e\x13-;\x01cx'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6490
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.65000507477088831
sg34
g753
(S'\x07\xdf\x07\x0e\x13.\x05\x03\x9d\xc8'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6443
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.76669770449370844
sg34
g753
(S'\x07\xdf\x07\x0e\x13.\n\x0e4\xb8'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6507
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.88368769294174854
sg34
g753
(S'\x07\xdf\x07\x0e\x13.\x10\n\xf8\x98'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6936
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6620
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6943
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.84991310168697964
sg34
g753
(S'\x07\xdf\x07\x0e\x13.\x16\t\xdfX'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7009
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g7013
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7017
sS'block_loop.thisRepN'
p8321
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.766589081602433
sg34
g753
(S'\x07\xdf\x07\x0e\x13.\x1c\x08\x0e\x80'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6633
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6640
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F1.3500274265643384
sg34
g753
(S'\x07\xdf\x07\x0e\x13."\x05\x0c\xf8'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7231
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7239
sS'block_loop.thisRepN'
p8347
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.71664393473838572
sg34
g753
(S'\x07\xdf\x07\x0e\x13.(\n\xdd@'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7097
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7104
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.83322480547576561
sg34
g753
(S'\x07\xdf\x07\x0e\x13..\x06\xe9\x88'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6908
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6915
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.73358568436015048
sg34
g753
(S'\x07\xdf\x07\x0e\x13.4\x04\xda0'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6409
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'right'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.016604762073257
sg34
g753
(S'\x07\xdf\x07\x0e\x13.:\x01_\x90'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7304
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7311
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.83336136811340111
sg34
g753
(S'\x07\xdf\x07\x0e\x13/\x04\x02.\x98'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6490
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6501
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F1.3333120459064958
sg34
g753
(S'\x07\xdf\x07\x0e\x13/\n\x00#('
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6822
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6829
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.75002394835610176
sg34
g753
(S'\x07\xdf\x07\x0e\x13/\x10\x05\xb1\x08'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g7248
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g7255
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.81663230268168263
sg34
g753
(S'\x07\xdf\x07\x0e\x13/\x16\x02t\xe8'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6768
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6775
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.78323945958618424
sg34
g753
(S'\x07\xdf\x07\x0e\x13/\x1c\x00*\xf8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6426
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F1.2166664575925097
sg34
g753
(S'\x07\xdf\x07\x0e\x13/!\x0c\xaa0'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g7125
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g7132
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.0666725016999408
sg34
g753
(S'\x07\xdf\x07\x0e\x13/(\x01\x11p'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g8209
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g7020
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g8216
sS'block_loop.thisRepN'
p8490
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.91668481799570145
sg34
g753
(S'\x07\xdf\x07\x0e\x13/.\x02\x94('
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g7263
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6719
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g7270
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.68309200615112786
sg34
g753
(S'\x07\xdf\x07\x0e\x13/4\x01\xf7\xe8'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7026
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g7030
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7034
sS'block_loop.thisRepN'
p8516
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.8003802086241194
sg34
g753
(S'\x07\xdf\x07\x0e\x13/9\x0c\xc9p'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g8209
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g7013
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g8216
sS'block_loop.thisRepN'
p8529
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.78336376294464571
sg34
g753
(S'\x07\xdf\x07\x0e\x130\x03\nD\xe8'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6977
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6984
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.71656923868067679
sg34
g753
(S'\x07\xdf\x07\x0e\x130\t\x07\x81\xe0'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g7097
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6658
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g7104
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6652
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.64988362240546849
sg34
g753
(S'\x07\xdf\x07\x0e\x130\x0f\x03\x8a@'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6992
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8568
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.7833708904327068
sg34
g753
(S'\x07\xdf\x07\x0e\x130\x14\x0e!0'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7527
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7534
sS'block_loop.thisRepN'
p8581
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.68331010723341024
sg34
g753
(S'\x07\xdf\x07\x0e\x130\x1a\x0b^('
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g7231
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g7239
sS'block_loop.thisRepN'
p8594
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.70003803226791206
sg34
g753
(S'\x07\xdf\x07\x0e\x130 \x06\xf1X'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7026
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7034
sS'block_loop.thisRepN'
p8607
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.5666374344691576
sg34
g753
(S'\x07\xdf\x07\x0e\x130&\x02\xfd\xa0'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6588
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6595
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.71665505361670512
sg34
g753
(S'\x07\xdf\x07\x0e\x130+\x0c%`'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6822
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6829
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.86655549689021427
sg34
g753
(S'\x07\xdf\x07\x0e\x1301\x081\xa8'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6392
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F2.1665947265719296
sg34
g753
(S'\x07\xdf\x07\x0e\x1307\x06\x9fP'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6852
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6860
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.0837930086781853
sg34
g753
(S'\x07\xdf\x07\x0e\x131\x02\t\xc7\xe8'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6822
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6829
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.7000220666959649
sg34
g753
(S'\x07\xdf\x07\x0e\x131\x08\x0b\x89 '
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7082
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7089
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.84999406993301818
sg34
g753
(S'\x07\xdf\x07\x0e\x131\x0e\x07\x95h'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6554
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6562
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.74992701454175403
sg34
g753
(S'\x07\xdf\x07\x0e\x131\x14\x05\xc4\x90'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7304
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7311
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.1999288391780283
sg34
g753
(S'\x07\xdf\x07\x0e\x131\x1a\x02I\xf0'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6768
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6775
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.88326603085442912
sg34
g753
(S'\x07\xdf\x07\x0e\x131 \x05\xf3p'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7248
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6501
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7255
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.88339803190319799
sg34
g753
(S'\x07\xdf\x07\x0e\x131&\x04\x9b\xb0'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6507
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.90000963636339293
sg34
g753
(S'\x07\xdf\x07\x0e\x131,\x03G\xd8'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g7527
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7534
sS'block_loop.thisRepN'
p8763
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.98340521640784573
sg34
g753
(S'\x07\xdf\x07\x0e\x1312\x02m\x18'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6837
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6844
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.95010217964227195
sg34
g753
(S'\x07\xdf\x07\x0e\x1318\x02\x84\x88'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6936
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6627
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6943
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6627
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.66668595839655609
sg34
g753
(S'\x07\xdf\x07\x0e\x132\x02\x02]x'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6409
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.7500142549724842
sg34
g753
(S'\x07\xdf\x07\x0e\x132\x07\x0c\xf4h'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6680
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6687
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.73370998771497398
sg34
g753
(S'\x07\xdf\x07\x0e\x132\r\t\xb8H'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7009
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g7020
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7017
sS'block_loop.thisRepN'
p8828
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.91666799713129876
sg34
g753
(S'\x07\xdf\x07\x0e\x132\x13\x06=\xa8'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g7082
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g7089
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.89995432706928113
sg34
g753
(S'\x07\xdf\x07\x0e\x132\x19\x05_\x00'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6837
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6844
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F1.0165916474979895
sg34
g753
(S'\x07\xdf\x07\x0e\x132\x1f\x04\x84@'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7620
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7627
sS'block_loop.thisRepN'
p8867
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.78333724870026344
sg34
g753
(S'\x07\xdf\x07\x0e\x132%\x05\x14\xc8'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g7527
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g7534
sS'block_loop.thisRepN'
p8880
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F3.2503384130468476
sg34
g753
(S'\x07\xdf\x07\x0e\x132+\x02Q\xc0'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6665
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6565
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6672
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.83334198134980397
sg34
g753
(S'\x07\xdf\x07\x0e\x1323\x06\xa38'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6852
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6856
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6860
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.73332510346517665
sg34
g753
(S'\x07\xdf\x07\x0e\x1329\x04\x97\xc8'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6768
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6775
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6736
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.86668806813031551
sg34
g753
(S'\x07\xdf\x07\x0e\x133\x03\x01\x1d('
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7804
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7811
sS'block_loop.thisRepN'
p8932
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.71668042746750871
sg34
g753
(S'\x07\xdf\x07\x0e\x133\x08\x0e\xcd\x10'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g7125
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g7132
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.73320792759113829
sg34
g753
(S'\x07\xdf\x07\x0e\x133\x0e\x0b\x13\xf0'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6490
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6494
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6501
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F1.1003162323067954
sg34
g753
(S'\x07\xdf\x07\x0e\x133\x14\x07^\xb8'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6665
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6672
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.69999811834350112
sg34
g753
(S'\x07\xdf\x07\x0e\x133\x1a\t\x99\x08'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g8209
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g7013
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g8216
sS'block_loop.thisRepN'
p8984
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.93334859565948136
sg34
g753
(S'\x07\xdf\x07\x0e\x133 \x05f\xd0'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6372
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.84999777622215333
sg34
g753
(S'\x07\xdf\x07\x0e\x133&\x05\x05('
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6908
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6863
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6915
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6856
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.3333710614970187
sg34
g753
(S'\x07\xdf\x07\x0e\x133,\x034P'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g8209
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g7013
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g8216
sS'block_loop.thisRepN'
p9023
I2
sg6383
g7013
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g7020
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.95000182463627425
sg34
g753
(S'\x07\xdf\x07\x0e\x1332\x08\xc6\x18'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6571
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6575
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6579
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6575
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6582
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F1.2165703790815314
sg34
g753
(S'\x07\xdf\x07\x0e\x1338\x08dp'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6460
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6468
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.7166678830908495
sg34
g753
(S'\x07\xdf\x07\x0e\x134\x02\x0cLp'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6524
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6532
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.70002235179708805
sg34
g753
(S'\x07\xdf\x07\x0e\x134\x08\x08\x93P'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7804
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g7235
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7811
sS'block_loop.thisRepN'
p9075
I2
sg6383
g7235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g7242
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.63339175971486839
sg34
g753
(S'\x07\xdf\x07\x0e\x134\x0e\x04a\x18'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g7527
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g7036
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g7534
sS'block_loop.thisRepN'
p9088
I2
sg6383
g7036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g7030
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.3499307778547518
sg34
g753
(S'\x07\xdf\x07\x0e\x134\x13\x0e~\xf0'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I74
sg56
g57
sg58
Vn
sg42
I526
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I74
sg55
g11
sg56
g57
sg45
F0.83999999999999997
sg42
I526
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g489
sg51
F29.419999999999998
sg46
F1.5000000000000002
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I83308880
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0?\x00\x00\x80?\xb8\x1e\x05?\xb8\x1e\x05?\x00\x00\x80?\xcd\xccL>\x8f\xc2u=)\\\x0f?33\xb3?\xb8\x1e\xc5?\n\xd7\xa3?\\\x8f\xc2?\xa4p\xfd?q=\n?\x8f\xc2\xf5>)\\\x8f>\xb8\x1e\x85?\xb8\x1e\x85?\xcd\xcc\x8c?\n\xd7\xe3?\x8f\xc2\xf5=\x00\x00\xc0?\\\x8f\x82?\x85\xeb\x11@\\\x8f\x82?\x00\x00\x80?)\\\x0f?\\\x8f"@\xaeG\x01@H\xe1z?\x00\x00\x00@\xaeG\x01@\xaeG!@\\\x8f\x02@\xcd\xccL>333?\x00\x00\x80?\xf6(\\?\n\xd7#=\xc3\xf5\xa8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\x00\x00 B\xbaI\xdc@!\xb0\xba@D\x8b\xa0@\xdd$.A\xbaI\xa4@\xb2\x9d\x19A\xfe\xd4\xa4@\x08\xac\x16A\x9a\x99\xbbA\xcd\xcc\xd8A;\xdf}A\x98n\xf6@D\x8b\xd0@d;\xe3@\xd5x\x13Aw\xbe\x03A\xaa\xf1^Ao\x12\xdfA\x19\x04\x04A\xdd$\xaa@!\xb0\xe2@;\xdfAA\xee|\xaf@\x9a\x99\xa9Aw\xbe\x1fA;\xdf\x01A\x10XIA\xfe\xd4\x9c@T\xe3}@\xdd$\xca@\x10X\xbd@\xaa\xf1\nAd;\x83@\x87\x16\xe1@\xdd$.A;\xdf\xf9A\xbaI\x8c@\x87\x16\x81@\xfeT\x10B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00@A\x00\x00\xb0A\x00\x00\x80?\x00\x00\xc8A\x00\x00\xf0A\x00\x00\x14B\x00\x000A\x00\x00`A\x00\x00\x80A\x00\x00\x00\x00\x00\x00\x80@\x00\x00\x88A\x00\x00\xc0@\x00\x00\xe0@\x00\x00\xa8A\x00\x00 A\x00\x00\x00A\x00\x00\x08B\x00\x00pA\x00\x00\xc0A\x00\x00\xe8A\x00\x00\x00B\x00\x00\x98A\x00\x00\x0cB\x00\x00\x04B\x00\x00\xa0@\x00\x00\x90A\x00\x00\xd8A\x00\x00@@\x00\x00\x10B\x00\x00\x10A\x00\x00PA\x00\x00\xe0A\x00\x00\x18B\x00\x00\x00@\x00\x00\xa0A\x00\x00\xf8A\x00\x00\xd0A\x00\x00\x1cB\x00\x00\xb8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'ff\xa6?33\xf3?\x00\x00\x00@33\xb3?33\xf3?\xcd\xcc\x8c?33\xb3?33\xf3?\xcd\xcc\x8c?33\xf3?ff\xe6?33\xf3?33\xb3?\x9a\x99\x99?\xcd\xcc\xcc?ff\xe6?33\xb3?\x9a\x99\xd9?33\xb3?\xcd\xcc\x8c?33\xf3?\x00\x00\xc0?\xcd\xcc\xcc?33\xb3?\xcd\xcc\x8c?ff\xe6?33\xf3?\x9a\x99\xd9?\x9a\x99\x99?33\xb3?\xcd\xcc\x8c?\x9a\x99\xd9?33\xb3?\x00\x00\x80?33\xf3?\xcd\xcc\xcc?\x00\x00\x80?\x00\x00\xc0?ff\xe6?\x9a\x99\xd9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\t\x00\x00\x00\x02\x00\x00\x00"\x00\x00\x00\x1c\x00\x00\x00\n\x00\x00\x00\x19\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x10\x00\x00\x00\x1e\x00\x00\x00\x0f\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x07\x00\x00\x00\x12\x00\x00\x00\x08\x00\x00\x00\x0b\x00\x00\x00\x1a\x00\x00\x00\x16\x00\x00\x00#\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x13\x00\x00\x00\x03\x00\x00\x00%\x00\x00\x00\x1b\x00\x00\x00 \x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00$\x00\x00\x00\x15\x00\x00\x00\x18\x00\x00\x00\x11\x00\x00\x00\x17\x00\x00\x00\x1d\x00\x00\x00\x05\x00\x00\x00!\x00\x00\x00&\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g187
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g257
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g110
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g278
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g313
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g362
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g180
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g201
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g215
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g103
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g131
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g222
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g145
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g152
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g250
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g173
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g159
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g341
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g208
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g271
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g306
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g327
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g236
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g348
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g334
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g138
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g229
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g292
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g124
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g355
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g166
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g194
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g299
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g369
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g117
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g243
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g320
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g285
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g376
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g264
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I83308880
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xa0@\x00\x00\xb0@\xcd\xcc\x8c@\x00\x00\xc0@\x00\x00\xb0@\x00\x00\x80@33\xa3@\x00\x00\x80@\x00\x00\xc0@33\x93@\x00\x00\xa0@ff&@\xcd\xcc\x9c@\xcd\xcc\xac@\x00\x00@@\x00\x00\x00@ff\x86@\x00\x00\xb0@\x00\x00\xc0@\x9a\x99y@\x9a\x99\x99@\x9a\x99\xa9@33\x93@ffF@\x9a\x99\x99@33\xb3@\xcd\xcc\x9c@\x9a\x99\xb9@33\xa3@ff\x86@\x00\x00\xa0@ff\xa6@\x00\x00\xc0@33\xa3@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xc7U\xed@!\x000@\xc9\x02 @\xd2\xab\x1a@Z\xe1\xbd?\x97V\x15@\xbb\xde\xad@\xb2\x87\xf4A\x13G$@\xac\x11\xc1@\xd7%\xba@4\x9a\xd9@c\xdf=@\xd4\xdd\xcd@\xc5\xab\xba@\xbd!*A\xd9yW@\xc8\x9d\x19@vi\xe6?\n#\x8a@\xcb\xfe\x9f?\xba\xf4\xee?\x10\xbb_A\x7f\xbc\xc3@\xa0\x13A@0\xad*@\x97 \xe2?hg\x86?m\xf0\x0e@\x81D\x84@N\x020@-\xef\x12Ae\xec\xae?\xb1\xf1\x0e@\x14w\xff@m\xbf{@C\xf0\xae?\xf2\xc4\xcc?I\x9a\xd1@\xa0TYA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'33\x83@\x9a\x999@\x00\x00@@\x9a\x999@33S@ffF@\x00\x00\x80@\x00\x00\x80@\xcd\xccl@\x9a\x999@\x9a\x999@fff@\x00\x00`@33S@\xcd\xccL@\x00\x00@@ff\x86@\xcd\xccL@33s@\x9a\x99y@ffF@\x9a\x99Y@\x9a\x99y@ffF@33s@333@ff\x86@\xcd\xccl@fff@\x00\x00`@\x00\x00`@33S@fff@33\x83@\x9a\x999@33s@\xcd\xccL@\x00\x00\x80@\x9a\x99Y@\x9a\x99y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x00Y\xc2\x0c\x80\x16\xa5\x0c\xe0\x17\xa5\x0c@\x1c\xa5\x0c@\x14\xa5\x0c\x00\x1d\xa5\x0c \x1c\xa5\x0c\x00\x1c\xa5\x0c`\x16\xa5\x0c\xc0\x16\xa5\x0c\xc0P\xaa\x04\x80L\xa2\x0c\xa0\x15\xa5\x0c\x80\x17\xa5\x0c\xe0\x15\xa5\x0c\x00K\xa3\x0c`K\xa3\x0c`J\xa3\x0c`\x18\xa5\x0c\xe0I\xa3\x0c\x00H\xa3\x0c\xe0E\xa3\x0c\xa0J\xa3\x0c\x80@\xa3\x0c\x00X\xc2\x0c\x80Y\xc2\x0c\x00X\xaa\x04\xc0]\xc2\x0c\xe0_\xc2\x0c Y\xc2\x0c\xe0X\xc2\x0c\xe0\\\xc2\x0c@]\xc2\x0c@Y\xc2\x0c@X\xc2\x0c\x80X\xc2\x0c\x00\x1b\xa5\x0c@\xdc\x1d\r\xa0\xd7\x1d\r\xa0\xd9\x1d\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'b\x10\xc8B\xdd$\xf2@\xee|\x07@\x83\xc0\x8a?\x1dZ\xa4?!\xb0Z@\x87\x16\xa1@\xbaI\x14@\x89A@?\x10X1A\xf8S\xd3?33\x17Ab\x10p@\x9a\x99\x87A\xa8\xc6[@+\x87\xe6?^\xba\xd9?\xdb\xf9\xce?\xc5 \x80?u\x93\xe8?+\x87\x86?^\xba\x99?\x96CS@P\x8d\xd7?\x83\xc0j?\x0e-\xc2?\xd3Mb?\x87\x16\x11@+\x87\xa6?\x1dZ\x84?u\x93\xa8?\xdb\xf9\xae?\xc5 \x80?\x06\x81U?b\x10\x00@\xd3M"?\xdb\xf9\x8e?\xd3M"?\x89A@?\xa8\xc6\xfb?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I83308880
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\x98zM\r\x80\xe65\r\xc0zM\r\xe8zM\r\x88{M\r\x80\xe65\r\x10{M\r\xb0\xe65\r\x10{M\r\xd8{M\r\xe8zM\r8{M\r\xb0\xe65\r\xc0zM\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'Pi\xdf\x04\x80c\xdf\x04\x00b\xdf\x04\xf0k\xdf\x04@m\xdf\x04\xb0l\xdf\x04\xf8`\xdf\x04\xf0\xcb\xff\x040\xc5\xff\x04@\xcd\xff\x04\xb0\xc6\xff\x04 \xc6\xff\x04P\xc0\xff\x04\x10\xc7\xff\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g744
sg83
g789
sg84
g749
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g756
sg83
g798
sg84
g761
sg85
g802
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g807
sg83
g808
sg84
g812
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g818
sg83
g819
sg84
g823
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g807
sg83
g829
sg84
g812
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g778
sg83
g849
sg84
g783
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g838
sg83
g858
sg84
g843
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g818
sg83
g867
sg84
g823
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g767
sg83
g876
sg84
g772
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I83308880
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I83308880
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xd0\x99O\r8\x9bO\r\x10\x87O\r\x80\x86O\r\xb0\x86O\r\xc0\xb6\x1c\r`\xb0\x1c\r\xc0\xb6\x1c\r`\xb0\x1c\r\x00/O\r\xb0\x86O\r`\xb0\x1c\r \xb0O\r\xe0\x86O\rp/O\r\x88\x9bO\rp/O\rp\x87O\r \x9aO\r\xc8.O\r \xb6\x1c\r\xf8\x99O\r \x9aO\r\xf8\x99O\rH\x9aO\r`\xb0\x1c\r\x80\x86O\r`\xb0\x1c\r\xe0\x86O\r\xc0\xb6\x1c\r\x00/O\r\x00\xb3\x1c\rp/O\rp\x9aO\r\xb0\x86O\r\xb0\x9bO\r@\xb4\x1c\r\xc0\xb6\x1c\r\xd8\x9bO\r\x00\x9cO\r\xe0\x86O\rp\x9aO\r\x98\x9aO\r\xd0\x99O\r`\xb0\x1c\r\x00/O\rX\xb0O\r\xc0\x9aO\r \x9aO\r\xa0\xb1\x1c\r \xb0O\r \x9aO\r\x00\x9cO\r@\xb4\x1c\r \xb6\x1c\r\xe0\x86O\r\xc8.O\r\x10\x87O\r\xd0\x99O\r\xf8\x99O\r\xc0\xb6\x1c\r\x80\x86O\r`\x88O\rP\x86O\rH\x9aO\r\xd0\x99O\r`\xb0\x1c\r\xb0\x9bO\r`\xb0\x1c\rp/O\r\x98\x9aO\r(\x9cO\r \xb6\x1c\r\xb0\x86O\r\xb0\x9bO\r\xc0\x9aO\r\x80\x86O\r\xe0\x86O\r\x00\xb3\x1c\r`\x88O\r \x9aO\r@\x87O\r\xc8.O\r\xf8\x99O\r\xc8.O\r\x00\xb3\x1c\r \xb6\x1c\r\xd0\x87O\r\xc0\x9aO\r\xd0\x99O\rH\x9aO\rP\x86O\r`\x9bO\r\xc8.O\r\x00\xb3\x1c\r\xc0\xb6\x1c\r@\xb4\x1c\r`\x9bO\r\xf8\x99O\r`\x88O\r\xc0\x9aO\r\x10\x9bO\r \xb6\x1c\r\xc0\x9aO\r\x00/O\rp\x87O\r@\xb4\x1c\r\xc0\xb6\x1c\r\x98\x9aO\rP\x86O\r\xf8\x99O\r\xe0\x86O\rP\x86O\r \x9aO\r\xb0\x86O\r8/O\r@\xb4\x1c\r\xc8.O\r@\xb4\x1c\r\x80\x86O\r8/O\r\xf8\x99O\r@\xb4\x1c\r8/O\r\xa8/O\r\xc0\x9aO\rH\x9aO\r\x80\x86O\rp\x9aO\r`\x9bO\r \xb6\x1c\r\xd0\x99O\r\xc0\x9aO\r8/O\r \x9aO\r\x98\x9aO\r8/O\r\x80\x86O\r\x00\x9cO\r\xd0\x87O\r8/O\rH\x9aO\rp/O\r`\xb0\x1c\r\xb0\x86O\r\x00/O\r\xc0\xb6\x1c\r\x10\x9bO\rP\x86O\rH\x9aO\r\xc8.O\r\xc0\x9aO\rp\x9aO\rP\x86O\r \xb6\x1c\r\xc0\x9aO\r \xb6\x1c\r\xe0\x86O\rp/O\r\x98\x9aO\r\x80\x86O\r\x00\x9cO\r\xd0\x99O\r`\x9bO\r \x9aO\rP\x86O\r \x9aO\r@\xb4\x1c\r\xd0\x99O\r\x80\x86O\r \xb0O\r \xb6\x1c\r8\x9bO\rp\x9aO\rp/O\r\xa0\x87O\r\xd0\x87O\rH\x9aO\r\xe0\x86O\r\x88\x9bO\r\x98\x9aO\r`\x9bO\r \x9aO\rp\x9aO\rH\x9aO\r\x00\xb3\x1c\rp\x87O\rH\x9aO\r\xb0\x86O\rH\x9aO\r \xb0O\r\x00\xb3\x1c\r\xc0\xb6\x1c\r\xe0\x86O\r\x00\xb3\x1c\r\x10\x87O\r\xf8\x99O\r8\x9bO\r@\xb4\x1c\r`\x88O\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S"\x00\x9c\x1b\r\x00\x95\x1b\r`(6\r\xc0)6\r\x80&6\r +6\r@+6\r &6\r\x00*6\r\x80'6\r '6\r\xc0*6\r\x00+6\r@\x9b\x1b\r`\x90\x1b\r\xa0(6\r\xa0)6\r\xa0*6\r@(6\r\x00,6\r\xc0+6\r *6\r\xa0'6\r\x80*6\r\x80+6\r\xe0+6\r@U\xa9\x04\x80k\x1e\r\x00n\x1e\r\x00o\x1e\r\x00j\x1e\r\x80l\x1e\r\xc0l\x1e\r@l\x1e\r\x00m\x1e\r g\x1e\r`g\x1e\r@m\x1e\r@n\x1e\r\xa0f\x1e\r\xe0f\x1e\r\x00f\x1e\r@f\x1e\r`e\x1e\r\xc0i\x1e\r\x80i\x1e\r\x00k\x1e\r\x80n\x1e\r\xc0n\x1e\r\x80f\x1e\r@h\x1e\r\x00i\x1e\r\xc0g\x1e\r\xc0k\x1e\r@i\x1e\r\x80h\x1e\r\xc0h\x1e\r\xc0m\x1e\r@j\x1e\r\x80j\x1e\r `\x1e\r\x80`\x1e\r\xc0j\x1e\r\x00h\x1e\r\x00a\x1e\r\x80\x91\x1b\r\xc0`\x1e\r\x80m\x1e\r@k\x1e\r@`\x1e\r\xa0`\x1e\r\xc0e\x1e\r@o\x1e\r\xe0Y\xc2\x0c\x00l\x1e\r@\xd2\x1d\r\xc0\xd2\x1d\r@\xde\x1d\r \xde\x1d\r\xc0\xde\x1d\r\x00\xdf\x1d\r`\xde\x1d\r@\xdf\x1d\r \xdf\x1d\r\xc0\xdf\x1d\r\xa0\xdf\x1d\r\x80\xdf\x1d\r`\xd0\x1d\r@\xd1\x1d\r\x00\xd2\x1d\r\xa0\xde\x1d\r \xd1\x1d\r\x80\xd1\x1d\r\xa0\xd1\x1d\r@\xd3\x1d\r\xa0I\xa3\x0c\xe0\xd1\x1d\r\xc0\xda\x1d\r\x00\xd3\x1d\r`\xd3\x1d\r\xa0\xd2\x1d\r \xd3\x1d\r`\xd2\x1d\r\xe0\xdf\x1d\r@\xd4\x1d\r\xe0\xd3\x1d\r\x00\xd1\x1d\r \xd2\x1d\r\x80\xd3\x1d\r\xa0\xd3\x1d\r\xe0\xde\x1d\r\xc0\xd1\x1d\r \xd4\x1d\r\xc0\xd3\x1d\r [\xaa\x04\xe0\xd2\x1d\r\x80\xd2\x1d\r\x80\xdc\x1d\r`\xdf\x1d\r\xe0`\x1e\r\x00\xd4\x1d\r`[\xaa\x04@\x9c\x1b\r`\r\x1d\r@\x0e\x1d\r\xc0\x0f\x1d\r\x80\x05\x1d\r@\x90\x1b\r`\xd1\x1d\r``\x1e\r -6\r@%6\r\xe0)6\r\xe0-6\r\x00&6\r\xc0-6\r\xa0.6\r\xa0&6\r ,6\r\xe0.6\r\xc0,6\r\xe0(6\r@.6\r\xa0\x0f\x1d\r\xe0*6\r`+6\r`-6\r\xa0,6\r@*6\r`/6\r\x00.6\r\xe0'6\r`&6\r\xa0/6\r`*6\r@,6\r\xa0+6\r@-6\r\xe0/6\r\xc0/6\r@/6\r\x00/6\r\xc0.6\r\x80/6\r )6\r\xa0\xc1\x1e\r\x00-6\r\x80\xde\x1d\r \xb2\xbe\x1e\xa0\xb0\xbe\x1e`\xb1\xbe\x1e\x00\xb1\xbe\x1e@\xb0\xbe\x1e\xc0\xb1\xbe\x1e \xb1\xbe\x1e\xa0\xb1\xbe\x1e`\xb2\xbe\x1e\xa0\xb2\xbe\x1e\xc0\xb2\xbe\x1e\x80\xb2\xbe\x1e\x00\xb3\xbe\x1e \xb3\xbe\x1e@\xb3\xbe\x1e`\xb3\xbe\x1e\x80\xb3\xbe\x1e\xc0\xb0\xbe\x1e \xb0\xbe\x1e\xe0\xb3\xbe\x1e\xc0\xb3\xbe\x1e@\xb2\xbe\x1e@\xb4\xbe\x1e \xb4\xbe\x1e`.6\r\xe0%6\r %6\r`'6\r`)6\r\x80(6\r\x00%6\r`!6\r"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\rS\x15@#*\xb3?\xbcf\xe6?B\x88\xe8?\x88\x05\xc0?e R@\xa3D\xa4?N\xbb\x9b?\xa9\xa7\xaa?\xe3N\xe4?\x8a\xcd\xcc?\xe7\x10\x11@\xaau\x17@\xbdS\x05@tI\x14@\xfdU%@,3\x03@<4\x93?Kf\xe6?\xb3\x9c9@\x1c\xdeM@\x7fd&@\xb3T\xad@l\x00\x80?\xfeC\x14@\xcf\x87\xe8?03\xf3?\x01V\xf5?\xd4v\x87@\xe9/\xf3?_\x87(@\xfd\xdb\xfd?\x18\xcb<@*<\xc4?\xf1\xbf{?\x0f\xea\x8e?\xd8S\x05@-1s@\x0c\x93\xe8?!!\xba@\x86v\x17@~\x16\x82?\x8a\x04\x80?Vv\xa7@\xc8\x99\x99?\xe52\x9b@\xe2\xff\x1f@iT\xd5@!\xee\x06A\xea\xa9\x8a?5\x89\x08@\xe6\xeb\xee?\x1c\xaa\x9a@~w\'@z\xea\x8e?jw\xb7?\xa4@\xc4?\x01\x1fr@\xaf\x9b\x81@I\xccL@!\xde\xdd?\x0b43@0x7@fe\xe6@\xbf\xda\xbd?I\xa6J@\xedJ\xa4?d\xaa\xaa?_\x9aY?!\x99\x99?\x08\xccL@6\xfa\xce?\x00\xef\xae?\xf7\xfb\xff?\xc4\x98\xc9@W\x1e\xf1?\x07\x00\xc0?\xe6\x89\x08@b\xef\x8e?\x1d\xe6\xce?\xbb\xb6\xea?"U\x95?I\x85\xa8?\xb2f\xc6?7\xeb\x8e?\x97$\x82?\xf2\xb9\x1b@\xb5\xa7\x8a?\x0bA\xc4?\x9e\xff\xbf?U\x99\t@\xee\x98\xf9?\xfce\x16@W,\xf3?\xfe\xfe\x7f?\xc5\x1b\xa2?\xa7eF@S!b@30\x93?\x1d\r1@\xac2C@\xcd\xcc\xcc?\xc6\x96\xd9?t\xff\x0f@\xd7f\x06@\xef\xbb\x9b?~!\x02@\xe7\xbc\xbb?\x14\xc9l@\x81\x12\xd1?\x972\xf3?\r\x999@\x004\xb3?6c\x86?y\x9bY?55\xb3?\xe12\xf3?\x16\xb9\x0b@\x95-s?\xf6\xcd\xac?O\x12\x91?\xad\xe3n?W1\x03@\x0f"\xc2?\xe2\x99\x99?\xba\xbb\xbb?\x07\xca\xac?*\x9aY?u\xba\xdb?\xaeT\x05@\xddd\xa6?\xb7\x98\xb9?\x99\xf1]?,\xaa\xaa@zCT@u\xff\x87@\x9db\xe6?\xb5T\x05A`"\x82?\x8e\x9aY?\xcb\xdc\r@\xc7\xea\x8e?\x9c\x1f\x82?\xf2iw?qf\x86?\xaeO\xf5?\x19uw?Df\xc6?\x9f\x04\x00@\xf1\xcb\xac?\xbf\xc9\xac?\xeb\xd9\xbd?!?D@4\xce\xac?\xb2y\xd7?\x8d\xed\xae?\x87V\x95?\xe4\x99)@b\xf0\x8e?SuG@\x96\xcc\xec?\x96\xdd\r@\x12\xbc\x9b?=\xea\xbd?e3\x93?\x84\x1f\x82?\x8bWU?\xc5f\xa6?\xad3\xb3?\x1a\xca\x8c?hC\xe4?\x1a\xbc\x9b?@`\xc6?4f\xbe@m\x97I@s3\x93?A#b?\xf73\x93?t\x9bY?.S\xb5?r\x89\xc8?\xb42\x93?C\xba{?\xa0\xcf\xec?P\x99\x99?a\x101@\x08"\x82?\x96\xf0n?n\x02@?\xfb\xdd]?^T\xdd@ f\x06@\xb4\xc7\xbb?\xc8\xa7j?O#\xa2?(\x85\xe8?\\\x1f\x82?\x8f\xbcj?\xd5\r\xb1?\x1d\xd5\xfd?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xd8\xce\xff\x04\x10\xcd\xff\x04\x88A\xde\x04\x18N\xde\x04\xe0I\xde\x04\xe8G\xde\x04 C\xde\x04\xf8I\xde\x040E\xde\x04\xb0L\xde\x04\xf8L\xde\x04\x80@\xde\x048F\xde\x04\xf0E\xde\x04\xd0A\xde\x04\xb0F\xde\x048I\xde\x04\xa8B\xde\x04\x98I\xde\x04\xd8E\xde\x04\x00H\xde\x04xH\xde\x04@A\xde\x04hF\xde\x04\x80O\xde\x04\x90N\xde\x04\xe8DW\x02X\x17\xd6\x03 \x1c\xd6\x03\xb0|\xdf\x04\xa8~\xdf\x04`{\xdf\x04\xc8|\xdf\x04\x10}\xdf\x048\x7f\xdf\x04\x10q\xdf\x04\x00x\xdf\x04\x00~\xdf\x04\xf0~\xdf\x04hc\xdf\x04\xd0g\xdf\x04\xb0c\xdf\x04\xc0h\xdf\x04\xd8k\xdf\x04\xa0g\xdf\x04\xe0c\xdf\x04\xe8j\xdf\x04pd\xdf\x048`\xdf\x04\xa0j\xdf\x04\xd8e\xdf\x04\x08c\xdf\x04He\xdf\x04\xe8a\xdf\x048c\xdf\x04\xb0i\xdf\x04\xd8b\xdf\x04\xe8g\xdf\x04\x98o\xdf\x04\xa0D\xde\x04\xd0M\xde\x04PO\xde\x04hI\xde\x04\x08O\xde\x040H\xde\x04\xb0I\xde\x040B\xde\x04XM\xde\x04(M\xde\x04pG\xde\x04\xe8M\xde\x04\x80C\xde\x04\xe8J\xde\x04\xe0F\xde\x04\x18K\xde\x04xK\xde\x040N\xde\x048O\xde\x04\xc8F\xde\x04\x98L\xde\x04\xa0M\xde\x04(A\xde\x04\xa8K\xde\x04XJ\xde\x048@\xde\x04\xa0G\xde\x04XG\xde\x04\xe0C\xde\x04@D\xde\x04 I\xde\x04\x00K\xde\x04\x10A\xde\x04\x80L\xde\x04\xd0G\xde\x04PI\xde\x04pD\xde\x04`N\xde\x04\x90B\xde\x04\xd0J\xde\x040K\xde\x04xE\xde\x04\xc8L\xde\x04\xe8D\xde\x04\x88M\xde\x04`H\xde\x04 F\xde\x04\xd8B\xde\x04@J\xde\x04\xf0H\xde\x04\x88J\xde\x04\xc0B\xde\x04HN\xde\x04\x80I\xde\x04\x90K\xde\x04\xa0A\xde\x04\xb8M\xde\x04\x98@\xde\x04\xc8O\xde\x04\xf8F\xde\x04\x80F\xde\x04`K\xde\x04PF\xde\x04\x00N\xde\x04\xc0N\xde\x04\x98F\xde\x04\xf8C\xde\x04\xb0O\xde\x04\x98O\xde\x04 @\xde\x04\xa8N\xde\x04h@\xde\x04\xc8@\xde\x04\xb8J\xde\x04\x10G\xde\x04\xd8N\xde\x04@G\xde\x04\xf0\xbe\xe6\x04`\xb5\xe6\x04\x90\xbb\xe6\x04\xa8\xbe\xe6\x04pM\xde\x04\xf0K\xde\x04 L\xde\x04hL\xde\x04HE\xde\x04\xa8E\xde\x04xB\xde\x04\x18B\xde\x04\x08F\xde\x04P@\xde\x04\x10D\xde\x048C\xde\x04\x98C\xde\x04\xb0@\xde\x04\x00B\xde\x04\x18E\xde\x04\xc8C\xde\x04HB\xde\x04\x88D\xde\x04pA\xde\x04\xb8A\xde\x04\xb8G\xde\x04\xa0J\xde\x04\xd8H\xde\x04`E\xde\x04\xe0@\xde\x04\xf0B\xde\x04PC\xde\x04\x88G\xde\x04HH\xde\x04XA\xde\x04\xb8D\xde\x04\xc0E\xde\x04hC\xde\x04\x08L\xde\x04\xc0H\xde\x04\xd8K\xde\x04pJ\xde\x04\xc8I\xde\x04(D\xde\x04\xe0L\xde\x04\x00E\xde\x04\xe8A\xde\x04XD\xde\x04\x08I\xde\x04(J\xde\x04hO\xde\x04\x08C\xde\x04\xf0N\xde\x04HK\xde\x048L\xde\x04\x10M\xde\x04\xa8b\xdf\x04\xa0a\xdf\x04(a\xdf\x04hf\xdf\x04\x98c\xdf\x04\xf0h\xdf\x04\x10d\xdf\x04Xg\xdf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g988
sg895
g1018
sg909
g995
sg904
g1025
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g971
sg895
g1063
sg909
g978
sg904
g1070
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1005
sg895
g1078
sg909
g1012
sg904
g1085
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1131
sg895
g1127
sg909
g1138
sg904
g1135
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1154
sg895
g1144
sg909
g1148
sg904
g1152
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1131
sg895
g1127
sg909
g1138
sg904
g1135
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g926
sg895
g1204
sg909
g920
sg904
g1211
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1154
sg895
g1144
sg909
g1148
sg904
g1152
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1154
sg895
g1262
sg909
g1148
sg904
g1269
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1281
sg895
g1277
sg909
g1288
sg904
g1285
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1005
sg895
g1078
sg909
g1012
sg904
g1085
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g988
sg895
g1018
sg909
g995
sg904
g1025
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1376
sg895
g1372
sg909
g1383
sg904
g1380
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1131
sg895
g1127
sg909
g1138
sg904
g1135
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1406
sg895
g1402
sg909
g1413
sg904
g1410
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g971
sg895
g1063
sg909
g978
sg904
g1070
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1376
sg895
g1372
sg909
g1383
sg904
g1380
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1449
sg895
g1445
sg909
g1456
sg904
g1453
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1449
sg895
g1475
sg909
g1456
sg904
g1482
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1500
sg895
g1490
sg909
g1494
sg904
g1498
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1114
sg895
g1507
sg909
g1121
sg904
g1514
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1406
sg895
g1402
sg909
g1413
sg904
g1410
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1500
sg895
g1490
sg909
g1494
sg904
g1498
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1005
sg895
g1078
sg909
g1012
sg904
g1085
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1223
sg895
g1587
sg909
g1230
sg904
g1594
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1606
sg895
g1602
sg909
g1613
sg904
g1610
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1500
sg895
g1490
sg909
g1494
sg904
g1498
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1449
sg895
g1445
sg909
g1456
sg904
g1453
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1223
sg895
g1587
sg909
g1230
sg904
g1594
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g900
sg895
g1749
sg909
g910
sg904
g1756
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1154
sg895
g1144
sg909
g1148
sg904
g1152
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g954
sg895
g1790
sg909
g961
sg904
g1797
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1406
sg895
g1402
sg909
g1413
sg904
g1410
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g943
sg895
g1818
sg909
g937
sg904
g1825
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1281
sg895
g1277
sg909
g1288
sg904
g1285
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1005
sg895
g1078
sg909
g1012
sg904
g1085
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1376
sg895
g1372
sg909
g1383
sg904
g1380
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1131
sg895
g1127
sg909
g1138
sg904
g1135
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1500
sg895
g1911
sg909
g1494
sg904
g1918
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1606
sg895
g1926
sg909
g1613
sg904
g1933
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1223
sg895
g1587
sg909
g1230
sg904
g1594
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1376
sg895
g1967
sg909
g1383
sg904
g1974
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1606
sg895
g1602
sg909
g1613
sg904
g1610
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g954
sg895
g1790
sg909
g961
sg904
g1797
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1114
sg895
g1507
sg909
g1121
sg904
g1514
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1376
sg895
g1967
sg909
g1383
sg904
g1974
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1406
sg895
g2034
sg909
g1413
sg904
g2041
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1154
sg895
g1262
sg909
g1148
sg904
g1269
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g926
sg895
g1204
sg909
g920
sg904
g1211
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1376
sg895
g1967
sg909
g1383
sg904
g1974
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1131
sg895
g2140
sg909
g1138
sg904
g2147
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1606
sg895
g1602
sg909
g1613
sg904
g1610
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g900
sg895
g1749
sg909
g910
sg904
g1756
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1281
sg895
g2181
sg909
g1288
sg904
g2188
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1050
sg895
g2209
sg909
g1057
sg904
g2216
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g926
sg895
g1204
sg909
g920
sg904
g1211
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1376
sg895
g1967
sg909
g1383
sg904
g1974
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1449
sg895
g1445
sg909
g1456
sg904
g1453
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1050
sg895
g2209
sg909
g1057
sg904
g2216
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1154
sg895
g1262
sg909
g1148
sg904
g1269
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1406
sg895
g2034
sg909
g1413
sg904
g2041
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1606
sg895
g1926
sg909
g1613
sg904
g1933
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1606
sg895
g1926
sg909
g1613
sg904
g1933
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1449
sg895
g1475
sg909
g1456
sg904
g1482
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1500
sg895
g1911
sg909
g1494
sg904
g1918
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g943
sg895
g1818
sg909
g937
sg904
g1825
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1154
sg895
g1144
sg909
g1148
sg904
g1152
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1114
sg895
g1507
sg909
g1121
sg904
g1514
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g943
sg895
g1818
sg909
g937
sg904
g1825
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1191
sg895
g2484
sg909
g1198
sg904
g2491
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g971
sg895
g1063
sg909
g978
sg904
g1070
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1103
sg895
g2512
sg909
g1097
sg904
g2519
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1449
sg895
g1475
sg909
g1456
sg904
g1482
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g926
sg895
g1204
sg909
g920
sg904
g1211
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1449
sg895
g1445
sg909
g1456
sg904
g1453
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g954
sg895
g1790
sg909
g961
sg904
g1797
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1103
sg895
g2512
sg909
g1097
sg904
g2519
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1154
sg895
g1262
sg909
g1148
sg904
g1269
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1449
sg895
g1445
sg909
g1456
sg904
g1453
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g988
sg895
g1018
sg909
g995
sg904
g1025
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1606
sg895
g1926
sg909
g1613
sg904
g1933
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1281
sg895
g2181
sg909
g1288
sg904
g2188
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g954
sg895
g1790
sg909
g961
sg904
g1797
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1406
sg895
g1402
sg909
g1413
sg904
g1410
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1050
sg895
g2209
sg909
g1057
sg904
g2216
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g900
sg895
g1749
sg909
g910
sg904
g1756
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1606
sg895
g1926
sg909
g1613
sg904
g1933
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1103
sg895
g2512
sg909
g1097
sg904
g2519
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1191
sg895
g2484
sg909
g1198
sg904
g2491
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1500
sg895
g1911
sg909
g1494
sg904
g1918
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1500
sg895
g1490
sg909
g1494
sg904
g1498
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1131
sg895
g2140
sg909
g1138
sg904
g2147
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1281
sg895
g1277
sg909
g1288
sg904
g1285
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1131
sg895
g2140
sg909
g1138
sg904
g2147
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1005
sg895
g1078
sg909
g1012
sg904
g1085
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g971
sg895
g1063
sg909
g978
sg904
g1070
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1050
sg895
g2209
sg909
g1057
sg904
g2216
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g988
sg895
g1018
sg909
g995
sg904
g1025
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g943
sg895
g1818
sg909
g937
sg904
g1825
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1281
sg895
g1277
sg909
g1288
sg904
g1285
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g926
sg895
g1204
sg909
g920
sg904
g1211
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1606
sg895
g1602
sg909
g1613
sg904
g1610
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1406
sg895
g1402
sg909
g1413
sg904
g1410
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1223
sg895
g1587
sg909
g1230
sg904
g1594
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1606
sg895
g1602
sg909
g1613
sg904
g1610
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1114
sg895
g1507
sg909
g1121
sg904
g1514
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1131
sg895
g1127
sg909
g1138
sg904
g1135
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1500
sg895
g1911
sg909
g1494
sg904
g1918
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1500
sg895
g1490
sg909
g1494
sg904
g1498
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g900
sg895
g1749
sg909
g910
sg904
g1756
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1050
sg895
g2209
sg909
g1057
sg904
g2216
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1191
sg895
g2484
sg909
g1198
sg904
g2491
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1191
sg895
g2484
sg909
g1198
sg904
g2491
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1449
sg895
g1475
sg909
g1456
sg904
g1482
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g900
sg895
g1749
sg909
g910
sg904
g1756
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g954
sg895
g1790
sg909
g961
sg904
g1797
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1103
sg895
g2512
sg909
g1097
sg904
g2519
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1223
sg895
g1587
sg909
g1230
sg904
g1594
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1406
sg895
g2034
sg909
g1413
sg904
g2041
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1131
sg895
g2140
sg909
g1138
sg904
g2147
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1131
sg895
g2140
sg909
g1138
sg904
g2147
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1281
sg895
g2181
sg909
g1288
sg904
g2188
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1154
sg895
g1262
sg909
g1148
sg904
g1269
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1500
sg895
g1911
sg909
g1494
sg904
g1918
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1191
sg895
g2484
sg909
g1198
sg904
g2491
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1406
sg895
g2034
sg909
g1413
sg904
g2041
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1281
sg895
g1277
sg909
g1288
sg904
g1285
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1376
sg895
g1372
sg909
g1383
sg904
g1380
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g971
sg895
g1063
sg909
g978
sg904
g1070
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1281
sg895
g2181
sg909
g1288
sg904
g2188
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1281
sg895
g2181
sg909
g1288
sg904
g2188
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1103
sg895
g2512
sg909
g1097
sg904
g2519
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1376
sg895
g1967
sg909
g1383
sg904
g1974
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g988
sg895
g1018
sg909
g995
sg904
g1025
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1114
sg895
g1507
sg909
g1121
sg904
g1514
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1376
sg895
g1372
sg909
g1383
sg904
g1380
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g943
sg895
g1818
sg909
g937
sg904
g1825
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1154
sg895
g1144
sg909
g1148
sg904
g1152
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1449
sg895
g1475
sg909
g1456
sg904
g1482
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1406
sg895
g2034
sg909
g1413
sg904
g2041
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I83308880
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\xc0\xd7\x1d\r@D\xc8\x1e0E\xc8\x1e@D\xc8\x1eX\x1e\xa4\x0c\x80\xd6\x1d\r`E\xc8\x1e\x90E\xc8\x1epD\xc8\x1e\x80\xd6\x1d\rX\x1e\xa4\x0c\x80\xd6\x1d\rH\x1f\xa4\x0c\xe8m\xa4\x0c@\x1d\xa4\x0c\xa0D\xc8\x1eX\x1e\xa4\x0c\x08m\xa4\x0c@m\xa4\x0c\xd0D\xc8\x1e@m\xa4\x0c\xc0\x1f\xa4\x0cxm\xa4\x0cpD\xc8\x1eH\x1f\xa4\x0c\xb0m\xa4\x0c\x08m\xa4\x0cH\x1f\xa4\x0c\xf0\x1c\xa4\x0c\xa0D\xc8\x1e\x08m\xa4\x0c\xd0D\xc8\x1e\x98\x1f\xa4\x0c\xd0D\xc8\x1e\x08\x19\xa4\x0c\xe0\xd8\x1d\r\xe8m\xa4\x0c\x80\x19\xa4\x0c\x80\xd6\x1d\r\x98\x1f\xa4\x0ch\x18\xa4\x0c\xc0\x1f\xa4\x0c\x00E\xc8\x1e\xd0D\xc8\x1e\xe0\x18\xa4\x0ch\x18\xa4\x0c`\xd7\x1d\r\xe0\x18\xa4\x0c\x98\x1f\xa4\x0c\xa0D\xc8\x1eH\x1f\xa4\x0c\xc0\xd7\x1d\r`\xd7\x1d\rpD\xc8\x1e\x80\xd6\x1d\r\xc0\x1f\xa4\x0cxm\xa4\x0c\x80\xd6\x1d\r@m\xa4\x0c\xc0\x1f\xa4\x0c\x80\x19\xa4\x0c\x88\x1b\xa4\x0c\x98\x1f\xa4\x0c\xc0\xd7\x1d\r\x98\x1f\xa4\x0c\xc0\x1f\xa4\x0c@\x18\xa4\x0c\xc0\xd7\x1d\r\xe0\xd8\x1d\r\xc0\xd7\x1d\r@m\xa4\x0ch\x18\xa4\x0c@m\xa4\x0c0\x19\xa4\x0c\xe0\xd8\x1d\r@D\xc8\x1e\x08m\xa4\x0c F\xc8\x1exm\xa4\x0c\xd0D\xc8\x1e\x80\x19\xa4\x0cpD\xc8\x1e\xe0\x18\xa4\x0c\xe0\xd8\x1d\r \xd0\x1d\r\xc0\x1f\xa4\x0c@m\xa4\x0c`\xd7\x1d\r\xf0E\xc8\x1e`\xd7\x1d\r\x08m\xa4\x0c\x88\x1b\xa4\x0c@m\xa4\x0c\xc0\x1a\xa4\x0ch\x18\xa4\x0c \xd0\x1d\r\x80\xd6\x1d\r@\x18\xa4\x0c\x80\x1e\xa4\x0cX\x1e\xa4\x0c \xd0\x1d\r\x80\x19\xa4\x0c\xa0D\xc8\x1e \xd0\x1d\r0E\xc8\x1e0\x19\xa4\x0cpD\xc8\x1exm\xa4\x0c\x08\x19\xa4\x0c\xf0\x1c\xa4\x0c\x08\x19\xa4\x0c@D\xc8\x1e@m\xa4\x0c\x00E\xc8\x1e\x08m\xa4\x0c\x08\x19\xa4\x0c\x08m\xa4\x0c\xb0m\xa4\x0c\x98\x1f\xa4\x0c\xa0D\xc8\x1e@m\xa4\x0c\x08\x19\xa4\x0cH\x1f\xa4\x0c\xb0m\xa4\x0c`\xd7\x1d\r \xd0\x1d\rH\x1f\xa4\x0c\xa0D\xc8\x1e \xd0\x1d\r\xb0m\xa4\x0c\x98\x1f\xa4\x0c`\xd7\x1d\r\xc0\x1a\xa4\x0cpD\xc8\x1e0\x19\xa4\x0c\xe0\x18\xa4\x0c\xc0\x1a\xa4\x0c`E\xc8\x1e\xb0m\xa4\x0c\xd0D\xc8\x1e@\x1d\xa4\x0cX\x1e\xa4\x0c`\xd7\x1d\r\xc0\x1f\xa4\x0c`\xd7\x1d\rpD\xc8\x1e\x00E\xc8\x1e@\x18\xa4\x0c\xc0\x1a\xa4\x0c@D\xc8\x1e\x08\x19\xa4\x0c\xd0D\xc8\x1e\x80\xd6\x1d\rH\x1f\xa4\x0c@m\xa4\x0c n\xa4\x0c\x88\x1b\xa4\x0c F\xc8\x1e\x08\x19\xa4\x0c\xa0D\xc8\x1e\x80\x1e\xa4\x0c\xc0\xd7\x1d\rX\x1e\xa4\x0c\xc0\xd7\x1d\r\xe0\xd8\x1d\rpD\xc8\x1e\xe0\xd8\x1d\r \xd0\x1d\r\xc0E\xc8\x1e\xc0\x1f\xa4\x0c\x08m\xa4\x0c\xd0D\xc8\x1e\x80\xd6\x1d\r\x98\x1f\xa4\x0c0\x19\xa4\x0c\xa0D\xc8\x1eh\x18\xa4\x0c@D\xc8\x1e\xf0E\xc8\x1e\x08m\xa4\x0c \xd0\x1d\r\xb0m\xa4\x0cX\x1e\xa4\x0c \xd0\x1d\rX\x1e\xa4\x0c\xe0\xd8\x1d\r\xa0D\xc8\x1e\xc0\x1a\xa4\x0cxm\xa4\x0cH\x1f\xa4\x0c\xc0\xd7\x1d\r\x98\x1f\xa4\x0c\xc0\x1a\xa4\x0c \xd0\x1d\r\xe0\xd8\x1d\r0\x19\xa4\x0c@D\xc8\x1e\xb0m\xa4\x0cxm\xa4\x0c\x98\x1f\xa4\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\xe0\xb5\xbe\x1e\xa0\xb7\xbe\x1e\xa0\xb6\xbe\x1e\x00\xb8\xbe\x1e\x00\xb7\xbe\x1e \xb6\xbe\x1e\xc0\xb6\xbe\x1e`\xb5\xbe\x1e\x00\xb6\xbe\x1e\xe0\xb6\xbe\x1e\x80\xb8\xbe\x1e\x80\xb7\xbe\x1e@\xb7\xbe\x1e`\xb8\xbe\x1e\x80\xb6\xbe\x1e\xc0\xb5\xbe\x1e \xb8\xbe\x1e\x00\xb9\xbe\x1e`\xb6\xbe\x1e\x80\xb5\xbe\x1e\x80\xb9\xbe\x1e\xc0\xb7\xbe\x1e`\xb7\xbe\x1e@\xb9\xbe\x1e\xa0\xb9\xbe\x1e@\xb8\xbe\x1e\xa0\xb5\xbe\x1e\xa0\xba\xbe\x1e\xe0\xb9\xbe\x1e`\xba\xbe\x1e\x00\xba\xbe\x1e\xa0\xb8\xbe\x1e`\xb9\xbe\x1e\xe0\xb7\xbe\x1e@\xbb\xbe\x1e\x80\xba\xbe\x1e \xba\xbe\x1e\xe0\xbb\xbe\x1e@\xba\xbe\x1e\xc0\xb8\xbe\x1e`\xbc\xbe\x1e \xbb\xbe\x1e \xb7\xbe\x1e\xe0\xb8\xbe\x1e\xc0\xb9\xbe\x1e`\xbb\xbe\x1e\x80\xbc\xbe\x1e@\xbd\xbe\x1e\xc0\xba\xbe\x1e@\xbc\xbe\x1e@\xb6\xbe\x1e`\xbd\xbe\x1e\xc0\xbd\xbe\x1e\xe0\xbd\xbe\x1e\x00\xbe\xbe\x1e\xe0\xbc\xbe\x1e\x00\xbd\xbe\x1e \xbd\xbe\x1e\x80\xbd\xbe\x1e\xc0\xbe\xbe\x1e`\xbe\xbe\x1e\xa0\xbb\xbe\x1e\x80\xbe\xbe\x1e\xe0\xbe\xbe\x1e\xa0\xbc\xbe\x1e\x80\xbf\xbe\x1e\x00\xbf\xbe\x1e\xa0\xbf\xbe\x1e@\xbf\xbe\x1e@\xbe\xbe\x1e\xc0\xbf\xbe\x1e\xc0\xbc\xbe\x1e\xa0\xbe\xbe\x1e \xb9\xbe\x1e \xbc\xbe\x1e \xbe\xbe\x1e\x00\xbc\xbe\x1e@)6\r`\xbf\xbe\x1e\xc0\xbb\xbe\x1e\xa0\xbd\xbe\x1e\x00!6\r \xbf\xbe\x1e\x00\xbb\xbe\x1e \xf2\xe8\x1e\xa0\xf0\xe8\x1e`\xf1\xe8\x1e\x00\xf1\xe8\x1e@\xf0\xe8\x1e\xc0\xf1\xe8\x1e \xf1\xe8\x1e\xa0\xf1\xe8\x1e@\xf2\xe8\x1e\xa0\xf2\xe8\x1e`\xf2\xe8\x1e\x80\xf2\xe8\x1e\x00\xf3\xe8\x1e\xe0\xf2\xe8\x1e\x00\xf2\xe8\x1e \xf3\xe8\x1e\x80\xf3\xe8\x1e`\xf3\xe8\x1e\xe0\xf1\xe8\x1e\xa0\xf3\xe8\x1e\x00\xf4\xe8\x1e\xe0\xf3\xe8\x1e\xe0\xf0\xe8\x1e`\xf4\xe8\x1e\x80\xf4\xe8\x1e \xf0\xe8\x1e`\xf0\xe8\x1e\xa0\xf4\xe8\x1e\xc0\xf4\xe8\x1e\xe0\xf4\xe8\x1e@\xf5\xe8\x1e \xf5\xe8\x1e \xf4\xe8\x1e`\xf5\xe8\x1e\xc0\xf5\xe8\x1e\xa0\xf5\xe8\x1e\x00\xf6\xe8\x1e \xf6\xe8\x1e\xc0\xf3\xe8\x1e`\xf6\xe8\x1e@\xf6\xe8\x1e\xa0\xf6\xe8\x1e\x80\xf6\xe8\x1e@\xf1\xe8\x1e\x00\xf7\xe8\x1e\xe0\xf6\xe8\x1e\xe0\xf5\xe8\x1e \xf7\xe8\x1e\x80\xf7\xe8\x1e\xa0\xf7\xe8\x1e\x80\xf5\xe8\x1e\xc0\xf0\xe8\x1e\xc0\xf7\xe8\x1e\xe0\xf7\xe8\x1e\x00\xf8\xe8\x1e`\xf8\xe8\x1e\x80\xf8\xe8\x1e@\xf7\xe8\x1e\xc0\xf8\xe8\x1e\xe0\xf8\xe8\x1e\x00\xf9\xe8\x1e`\xf7\xe8\x1e\x80\xf0\xe8\x1e \xf9\xe8\x1e@\xf9\xe8\x1e`\xf9\xe8\x1e\x80\xf9\xe8\x1e\xe0\xf9\xe8\x1e\xc0\xf9\xe8\x1e \xfa\xe8\x1e@\xfa\xe8\x1e\x00\xf5\xe8\x1e\x80\xfa\xe8\x1e\xa0\xfa\xe8\x1e\xc0\xf2\xe8\x1e\xe0\xfa\xe8\x1e\x00\xfb\xe8\x1e@\xf3\xe8\x1e\x80\xf1\xe8\x1e \xfb\xe8\x1e@\xfb\xe8\x1e\xa0\xfb\xe8\x1e\xc0\xfb\xe8\x1e@\xf8\xe8\x1e\xc0\xf6\xe8\x1e\xe0\xfb\xe8\x1e@\xfc\xe8\x1e`\xfc\xe8\x1e@\xf4\xe8\x1e\xc0\xfa\xe8\x1e\x80\xfc\xe8\x1e\xa0\xfc\xe8\x1e\xc0\xfc\xe8\x1e\xe0\xfc\xe8\x1e\x00\xfd\xe8\x1e \xfd\xe8\x1e@\xfd\xe8\x1e\xa0\xfd\xe8\x1e\xc0\xfd\xe8\x1e\x00\xfa\xe8\x1e\x00\xfe\xe8\x1e \xfe\xe8\x1e\x80\xfb\xe8\x1e`\xfb\xe8\x1e@\xfe\xe8\x1e`\xfe\xe8\x1e\x80\xfe\xe8\x1e\xa0\xfe\xe8\x1e\x00\xff\xe8\x1e \xff\xe8\x1e\xa0\xff\xe8\x1e\xe0\xbf\xbe\x1e`\xfa\xe8\x1e`\xfd\xe8\x1e\x80\xff\xe8\x1e \xf8\xe8\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\xfa@$@ e\x86?\x8cw\x97?\x87BD?\xd2\xdd\x9d?\x1d b?<"\x82?\x9e3\x93?n\x0fQ?\x00\xde]?\x8d\x93\xc8?0w\x17@\x8cU\x95?\x04\x9b\x99?(\x88\xc8?Yg\x86?J\xdf]?L\xa7j?\x18\xccL@\xfeT\xd5?Og\x06@Y\xa9:@e\xdd\r@\x07\x10Q?\xcc\x10\x91?Gaf?\xb5\x9aY?\' \x82?\'"\x82?oD\x84?%\x0c\x80?" b?\x8a<\xc4?\xc2E\x84?2\xcc\xac@E\x95\x88?\x91\xab\xea?\t\xa5j?6w7?\xb8l\xd7?<\x18@?Q\x00\x80?i\xd8]?\x85c\x86?\xbd\xff\x7f?>\xc7L?B\x99\xd9?\xaf\x12Q?\xfb\x94\x19@I\xaaj?\x82U\xb5?Zc\xa6?X\xab\x8a?\x9c\xff\x7f?\x1d73?\x0b\x88\xa8?\xadDD?\xadDD?+"\x82?\x00\xa5j?_\x83H?\x94\x04o?\xdd\xc7\x0c@\x9b\xee\xce?\xae\x16\x82?\xf9\xefn?\xbd\xb7;?g\x12\x91?\x1eg\xc6?\xe8\x14Q?\x9aT\x95?\x1143?\x80\xab\x8a?\xab\x9aY?IA\x84?\xa4\x96\x99?{Ze@\xa6\xbeL?\x96\x99\x99?\xe4\x0f\x91?\xf3\xab\x8a?#\x8b\x88?3\xd5]?\xf8\xba{?~ww?jSU?1\x0c\xa0?L\xee\xce?c0\xb3?\xbb"\x82?]\xee.?\xdb\xe6L?`\xee\xae?kow?p\xc9\xac?\xc3\x1db?:\xe9\x9d?\xb4 \x82?\xe1\x11\x91?z3\xb3?\x04PU?X\xd4;?\xbd\xec\x8e?e\xfa??\x85\x98\x99?\xd3\xfa\x7f?\xda\x12Q?u#b?\x9d\x88\x88?\xe9\x88\x88?\x96\xb9{?\xf7f\x86?(\xf3\xee?\xa9\x99\x99?u\x00\x80?\xc2!b?Oa\xb5?\n\xb6{?n\xa1\xaa?\xcd\xcc\x8c?\x07\xcd\xac?Pgf?P\x89H?\xb3\xa7\x8a?\xe0c\xa6?\x1b\x1fb?\xdaD\x84?\x91OU?nFD?@`f?\xa1\x8d\xd9?\xec\x99Y?\xd6w\x97?wlw?\xb7f&?\x08v7?\x06\xc1;?_\xbc;?<\xa4*?\xda!\xa2?~\x89\x88?\xe8\xee\xae?\xdb(3?\x7f\xc9\x8c?\xce\xfe\xbf?\x00\xf1n?b\x01@?V\xa5*?J\xf0.?\x9e\xfa??\xd0\x12Q?3f\x86?\xe9R\x95?\xa9\xa1H?\x1a\xee\x8e?\x87\x99\x19?\x98\xbc{?b\xecn? P\x15?\xdf\x12@?Ugf?\x8d\xa4\x8a?\x012\x93?\xba\xbb\xbb?\xe44s?\x82DD?\xcb\xcc\xac?\xfae\xc6?\xa6\x9cY?\xa8\x907?\x97\x8dH?/\xbc\x9b?\xcaff?w\x848@D$Q?\x94\xcfL?\xc4\xf1.? CD?;\x88\x88?\x8c\x86\x08?qXU?\xe1\x92Y?\xca\x8aH?\xde\xbb;?\x9cCD?\xd8f&?\x0f;b?X\xbb;?\x83\xdf]?\xab\x89H?\xf9WU?\xd6;\xa4?nFD?\x1a\xf0.?\x1f\x00\xa0?\x93\xcf]?\xda\x12Q?\xc4\x92Y?\xc4\x15@?5\xd3\xbd?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\xd0t\xdf\x04hy\xdf\x04P\xc3\xff\x04\xb8\xc1\xff\x04\xc8\xc3\xff\x04\x98\xcf\xff\x04 \xc0\xff\x04\xe0\xc0\xff\x04\xb0\xc3\xff\x04H\xc2\xff\x04`\xc5\xff\x04\xc8\xc6\xff\x04X\xc4\xff\x04H\xc5\xff\x04\xf8\xc0\xff\x04\x90\xce\xff\x04\x10\xc1\xff\x04\x88\xca\xff\x04\x98\xc6\xff\x04(\xc4\xff\x04\x80\xc6\xff\x04\x88\xc4\xff\x04\x80\xc3\xff\x04@\xc7\xff\x04x\xc8\xff\x04\x10\xc4\xff\x04\xc8\xcf\xff\x04\xf8\xc9\xff\x04\xb0\xc0\xff\x04\xc0\xc5\xff\x04h\xc6\xff\x04\xf8\xc3\xff\x04@\xc4\xff\x04\xa8\xc2\xff\x04\x00\xcb\xff\x040\xcb\xff\x04 \xcc\xff\x04X\xc1\xff\x04`\xc2\xff\x04\x88\xc1\xff\x040\xce\xff\x04\xe8\xc4\xff\x04\xe0\xc6\xff\x04\xe8\xc7\xff\x04\x80\xc0\xff\x04\xb8\xca\xff\x04x\xcb\xff\x04\x08\xc9\xff\x04\x80\xcf\xff\x04\x18\xce\xff\x04\x08\xc3\xff\x04\xa0\xcd\xff\x04\x00\xc8\xff\x04\x08\xc6\xff\x04\xf0\xc2\xff\x04H\xc8\xff\x04\xb8\xc7\xff\x04(\xc1\xff\x04\x00\xce\xff\x040\xb8\xe6\x04\x88\xb1\xe6\x04\xa8\xb2\xe6\x04x\xbb\xe6\x04\xa0\xb7\xe6\x04P\xb6\xe6\x04X\xb7\xe6\x04x\xb5\xe6\x04p\xb4\xe6\x04\xb0\xbf\xe6\x04\x90\xbe\xe6\x04\x80\xb3\xe6\x04\x90\xb5\xe6\x04@\xba\xe6\x04\xe8\xb7\xe6\x04\xc8\xbc\xe6\x04\x00\xbe\xe6\x04\x18\xb2\xe6\x04H\xb8\xe6\x04\xa8\xb5\xe6\x04P\xb9\xe6\x04x\xb8\xe6\x04 \xb9\xe6\x04\xf8\xb0\xe6\x04\x80\xb9\xe6\x04\xb8\xb4\xe6\x04@\xb4\xe6\x04\x00\xb5\xe6\x04p\xba\xe6\x04X\xb1\xe6\x040\xb2\xe6\x04\xd0\xba\xe6\x04\xb0\xb9\xe6\x040\xbb\xe6\x04\x18\xbe\xe6\x04\x10\xb7\xe6\x04P\xbf\xe6\x04\xe8\xbd\xe6\x04 \xb6\xe6\x04\x10\xb1\xe6\x04h\xb6\xe6\x04\x18\xb8\xe6\x04\x08\xb6\xe6\x04\x80\xb6\xe6\x04\x08\xb3\xe6\x04\xc8\xb6\xe6\x04\xc0\xb5\xe6\x04\xd8\xb8\xe6\x04\xb8\xb7\xe6\x04\xc8\xb3\xe6\x04H\xbb\xe6\x04\xe0\xbf\xe6\x04h\xb9\xe6\x04p\xb7\xe6\x04\x98\xb9\xe6\x04\x10\xbd\xe6\x04\xa0\xb4\xe6\x04(\xbd\xe6\x04\xd8\xbe\xe6\x04@\xb7\xe6\x04\xa8\xb8\xe6\x04\x88\xb4\xe6\x04\xc0\xbb\xe6\x048\xb3\xe6\x04(\xba\xe6\x04\xd8\xb5\xe6\x04(\xb4\xe6\x04@\xbd\xe6\x04\x90\xb8\xe6\x04\x98\xbf\xe6\x048\xbf\xe6\x04\x88\xba\xe6\x04\xf8\xb9\xe6\x04\xc8\xbf\xe6\x04`\xb8\xe6\x04\xe0\xb9\xe6\x04\xa0\xb1\xe6\x04\xa0\xbd\xe6\x04\xc0\xc2\xff\x048\xc6\xff\x04\xd0\xcd\xff\x04(\xc7\xff\x04\xa8\xc8\xff\x04P\xc9\xff\x04\x80\xc9\xff\x04\xc0\xce\xff\x04\x80\xcc\xff\x04\x98\xcc\xff\x04\xa0\xca\xff\x04 \xc9\xff\x04\x18\xc5\xff\x04(\xca\xff\x04h\xc9\xff\x04\xb0\xcf\xff\x04H\xcb\xff\x04\xf0\xc8\xff\x04\xb8\xcd\xff\x04\xd8\xc8\xff\x04\x18\xcb\xff\x048\xc0\xff\x04`\xce\xff\x04\x08\xcc\xff\x04\xb0\xcc\xff\x04\xe0\xc9\xff\x04 \xc3\xff\x04\x10\xca\xff\x04\xc0\xc8\xff\x04\xf8\xcc\xff\x04\xb8\xc4\xff\x04h\xc0\xff\x04\x90\xc8\xff\x04\xf0\xce\xff\x04P\xc6\xff\x04\xc0\xcb\xff\x04h\xcc\xff\x04\xb0\xc9\xff\x04\xc8\xc0\xff\x04p\xc4\xff\x04\xd0\xc7\xff\x04\xa8\xce\xff\x04\xe8\xcd\xff\x04`\xcb\xff\x04X\xcd\xff\x04\xa8\xc5\xff\x04H\xce\xff\x04\xf0\xc5\xff\x04\x90\xcb\xff\x04\xa0\xc4\xff\x04\xd8\xcb\xff\x04\xe0\xcc\xff\x04\x90\xc5\xff\x04\x98\xc3\xff\x04\xd0\xca\xff\x048\xcc\xff\x04p\xca\xff\x04\xa0\xc1\xff\x04\xa8\xcb\xff\x04\xc8\xc9\xff\x04@\xca\xff\x04h\xc3\xff\x04`\xc8\xff\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3705
sg3633
g3701
sg3647
g3712
sg3642
g3709
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3681
sg3633
g3769
sg3647
g3675
sg3642
g3776
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3705
sg3633
g3701
sg3647
g3712
sg3642
g3709
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3722
sg3633
g3810
sg3647
g3729
sg3642
g3817
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3745
sg3633
g3825
sg3647
g3739
sg3642
g3832
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3863
sg3633
g3853
sg3647
g3857
sg3642
g3861
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3705
sg3633
g3883
sg3647
g3712
sg3642
g3890
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3902
sg3633
g3898
sg3647
g3909
sg3642
g3906
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3919
sg3633
g3915
sg3647
g3926
sg3642
g3923
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3936
sg3633
g3932
sg3647
g3943
sg3642
g3940
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3919
sg3633
g3949
sg3647
g3926
sg3642
g3956
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3968
sg3633
g3964
sg3647
g3975
sg3642
g3972
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3985
sg3633
g3981
sg3647
g3992
sg3642
g3989
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3745
sg3633
g3825
sg3647
g3739
sg3642
g3832
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3902
sg3633
g4041
sg3647
g3909
sg3642
g4048
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3745
sg3633
g3825
sg3647
g3739
sg3642
g3832
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3705
sg3633
g3883
sg3647
g3712
sg3642
g3890
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3762
sg3633
g4082
sg3647
g3756
sg3642
g4089
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3902
sg3633
g3898
sg3647
g3909
sg3642
g3906
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3936
sg3633
g3932
sg3647
g3943
sg3642
g3940
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4127
sg3633
g4123
sg3647
g4134
sg3642
g4131
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3936
sg3633
g4140
sg3647
g3943
sg3642
g4147
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4159
sg3633
g4155
sg3647
g4166
sg3642
g4163
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g4176
sg3633
g4172
sg3647
g4183
sg3642
g4180
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3638
sg3633
g4189
sg3647
g3648
sg3642
g4196
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g4214
sg3633
g4204
sg3647
g4208
sg3642
g4212
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3722
sg3633
g3810
sg3647
g3729
sg3642
g3817
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g4127
sg3633
g4123
sg3647
g4134
sg3642
g4131
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4251
sg3633
g4247
sg3647
g4258
sg3642
g4255
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3968
sg3633
g4264
sg3647
g3975
sg3642
g4271
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3936
sg3633
g4140
sg3647
g3943
sg3642
g4147
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3985
sg3633
g4305
sg3647
g3992
sg3642
g4312
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4251
sg3633
g4320
sg3647
g4258
sg3642
g4327
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3863
sg3633
g4335
sg3647
g3857
sg3642
g4342
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3985
sg3633
g4305
sg3647
g3992
sg3642
g4312
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4127
sg3633
g4363
sg3647
g4134
sg3642
g4370
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3638
sg3633
g4189
sg3647
g3648
sg3642
g4196
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3863
sg3633
g3853
sg3647
g3857
sg3642
g3861
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3968
sg3633
g3964
sg3647
g3975
sg3642
g3972
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3985
sg3633
g3981
sg3647
g3992
sg3642
g3989
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3722
sg3633
g3810
sg3647
g3729
sg3642
g3817
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3919
sg3633
g3915
sg3647
g3926
sg3642
g3923
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3968
sg3633
g3964
sg3647
g3975
sg3642
g3972
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g4214
sg3633
g4204
sg3647
g4208
sg3642
g4212
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4159
sg3633
g4155
sg3647
g4166
sg3642
g4163
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g4127
sg3633
g4363
sg3647
g4134
sg3642
g4370
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g4127
sg3633
g4123
sg3647
g4134
sg3642
g4131
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3968
sg3633
g4264
sg3647
g3975
sg3642
g4271
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3638
sg3633
g4189
sg3647
g3648
sg3642
g4196
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g4176
sg3633
g4172
sg3647
g4183
sg3642
g4180
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3638
sg3633
g4189
sg3647
g3648
sg3642
g4196
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3919
sg3633
g3949
sg3647
g3926
sg3642
g3956
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4251
sg3633
g4247
sg3647
g4258
sg3642
g4255
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3919
sg3633
g3915
sg3647
g3926
sg3642
g3923
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g4251
sg3633
g4320
sg3647
g4258
sg3642
g4327
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4176
sg3633
g4703
sg3647
g4183
sg3642
g4710
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3902
sg3633
g4041
sg3647
g3909
sg3642
g4048
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3968
sg3633
g4264
sg3647
g3975
sg3642
g4271
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3985
sg3633
g3981
sg3647
g3992
sg3642
g3989
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3936
sg3633
g3932
sg3647
g3943
sg3642
g3940
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4214
sg3633
g4783
sg3647
g4208
sg3642
g4790
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3681
sg3633
g3769
sg3647
g3675
sg3642
g3776
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3985
sg3633
g4305
sg3647
g3992
sg3642
g4312
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g4176
sg3633
g4172
sg3647
g4183
sg3642
g4180
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g4841
sg3633
g4837
sg3647
g4848
sg3642
g4845
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3968
sg3633
g3964
sg3647
g3975
sg3642
g3972
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3919
sg3633
g3949
sg3647
g3926
sg3642
g3956
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3863
sg3633
g3853
sg3647
g3857
sg3642
g3861
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3936
sg3633
g4140
sg3647
g3943
sg3642
g4147
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3863
sg3633
g4335
sg3647
g3857
sg3642
g4342
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3902
sg3633
g3898
sg3647
g3909
sg3642
g3906
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g4159
sg3633
g4932
sg3647
g4166
sg3642
g4939
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3919
sg3633
g3949
sg3647
g3926
sg3642
g3956
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g4214
sg3633
g4204
sg3647
g4208
sg3642
g4212
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4251
sg3633
g4247
sg3647
g4258
sg3642
g4255
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g4841
sg3633
g4986
sg3647
g4848
sg3642
g4993
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g4028
sg3633
g5014
sg3647
g4035
sg3642
g5021
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4176
sg3633
g4703
sg3647
g4183
sg3642
g4710
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3705
sg3633
g3883
sg3647
g3712
sg3642
g3890
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4841
sg3633
g4986
sg3647
g4848
sg3642
g4993
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4214
sg3633
g4783
sg3647
g4208
sg3642
g4790
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3762
sg3633
g4082
sg3647
g3756
sg3642
g4089
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g4841
sg3633
g4986
sg3647
g4848
sg3642
g4993
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4251
sg3633
g4320
sg3647
g4258
sg3642
g4327
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3985
sg3633
g4305
sg3647
g3992
sg3642
g4312
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4159
sg3633
g4155
sg3647
g4166
sg3642
g4163
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3705
sg3633
g3883
sg3647
g3712
sg3642
g3890
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4159
sg3633
g4932
sg3647
g4166
sg3642
g4939
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3658
sg3633
g5198
sg3647
g3665
sg3642
g5205
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3919
sg3633
g3915
sg3647
g3926
sg3642
g3923
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3658
sg3633
g5198
sg3647
g3665
sg3642
g5205
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3902
sg3633
g3898
sg3647
g3909
sg3642
g3906
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g4159
sg3633
g4155
sg3647
g4166
sg3642
g4163
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3902
sg3633
g4041
sg3647
g3909
sg3642
g4048
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g4127
sg3633
g4123
sg3647
g4134
sg3642
g4131
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3919
sg3633
g3949
sg3647
g3926
sg3642
g3956
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4159
sg3633
g4932
sg3647
g4166
sg3642
g4939
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3745
sg3633
g3825
sg3647
g3739
sg3642
g3832
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g4028
sg3633
g5014
sg3647
g4035
sg3642
g5021
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3863
sg3633
g4335
sg3647
g3857
sg3642
g4342
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g4841
sg3633
g4837
sg3647
g4848
sg3642
g4845
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3762
sg3633
g4082
sg3647
g3756
sg3642
g4089
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4841
sg3633
g4986
sg3647
g4848
sg3642
g4993
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4028
sg3633
g5014
sg3647
g4035
sg3642
g5021
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g4127
sg3633
g4363
sg3647
g4134
sg3642
g4370
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3863
sg3633
g3853
sg3647
g3857
sg3642
g3861
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g4214
sg3633
g4204
sg3647
g4208
sg3642
g4212
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3681
sg3633
g3769
sg3647
g3675
sg3642
g3776
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g4251
sg3633
g4247
sg3647
g4258
sg3642
g4255
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3985
sg3633
g4305
sg3647
g3992
sg3642
g4312
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g4214
sg3633
g4783
sg3647
g4208
sg3642
g4790
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3745
sg3633
g3825
sg3647
g3739
sg3642
g3832
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3936
sg3633
g4140
sg3647
g3943
sg3642
g4147
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3863
sg3633
g4335
sg3647
g3857
sg3642
g4342
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3705
sg3633
g3701
sg3647
g3712
sg3642
g3709
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3863
sg3633
g4335
sg3647
g3857
sg3642
g4342
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3968
sg3633
g4264
sg3647
g3975
sg3642
g4271
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3863
sg3633
g3853
sg3647
g3857
sg3642
g3861
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3681
sg3633
g3769
sg3647
g3675
sg3642
g3776
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4214
sg3633
g4783
sg3647
g4208
sg3642
g4790
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3658
sg3633
g5198
sg3647
g3665
sg3642
g5205
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4159
sg3633
g4155
sg3647
g4166
sg3642
g4163
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3936
sg3633
g3932
sg3647
g3943
sg3642
g3940
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3722
sg3633
g3810
sg3647
g3729
sg3642
g3817
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3919
sg3633
g3915
sg3647
g3926
sg3642
g3923
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g4159
sg3633
g4932
sg3647
g4166
sg3642
g4939
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3968
sg3633
g3964
sg3647
g3975
sg3642
g3972
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g4159
sg3633
g4932
sg3647
g4166
sg3642
g4939
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3762
sg3633
g4082
sg3647
g3756
sg3642
g4089
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g4176
sg3633
g4703
sg3647
g4183
sg3642
g4710
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3705
sg3633
g3883
sg3647
g3712
sg3642
g3890
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g4176
sg3633
g4703
sg3647
g4183
sg3642
g4710
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3681
sg3633
g3769
sg3647
g3675
sg3642
g3776
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g4176
sg3633
g4172
sg3647
g4183
sg3642
g4180
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4841
sg3633
g4837
sg3647
g4848
sg3642
g4845
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3902
sg3633
g4041
sg3647
g3909
sg3642
g4048
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3968
sg3633
g4264
sg3647
g3975
sg3642
g4271
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3902
sg3633
g4041
sg3647
g3909
sg3642
g4048
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3936
sg3633
g4140
sg3647
g3943
sg3642
g4147
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3722
sg3633
g3810
sg3647
g3729
sg3642
g3817
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g4127
sg3633
g4363
sg3647
g4134
sg3642
g4370
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4251
sg3633
g4320
sg3647
g4258
sg3642
g4327
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3762
sg3633
g4082
sg3647
g3756
sg3642
g4089
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g4251
sg3633
g4247
sg3647
g4258
sg3642
g4255
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3658
sg3633
g5198
sg3647
g3665
sg3642
g5205
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3936
sg3633
g3932
sg3647
g3943
sg3642
g3940
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3902
sg3633
g3898
sg3647
g3909
sg3642
g3906
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4841
sg3633
g4837
sg3647
g4848
sg3642
g4845
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4028
sg3633
g5014
sg3647
g4035
sg3642
g5021
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3705
sg3633
g3701
sg3647
g3712
sg3642
g3709
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g4841
sg3633
g4986
sg3647
g4848
sg3642
g4993
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3705
sg3633
g3701
sg3647
g3712
sg3642
g3709
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g4176
sg3633
g4172
sg3647
g4183
sg3642
g4180
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g4214
sg3633
g4783
sg3647
g4208
sg3642
g4790
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3985
sg3633
g3981
sg3647
g3992
sg3642
g3989
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3638
sg3633
g4189
sg3647
g3648
sg3642
g4196
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g4127
sg3633
g4123
sg3647
g4134
sg3642
g4131
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4214
sg3633
g4204
sg3647
g4208
sg3642
g4212
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g4841
sg3633
g4837
sg3647
g4848
sg3642
g4845
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g4176
sg3633
g4703
sg3647
g4183
sg3642
g4710
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4251
sg3633
g4320
sg3647
g4258
sg3642
g4327
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3658
sg3633
g5198
sg3647
g3665
sg3642
g5205
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4028
sg3633
g5014
sg3647
g4035
sg3642
g5021
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3985
sg3633
g3981
sg3647
g3992
sg3642
g3989
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4127
sg3633
g4363
sg3647
g4134
sg3642
g4370
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I83308880
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\x10k\x0b\x1f8k\x0b\x1f\x90\x9b\n\x1f \xb1\x0b\x1f`k\x0b\x1f@\xb1\x0b\x1f\xa0l\x0b\x1f\xc0\x9b\n\x1f\x88k\x0b\x1f\xf0\x9b\n\x1f8k\x0b\x1f\x88\xa2\x0b\x1f\xc0\xa2\x0b\x1f`k\x0b\x1f@\xb1\x0b\x1f`\xb1\x0b\x1f \xb1\x0b\x1f\xc8l\x0b\x1f\x88\xa2\x0b\x1f@\xb1\x0b\x1f \xb1\x0b\x1f\xb0k\x0b\x1f\xd8k\x0b\x1f \xb1\x0b\x1f\x90\x9b\n\x1f\xf0l\x0b\x1f\xf8\xa2\x0b\x1f@\xb1\x0b\x1f8k\x0b\x1f\x10k\x0b\x1f\xf0\x9b\n\x1f0\xa3\x0b\x1f\xf0\x9b\n\x1fP\x9c\n\x1f\xf0l\x0b\x1f0\xa3\x0b\x1f\xb0k\x0b\x1f`\xb1\x0b\x1f\x10k\x0b\x1f\xf0\x9b\n\x1f\x90\x9b\n\x1f@m\x0b\x1f\x80\xb1\x0b\x1f\xd8\xa3\x0b\x1f\x00l\x0b\x1f0\xa3\x0b\x1f\x10\x9d\n\x1fxl\x0b\x1f\xc8l\x0b\x1f0\xa3\x0b\x1f\x88k\x0b\x1f`\xb1\x0b\x1fxl\x0b\x1f\x90\x9b\n\x1f\x88\xa2\x0b\x1f\x88k\x0b\x1f\xb0k\x0b\x1f\xf8\xa2\x0b\x1f \x9c\n\x1f\xc0\x9b\n\x1f\xb0k\x0b\x1fhm\x0b\x1f0\xa3\x0b\x1f\xc0\xa2\x0b\x1f8k\x0b\x1f\xc0\xa2\x0b\x1f@\xb1\x0b\x1f\xb0k\x0b\x1fPl\x0b\x1f\xa0\xb1\x0b\x1f\x88k\x0b\x1f`\xb1\x0b\x1f\xc0\xa2\x0b\x1fPl\x0b\x1f\xc0\xa2\x0b\x1f8k\x0b\x1f\xf8\xa2\x0b\x1f\xa0l\x0b\x1f\xc0\x9b\n\x1f\xa0l\x0b\x1f\xa0\xb1\x0b\x1f0\xa3\x0b\x1fp\x9d\n\x1f\x90\x9b\n\x1f\xb0k\x0b\x1f\xf8\xa2\x0b\x1f\xa0\xb1\x0b\x1f\x00l\x0b\x1f`\xb1\x0b\x1f\x88\xa2\x0b\x1f \x9c\n\x1f`\xb1\x0b\x1f\xd8k\x0b\x1f`\xb1\x0b\x1f\xf0l\x0b\x1f\x80\x9c\n\x1f\x88k\x0b\x1f`k\x0b\x1f\x10k\x0b\x1f\x88\xa2\x0b\x1f`\xb1\x0b\x1f \x9c\n\x1f\xb0k\x0b\x1f@\xb1\x0b\x1f\x88k\x0b\x1f\xc0\x9b\n\x1f\x00l\x0b\x1f \x9c\n\x1f`k\x0b\x1f \xb1\x0b\x1f\x00l\x0b\x1f\xc0\xa2\x0b\x1f\x00l\x0b\x1f\xf0\x9b\n\x1f\xf8\xa2\x0b\x1f`k\x0b\x1f \x9c\n\x1f\x88\xa2\x0b\x1f`k\x0b\x1f\xa0\x9d\n\x1f`k\x0b\x1f\xc0\x9b\n\x1f\xd8k\x0b\x1f\xf8\xa2\x0b\x1f\x00l\x0b\x1f\x88\xa2\x0b\x1f@\xb1\x0b\x1f\x90\x9b\n\x1f\xf0\x9b\n\x1fhm\x0b\x1f\xb0k\x0b\x1f\x00l\x0b\x1f\x80\xb1\x0b\x1f\xd8k\x0b\x1f@\xb1\x0b\x1f\xc0\xa2\x0b\x1f\xc0\x9b\n\x1f\x80\x9c\n\x1f\xe0\x9c\n\x1f`\xb1\x0b\x1f\x80\xb1\x0b\x1f \xb1\x0b\x1f \x9c\n\x1f\xf8\xa2\x0b\x1f0\xa3\x0b\x1f\x90\x9b\n\x1f\xc0\xa2\x0b\x1f\xb0\x9c\n\x1fPl\x0b\x1f\xc0\x9b\n\x1f\xd8k\x0b\x1f \xb1\x0b\x1f\x88k\x0b\x1fhm\x0b\x1fp\x9d\n\x1f\xd8\xa3\x0b\x1f\x80\xb1\x0b\x1f\x90\x9b\n\x1f\xf8\xa2\x0b\x1f\x00l\x0b\x1f\xa0\xb1\x0b\x1f \x9c\n\x1f\xa0\xb1\x0b\x1f`k\x0b\x1fPl\x0b\x1f8k\x0b\x1f0\xa3\x0b\x1f\x10k\x0b\x1fxl\x0b\x1f\x88\xa2\x0b\x1f\xc0\xa2\x0b\x1f\xf0l\x0b\x1f\xb0\x9c\n\x1f\xe0\x9c\n\x1f\xa0\xb1\x0b\x1f\xf0\x9b\n\x1f\xa0\xa3\x0b\x1fP\x9c\n\x1f@\xb1\x0b\x1fhm\x0b\x1f8k\x0b\x1f\xf0\x9b\n\x1f\x00l\x0b\x1f\xa0\xb1\x0b\x1f@\x9d\n\x1f0\xa3\x0b\x1f\xd8k\x0b\x1f \x9c\n\x1f\x88k\x0b\x1f\xc0\x9b\n\x1f\x88\xa2\x0b\x1f\x80\xb1\x0b\x1f\x10k\x0b\x1f\x18m\x0b\x1f\x80\xb1\x0b\x1f\xc0\xa2\x0b\x1f@\xb1\x0b\x1f\xf0\x9b\n\x1f \x9c\n\x1f\xa0\xb1\x0b\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\xb4\x0b\x1f\x80\xb3\x0b\x1f\x80\xb2\x0b\x1f\xe0\xb1\x0b\x1f \xb3\x0b\x1f\xc0\xb2\x0b\x1f\xe0\xb2\x0b\x1f\xa0\xb2\x0b\x1f`\xb2\x0b\x1f\x00\xb5\x0b\x1f\xc0\xb3\x0b\x1f\xc0\xb4\x0b\x1f@\xb3\x0b\x1f`\xb3\x0b\x1f`\xb4\x0b\x1f@\xb2\x0b\x1f\x80\xb5\x0b\x1f\x00\xb4\x0b\x1f`\xb5\x0b\x1f\xc0\xb5\x0b\x1f\xe0\xb3\x0b\x1f \xb5\x0b\x1f \xb6\x0b\x1f@\xb6\x0b\x1f`\xb6\x0b\x1f \xb2\x0b\x1f\xa0\xb6\x0b\x1f\x80\xb6\x0b\x1f\xa0\xb4\x0b\x1f\x00\xb7\x0b\x1f\xe0\xb6\x0b\x1f@\xb7\x0b\x1f`\xb7\x0b\x1f\x80\xb4\x0b\x1f\xa0\xb3\x0b\x1f\x80\xb7\x0b\x1f\xa0\xb7\x0b\x1f\x00\xb8\x0b\x1f\xe0\xb7\x0b\x1f\xe0\xb4\x0b\x1f \xb8\x0b\x1f@\xb8\x0b\x1f`\xb8\x0b\x1f\x80\xb8\x0b\x1f\xa0\xb8\x0b\x1f \xb7\x0b\x1f@\xb9\x0b\x1f \xb9\x0b\x1f\xc0\xb6\x0b\x1f@\xb5\x0b\x1f\xa0\xb9\x0b\x1f\xc0\xb9\x0b\x1f\xe0\xb9\x0b\x1f \xb4\x0b\x1f\x00\xb3\x0b\x1f\x00\xba\x0b\x1f \xba\x0b\x1f@\xba\x0b\x1f`\xba\x0b\x1f\xc0\xba\x0b\x1f\xe0\xba\x0b\x1f\x00\xb6\x0b\x1f\x80\xb9\x0b\x1f@\xbb\x0b\x1f \xbb\x0b\x1f\x80\xbb\x0b\x1f`\xbb\x0b\x1f`\xb9\x0b\x1f\xe0\xbb\x0b\x1f\xc0\xbb\x0b\x1f\xc0\xb7\x0b\x1f@\xbc\x0b\x1f \xbc\x0b\x1f\xa0\xb5\x0b\x1f\xa0\xbc\x0b\x1f\x80\xbc\x0b\x1f\xc0\xb8\x0b\x1f\xc0\xbc\x0b\x1f\xe0\xbc\x0b\x1f@\xbd\x0b\x1f`\xbd\x0b\x1f\xe0\xb5\x0b\x1f\x00\xbb\x0b\x1f\xc0\xbd\x0b\x1f\xe0\xbd\x0b\x1f\xa0\xba\x0b\x1f \xbe\x0b\x1f\x00\xbe\x0b\x1f\x00\xbd\x0b\x1f\x80\xbe\x0b\x1f`\xbe\x0b\x1f\xc0\xbe\x0b\x1f\xa0\xbe\x0b\x1f\x00\xb9\x0b\x1f\xe0\xbe\x0b\x1f \xbd\x0b\x1f\x00\xbc\x0b\x1f\xa0\xbd\x0b\x1f\xc0\xbf\x0b\x1f@\xbf\x0b\x1f\x80\xba\x0b\x1f\x00\xbf\x0b\x1f\xa0\xbb\x0b\x1f\xa0\xbf\x0b\x1f \xbf\x0b\x1f`\xbc\x0b\x1f\xe0\xbf\x0b\x1f\x80\xbd\x0b\x1f@\xbe\x0b\x1f\xe0\xb8\x0b\x1f\x80\xbf\x0b\x1f\xa0!6\r \x122\x1f@\x102\x1f`\x112\x1f\x00\x112\x1f`\x102\x1f\xc0\x112\x1f \x112\x1f\xa0\x122\x1f@\x122\x1f\x80\x122\x1f`\x122\x1f\xe0\x112\x1f\x00\x132\x1f\xe0\x122\x1f@\x132\x1f`\x132\x1f\x00\x122\x1f\xa0\x132\x1f\x80\x132\x1f\xe0\x102\x1f\xc0\x132\x1f \x142\x1f\x00\x142\x1f\xa0\x112\x1f@\x142\x1f`\x142\x1f\x80\x142\x1f\xa0\x142\x1f\xc0\x142\x1f \x152\x1f@\x152\x1f`\x152\x1f\xc0\x102\x1f@\x112\x1f\x80\x152\x1f\xe0\x152\x1f\xc0\x152\x1f\xc0\x122\x1f\x00\x162\x1f \x162\x1f@\x162\x1f\xa0\x162\x1f\x80\x162\x1f\xe0\x162\x1f\x00\x172\x1f\x80\x102\x1f\xe0\x132\x1f \x172\x1f@\x172\x1f`\x172\x1f\x80\x172\x1f\xe0\x172\x1f\xc0\x172\x1f \x182\x1f@\x182\x1f \x132\x1f\xc0\x162\x1f\xa0\x182\x1f\x80\x182\x1f \x102\x1f\x00\x192\x1f\xe0\x182\x1f\x80\x112\x1f \x192\x1f@\x192\x1f\xa0\x192\x1f\xc0\x192\x1f\xa0\x172\x1f\x00\x1a2\x1f\xe0\x192\x1f\x00\x152\x1f \x1a2\x1f@\x1a2\x1f`\x1a2\x1f\x80\x1a2\x1f\xa0\x1a2\x1f\xc0\x1a2\x1f \x1b2\x1f@\x1b2\x1f`\x1b2\x1f\x80\x1b2\x1f\x00\x182\x1f\xa0\x102\x1f\xe0\x1b2\x1f\x00\x1c2\x1f`\x182\x1f@\x1c2\x1f \x1c2\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'Q\x83\x88?\xca\x99Y?a\xbd;?Ux7?`WU?G\xcbL?/\x89H?\x91R\x95?(\xdf]?D\x8cH?\xd56s?\xdf\xc9\x9b?[\x00\xc0?\x80CD?\x19\xbf;?\xd8HD?\'\xfb\x8e?l\xb5;?\xf3NU?\xde\xf0.?\x01\xac*?\x8e\x89Y?\x03mU?\xbex7?}\x1f\xa2?\x87f\x86?\x02`&?\xe133?\xde\xe3L?1\xac\x8a?\xc9\xc7L?\x06y7?\xfb\x10Q?\xf0C\x84?\x85\xcfL?\x04\xbc\x9b?:\x99j?\xa4\xbb;?\x8eVU?\xd5I\x84?\xda\xfb??\x9cA\x84?.T\x95?,bf?\xf6\xbd;?Z?\x93?_\xbc\x9b?\x8f\x13Q?zow?K43?\xf6\xa4j?\xc7\xffn?\xebff?\x85PU?\xc053?\xbe\x1d"?%*\x93?p\xbb*?\xbf\xee\xae?\x9b\xdd]?\xd0\x8f\xf9?\x93x7?N\xaaj?\x86F\xe4?\xf1qw?\\A\x84?vv7?\xb2A\xc4?mgf?\x1ef\xc6?\xbb$b?\x85\xcdL?\xcf\xe8\x9d?]\xbd;?+\x10\x01@\xe2\x9bY?\xe4\xf9\x7f?\xb5\x9aY?\xb1\xa5j?\x97\xb5{?\x82E\xa4?\x96\xcaL?\xd8`7?3\xfd??r\x11"?B\xe0.?\x85\x85\xa8?w\x87H?Dbf?\x85\xbc{?~c\x86?9\x00\xa0?\xbf\xef.?\xca7b?\xc3a&?\xaf!b?\xd5\xean?\xc8\xabj?\xa2\xaa\x8a?e7"?Iww?l#"?\xe5\xef??i\xeb\x8e?l"\x82?\xdc\xb6j?\xb9e\x86?\xda\x10Q?\xbcf\x86?]\xa9\x8a?\x84\xff??Kgf? xw?\xdf2\xb3?\xa6\xc0L?\xa4\x88\xa8?z43?\xd3 b?~\xaa\x8a?\xf3\xba;?ay7?\xba\xf7]?\xc5y7?\xb5\xa9;?\x90 "?\xe9\xe4]?\t\x85H?\xd4\x8aH?>\xcc\xac?u\xec\x8e?\xca\x19\x82?\x0f33?\n""?\tr7?\x84\xff??\xba\xef\x8e?\xbcf&?MFD?[9b?\xe8\x93Y?/?D?\xb3\xcd\xac?\xfau7?9NU?E\xcc;?\x1b \x82?,WU?\xf8\xa9\xaa?\x92\x01@?\xd1\x0eQ?b\x82H?\xba\xbb\x9b?\xb9\x88\x88?\xdb\xabj?\x1e\xdf.?\xb8\xe5L?\x87\x8aH?\x15q7?\xc6^&?\xff\x8aH?i\xed.?\xb153?\'\x0f\x11?\xb5v7?\x95\xd6]?}\xa9\n@\xbb\xb9\x8a?\xa543?6\x99Y?8\xfb??E\x97\x99?\xb9\x1db?`&b?\x08gf?r\xc0{?\xe59s?\xee\xab*?\xef\x00@?k\xd4;?\xc1\xaaj?hcf?\xad\x1f\x82?\xca\x88H?\x8b\x05P@\xe6UU?2\xbb;?E\xdf]?^x7?\x84\xb3;?*\xd7\x8c?\x1433?\xef\xefn?t\x99Y?\xe7\xab\xaa?R3s?\x94\xb8\x9b?\x8cw7?\xaa43?\xf6%"?\x88\xca\xac?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\x88\xb7\xe6\x04\xb8\xbd\xe6\x04\x98y\xdf\x04\xc8v\xdf\x04 |\xdf\x04\xc0x\xdf\x04Hr\xdf\x04\x88z\xdf\x04\x18{\xdf\x04\x90r\xdf\x04\x00u\xdf\x04\x90~\xdf\x04@w\xdf\x04@q\xdf\x04h\x7f\xdf\x04\xc8y\xdf\x04hs\xdf\x04\x80|\xdf\x04\xe0p\xdf\x04Hx\xdf\x04\x08\x7f\xdf\x048i\xe6\x04\xa0j\xe6\x04\x00k\xe6\x04\xa8e\xe6\x04\xb8d\xe6\x04\xe0f\xe6\x04\xa0g\xe6\x04pg\xe6\x04P`\xe6\x04@j\xe6\x04\xc0b\xe6\x04\x80`\xe6\x04\xb0`\xe6\x04\x98c\xe6\x04`b\xe6\x04xb\xe6\x040h\xe6\x04`e\xe6\x04\xa0d\xe6\x04\x88d\xe6\x04\x18b\xe6\x04\x80l\xe6\x04\xa8h\xe6\x04\xb0c\xe6\x04\x08c\xe6\x04\xa8b\xe6\x04@g\xe6\x04\xc8c\xe6\x04(d\xe6\x04Hn\xe6\x04\x88j\xe6\x04\xe8a\xe6\x04\xc0e\xe6\x04 f\xe6\x04\x18n\xe6\x04(a\xe6\x04@d\xe6\x04 `\xe6\x04\x10d\xe6\x04@m\xe6\x04\x18e\xe6\x04\xb8g\xe6\x04\xa0m\xe6\x04\xe0l\xe6\x048l\xe6\x04\xc8`\xe6\x04\xf0b\xe6\x04pj\xe6\x04pa\xe6\x04\x98f\xe6\x04xn\xe6\x04Xa\xe6\x04\x98l\xe6\x04\xb0i\xe6\x04\xd8k\xe6\x04\xe0c\xe6\x04\xe8d\xe6\x04He\xe6\x04\x08f\xe6\x04\xe8g\xe6\x04\x18k\xe6\x04Hk\xe6\x040n\xe6\x04\xe8m\xe6\x04\xb8a\xe6\x04\x18h\xe6\x04\xd8h\xe6\x04@a\xe6\x04\xa0a\xe6\x04\xe0`\xe6\x04\xf8l\xe6\x04Xd\xe6\x04\x00b\xe6\x048o\xe6\x04\xd0g\xe6\x04\x90k\xe6\x04ho\xe6\x04\x08o\xe6\x04\xd0m\xe6\x04\x90h\xe6\x04\xe0o\xe6\x04\xc8i\xe6\x04Hh\xe6\x04Po\xe6\x04\x88m\xe6\x04Xj\xe6\x04\x00e\xe6\x04\xf0n\xe6\x04\x10g\xe6\x04\xd8n\xe6\x04\xb0f\xe6\x04\xf8f\xe6\x04\xd8e\xe6\x04hl\xe6\x04pm\xe6\x04\xf0e\xe6\x04\x10a\xe6\x04xk\xe6\x04\xd8b\xe6\x04\xa8n\xe6\x04\x08i\xe6\x04xh\xe6\x04\xb0l\xe6\x04\x98i\xe6\x04\xb8j\xe6\x04\xf0h\xe6\x04(m\xe6\x04\xc0k\xe6\x04`h\xe6\x04\xc8o\xe6\x04\x80c\xe6\x04(g\xe6\x04\xd0a\xe6\x04Hb\xe6\x04\xf8c\xe6\x04Pc\xe6\x04\xc0n\xe6\x048f\xe6\x04\xc8f\xe6\x04\x88g\xe6\x040b\xe6\x04Xm\xe6\x04xe\xe6\x04Pl\xe6\x04\x80i\xe6\x04\x88a\xe6\x040k\xe6\x04 i\xe6\x04\x80o\xe6\x04hi\xe6\x04 l\xe6\x04 c\xe6\x04`k\xe6\x04\x90e\xe6\x04\x98o\xe6\x04\x10j\xe6\x04\xc8l\xe6\x04\x90n\xe6\x04`n\xe6\x040e\xe6\x04(j\xe6\x04\x98`\xe6\x04\xf0k\xe6\x04Pf\xe6\x04\xc0h\xe6\x04\xb0o\xe6\x04\x08l\xe6\x04\x10m\xe6\x04\xe8j\xe6\x04\xb8m\xe6\x04\xa8k\xe6\x04Xg\xe6\x04\x80f\xe6\x04 o\xe6\x048c\xe6\x04hc\xe6\x04\x90E\xde\x04(G\xde\x04@M\xde\x04\xa8H\xde\x04\x18H\xde\x04\xb0C\xde\x04\xc0K\xde\x04\xd0D\xde\x04 O\xde\x04\xf8|\xdf\x04H{\xdf\x04`u\xdf\x04Py\xdf\x04\x88t\xdf\x04`~\xdf\x04\xe0v\xdf\x04@t\xdf\x04\xe8w\xdf\x04(}\xdf\x04\xf8v\xdf\x04xu\xdf\x04\x18u\xdf\x04\x00{\xdf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6575
sg6371
g6571
sg6385
g6582
sg6380
g6579
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6447
sg6371
g6588
sg6385
g6454
sg6380
g6595
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6430
sg6371
g6633
sg6385
g6437
sg6380
g6640
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6658
sg6371
g6648
sg6385
g6652
sg6380
g6656
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6558
sg6371
g6665
sg6385
g6565
sg6380
g6672
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6464
sg6371
g6680
sg6385
g6471
sg6380
g6687
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6430
sg6371
g6633
sg6385
g6437
sg6380
g6640
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6430
sg6371
g6633
sg6385
g6437
sg6380
g6640
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6729
sg6371
g6768
sg6385
g6736
sg6380
g6775
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6658
sg6371
g6648
sg6385
g6652
sg6380
g6656
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6376
sg6371
g6822
sg6385
g6386
sg6380
g6829
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6528
sg6371
g6837
sg6385
g6535
sg6380
g6844
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6856
sg6371
g6852
sg6385
g6863
sg6380
g6860
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6528
sg6371
g6837
sg6385
g6535
sg6380
g6844
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6856
sg6371
g6908
sg6385
g6863
sg6380
g6915
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6620
sg6371
g6936
sg6385
g6627
sg6380
g6943
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6376
sg6371
g6822
sg6385
g6386
sg6380
g6829
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6413
sg6371
g6977
sg6385
g6420
sg6380
g6984
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g7013
sg6371
g7009
sg6385
g7020
sg6380
g7017
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g7036
sg6371
g7026
sg6385
g7030
sg6380
g7034
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6856
sg6371
g6852
sg6385
g6863
sg6380
g6860
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6396
sg6371
g7082
sg6385
g6403
sg6380
g7089
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6658
sg6371
g7097
sg6385
g6652
sg6380
g7104
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6856
sg6371
g6908
sg6385
g6863
sg6380
g6915
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6511
sg6371
g7125
sg6385
g6518
sg6380
g7132
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6413
sg6371
g6977
sg6385
g6420
sg6380
g6984
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6558
sg6371
g6665
sg6385
g6565
sg6380
g6672
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6511
sg6371
g7125
sg6385
g6518
sg6380
g7132
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6658
sg6371
g6648
sg6385
g6652
sg6380
g6656
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g7235
sg6371
g7231
sg6385
g7242
sg6380
g7239
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6494
sg6371
g7248
sg6385
g6501
sg6380
g7255
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6712
sg6371
g7263
sg6385
g6719
sg6380
g7270
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g7013
sg6371
g7009
sg6385
g7020
sg6380
g7017
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6856
sg6371
g6852
sg6385
g6863
sg6380
g6860
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6575
sg6371
g7304
sg6385
g6582
sg6380
g7311
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6396
sg6371
g7082
sg6385
g6403
sg6380
g7089
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6575
sg6371
g6571
sg6385
g6582
sg6380
g6579
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6464
sg6371
g6680
sg6385
g6471
sg6380
g6687
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6712
sg6371
g7263
sg6385
g6719
sg6380
g7270
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g7036
sg6371
g7026
sg6385
g7030
sg6380
g7034
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6511
sg6371
g7125
sg6385
g6518
sg6380
g7132
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6575
sg6371
g7304
sg6385
g6582
sg6380
g7311
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6575
sg6371
g6571
sg6385
g6582
sg6380
g6579
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6396
sg6371
g7082
sg6385
g6403
sg6380
g7089
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6658
sg6371
g7097
sg6385
g6652
sg6380
g7104
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6430
sg6371
g6633
sg6385
g6437
sg6380
g6640
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g7036
sg6371
g7527
sg6385
g7030
sg6380
g7534
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6856
sg6371
g6908
sg6385
g6863
sg6380
g6915
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6712
sg6371
g7263
sg6385
g6719
sg6380
g7270
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6413
sg6371
g6977
sg6385
g6420
sg6380
g6984
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6712
sg6371
g7263
sg6385
g6719
sg6380
g7270
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6658
sg6371
g6648
sg6385
g6652
sg6380
g6656
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g7036
sg6371
g7026
sg6385
g7030
sg6380
g7034
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g7002
sg6371
g7620
sg6385
g6996
sg6380
g7627
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6620
sg6371
g6936
sg6385
g6627
sg6380
g6943
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g7235
sg6371
g7231
sg6385
g7242
sg6380
g7239
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6620
sg6371
g6936
sg6385
g6627
sg6380
g6943
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6729
sg6371
g6768
sg6385
g6736
sg6380
g6775
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6447
sg6371
g6588
sg6385
g6454
sg6380
g6595
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6558
sg6371
g6665
sg6385
g6565
sg6380
g6672
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6620
sg6371
g6616
sg6385
g6627
sg6380
g6624
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g7235
sg6371
g7804
sg6385
g7242
sg6380
g7811
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6464
sg6371
g6680
sg6385
g6471
sg6380
g6687
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6494
sg6371
g7248
sg6385
g6501
sg6380
g7255
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g7235
sg6371
g7804
sg6385
g7242
sg6380
g7811
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6447
sg6371
g6588
sg6385
g6454
sg6380
g6595
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6575
sg6371
g7304
sg6385
g6582
sg6380
g7311
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g7002
sg6371
g7620
sg6385
g6996
sg6380
g7627
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6658
sg6371
g7097
sg6385
g6652
sg6380
g7104
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6447
sg6371
g6588
sg6385
g6454
sg6380
g6595
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g7235
sg6371
g7804
sg6385
g7242
sg6380
g7811
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g7235
sg6371
g7231
sg6385
g7242
sg6380
g7239
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6494
sg6371
g7248
sg6385
g6501
sg6380
g7255
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6658
sg6371
g6648
sg6385
g6652
sg6380
g6656
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g7002
sg6371
g7620
sg6385
g6996
sg6380
g7627
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6413
sg6371
g6977
sg6385
g6420
sg6380
g6984
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6528
sg6371
g6837
sg6385
g6535
sg6380
g6844
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g7013
sg6371
g7009
sg6385
g7020
sg6380
g7017
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g7002
sg6371
g7620
sg6385
g6996
sg6380
g7627
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g7013
sg6371
g8209
sg6385
g7020
sg6380
g8216
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6729
sg6371
g6725
sg6385
g6736
sg6380
g6733
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6464
sg6371
g6680
sg6385
g6471
sg6380
g6687
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6575
sg6371
g6571
sg6385
g6582
sg6380
g6579
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6620
sg6371
g6936
sg6385
g6627
sg6380
g6943
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g7013
sg6371
g7009
sg6385
g7020
sg6380
g7017
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6430
sg6371
g6633
sg6385
g6437
sg6380
g6640
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g7235
sg6371
g7231
sg6385
g7242
sg6380
g7239
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6658
sg6371
g7097
sg6385
g6652
sg6380
g7104
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6856
sg6371
g6908
sg6385
g6863
sg6380
g6915
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6575
sg6371
g7304
sg6385
g6582
sg6380
g7311
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6376
sg6371
g6822
sg6385
g6386
sg6380
g6829
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6494
sg6371
g7248
sg6385
g6501
sg6380
g7255
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6729
sg6371
g6768
sg6385
g6736
sg6380
g6775
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6511
sg6371
g7125
sg6385
g6518
sg6380
g7132
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g7013
sg6371
g8209
sg6385
g7020
sg6380
g8216
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6712
sg6371
g7263
sg6385
g6719
sg6380
g7270
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g7036
sg6371
g7026
sg6385
g7030
sg6380
g7034
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g7013
sg6371
g8209
sg6385
g7020
sg6380
g8216
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6413
sg6371
g6977
sg6385
g6420
sg6380
g6984
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6658
sg6371
g7097
sg6385
g6652
sg6380
g7104
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g7036
sg6371
g7527
sg6385
g7030
sg6380
g7534
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g7235
sg6371
g7231
sg6385
g7242
sg6380
g7239
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g7036
sg6371
g7026
sg6385
g7030
sg6380
g7034
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6447
sg6371
g6588
sg6385
g6454
sg6380
g6595
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6376
sg6371
g6822
sg6385
g6386
sg6380
g6829
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6856
sg6371
g6852
sg6385
g6863
sg6380
g6860
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6376
sg6371
g6822
sg6385
g6386
sg6380
g6829
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6396
sg6371
g7082
sg6385
g6403
sg6380
g7089
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6575
sg6371
g7304
sg6385
g6582
sg6380
g7311
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6729
sg6371
g6768
sg6385
g6736
sg6380
g6775
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6494
sg6371
g7248
sg6385
g6501
sg6380
g7255
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g7036
sg6371
g7527
sg6385
g7030
sg6380
g7534
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6528
sg6371
g6837
sg6385
g6535
sg6380
g6844
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6620
sg6371
g6936
sg6385
g6627
sg6380
g6943
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6464
sg6371
g6680
sg6385
g6471
sg6380
g6687
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g7013
sg6371
g7009
sg6385
g7020
sg6380
g7017
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6396
sg6371
g7082
sg6385
g6403
sg6380
g7089
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6528
sg6371
g6837
sg6385
g6535
sg6380
g6844
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g7002
sg6371
g7620
sg6385
g6996
sg6380
g7627
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g7036
sg6371
g7527
sg6385
g7030
sg6380
g7534
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6558
sg6371
g6665
sg6385
g6565
sg6380
g6672
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6856
sg6371
g6852
sg6385
g6863
sg6380
g6860
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6729
sg6371
g6768
sg6385
g6736
sg6380
g6775
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g7235
sg6371
g7804
sg6385
g7242
sg6380
g7811
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6511
sg6371
g7125
sg6385
g6518
sg6380
g7132
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6494
sg6371
g6490
sg6385
g6501
sg6380
g6498
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6558
sg6371
g6665
sg6385
g6565
sg6380
g6672
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g7013
sg6371
g8209
sg6385
g7020
sg6380
g8216
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6856
sg6371
g6908
sg6385
g6863
sg6380
g6915
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g7013
sg6371
g8209
sg6385
g7020
sg6380
g8216
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6575
sg6371
g6571
sg6385
g6582
sg6380
g6579
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g7235
sg6371
g7804
sg6385
g7242
sg6380
g7811
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g7036
sg6371
g7527
sg6385
g7030
sg6380
g7534
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.